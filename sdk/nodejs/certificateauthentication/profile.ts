// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can manage a Certificate Authentication Profile.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.certificateauthentication.Profile("example", {
 *     name: "CertProf1",
 *     description: "My cert profile",
 *     allowedAsUserName: false,
 *     externalIdentityStoreName: "[not applicable]",
 *     certificateAttributeName: "SUBJECT_COMMON_NAME",
 *     matchMode: "NEVER",
 *     usernameFrom: "CERTIFICATE",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:CertificateAuthentication/profile:Profile example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class Profile extends pulumi.CustomResource {
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileState, opts?: pulumi.CustomResourceOptions): Profile {
        return new Profile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:CertificateAuthentication/profile:Profile';

    /**
     * Returns true if the given object is an instance of Profile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Profile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Profile.__pulumiType;
    }

    /**
     * Allow as username - Default value: `false`
     */
    public readonly allowedAsUserName!: pulumi.Output<boolean>;
    /**
     * Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
     * `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
     * `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
     * `SUBJECT_COMMON_NAME`
     */
    public readonly certificateAttributeName!: pulumi.Output<string>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
     * value: `[not applicable]`
     */
    public readonly externalIdentityStoreName!: pulumi.Output<string>;
    /**
     * Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
     * `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
     */
    public readonly matchMode!: pulumi.Output<string>;
    /**
     * The name of the certificate profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
     * attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
     * Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
     */
    public readonly usernameFrom!: pulumi.Output<string>;

    /**
     * Create a Profile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileArgs | ProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileState | undefined;
            resourceInputs["allowedAsUserName"] = state ? state.allowedAsUserName : undefined;
            resourceInputs["certificateAttributeName"] = state ? state.certificateAttributeName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalIdentityStoreName"] = state ? state.externalIdentityStoreName : undefined;
            resourceInputs["matchMode"] = state ? state.matchMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["usernameFrom"] = state ? state.usernameFrom : undefined;
        } else {
            const args = argsOrState as ProfileArgs | undefined;
            resourceInputs["allowedAsUserName"] = args ? args.allowedAsUserName : undefined;
            resourceInputs["certificateAttributeName"] = args ? args.certificateAttributeName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalIdentityStoreName"] = args ? args.externalIdentityStoreName : undefined;
            resourceInputs["matchMode"] = args ? args.matchMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["usernameFrom"] = args ? args.usernameFrom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Profile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Profile resources.
 */
export interface ProfileState {
    /**
     * Allow as username - Default value: `false`
     */
    allowedAsUserName?: pulumi.Input<boolean>;
    /**
     * Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
     * `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
     * `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
     * `SUBJECT_COMMON_NAME`
     */
    certificateAttributeName?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
     * value: `[not applicable]`
     */
    externalIdentityStoreName?: pulumi.Input<string>;
    /**
     * Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
     * `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
     */
    matchMode?: pulumi.Input<string>;
    /**
     * The name of the certificate profile
     */
    name?: pulumi.Input<string>;
    /**
     * The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
     * attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
     * Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
     */
    usernameFrom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Profile resource.
 */
export interface ProfileArgs {
    /**
     * Allow as username - Default value: `false`
     */
    allowedAsUserName?: pulumi.Input<boolean>;
    /**
     * Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
     * `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
     * `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
     * `SUBJECT_COMMON_NAME`
     */
    certificateAttributeName?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
     * value: `[not applicable]`
     */
    externalIdentityStoreName?: pulumi.Input<string>;
    /**
     * Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
     * `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
     */
    matchMode?: pulumi.Input<string>;
    /**
     * The name of the certificate profile
     */
    name?: pulumi.Input<string>;
    /**
     * The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
     * attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
     * Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
     */
    usernameFrom?: pulumi.Input<string>;
}
