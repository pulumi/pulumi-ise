// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can manage a TACACS allowed protocols policy element.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.tacacs.AllowedProtocols("example", {
 *     name: "Protocols1",
 *     description: "My allowed TACACS protocols",
 *     allowPapAscii: true,
 *     allowChap: true,
 *     allowMsChapV1: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:tacacs/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class AllowedProtocols extends pulumi.CustomResource {
    /**
     * Get an existing AllowedProtocols resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AllowedProtocolsState, opts?: pulumi.CustomResourceOptions): AllowedProtocols {
        return new AllowedProtocols(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:tacacs/allowedProtocols:AllowedProtocols';

    /**
     * Returns true if the given object is an instance of AllowedProtocols.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AllowedProtocols {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AllowedProtocols.__pulumiType;
    }

    /**
     * Allow CHAP
     */
    public readonly allowChap!: pulumi.Output<boolean>;
    /**
     * Allow MS CHAP v1
     */
    public readonly allowMsChapV1!: pulumi.Output<boolean>;
    /**
     * Allow PAP ASCII
     */
    public readonly allowPapAscii!: pulumi.Output<boolean>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the allowed protocols
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AllowedProtocols resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AllowedProtocolsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AllowedProtocolsArgs | AllowedProtocolsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AllowedProtocolsState | undefined;
            resourceInputs["allowChap"] = state ? state.allowChap : undefined;
            resourceInputs["allowMsChapV1"] = state ? state.allowMsChapV1 : undefined;
            resourceInputs["allowPapAscii"] = state ? state.allowPapAscii : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AllowedProtocolsArgs | undefined;
            if ((!args || args.allowChap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowChap'");
            }
            if ((!args || args.allowMsChapV1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowMsChapV1'");
            }
            if ((!args || args.allowPapAscii === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowPapAscii'");
            }
            resourceInputs["allowChap"] = args ? args.allowChap : undefined;
            resourceInputs["allowMsChapV1"] = args ? args.allowMsChapV1 : undefined;
            resourceInputs["allowPapAscii"] = args ? args.allowPapAscii : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AllowedProtocols.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AllowedProtocols resources.
 */
export interface AllowedProtocolsState {
    /**
     * Allow CHAP
     */
    allowChap?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AllowedProtocols resource.
 */
export interface AllowedProtocolsArgs {
    /**
     * Allow CHAP
     */
    allowChap: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
}
