// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource can manage a Device Admin Policy Set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.deviceadmin.PolicySet("example", {
 *     name: "PolicySet1",
 *     description: "My description",
 *     isProxy: false,
 *     rank: 0,
 *     serviceName: "Default Device Admin",
 *     state: "enabled",
 *     conditionType: "ConditionAttributes",
 *     conditionIsNegate: false,
 *     conditionAttributeName: "Location",
 *     conditionAttributeValue: "All Locations",
 *     conditionDictionaryName: "DEVICE",
 *     conditionOperator: "equals",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import ise:deviceadmin/policySet:PolicySet example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class PolicySet extends pulumi.CustomResource {
    /**
     * Get an existing PolicySet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySetState, opts?: pulumi.CustomResourceOptions): PolicySet {
        return new PolicySet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:deviceadmin/policySet:PolicySet';

    /**
     * Returns true if the given object is an instance of PolicySet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySet.__pulumiType;
    }

    /**
     * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    declare public readonly childrens: pulumi.Output<outputs.deviceadmin.PolicySetChildren[] | undefined>;
    /**
     * Dictionary attribute name
     */
    declare public readonly conditionAttributeName: pulumi.Output<string | undefined>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    declare public readonly conditionAttributeValue: pulumi.Output<string | undefined>;
    /**
     * Dictionary name
     */
    declare public readonly conditionDictionaryName: pulumi.Output<string | undefined>;
    /**
     * Dictionary value
     */
    declare public readonly conditionDictionaryValue: pulumi.Output<string | undefined>;
    /**
     * UUID for condition
     */
    declare public readonly conditionId: pulumi.Output<string | undefined>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    declare public readonly conditionIsNegate: pulumi.Output<boolean | undefined>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
     */
    declare public readonly conditionOperator: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    declare public readonly conditionType: pulumi.Output<string | undefined>;
    /**
     * Indicates if this policy set is the default one
     */
    declare public readonly default: pulumi.Output<boolean | undefined>;
    /**
     * The description of the policy set
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
     */
    declare public readonly isProxy: pulumi.Output<boolean | undefined>;
    /**
     * Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The rank (priority) in relation to other policy sets. Lower rank is higher priority.
     */
    declare public readonly rank: pulumi.Output<number | undefined>;
    /**
     * Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * The state that the policy set is in. A disabled policy set cannot be matched.
     *   - Choices: `disabled`, `enabled`, `monitor`
     */
    declare public readonly state: pulumi.Output<string | undefined>;

    /**
     * Create a PolicySet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySetArgs | PolicySetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySetState | undefined;
            resourceInputs["childrens"] = state?.childrens;
            resourceInputs["conditionAttributeName"] = state?.conditionAttributeName;
            resourceInputs["conditionAttributeValue"] = state?.conditionAttributeValue;
            resourceInputs["conditionDictionaryName"] = state?.conditionDictionaryName;
            resourceInputs["conditionDictionaryValue"] = state?.conditionDictionaryValue;
            resourceInputs["conditionId"] = state?.conditionId;
            resourceInputs["conditionIsNegate"] = state?.conditionIsNegate;
            resourceInputs["conditionOperator"] = state?.conditionOperator;
            resourceInputs["conditionType"] = state?.conditionType;
            resourceInputs["default"] = state?.default;
            resourceInputs["description"] = state?.description;
            resourceInputs["isProxy"] = state?.isProxy;
            resourceInputs["name"] = state?.name;
            resourceInputs["rank"] = state?.rank;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["state"] = state?.state;
        } else {
            const args = argsOrState as PolicySetArgs | undefined;
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["childrens"] = args?.childrens;
            resourceInputs["conditionAttributeName"] = args?.conditionAttributeName;
            resourceInputs["conditionAttributeValue"] = args?.conditionAttributeValue;
            resourceInputs["conditionDictionaryName"] = args?.conditionDictionaryName;
            resourceInputs["conditionDictionaryValue"] = args?.conditionDictionaryValue;
            resourceInputs["conditionId"] = args?.conditionId;
            resourceInputs["conditionIsNegate"] = args?.conditionIsNegate;
            resourceInputs["conditionOperator"] = args?.conditionOperator;
            resourceInputs["conditionType"] = args?.conditionType;
            resourceInputs["default"] = args?.default;
            resourceInputs["description"] = args?.description;
            resourceInputs["isProxy"] = args?.isProxy;
            resourceInputs["name"] = args?.name;
            resourceInputs["rank"] = args?.rank;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["state"] = args?.state;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicySet resources.
 */
export interface PolicySetState {
    /**
     * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.deviceadmin.PolicySetChildren>[]>;
    /**
     * Dictionary attribute name
     */
    conditionAttributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    conditionAttributeValue?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    conditionDictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    conditionDictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    conditionId?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    conditionIsNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
     */
    conditionOperator?: pulumi.Input<string>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType?: pulumi.Input<string>;
    /**
     * Indicates if this policy set is the default one
     */
    default?: pulumi.Input<boolean>;
    /**
     * The description of the policy set
     */
    description?: pulumi.Input<string>;
    /**
     * Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
     */
    isProxy?: pulumi.Input<boolean>;
    /**
     * Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
     */
    name?: pulumi.Input<string>;
    /**
     * The rank (priority) in relation to other policy sets. Lower rank is higher priority.
     */
    rank?: pulumi.Input<number>;
    /**
     * Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The state that the policy set is in. A disabled policy set cannot be matched.
     *   - Choices: `disabled`, `enabled`, `monitor`
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicySet resource.
 */
export interface PolicySetArgs {
    /**
     * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.deviceadmin.PolicySetChildren>[]>;
    /**
     * Dictionary attribute name
     */
    conditionAttributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    conditionAttributeValue?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    conditionDictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    conditionDictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    conditionId?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    conditionIsNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
     */
    conditionOperator?: pulumi.Input<string>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType?: pulumi.Input<string>;
    /**
     * Indicates if this policy set is the default one
     */
    default?: pulumi.Input<boolean>;
    /**
     * The description of the policy set
     */
    description?: pulumi.Input<string>;
    /**
     * Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
     */
    isProxy?: pulumi.Input<boolean>;
    /**
     * Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
     */
    name?: pulumi.Input<string>;
    /**
     * The rank (priority) in relation to other policy sets. Lower rank is higher priority.
     */
    rank?: pulumi.Input<number>;
    /**
     * Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The state that the policy set is in. A disabled policy set cannot be matched.
     *   - Choices: `disabled`, `enabled`, `monitor`
     */
    state?: pulumi.Input<string>;
}
