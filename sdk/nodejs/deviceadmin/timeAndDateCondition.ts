// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can manage a Device Admin Time And Date Condition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.deviceadmin.TimeAndDateCondition("example", {
 *     name: "Cond1",
 *     description: "My description",
 *     isNegate: false,
 *     weekDays: ["Monday"],
 *     weekDaysExceptions: ["Tuesday"],
 *     startDate: "2022-05-06",
 *     endDate: "2022-05-10",
 *     exceptionStartDate: "2022-06-06",
 *     exceptionEndDate: "2022-06-10",
 *     startTime: "08:00",
 *     endTime: "15:00",
 *     exceptionStartTime: "20:00",
 *     exceptionEndTime: "22:00",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:deviceAdmin/timeAndDateCondition:TimeAndDateCondition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class TimeAndDateCondition extends pulumi.CustomResource {
    /**
     * Get an existing TimeAndDateCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimeAndDateConditionState, opts?: pulumi.CustomResourceOptions): TimeAndDateCondition {
        return new TimeAndDateCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:deviceAdmin/timeAndDateCondition:TimeAndDateCondition';

    /**
     * Returns true if the given object is an instance of TimeAndDateCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimeAndDateCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimeAndDateCondition.__pulumiType;
    }

    /**
     * Condition description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * End date
     */
    public readonly endDate!: pulumi.Output<string | undefined>;
    /**
     * End time
     */
    public readonly endTime!: pulumi.Output<string | undefined>;
    /**
     * Exception end date
     */
    public readonly exceptionEndDate!: pulumi.Output<string | undefined>;
    /**
     * Exception end time
     */
    public readonly exceptionEndTime!: pulumi.Output<string | undefined>;
    /**
     * Exception start date
     */
    public readonly exceptionStartDate!: pulumi.Output<string | undefined>;
    /**
     * Exception start time
     */
    public readonly exceptionStartTime!: pulumi.Output<string | undefined>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    public readonly isNegate!: pulumi.Output<boolean | undefined>;
    /**
     * Condition name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Start date
     */
    public readonly startDate!: pulumi.Output<string | undefined>;
    /**
     * Start time
     */
    public readonly startTime!: pulumi.Output<string | undefined>;
    /**
     * Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
     */
    public readonly weekDays!: pulumi.Output<string[] | undefined>;
    /**
     * Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
     */
    public readonly weekDaysExceptions!: pulumi.Output<string[] | undefined>;

    /**
     * Create a TimeAndDateCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TimeAndDateConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimeAndDateConditionArgs | TimeAndDateConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimeAndDateConditionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["exceptionEndDate"] = state ? state.exceptionEndDate : undefined;
            resourceInputs["exceptionEndTime"] = state ? state.exceptionEndTime : undefined;
            resourceInputs["exceptionStartDate"] = state ? state.exceptionStartDate : undefined;
            resourceInputs["exceptionStartTime"] = state ? state.exceptionStartTime : undefined;
            resourceInputs["isNegate"] = state ? state.isNegate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["weekDays"] = state ? state.weekDays : undefined;
            resourceInputs["weekDaysExceptions"] = state ? state.weekDaysExceptions : undefined;
        } else {
            const args = argsOrState as TimeAndDateConditionArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["exceptionEndDate"] = args ? args.exceptionEndDate : undefined;
            resourceInputs["exceptionEndTime"] = args ? args.exceptionEndTime : undefined;
            resourceInputs["exceptionStartDate"] = args ? args.exceptionStartDate : undefined;
            resourceInputs["exceptionStartTime"] = args ? args.exceptionStartTime : undefined;
            resourceInputs["isNegate"] = args ? args.isNegate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["weekDays"] = args ? args.weekDays : undefined;
            resourceInputs["weekDaysExceptions"] = args ? args.weekDaysExceptions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TimeAndDateCondition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TimeAndDateCondition resources.
 */
export interface TimeAndDateConditionState {
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * End date
     */
    endDate?: pulumi.Input<string>;
    /**
     * End time
     */
    endTime?: pulumi.Input<string>;
    /**
     * Exception end date
     */
    exceptionEndDate?: pulumi.Input<string>;
    /**
     * Exception end time
     */
    exceptionEndTime?: pulumi.Input<string>;
    /**
     * Exception start date
     */
    exceptionStartDate?: pulumi.Input<string>;
    /**
     * Exception start time
     */
    exceptionStartTime?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Start date
     */
    startDate?: pulumi.Input<string>;
    /**
     * Start time
     */
    startTime?: pulumi.Input<string>;
    /**
     * Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
     */
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
     */
    weekDaysExceptions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TimeAndDateCondition resource.
 */
export interface TimeAndDateConditionArgs {
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * End date
     */
    endDate?: pulumi.Input<string>;
    /**
     * End time
     */
    endTime?: pulumi.Input<string>;
    /**
     * Exception end date
     */
    exceptionEndDate?: pulumi.Input<string>;
    /**
     * Exception end time
     */
    exceptionEndTime?: pulumi.Input<string>;
    /**
     * Exception start date
     */
    exceptionStartDate?: pulumi.Input<string>;
    /**
     * Exception start time
     */
    exceptionStartTime?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Start date
     */
    startDate?: pulumi.Input<string>;
    /**
     * Start time
     */
    startTime?: pulumi.Input<string>;
    /**
     * Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
     */
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
     */
    weekDaysExceptions?: pulumi.Input<pulumi.Input<string>[]>;
}
