// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AllowedProtocolsTacacsArgs, AllowedProtocolsTacacsState } from "./allowedProtocolsTacacs";
export type AllowedProtocolsTacacs = import("./allowedProtocolsTacacs").AllowedProtocolsTacacs;
export const AllowedProtocolsTacacs: typeof import("./allowedProtocolsTacacs").AllowedProtocolsTacacs = null as any;
utilities.lazyLoad(exports, ["AllowedProtocolsTacacs"], () => require("./allowedProtocolsTacacs"));

export { AuthenticationRuleArgs, AuthenticationRuleState } from "./authenticationRule";
export type AuthenticationRule = import("./authenticationRule").AuthenticationRule;
export const AuthenticationRule: typeof import("./authenticationRule").AuthenticationRule = null as any;
utilities.lazyLoad(exports, ["AuthenticationRule"], () => require("./authenticationRule"));

export { AuthorizationExceptionRuleArgs, AuthorizationExceptionRuleState } from "./authorizationExceptionRule";
export type AuthorizationExceptionRule = import("./authorizationExceptionRule").AuthorizationExceptionRule;
export const AuthorizationExceptionRule: typeof import("./authorizationExceptionRule").AuthorizationExceptionRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationExceptionRule"], () => require("./authorizationExceptionRule"));

export { AuthorizationGlobalExceptionRuleArgs, AuthorizationGlobalExceptionRuleState } from "./authorizationGlobalExceptionRule";
export type AuthorizationGlobalExceptionRule = import("./authorizationGlobalExceptionRule").AuthorizationGlobalExceptionRule;
export const AuthorizationGlobalExceptionRule: typeof import("./authorizationGlobalExceptionRule").AuthorizationGlobalExceptionRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationGlobalExceptionRule"], () => require("./authorizationGlobalExceptionRule"));

export { AuthorizationRuleArgs, AuthorizationRuleState } from "./authorizationRule";
export type AuthorizationRule = import("./authorizationRule").AuthorizationRule;
export const AuthorizationRule: typeof import("./authorizationRule").AuthorizationRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationRule"], () => require("./authorizationRule"));

export { ConditionArgs, ConditionState } from "./condition";
export type Condition = import("./condition").Condition;
export const Condition: typeof import("./condition").Condition = null as any;
utilities.lazyLoad(exports, ["Condition"], () => require("./condition"));

export { GetAllowedProtocolsTacacsArgs, GetAllowedProtocolsTacacsResult, GetAllowedProtocolsTacacsOutputArgs } from "./getAllowedProtocolsTacacs";
export const getAllowedProtocolsTacacs: typeof import("./getAllowedProtocolsTacacs").getAllowedProtocolsTacacs = null as any;
export const getAllowedProtocolsTacacsOutput: typeof import("./getAllowedProtocolsTacacs").getAllowedProtocolsTacacsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowedProtocolsTacacs","getAllowedProtocolsTacacsOutput"], () => require("./getAllowedProtocolsTacacs"));

export { GetAuthenticationRuleArgs, GetAuthenticationRuleResult, GetAuthenticationRuleOutputArgs } from "./getAuthenticationRule";
export const getAuthenticationRule: typeof import("./getAuthenticationRule").getAuthenticationRule = null as any;
export const getAuthenticationRuleOutput: typeof import("./getAuthenticationRule").getAuthenticationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationRule","getAuthenticationRuleOutput"], () => require("./getAuthenticationRule"));

export { GetAuthorizationExceptionRuleArgs, GetAuthorizationExceptionRuleResult, GetAuthorizationExceptionRuleOutputArgs } from "./getAuthorizationExceptionRule";
export const getAuthorizationExceptionRule: typeof import("./getAuthorizationExceptionRule").getAuthorizationExceptionRule = null as any;
export const getAuthorizationExceptionRuleOutput: typeof import("./getAuthorizationExceptionRule").getAuthorizationExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationExceptionRule","getAuthorizationExceptionRuleOutput"], () => require("./getAuthorizationExceptionRule"));

export { GetAuthorizationGlobalExceptionRuleArgs, GetAuthorizationGlobalExceptionRuleResult, GetAuthorizationGlobalExceptionRuleOutputArgs } from "./getAuthorizationGlobalExceptionRule";
export const getAuthorizationGlobalExceptionRule: typeof import("./getAuthorizationGlobalExceptionRule").getAuthorizationGlobalExceptionRule = null as any;
export const getAuthorizationGlobalExceptionRuleOutput: typeof import("./getAuthorizationGlobalExceptionRule").getAuthorizationGlobalExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationGlobalExceptionRule","getAuthorizationGlobalExceptionRuleOutput"], () => require("./getAuthorizationGlobalExceptionRule"));

export { GetAuthorizationRuleArgs, GetAuthorizationRuleResult, GetAuthorizationRuleOutputArgs } from "./getAuthorizationRule";
export const getAuthorizationRule: typeof import("./getAuthorizationRule").getAuthorizationRule = null as any;
export const getAuthorizationRuleOutput: typeof import("./getAuthorizationRule").getAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationRule","getAuthorizationRuleOutput"], () => require("./getAuthorizationRule"));

export { GetConditionArgs, GetConditionResult, GetConditionOutputArgs } from "./getCondition";
export const getCondition: typeof import("./getCondition").getCondition = null as any;
export const getConditionOutput: typeof import("./getCondition").getConditionOutput = null as any;
utilities.lazyLoad(exports, ["getCondition","getConditionOutput"], () => require("./getCondition"));

export { GetPolicySetArgs, GetPolicySetResult, GetPolicySetOutputArgs } from "./getPolicySet";
export const getPolicySet: typeof import("./getPolicySet").getPolicySet = null as any;
export const getPolicySetOutput: typeof import("./getPolicySet").getPolicySetOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySet","getPolicySetOutput"], () => require("./getPolicySet"));

export { GetTacacsCommandSetArgs, GetTacacsCommandSetResult, GetTacacsCommandSetOutputArgs } from "./getTacacsCommandSet";
export const getTacacsCommandSet: typeof import("./getTacacsCommandSet").getTacacsCommandSet = null as any;
export const getTacacsCommandSetOutput: typeof import("./getTacacsCommandSet").getTacacsCommandSetOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsCommandSet","getTacacsCommandSetOutput"], () => require("./getTacacsCommandSet"));

export { GetTacacsProfileArgs, GetTacacsProfileResult, GetTacacsProfileOutputArgs } from "./getTacacsProfile";
export const getTacacsProfile: typeof import("./getTacacsProfile").getTacacsProfile = null as any;
export const getTacacsProfileOutput: typeof import("./getTacacsProfile").getTacacsProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsProfile","getTacacsProfileOutput"], () => require("./getTacacsProfile"));

export { GetTimeAndDateConditionArgs, GetTimeAndDateConditionResult, GetTimeAndDateConditionOutputArgs } from "./getTimeAndDateCondition";
export const getTimeAndDateCondition: typeof import("./getTimeAndDateCondition").getTimeAndDateCondition = null as any;
export const getTimeAndDateConditionOutput: typeof import("./getTimeAndDateCondition").getTimeAndDateConditionOutput = null as any;
utilities.lazyLoad(exports, ["getTimeAndDateCondition","getTimeAndDateConditionOutput"], () => require("./getTimeAndDateCondition"));

export { PolicySetArgs, PolicySetState } from "./policySet";
export type PolicySet = import("./policySet").PolicySet;
export const PolicySet: typeof import("./policySet").PolicySet = null as any;
utilities.lazyLoad(exports, ["PolicySet"], () => require("./policySet"));

export { TacacsCommandSetArgs, TacacsCommandSetState } from "./tacacsCommandSet";
export type TacacsCommandSet = import("./tacacsCommandSet").TacacsCommandSet;
export const TacacsCommandSet: typeof import("./tacacsCommandSet").TacacsCommandSet = null as any;
utilities.lazyLoad(exports, ["TacacsCommandSet"], () => require("./tacacsCommandSet"));

export { TacacsProfileArgs, TacacsProfileState } from "./tacacsProfile";
export type TacacsProfile = import("./tacacsProfile").TacacsProfile;
export const TacacsProfile: typeof import("./tacacsProfile").TacacsProfile = null as any;
utilities.lazyLoad(exports, ["TacacsProfile"], () => require("./tacacsProfile"));

export { TimeAndDateConditionArgs, TimeAndDateConditionState } from "./timeAndDateCondition";
export type TimeAndDateCondition = import("./timeAndDateCondition").TimeAndDateCondition;
export const TimeAndDateCondition: typeof import("./timeAndDateCondition").TimeAndDateCondition = null as any;
utilities.lazyLoad(exports, ["TimeAndDateCondition"], () => require("./timeAndDateCondition"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ise:deviceadmin/allowedProtocolsTacacs:AllowedProtocolsTacacs":
                return new AllowedProtocolsTacacs(name, <any>undefined, { urn })
            case "ise:deviceadmin/authenticationRule:AuthenticationRule":
                return new AuthenticationRule(name, <any>undefined, { urn })
            case "ise:deviceadmin/authorizationExceptionRule:AuthorizationExceptionRule":
                return new AuthorizationExceptionRule(name, <any>undefined, { urn })
            case "ise:deviceadmin/authorizationGlobalExceptionRule:AuthorizationGlobalExceptionRule":
                return new AuthorizationGlobalExceptionRule(name, <any>undefined, { urn })
            case "ise:deviceadmin/authorizationRule:AuthorizationRule":
                return new AuthorizationRule(name, <any>undefined, { urn })
            case "ise:deviceadmin/condition:Condition":
                return new Condition(name, <any>undefined, { urn })
            case "ise:deviceadmin/policySet:PolicySet":
                return new PolicySet(name, <any>undefined, { urn })
            case "ise:deviceadmin/tacacsCommandSet:TacacsCommandSet":
                return new TacacsCommandSet(name, <any>undefined, { urn })
            case "ise:deviceadmin/tacacsProfile:TacacsProfile":
                return new TacacsProfile(name, <any>undefined, { urn })
            case "ise:deviceadmin/timeAndDateCondition:TimeAndDateCondition":
                return new TimeAndDateCondition(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ise", "deviceadmin/allowedProtocolsTacacs", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/authenticationRule", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/authorizationExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/authorizationGlobalExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/authorizationRule", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/condition", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/policySet", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/tacacsCommandSet", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/tacacsProfile", _module)
pulumi.runtime.registerResourceModule("ise", "deviceadmin/timeAndDateCondition", _module)
