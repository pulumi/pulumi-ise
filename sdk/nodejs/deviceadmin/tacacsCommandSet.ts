// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource can manage a TACACS Command Set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.deviceadmin.TacacsCommandSet("example", {
 *     name: "CommandSet1",
 *     description: "My TACACS command set",
 *     permitUnmatched: true,
 *     commands: [{
 *         grant: "PERMIT",
 *         command: "show",
 *         arguments: "",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import ise:deviceadmin/tacacsCommandSet:TacacsCommandSet example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class TacacsCommandSet extends pulumi.CustomResource {
    /**
     * Get an existing TacacsCommandSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TacacsCommandSetState, opts?: pulumi.CustomResourceOptions): TacacsCommandSet {
        return new TacacsCommandSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:deviceadmin/tacacsCommandSet:TacacsCommandSet';

    /**
     * Returns true if the given object is an instance of TacacsCommandSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TacacsCommandSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TacacsCommandSet.__pulumiType;
    }

    public readonly commands!: pulumi.Output<outputs.deviceadmin.TacacsCommandSetCommand[] | undefined>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the TACACS command set
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permit unmatched commands - Default value: `false`
     */
    public readonly permitUnmatched!: pulumi.Output<boolean>;

    /**
     * Create a TacacsCommandSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TacacsCommandSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TacacsCommandSetArgs | TacacsCommandSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TacacsCommandSetState | undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permitUnmatched"] = state ? state.permitUnmatched : undefined;
        } else {
            const args = argsOrState as TacacsCommandSetArgs | undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permitUnmatched"] = args ? args.permitUnmatched : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TacacsCommandSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TacacsCommandSet resources.
 */
export interface TacacsCommandSetState {
    commands?: pulumi.Input<pulumi.Input<inputs.deviceadmin.TacacsCommandSetCommand>[]>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the TACACS command set
     */
    name?: pulumi.Input<string>;
    /**
     * Permit unmatched commands - Default value: `false`
     */
    permitUnmatched?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TacacsCommandSet resource.
 */
export interface TacacsCommandSetArgs {
    commands?: pulumi.Input<pulumi.Input<inputs.deviceadmin.TacacsCommandSetCommand>[]>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the TACACS command set
     */
    name?: pulumi.Input<string>;
    /**
     * Permit unmatched commands - Default value: `false`
     */
    permitUnmatched?: pulumi.Input<boolean>;
}
