// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource can manage a Network Device.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.network.Device("example", {
 *     name: "Device1",
 *     description: "My device",
 *     authenticationEnableKeyWrap: true,
 *     authenticationEncryptionKey: "cisco123cisco123",
 *     authenticationEncryptionKeyFormat: "ASCII",
 *     authenticationMessageAuthenticatorCodeKey: "cisco123cisco1235678",
 *     authenticationNetworkProtocol: "RADIUS",
 *     authenticationRadiusSharedSecret: "cisco123",
 *     authenticationEnableMultiSecret: true,
 *     authenticationSecondRadiusSharedSecret: "cisco12345",
 *     authenticationDtlsRequired: true,
 *     coaPort: 12345,
 *     dtlsDnsName: "cisco.com",
 *     ips: [{
 *         ipaddress: "2.3.4.5",
 *         mask: "32",
 *     }],
 *     modelName: "Unknown",
 *     softwareVersion: "Unknown",
 *     profileName: "Cisco",
 *     snmpLinkTrapQuery: true,
 *     snmpMacTrapQuery: true,
 *     snmpPollingInterval: 1200,
 *     snmpRoCommunity: "rocom",
 *     snmpVersion: "TWO_C",
 *     tacacsConnectModeOptions: "OFF",
 *     tacacsSharedSecret: "cisco123",
 *     trustsecDeviceId: "device123",
 *     trustsecDevicePassword: "cisco123",
 *     trustsecRestApiUsername: "user123",
 *     trustsecRestApiPassword: "Cisco123",
 *     trustsecEnableModePassword: "cisco123",
 *     trustsecExecModePassword: "cisco123",
 *     trustsecExecModeUsername: "user456",
 *     trustsecIncludeWhenDeployingSgtUpdates: true,
 *     trustsecDownloadEnvironmentDataEveryXSeconds: 1000,
 *     trustsecDownloadPeerAuthorizationPolicyEveryXSeconds: 1000,
 *     trustsecDownloadSgaclListsEveryXSeconds: 1000,
 *     trustsecOtherSgaDevicesToTrustThisDevice: true,
 *     trustsecReAuthenticationEveryXSeconds: 1000,
 *     trustsecSendConfigurationToDevice: true,
 *     trustsecSendConfigurationToDeviceUsing: "ENABLE_USING_COA",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:network/device:Device example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:network/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    /**
     * Enforce use of DTLS
     */
    public readonly authenticationDtlsRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Enable key wrap
     */
    public readonly authenticationEnableKeyWrap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable multiple RADIUS shared secrets
     */
    public readonly authenticationEnableMultiSecret!: pulumi.Output<boolean | undefined>;
    /**
     * Encryption key
     */
    public readonly authenticationEncryptionKey!: pulumi.Output<string | undefined>;
    /**
     * Key input format - Choices: `ASCII`, `HEXADECIMAL`
     */
    public readonly authenticationEncryptionKeyFormat!: pulumi.Output<string | undefined>;
    /**
     * Message authenticator code key
     */
    public readonly authenticationMessageAuthenticatorCodeKey!: pulumi.Output<string | undefined>;
    /**
     * Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
     */
    public readonly authenticationNetworkProtocol!: pulumi.Output<string | undefined>;
    /**
     * RADIUS shared secret
     */
    public readonly authenticationRadiusSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * Second RADIUS shared secret
     */
    public readonly authenticationSecondRadiusSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * CoA port - Default value: `1700`
     */
    public readonly coaPort!: pulumi.Output<number>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     */
    public readonly dtlsDnsName!: pulumi.Output<string | undefined>;
    /**
     * List of IP subnets
     */
    public readonly ips!: pulumi.Output<outputs.network.DeviceIp[]>;
    /**
     * Model name
     */
    public readonly modelName!: pulumi.Output<string | undefined>;
    /**
     * The name of the network device
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     */
    public readonly networkDeviceGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Profile name - Default value: `Cisco`
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * SNMP link Trap Query
     */
    public readonly snmpLinkTrapQuery!: pulumi.Output<boolean | undefined>;
    /**
     * SNMP MAC Trap Query
     */
    public readonly snmpMacTrapQuery!: pulumi.Output<boolean | undefined>;
    /**
     * Originating Policy Services Node
     */
    public readonly snmpOriginatingPolicyServiceNode!: pulumi.Output<string | undefined>;
    /**
     * SNMP Polling Interval in seconds - Range: `600`-`86400`
     */
    public readonly snmpPollingInterval!: pulumi.Output<number | undefined>;
    /**
     * SNMP RO Community
     */
    public readonly snmpRoCommunity!: pulumi.Output<string | undefined>;
    /**
     * SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
     */
    public readonly snmpVersion!: pulumi.Output<string | undefined>;
    /**
     * Software version
     */
    public readonly softwareVersion!: pulumi.Output<string | undefined>;
    /**
     * Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
     */
    public readonly tacacsConnectModeOptions!: pulumi.Output<string | undefined>;
    /**
     * Shared secret
     */
    public readonly tacacsSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * CoA source host
     */
    public readonly trustsecCoaSourceHost!: pulumi.Output<string | undefined>;
    /**
     * TrustSec device ID
     */
    public readonly trustsecDeviceId!: pulumi.Output<string | undefined>;
    /**
     * TrustSec device password
     */
    public readonly trustsecDevicePassword!: pulumi.Output<string | undefined>;
    /**
     * Download environment data every X seconds
     */
    public readonly trustsecDownloadEnvironmentDataEveryXSeconds!: pulumi.Output<number | undefined>;
    /**
     * Download peer authorization policy every X seconds
     */
    public readonly trustsecDownloadPeerAuthorizationPolicyEveryXSeconds!: pulumi.Output<number | undefined>;
    /**
     * Download SGACL lists every X seconds
     */
    public readonly trustsecDownloadSgaclListsEveryXSeconds!: pulumi.Output<number | undefined>;
    /**
     * Enable mode password
     */
    public readonly trustsecEnableModePassword!: pulumi.Output<string | undefined>;
    /**
     * EXEC mode password
     */
    public readonly trustsecExecModePassword!: pulumi.Output<string | undefined>;
    /**
     * EXEC mode username
     */
    public readonly trustsecExecModeUsername!: pulumi.Output<string | undefined>;
    /**
     * Include this device when deploying Security Group Tag Mapping Updates
     */
    public readonly trustsecIncludeWhenDeployingSgtUpdates!: pulumi.Output<boolean | undefined>;
    /**
     * Other TrustSec devices to trust this device
     */
    public readonly trustsecOtherSgaDevicesToTrustThisDevice!: pulumi.Output<boolean | undefined>;
    /**
     * Re-authenticate every X seconds
     */
    public readonly trustsecReAuthenticationEveryXSeconds!: pulumi.Output<number | undefined>;
    /**
     * REST API password
     */
    public readonly trustsecRestApiPassword!: pulumi.Output<string | undefined>;
    /**
     * REST API username
     */
    public readonly trustsecRestApiUsername!: pulumi.Output<string | undefined>;
    /**
     * Send configuration to device
     */
    public readonly trustsecSendConfigurationToDevice!: pulumi.Output<boolean | undefined>;
    /**
     * Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
     */
    public readonly trustsecSendConfigurationToDeviceUsing!: pulumi.Output<string | undefined>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["authenticationDtlsRequired"] = state ? state.authenticationDtlsRequired : undefined;
            resourceInputs["authenticationEnableKeyWrap"] = state ? state.authenticationEnableKeyWrap : undefined;
            resourceInputs["authenticationEnableMultiSecret"] = state ? state.authenticationEnableMultiSecret : undefined;
            resourceInputs["authenticationEncryptionKey"] = state ? state.authenticationEncryptionKey : undefined;
            resourceInputs["authenticationEncryptionKeyFormat"] = state ? state.authenticationEncryptionKeyFormat : undefined;
            resourceInputs["authenticationMessageAuthenticatorCodeKey"] = state ? state.authenticationMessageAuthenticatorCodeKey : undefined;
            resourceInputs["authenticationNetworkProtocol"] = state ? state.authenticationNetworkProtocol : undefined;
            resourceInputs["authenticationRadiusSharedSecret"] = state ? state.authenticationRadiusSharedSecret : undefined;
            resourceInputs["authenticationSecondRadiusSharedSecret"] = state ? state.authenticationSecondRadiusSharedSecret : undefined;
            resourceInputs["coaPort"] = state ? state.coaPort : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dtlsDnsName"] = state ? state.dtlsDnsName : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["modelName"] = state ? state.modelName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDeviceGroups"] = state ? state.networkDeviceGroups : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["snmpLinkTrapQuery"] = state ? state.snmpLinkTrapQuery : undefined;
            resourceInputs["snmpMacTrapQuery"] = state ? state.snmpMacTrapQuery : undefined;
            resourceInputs["snmpOriginatingPolicyServiceNode"] = state ? state.snmpOriginatingPolicyServiceNode : undefined;
            resourceInputs["snmpPollingInterval"] = state ? state.snmpPollingInterval : undefined;
            resourceInputs["snmpRoCommunity"] = state ? state.snmpRoCommunity : undefined;
            resourceInputs["snmpVersion"] = state ? state.snmpVersion : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["tacacsConnectModeOptions"] = state ? state.tacacsConnectModeOptions : undefined;
            resourceInputs["tacacsSharedSecret"] = state ? state.tacacsSharedSecret : undefined;
            resourceInputs["trustsecCoaSourceHost"] = state ? state.trustsecCoaSourceHost : undefined;
            resourceInputs["trustsecDeviceId"] = state ? state.trustsecDeviceId : undefined;
            resourceInputs["trustsecDevicePassword"] = state ? state.trustsecDevicePassword : undefined;
            resourceInputs["trustsecDownloadEnvironmentDataEveryXSeconds"] = state ? state.trustsecDownloadEnvironmentDataEveryXSeconds : undefined;
            resourceInputs["trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"] = state ? state.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds : undefined;
            resourceInputs["trustsecDownloadSgaclListsEveryXSeconds"] = state ? state.trustsecDownloadSgaclListsEveryXSeconds : undefined;
            resourceInputs["trustsecEnableModePassword"] = state ? state.trustsecEnableModePassword : undefined;
            resourceInputs["trustsecExecModePassword"] = state ? state.trustsecExecModePassword : undefined;
            resourceInputs["trustsecExecModeUsername"] = state ? state.trustsecExecModeUsername : undefined;
            resourceInputs["trustsecIncludeWhenDeployingSgtUpdates"] = state ? state.trustsecIncludeWhenDeployingSgtUpdates : undefined;
            resourceInputs["trustsecOtherSgaDevicesToTrustThisDevice"] = state ? state.trustsecOtherSgaDevicesToTrustThisDevice : undefined;
            resourceInputs["trustsecReAuthenticationEveryXSeconds"] = state ? state.trustsecReAuthenticationEveryXSeconds : undefined;
            resourceInputs["trustsecRestApiPassword"] = state ? state.trustsecRestApiPassword : undefined;
            resourceInputs["trustsecRestApiUsername"] = state ? state.trustsecRestApiUsername : undefined;
            resourceInputs["trustsecSendConfigurationToDevice"] = state ? state.trustsecSendConfigurationToDevice : undefined;
            resourceInputs["trustsecSendConfigurationToDeviceUsing"] = state ? state.trustsecSendConfigurationToDeviceUsing : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if ((!args || args.ips === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ips'");
            }
            resourceInputs["authenticationDtlsRequired"] = args ? args.authenticationDtlsRequired : undefined;
            resourceInputs["authenticationEnableKeyWrap"] = args ? args.authenticationEnableKeyWrap : undefined;
            resourceInputs["authenticationEnableMultiSecret"] = args ? args.authenticationEnableMultiSecret : undefined;
            resourceInputs["authenticationEncryptionKey"] = args ? args.authenticationEncryptionKey : undefined;
            resourceInputs["authenticationEncryptionKeyFormat"] = args ? args.authenticationEncryptionKeyFormat : undefined;
            resourceInputs["authenticationMessageAuthenticatorCodeKey"] = args ? args.authenticationMessageAuthenticatorCodeKey : undefined;
            resourceInputs["authenticationNetworkProtocol"] = args ? args.authenticationNetworkProtocol : undefined;
            resourceInputs["authenticationRadiusSharedSecret"] = args ? args.authenticationRadiusSharedSecret : undefined;
            resourceInputs["authenticationSecondRadiusSharedSecret"] = args ? args.authenticationSecondRadiusSharedSecret : undefined;
            resourceInputs["coaPort"] = args ? args.coaPort : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dtlsDnsName"] = args ? args.dtlsDnsName : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["modelName"] = args ? args.modelName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkDeviceGroups"] = args ? args.networkDeviceGroups : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["snmpLinkTrapQuery"] = args ? args.snmpLinkTrapQuery : undefined;
            resourceInputs["snmpMacTrapQuery"] = args ? args.snmpMacTrapQuery : undefined;
            resourceInputs["snmpOriginatingPolicyServiceNode"] = args ? args.snmpOriginatingPolicyServiceNode : undefined;
            resourceInputs["snmpPollingInterval"] = args ? args.snmpPollingInterval : undefined;
            resourceInputs["snmpRoCommunity"] = args ? args.snmpRoCommunity : undefined;
            resourceInputs["snmpVersion"] = args ? args.snmpVersion : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["tacacsConnectModeOptions"] = args ? args.tacacsConnectModeOptions : undefined;
            resourceInputs["tacacsSharedSecret"] = args ? args.tacacsSharedSecret : undefined;
            resourceInputs["trustsecCoaSourceHost"] = args ? args.trustsecCoaSourceHost : undefined;
            resourceInputs["trustsecDeviceId"] = args ? args.trustsecDeviceId : undefined;
            resourceInputs["trustsecDevicePassword"] = args ? args.trustsecDevicePassword : undefined;
            resourceInputs["trustsecDownloadEnvironmentDataEveryXSeconds"] = args ? args.trustsecDownloadEnvironmentDataEveryXSeconds : undefined;
            resourceInputs["trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"] = args ? args.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds : undefined;
            resourceInputs["trustsecDownloadSgaclListsEveryXSeconds"] = args ? args.trustsecDownloadSgaclListsEveryXSeconds : undefined;
            resourceInputs["trustsecEnableModePassword"] = args ? args.trustsecEnableModePassword : undefined;
            resourceInputs["trustsecExecModePassword"] = args ? args.trustsecExecModePassword : undefined;
            resourceInputs["trustsecExecModeUsername"] = args ? args.trustsecExecModeUsername : undefined;
            resourceInputs["trustsecIncludeWhenDeployingSgtUpdates"] = args ? args.trustsecIncludeWhenDeployingSgtUpdates : undefined;
            resourceInputs["trustsecOtherSgaDevicesToTrustThisDevice"] = args ? args.trustsecOtherSgaDevicesToTrustThisDevice : undefined;
            resourceInputs["trustsecReAuthenticationEveryXSeconds"] = args ? args.trustsecReAuthenticationEveryXSeconds : undefined;
            resourceInputs["trustsecRestApiPassword"] = args ? args.trustsecRestApiPassword : undefined;
            resourceInputs["trustsecRestApiUsername"] = args ? args.trustsecRestApiUsername : undefined;
            resourceInputs["trustsecSendConfigurationToDevice"] = args ? args.trustsecSendConfigurationToDevice : undefined;
            resourceInputs["trustsecSendConfigurationToDeviceUsing"] = args ? args.trustsecSendConfigurationToDeviceUsing : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * Enforce use of DTLS
     */
    authenticationDtlsRequired?: pulumi.Input<boolean>;
    /**
     * Enable key wrap
     */
    authenticationEnableKeyWrap?: pulumi.Input<boolean>;
    /**
     * Enable multiple RADIUS shared secrets
     */
    authenticationEnableMultiSecret?: pulumi.Input<boolean>;
    /**
     * Encryption key
     */
    authenticationEncryptionKey?: pulumi.Input<string>;
    /**
     * Key input format - Choices: `ASCII`, `HEXADECIMAL`
     */
    authenticationEncryptionKeyFormat?: pulumi.Input<string>;
    /**
     * Message authenticator code key
     */
    authenticationMessageAuthenticatorCodeKey?: pulumi.Input<string>;
    /**
     * Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
     */
    authenticationNetworkProtocol?: pulumi.Input<string>;
    /**
     * RADIUS shared secret
     */
    authenticationRadiusSharedSecret?: pulumi.Input<string>;
    /**
     * Second RADIUS shared secret
     */
    authenticationSecondRadiusSharedSecret?: pulumi.Input<string>;
    /**
     * CoA port - Default value: `1700`
     */
    coaPort?: pulumi.Input<number>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     */
    dtlsDnsName?: pulumi.Input<string>;
    /**
     * List of IP subnets
     */
    ips?: pulumi.Input<pulumi.Input<inputs.network.DeviceIp>[]>;
    /**
     * Model name
     */
    modelName?: pulumi.Input<string>;
    /**
     * The name of the network device
     */
    name?: pulumi.Input<string>;
    /**
     * List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     */
    networkDeviceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Profile name - Default value: `Cisco`
     */
    profileName?: pulumi.Input<string>;
    /**
     * SNMP link Trap Query
     */
    snmpLinkTrapQuery?: pulumi.Input<boolean>;
    /**
     * SNMP MAC Trap Query
     */
    snmpMacTrapQuery?: pulumi.Input<boolean>;
    /**
     * Originating Policy Services Node
     */
    snmpOriginatingPolicyServiceNode?: pulumi.Input<string>;
    /**
     * SNMP Polling Interval in seconds - Range: `600`-`86400`
     */
    snmpPollingInterval?: pulumi.Input<number>;
    /**
     * SNMP RO Community
     */
    snmpRoCommunity?: pulumi.Input<string>;
    /**
     * SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
     */
    snmpVersion?: pulumi.Input<string>;
    /**
     * Software version
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
     */
    tacacsConnectModeOptions?: pulumi.Input<string>;
    /**
     * Shared secret
     */
    tacacsSharedSecret?: pulumi.Input<string>;
    /**
     * CoA source host
     */
    trustsecCoaSourceHost?: pulumi.Input<string>;
    /**
     * TrustSec device ID
     */
    trustsecDeviceId?: pulumi.Input<string>;
    /**
     * TrustSec device password
     */
    trustsecDevicePassword?: pulumi.Input<string>;
    /**
     * Download environment data every X seconds
     */
    trustsecDownloadEnvironmentDataEveryXSeconds?: pulumi.Input<number>;
    /**
     * Download peer authorization policy every X seconds
     */
    trustsecDownloadPeerAuthorizationPolicyEveryXSeconds?: pulumi.Input<number>;
    /**
     * Download SGACL lists every X seconds
     */
    trustsecDownloadSgaclListsEveryXSeconds?: pulumi.Input<number>;
    /**
     * Enable mode password
     */
    trustsecEnableModePassword?: pulumi.Input<string>;
    /**
     * EXEC mode password
     */
    trustsecExecModePassword?: pulumi.Input<string>;
    /**
     * EXEC mode username
     */
    trustsecExecModeUsername?: pulumi.Input<string>;
    /**
     * Include this device when deploying Security Group Tag Mapping Updates
     */
    trustsecIncludeWhenDeployingSgtUpdates?: pulumi.Input<boolean>;
    /**
     * Other TrustSec devices to trust this device
     */
    trustsecOtherSgaDevicesToTrustThisDevice?: pulumi.Input<boolean>;
    /**
     * Re-authenticate every X seconds
     */
    trustsecReAuthenticationEveryXSeconds?: pulumi.Input<number>;
    /**
     * REST API password
     */
    trustsecRestApiPassword?: pulumi.Input<string>;
    /**
     * REST API username
     */
    trustsecRestApiUsername?: pulumi.Input<string>;
    /**
     * Send configuration to device
     */
    trustsecSendConfigurationToDevice?: pulumi.Input<boolean>;
    /**
     * Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
     */
    trustsecSendConfigurationToDeviceUsing?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * Enforce use of DTLS
     */
    authenticationDtlsRequired?: pulumi.Input<boolean>;
    /**
     * Enable key wrap
     */
    authenticationEnableKeyWrap?: pulumi.Input<boolean>;
    /**
     * Enable multiple RADIUS shared secrets
     */
    authenticationEnableMultiSecret?: pulumi.Input<boolean>;
    /**
     * Encryption key
     */
    authenticationEncryptionKey?: pulumi.Input<string>;
    /**
     * Key input format - Choices: `ASCII`, `HEXADECIMAL`
     */
    authenticationEncryptionKeyFormat?: pulumi.Input<string>;
    /**
     * Message authenticator code key
     */
    authenticationMessageAuthenticatorCodeKey?: pulumi.Input<string>;
    /**
     * Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
     */
    authenticationNetworkProtocol?: pulumi.Input<string>;
    /**
     * RADIUS shared secret
     */
    authenticationRadiusSharedSecret?: pulumi.Input<string>;
    /**
     * Second RADIUS shared secret
     */
    authenticationSecondRadiusSharedSecret?: pulumi.Input<string>;
    /**
     * CoA port - Default value: `1700`
     */
    coaPort?: pulumi.Input<number>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     */
    dtlsDnsName?: pulumi.Input<string>;
    /**
     * List of IP subnets
     */
    ips: pulumi.Input<pulumi.Input<inputs.network.DeviceIp>[]>;
    /**
     * Model name
     */
    modelName?: pulumi.Input<string>;
    /**
     * The name of the network device
     */
    name?: pulumi.Input<string>;
    /**
     * List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     */
    networkDeviceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Profile name - Default value: `Cisco`
     */
    profileName?: pulumi.Input<string>;
    /**
     * SNMP link Trap Query
     */
    snmpLinkTrapQuery?: pulumi.Input<boolean>;
    /**
     * SNMP MAC Trap Query
     */
    snmpMacTrapQuery?: pulumi.Input<boolean>;
    /**
     * Originating Policy Services Node
     */
    snmpOriginatingPolicyServiceNode?: pulumi.Input<string>;
    /**
     * SNMP Polling Interval in seconds - Range: `600`-`86400`
     */
    snmpPollingInterval?: pulumi.Input<number>;
    /**
     * SNMP RO Community
     */
    snmpRoCommunity?: pulumi.Input<string>;
    /**
     * SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
     */
    snmpVersion?: pulumi.Input<string>;
    /**
     * Software version
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
     */
    tacacsConnectModeOptions?: pulumi.Input<string>;
    /**
     * Shared secret
     */
    tacacsSharedSecret?: pulumi.Input<string>;
    /**
     * CoA source host
     */
    trustsecCoaSourceHost?: pulumi.Input<string>;
    /**
     * TrustSec device ID
     */
    trustsecDeviceId?: pulumi.Input<string>;
    /**
     * TrustSec device password
     */
    trustsecDevicePassword?: pulumi.Input<string>;
    /**
     * Download environment data every X seconds
     */
    trustsecDownloadEnvironmentDataEveryXSeconds?: pulumi.Input<number>;
    /**
     * Download peer authorization policy every X seconds
     */
    trustsecDownloadPeerAuthorizationPolicyEveryXSeconds?: pulumi.Input<number>;
    /**
     * Download SGACL lists every X seconds
     */
    trustsecDownloadSgaclListsEveryXSeconds?: pulumi.Input<number>;
    /**
     * Enable mode password
     */
    trustsecEnableModePassword?: pulumi.Input<string>;
    /**
     * EXEC mode password
     */
    trustsecExecModePassword?: pulumi.Input<string>;
    /**
     * EXEC mode username
     */
    trustsecExecModeUsername?: pulumi.Input<string>;
    /**
     * Include this device when deploying Security Group Tag Mapping Updates
     */
    trustsecIncludeWhenDeployingSgtUpdates?: pulumi.Input<boolean>;
    /**
     * Other TrustSec devices to trust this device
     */
    trustsecOtherSgaDevicesToTrustThisDevice?: pulumi.Input<boolean>;
    /**
     * Re-authenticate every X seconds
     */
    trustsecReAuthenticationEveryXSeconds?: pulumi.Input<number>;
    /**
     * REST API password
     */
    trustsecRestApiPassword?: pulumi.Input<string>;
    /**
     * REST API username
     */
    trustsecRestApiUsername?: pulumi.Input<string>;
    /**
     * Send configuration to device
     */
    trustsecSendConfigurationToDevice?: pulumi.Input<boolean>;
    /**
     * Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
     */
    trustsecSendConfigurationToDeviceUsing?: pulumi.Input<string>;
}
