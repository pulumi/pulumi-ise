// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource can manage a License Tier State.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.licensetier.State("example", {licenses: [{
 *     name: "ESSENTIAL",
 *     status: "ENABLED",
 * }]});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:LicenseTier/state:State example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class State extends pulumi.CustomResource {
    /**
     * Get an existing State resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StateState, opts?: pulumi.CustomResourceOptions): State {
        return new State(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:LicenseTier/state:State';

    /**
     * Returns true if the given object is an instance of State.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is State {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === State.__pulumiType;
    }

    /**
     * List of licenses
     */
    public readonly licenses!: pulumi.Output<outputs.LicenseTier.StateLicense[]>;

    /**
     * Create a State resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StateArgs | StateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StateState | undefined;
            resourceInputs["licenses"] = state ? state.licenses : undefined;
        } else {
            const args = argsOrState as StateArgs | undefined;
            if ((!args || args.licenses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenses'");
            }
            resourceInputs["licenses"] = args ? args.licenses : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(State.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering State resources.
 */
export interface StateState {
    /**
     * List of licenses
     */
    licenses?: pulumi.Input<pulumi.Input<inputs.LicenseTier.StateLicense>[]>;
}

/**
 * The set of arguments for constructing a State resource.
 */
export interface StateArgs {
    /**
     * List of licenses
     */
    licenses: pulumi.Input<pulumi.Input<inputs.LicenseTier.StateLicense>[]>;
}
