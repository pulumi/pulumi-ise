// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AllowedProtocolsArgs, AllowedProtocolsState } from "./allowedProtocols";
export type AllowedProtocols = import("./allowedProtocols").AllowedProtocols;
export const AllowedProtocols: typeof import("./allowedProtocols").AllowedProtocols = null as any;
utilities.lazyLoad(exports, ["AllowedProtocols"], () => require("./allowedProtocols"));

export { AuthenticationRuleArgs, AuthenticationRuleState } from "./authenticationRule";
export type AuthenticationRule = import("./authenticationRule").AuthenticationRule;
export const AuthenticationRule: typeof import("./authenticationRule").AuthenticationRule = null as any;
utilities.lazyLoad(exports, ["AuthenticationRule"], () => require("./authenticationRule"));

export { AuthenticationRuleUpdateRankArgs, AuthenticationRuleUpdateRankState } from "./authenticationRuleUpdateRank";
export type AuthenticationRuleUpdateRank = import("./authenticationRuleUpdateRank").AuthenticationRuleUpdateRank;
export const AuthenticationRuleUpdateRank: typeof import("./authenticationRuleUpdateRank").AuthenticationRuleUpdateRank = null as any;
utilities.lazyLoad(exports, ["AuthenticationRuleUpdateRank"], () => require("./authenticationRuleUpdateRank"));

export { AuthorizationExceptionRuleArgs, AuthorizationExceptionRuleState } from "./authorizationExceptionRule";
export type AuthorizationExceptionRule = import("./authorizationExceptionRule").AuthorizationExceptionRule;
export const AuthorizationExceptionRule: typeof import("./authorizationExceptionRule").AuthorizationExceptionRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationExceptionRule"], () => require("./authorizationExceptionRule"));

export { AuthorizationExceptionRuleUpdateRankArgs, AuthorizationExceptionRuleUpdateRankState } from "./authorizationExceptionRuleUpdateRank";
export type AuthorizationExceptionRuleUpdateRank = import("./authorizationExceptionRuleUpdateRank").AuthorizationExceptionRuleUpdateRank;
export const AuthorizationExceptionRuleUpdateRank: typeof import("./authorizationExceptionRuleUpdateRank").AuthorizationExceptionRuleUpdateRank = null as any;
utilities.lazyLoad(exports, ["AuthorizationExceptionRuleUpdateRank"], () => require("./authorizationExceptionRuleUpdateRank"));

export { AuthorizationGlobalExceptionRuleArgs, AuthorizationGlobalExceptionRuleState } from "./authorizationGlobalExceptionRule";
export type AuthorizationGlobalExceptionRule = import("./authorizationGlobalExceptionRule").AuthorizationGlobalExceptionRule;
export const AuthorizationGlobalExceptionRule: typeof import("./authorizationGlobalExceptionRule").AuthorizationGlobalExceptionRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationGlobalExceptionRule"], () => require("./authorizationGlobalExceptionRule"));

export { AuthorizationGlobalExceptionRuleUpdateRankArgs, AuthorizationGlobalExceptionRuleUpdateRankState } from "./authorizationGlobalExceptionRuleUpdateRank";
export type AuthorizationGlobalExceptionRuleUpdateRank = import("./authorizationGlobalExceptionRuleUpdateRank").AuthorizationGlobalExceptionRuleUpdateRank;
export const AuthorizationGlobalExceptionRuleUpdateRank: typeof import("./authorizationGlobalExceptionRuleUpdateRank").AuthorizationGlobalExceptionRuleUpdateRank = null as any;
utilities.lazyLoad(exports, ["AuthorizationGlobalExceptionRuleUpdateRank"], () => require("./authorizationGlobalExceptionRuleUpdateRank"));

export { AuthorizationProfileArgs, AuthorizationProfileState } from "./authorizationProfile";
export type AuthorizationProfile = import("./authorizationProfile").AuthorizationProfile;
export const AuthorizationProfile: typeof import("./authorizationProfile").AuthorizationProfile = null as any;
utilities.lazyLoad(exports, ["AuthorizationProfile"], () => require("./authorizationProfile"));

export { AuthorizationRuleArgs, AuthorizationRuleState } from "./authorizationRule";
export type AuthorizationRule = import("./authorizationRule").AuthorizationRule;
export const AuthorizationRule: typeof import("./authorizationRule").AuthorizationRule = null as any;
utilities.lazyLoad(exports, ["AuthorizationRule"], () => require("./authorizationRule"));

export { AuthorizationRuleUpdateRankArgs, AuthorizationRuleUpdateRankState } from "./authorizationRuleUpdateRank";
export type AuthorizationRuleUpdateRank = import("./authorizationRuleUpdateRank").AuthorizationRuleUpdateRank;
export const AuthorizationRuleUpdateRank: typeof import("./authorizationRuleUpdateRank").AuthorizationRuleUpdateRank = null as any;
utilities.lazyLoad(exports, ["AuthorizationRuleUpdateRank"], () => require("./authorizationRuleUpdateRank"));

export { ConditionArgs, ConditionState } from "./condition";
export type Condition = import("./condition").Condition;
export const Condition: typeof import("./condition").Condition = null as any;
utilities.lazyLoad(exports, ["Condition"], () => require("./condition"));

export { DictionaryArgs, DictionaryState } from "./dictionary";
export type Dictionary = import("./dictionary").Dictionary;
export const Dictionary: typeof import("./dictionary").Dictionary = null as any;
utilities.lazyLoad(exports, ["Dictionary"], () => require("./dictionary"));

export { DownloadableAclArgs, DownloadableAclState } from "./downloadableAcl";
export type DownloadableAcl = import("./downloadableAcl").DownloadableAcl;
export const DownloadableAcl: typeof import("./downloadableAcl").DownloadableAcl = null as any;
utilities.lazyLoad(exports, ["DownloadableAcl"], () => require("./downloadableAcl"));

export { GetAllowedProtocolsArgs, GetAllowedProtocolsResult, GetAllowedProtocolsOutputArgs } from "./getAllowedProtocols";
export const getAllowedProtocols: typeof import("./getAllowedProtocols").getAllowedProtocols = null as any;
export const getAllowedProtocolsOutput: typeof import("./getAllowedProtocols").getAllowedProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowedProtocols","getAllowedProtocolsOutput"], () => require("./getAllowedProtocols"));

export { GetAuthenticationRuleArgs, GetAuthenticationRuleResult, GetAuthenticationRuleOutputArgs } from "./getAuthenticationRule";
export const getAuthenticationRule: typeof import("./getAuthenticationRule").getAuthenticationRule = null as any;
export const getAuthenticationRuleOutput: typeof import("./getAuthenticationRule").getAuthenticationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationRule","getAuthenticationRuleOutput"], () => require("./getAuthenticationRule"));

export { GetAuthorizationExceptionRuleArgs, GetAuthorizationExceptionRuleResult, GetAuthorizationExceptionRuleOutputArgs } from "./getAuthorizationExceptionRule";
export const getAuthorizationExceptionRule: typeof import("./getAuthorizationExceptionRule").getAuthorizationExceptionRule = null as any;
export const getAuthorizationExceptionRuleOutput: typeof import("./getAuthorizationExceptionRule").getAuthorizationExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationExceptionRule","getAuthorizationExceptionRuleOutput"], () => require("./getAuthorizationExceptionRule"));

export { GetAuthorizationGlobalExceptionRuleArgs, GetAuthorizationGlobalExceptionRuleResult, GetAuthorizationGlobalExceptionRuleOutputArgs } from "./getAuthorizationGlobalExceptionRule";
export const getAuthorizationGlobalExceptionRule: typeof import("./getAuthorizationGlobalExceptionRule").getAuthorizationGlobalExceptionRule = null as any;
export const getAuthorizationGlobalExceptionRuleOutput: typeof import("./getAuthorizationGlobalExceptionRule").getAuthorizationGlobalExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationGlobalExceptionRule","getAuthorizationGlobalExceptionRuleOutput"], () => require("./getAuthorizationGlobalExceptionRule"));

export { GetAuthorizationProfileArgs, GetAuthorizationProfileResult, GetAuthorizationProfileOutputArgs } from "./getAuthorizationProfile";
export const getAuthorizationProfile: typeof import("./getAuthorizationProfile").getAuthorizationProfile = null as any;
export const getAuthorizationProfileOutput: typeof import("./getAuthorizationProfile").getAuthorizationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationProfile","getAuthorizationProfileOutput"], () => require("./getAuthorizationProfile"));

export { GetAuthorizationRuleArgs, GetAuthorizationRuleResult, GetAuthorizationRuleOutputArgs } from "./getAuthorizationRule";
export const getAuthorizationRule: typeof import("./getAuthorizationRule").getAuthorizationRule = null as any;
export const getAuthorizationRuleOutput: typeof import("./getAuthorizationRule").getAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationRule","getAuthorizationRuleOutput"], () => require("./getAuthorizationRule"));

export { GetConditionArgs, GetConditionResult, GetConditionOutputArgs } from "./getCondition";
export const getCondition: typeof import("./getCondition").getCondition = null as any;
export const getConditionOutput: typeof import("./getCondition").getConditionOutput = null as any;
utilities.lazyLoad(exports, ["getCondition","getConditionOutput"], () => require("./getCondition"));

export { GetDictionaryArgs, GetDictionaryResult, GetDictionaryOutputArgs } from "./getDictionary";
export const getDictionary: typeof import("./getDictionary").getDictionary = null as any;
export const getDictionaryOutput: typeof import("./getDictionary").getDictionaryOutput = null as any;
utilities.lazyLoad(exports, ["getDictionary","getDictionaryOutput"], () => require("./getDictionary"));

export { GetDownloadableAclArgs, GetDownloadableAclResult, GetDownloadableAclOutputArgs } from "./getDownloadableAcl";
export const getDownloadableAcl: typeof import("./getDownloadableAcl").getDownloadableAcl = null as any;
export const getDownloadableAclOutput: typeof import("./getDownloadableAcl").getDownloadableAclOutput = null as any;
utilities.lazyLoad(exports, ["getDownloadableAcl","getDownloadableAclOutput"], () => require("./getDownloadableAcl"));

export { GetPolicySetArgs, GetPolicySetResult, GetPolicySetOutputArgs } from "./getPolicySet";
export const getPolicySet: typeof import("./getPolicySet").getPolicySet = null as any;
export const getPolicySetOutput: typeof import("./getPolicySet").getPolicySetOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySet","getPolicySetOutput"], () => require("./getPolicySet"));

export { GetTimeAndDateConditionArgs, GetTimeAndDateConditionResult, GetTimeAndDateConditionOutputArgs } from "./getTimeAndDateCondition";
export const getTimeAndDateCondition: typeof import("./getTimeAndDateCondition").getTimeAndDateCondition = null as any;
export const getTimeAndDateConditionOutput: typeof import("./getTimeAndDateCondition").getTimeAndDateConditionOutput = null as any;
utilities.lazyLoad(exports, ["getTimeAndDateCondition","getTimeAndDateConditionOutput"], () => require("./getTimeAndDateCondition"));

export { PolicySetArgs, PolicySetState } from "./policySet";
export type PolicySet = import("./policySet").PolicySet;
export const PolicySet: typeof import("./policySet").PolicySet = null as any;
utilities.lazyLoad(exports, ["PolicySet"], () => require("./policySet"));

export { PolicySetUpdateRankArgs, PolicySetUpdateRankState } from "./policySetUpdateRank";
export type PolicySetUpdateRank = import("./policySetUpdateRank").PolicySetUpdateRank;
export const PolicySetUpdateRank: typeof import("./policySetUpdateRank").PolicySetUpdateRank = null as any;
utilities.lazyLoad(exports, ["PolicySetUpdateRank"], () => require("./policySetUpdateRank"));

export { TimeAndDateConditionArgs, TimeAndDateConditionState } from "./timeAndDateCondition";
export type TimeAndDateCondition = import("./timeAndDateCondition").TimeAndDateCondition;
export const TimeAndDateCondition: typeof import("./timeAndDateCondition").TimeAndDateCondition = null as any;
utilities.lazyLoad(exports, ["TimeAndDateCondition"], () => require("./timeAndDateCondition"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ise:networkaccess/allowedProtocols:AllowedProtocols":
                return new AllowedProtocols(name, <any>undefined, { urn })
            case "ise:networkaccess/authenticationRule:AuthenticationRule":
                return new AuthenticationRule(name, <any>undefined, { urn })
            case "ise:networkaccess/authenticationRuleUpdateRank:AuthenticationRuleUpdateRank":
                return new AuthenticationRuleUpdateRank(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationExceptionRule:AuthorizationExceptionRule":
                return new AuthorizationExceptionRule(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationExceptionRuleUpdateRank:AuthorizationExceptionRuleUpdateRank":
                return new AuthorizationExceptionRuleUpdateRank(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationGlobalExceptionRule:AuthorizationGlobalExceptionRule":
                return new AuthorizationGlobalExceptionRule(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationGlobalExceptionRuleUpdateRank:AuthorizationGlobalExceptionRuleUpdateRank":
                return new AuthorizationGlobalExceptionRuleUpdateRank(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationProfile:AuthorizationProfile":
                return new AuthorizationProfile(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationRule:AuthorizationRule":
                return new AuthorizationRule(name, <any>undefined, { urn })
            case "ise:networkaccess/authorizationRuleUpdateRank:AuthorizationRuleUpdateRank":
                return new AuthorizationRuleUpdateRank(name, <any>undefined, { urn })
            case "ise:networkaccess/condition:Condition":
                return new Condition(name, <any>undefined, { urn })
            case "ise:networkaccess/dictionary:Dictionary":
                return new Dictionary(name, <any>undefined, { urn })
            case "ise:networkaccess/downloadableAcl:DownloadableAcl":
                return new DownloadableAcl(name, <any>undefined, { urn })
            case "ise:networkaccess/policySet:PolicySet":
                return new PolicySet(name, <any>undefined, { urn })
            case "ise:networkaccess/policySetUpdateRank:PolicySetUpdateRank":
                return new PolicySetUpdateRank(name, <any>undefined, { urn })
            case "ise:networkaccess/timeAndDateCondition:TimeAndDateCondition":
                return new TimeAndDateCondition(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ise", "networkaccess/allowedProtocols", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authenticationRule", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authenticationRuleUpdateRank", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationExceptionRuleUpdateRank", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationGlobalExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationGlobalExceptionRuleUpdateRank", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationProfile", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationRule", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/authorizationRuleUpdateRank", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/condition", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/dictionary", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/downloadableAcl", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/policySet", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/policySetUpdateRank", _module)
pulumi.runtime.registerResourceModule("ise", "networkaccess/timeAndDateCondition", _module)
