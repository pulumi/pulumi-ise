// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource can manage a Network Access Condition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.networkaccess.Condition("example", {
 *     name: "Cond1",
 *     description: "My description",
 *     conditionType: "LibraryConditionAttributes",
 *     isNegate: false,
 *     attributeName: "EapAuthentication",
 *     attributeValue: "EAP-TLS",
 *     dictionaryName: "Network Access",
 *     operator: "equals",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import ise:networkaccess/condition:Condition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class Condition extends pulumi.CustomResource {
    /**
     * Get an existing Condition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConditionState, opts?: pulumi.CustomResourceOptions): Condition {
        return new Condition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:networkaccess/condition:Condition';

    /**
     * Returns true if the given object is an instance of Condition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Condition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Condition.__pulumiType;
    }

    /**
     * Dictionary attribute name
     */
    declare public readonly attributeName: pulumi.Output<string | undefined>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    declare public readonly attributeValue: pulumi.Output<string | undefined>;
    /**
     * List of child conditions. `conditionType` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
     */
    declare public readonly childrens: pulumi.Output<outputs.networkaccess.ConditionChildren[] | undefined>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `LibraryConditionAndBlock`, `LibraryConditionAttributes`, `LibraryConditionOrBlock`
     */
    declare public readonly conditionType: pulumi.Output<string>;
    /**
     * Condition description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Dictionary name
     */
    declare public readonly dictionaryName: pulumi.Output<string | undefined>;
    /**
     * Dictionary value
     */
    declare public readonly dictionaryValue: pulumi.Output<string | undefined>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    declare public readonly isNegate: pulumi.Output<boolean | undefined>;
    /**
     * Condition name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    declare public readonly operator: pulumi.Output<string | undefined>;

    /**
     * Create a Condition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConditionArgs | ConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConditionState | undefined;
            resourceInputs["attributeName"] = state?.attributeName;
            resourceInputs["attributeValue"] = state?.attributeValue;
            resourceInputs["childrens"] = state?.childrens;
            resourceInputs["conditionType"] = state?.conditionType;
            resourceInputs["description"] = state?.description;
            resourceInputs["dictionaryName"] = state?.dictionaryName;
            resourceInputs["dictionaryValue"] = state?.dictionaryValue;
            resourceInputs["isNegate"] = state?.isNegate;
            resourceInputs["name"] = state?.name;
            resourceInputs["operator"] = state?.operator;
        } else {
            const args = argsOrState as ConditionArgs | undefined;
            if (args?.conditionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'conditionType'");
            }
            resourceInputs["attributeName"] = args?.attributeName;
            resourceInputs["attributeValue"] = args?.attributeValue;
            resourceInputs["childrens"] = args?.childrens;
            resourceInputs["conditionType"] = args?.conditionType;
            resourceInputs["description"] = args?.description;
            resourceInputs["dictionaryName"] = args?.dictionaryName;
            resourceInputs["dictionaryValue"] = args?.dictionaryValue;
            resourceInputs["isNegate"] = args?.isNegate;
            resourceInputs["name"] = args?.name;
            resourceInputs["operator"] = args?.operator;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Condition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Condition resources.
 */
export interface ConditionState {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `conditionType` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.networkaccess.ConditionChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `LibraryConditionAndBlock`, `LibraryConditionAttributes`, `LibraryConditionOrBlock`
     */
    conditionType?: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Condition resource.
 */
export interface ConditionArgs {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `conditionType` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.networkaccess.ConditionChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `LibraryConditionAndBlock`, `LibraryConditionAttributes`, `LibraryConditionOrBlock`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}
