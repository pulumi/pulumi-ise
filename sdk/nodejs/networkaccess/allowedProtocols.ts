// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can manage an allowed protocols policy element.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.networkaccess.AllowedProtocols("example", {
 *     name: "Protocols1",
 *     description: "My allowed protocols",
 *     processHostLookup: true,
 *     allowPapAscii: true,
 *     allowChap: true,
 *     allowMsChapV1: true,
 *     allowMsChapV2: true,
 *     allowEapMd5: true,
 *     allowLeap: true,
 *     allowEapTls: true,
 *     allowEapTtls: true,
 *     allowEapFast: true,
 *     allowPeap: true,
 *     allowTeap: true,
 *     allowPreferredEapProtocol: true,
 *     preferredEapProtocol: "LEAP",
 *     eapTlsLBit: true,
 *     allowWeakCiphersForEap: true,
 *     requireMessageAuth: true,
 *     eapTlsAllowAuthOfExpiredCerts: true,
 *     eapTlsEnableStatelessSessionResume: true,
 *     eapTlsSessionTicketTtl: 5,
 *     eapTlsSessionTicketTtlUnit: "DAYS",
 *     eapTlsSessionTicketPercentage: 5,
 *     peapAllowPeapEapMsChapV2: true,
 *     peapAllowPeapEapMsChapV2PwdChange: true,
 *     peapAllowPeapEapMsChapV2PwdChangeRetries: 3,
 *     peapAllowPeapEapGtc: true,
 *     peapAllowPeapEapGtcPwdChange: true,
 *     peapAllowPeapEapGtcPwdChangeRetries: 3,
 *     peapAllowPeapEapTls: true,
 *     peapAllowPeapEapTlsAuthOfExpiredCerts: true,
 *     requireCryptobinding: true,
 *     peapPeapV0: true,
 *     eapTtlsPapAscii: true,
 *     eapTtlsChap: true,
 *     eapTtlsMsChapV1: true,
 *     eapTtlsMsChapV2: true,
 *     eapTtlsEapMd5: true,
 *     eapTtlsEapMsChapV2: true,
 *     eapTtlsEapMsChapV2PwdChange: true,
 *     eapTtlsEapMsChapV2PwdChangeRetries: 3,
 *     eapFastEapMsChapV2: true,
 *     eapFastEapMsChapV2PwdChange: true,
 *     eapFastEapMsChapV2PwdChangeRetries: 3,
 *     eapFastEapGtc: true,
 *     eapFastEapGtcPwdChange: true,
 *     eapFastEapGtcPwdChangeRetries: 3,
 *     eapFastEapTls: true,
 *     eapFastEapTlsAuthOfExpiredCerts: true,
 *     eapFastEnableEapChaining: true,
 *     eapFastUsePacs: true,
 *     eapFastPacsTunnelPacTtl: 5,
 *     eapFastPacsTunnelPacTtlUnit: "DAYS",
 *     eapFastPacsUseProactivePacUpdatePercentage: 5,
 *     eapFastPacsAllowAnonymousProvisioning: true,
 *     eapFastPacsAllowAuthenticatedProvisioning: true,
 *     eapFastPacsServerReturns: true,
 *     eapFastPacsAllowClientCert: true,
 *     eapFastPacsAllowMachineAuthentication: true,
 *     eapFastPacsMachinePacTtl: 5,
 *     eapFastPacsMachinePacTtlUnit: "DAYS",
 *     eapFastPacsStatelessSessionResume: true,
 *     eapFastPacsAuthorizationPacTtl: 5,
 *     eapFastPacsAuthorizationPacTtlUnit: "HOURS",
 *     teapEapMsChapV2: true,
 *     teapEapMsChapV2PwdChange: true,
 *     teapEapMsChapV2PwdChangeRetries: 3,
 *     teapEapTls: true,
 *     teapEapTlsAuthOfExpiredCerts: true,
 *     teapEapAcceptClientCertDuringTunnelEst: true,
 *     teapEapChaining: true,
 *     teapDowngradeMsk: true,
 *     teapRequestBasicPwdAuth: true,
 *     allow5g: true,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import ise:networkaccess/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class AllowedProtocols extends pulumi.CustomResource {
    /**
     * Get an existing AllowedProtocols resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AllowedProtocolsState, opts?: pulumi.CustomResourceOptions): AllowedProtocols {
        return new AllowedProtocols(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:networkaccess/allowedProtocols:AllowedProtocols';

    /**
     * Returns true if the given object is an instance of AllowedProtocols.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AllowedProtocols {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AllowedProtocols.__pulumiType;
    }

    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    declare public readonly allow5g: pulumi.Output<boolean | undefined>;
    /**
     * Allow CHAP
     */
    declare public readonly allowChap: pulumi.Output<boolean>;
    /**
     * Allow EAP Fast
     */
    declare public readonly allowEapFast: pulumi.Output<boolean>;
    /**
     * Allow EAP MD5
     */
    declare public readonly allowEapMd5: pulumi.Output<boolean>;
    /**
     * Allow EAP TLS
     */
    declare public readonly allowEapTls: pulumi.Output<boolean>;
    /**
     * Allow EAP TTLS
     */
    declare public readonly allowEapTtls: pulumi.Output<boolean>;
    /**
     * Allow LEAP
     */
    declare public readonly allowLeap: pulumi.Output<boolean>;
    /**
     * Allow MS CHAP v1
     */
    declare public readonly allowMsChapV1: pulumi.Output<boolean>;
    /**
     * Allow MS CHAP v2
     */
    declare public readonly allowMsChapV2: pulumi.Output<boolean>;
    /**
     * Allow PAP ASCII
     */
    declare public readonly allowPapAscii: pulumi.Output<boolean>;
    /**
     * Allow PEAP
     */
    declare public readonly allowPeap: pulumi.Output<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    declare public readonly allowPreferredEapProtocol: pulumi.Output<boolean>;
    /**
     * Allow TEAP
     */
    declare public readonly allowTeap: pulumi.Output<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    declare public readonly allowWeakCiphersForEap: pulumi.Output<boolean>;
    /**
     * Description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    declare public readonly eapFastAcceptClientCert: pulumi.Output<boolean | undefined>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    declare public readonly eapFastAllowMachineAuthentication: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP GTC
     */
    declare public readonly eapFastEapGtc: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    declare public readonly eapFastEapGtcPwdChange: pulumi.Output<boolean | undefined>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly eapFastEapGtcPwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    declare public readonly eapFastEapMsChapV2: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    declare public readonly eapFastEapMsChapV2PwdChange: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly eapFastEapMsChapV2PwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow EAP TLS
     */
    declare public readonly eapFastEapTls: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    declare public readonly eapFastEapTlsAuthOfExpiredCerts: pulumi.Output<boolean | undefined>;
    /**
     * Enable EAP chaining
     */
    declare public readonly eapFastEnableEapChaining: pulumi.Output<boolean | undefined>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    declare public readonly eapFastPacsAllowAnonymousProvisioning: pulumi.Output<boolean | undefined>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    declare public readonly eapFastPacsAllowAuthenticatedProvisioning: pulumi.Output<boolean | undefined>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    declare public readonly eapFastPacsAllowClientCert: pulumi.Output<boolean | undefined>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    declare public readonly eapFastPacsAllowMachineAuthentication: pulumi.Output<boolean | undefined>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    declare public readonly eapFastPacsAuthorizationPacTtl: pulumi.Output<number | undefined>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    declare public readonly eapFastPacsAuthorizationPacTtlUnit: pulumi.Output<string | undefined>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    declare public readonly eapFastPacsMachinePacTtl: pulumi.Output<number | undefined>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    declare public readonly eapFastPacsMachinePacTtlUnit: pulumi.Output<string | undefined>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    declare public readonly eapFastPacsServerReturns: pulumi.Output<boolean | undefined>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    declare public readonly eapFastPacsStatelessSessionResume: pulumi.Output<boolean | undefined>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    declare public readonly eapFastPacsTunnelPacTtl: pulumi.Output<number | undefined>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    declare public readonly eapFastPacsTunnelPacTtlUnit: pulumi.Output<string | undefined>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
     *   - Range: `1`-`100`
     */
    declare public readonly eapFastPacsUseProactivePacUpdatePercentage: pulumi.Output<number | undefined>;
    /**
     * Use PACs
     */
    declare public readonly eapFastUsePacs: pulumi.Output<boolean | undefined>;
    /**
     * Allow authentication of expired certificates
     */
    declare public readonly eapTlsAllowAuthOfExpiredCerts: pulumi.Output<boolean | undefined>;
    /**
     * Enable stateless session resume
     */
    declare public readonly eapTlsEnableStatelessSessionResume: pulumi.Output<boolean | undefined>;
    /**
     * EAP TLS L-Bit
     */
    declare public readonly eapTlsLBit: pulumi.Output<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Range: `1`-`100`
     */
    declare public readonly eapTlsSessionTicketPercentage: pulumi.Output<number | undefined>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    declare public readonly eapTlsSessionTicketTtl: pulumi.Output<number | undefined>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    declare public readonly eapTlsSessionTicketTtlUnit: pulumi.Output<string | undefined>;
    /**
     * Allow CHAP
     */
    declare public readonly eapTtlsChap: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MD5
     */
    declare public readonly eapTtlsEapMd5: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    declare public readonly eapTtlsEapMsChapV2: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    declare public readonly eapTtlsEapMsChapV2PwdChange: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly eapTtlsEapMsChapV2PwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow MS CHAP v1
     */
    declare public readonly eapTtlsMsChapV1: pulumi.Output<boolean | undefined>;
    /**
     * Allow MS CHAP v2
     */
    declare public readonly eapTtlsMsChapV2: pulumi.Output<boolean | undefined>;
    /**
     * Allow PAP ASCII
     */
    declare public readonly eapTtlsPapAscii: pulumi.Output<boolean | undefined>;
    /**
     * The name of the allowed protocols
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Allow PEAP EAP GTC
     */
    declare public readonly peapAllowPeapEapGtc: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    declare public readonly peapAllowPeapEapGtcPwdChange: pulumi.Output<boolean | undefined>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly peapAllowPeapEapGtcPwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    declare public readonly peapAllowPeapEapMsChapV2: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    declare public readonly peapAllowPeapEapMsChapV2PwdChange: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly peapAllowPeapEapMsChapV2PwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow PEAP EAP TLS
     */
    declare public readonly peapAllowPeapEapTls: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    declare public readonly peapAllowPeapEapTlsAuthOfExpiredCerts: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP v0
     */
    declare public readonly peapPeapV0: pulumi.Output<boolean | undefined>;
    /**
     * Preferred EAP protocol
     *   - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    declare public readonly preferredEapProtocol: pulumi.Output<string | undefined>;
    /**
     * Process host lookup
     */
    declare public readonly processHostLookup: pulumi.Output<boolean>;
    /**
     * Require cryptobinding
     */
    declare public readonly requireCryptobinding: pulumi.Output<boolean | undefined>;
    /**
     * Require message authentication
     */
    declare public readonly requireMessageAuth: pulumi.Output<boolean>;
    /**
     * Allow downgrade to MSK
     */
    declare public readonly teapDowngradeMsk: pulumi.Output<boolean | undefined>;
    /**
     * Accept client certificate during tunnel establishment
     */
    declare public readonly teapEapAcceptClientCertDuringTunnelEst: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP chaining
     */
    declare public readonly teapEapChaining: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    declare public readonly teapEapMsChapV2: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    declare public readonly teapEapMsChapV2PwdChange: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    declare public readonly teapEapMsChapV2PwdChangeRetries: pulumi.Output<number | undefined>;
    /**
     * Allow EAP TLS
     */
    declare public readonly teapEapTls: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    declare public readonly teapEapTlsAuthOfExpiredCerts: pulumi.Output<boolean | undefined>;
    /**
     * Request basic password authentication
     */
    declare public readonly teapRequestBasicPwdAuth: pulumi.Output<boolean | undefined>;

    /**
     * Create a AllowedProtocols resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AllowedProtocolsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AllowedProtocolsArgs | AllowedProtocolsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AllowedProtocolsState | undefined;
            resourceInputs["allow5g"] = state?.allow5g;
            resourceInputs["allowChap"] = state?.allowChap;
            resourceInputs["allowEapFast"] = state?.allowEapFast;
            resourceInputs["allowEapMd5"] = state?.allowEapMd5;
            resourceInputs["allowEapTls"] = state?.allowEapTls;
            resourceInputs["allowEapTtls"] = state?.allowEapTtls;
            resourceInputs["allowLeap"] = state?.allowLeap;
            resourceInputs["allowMsChapV1"] = state?.allowMsChapV1;
            resourceInputs["allowMsChapV2"] = state?.allowMsChapV2;
            resourceInputs["allowPapAscii"] = state?.allowPapAscii;
            resourceInputs["allowPeap"] = state?.allowPeap;
            resourceInputs["allowPreferredEapProtocol"] = state?.allowPreferredEapProtocol;
            resourceInputs["allowTeap"] = state?.allowTeap;
            resourceInputs["allowWeakCiphersForEap"] = state?.allowWeakCiphersForEap;
            resourceInputs["description"] = state?.description;
            resourceInputs["eapFastAcceptClientCert"] = state?.eapFastAcceptClientCert;
            resourceInputs["eapFastAllowMachineAuthentication"] = state?.eapFastAllowMachineAuthentication;
            resourceInputs["eapFastEapGtc"] = state?.eapFastEapGtc;
            resourceInputs["eapFastEapGtcPwdChange"] = state?.eapFastEapGtcPwdChange;
            resourceInputs["eapFastEapGtcPwdChangeRetries"] = state?.eapFastEapGtcPwdChangeRetries;
            resourceInputs["eapFastEapMsChapV2"] = state?.eapFastEapMsChapV2;
            resourceInputs["eapFastEapMsChapV2PwdChange"] = state?.eapFastEapMsChapV2PwdChange;
            resourceInputs["eapFastEapMsChapV2PwdChangeRetries"] = state?.eapFastEapMsChapV2PwdChangeRetries;
            resourceInputs["eapFastEapTls"] = state?.eapFastEapTls;
            resourceInputs["eapFastEapTlsAuthOfExpiredCerts"] = state?.eapFastEapTlsAuthOfExpiredCerts;
            resourceInputs["eapFastEnableEapChaining"] = state?.eapFastEnableEapChaining;
            resourceInputs["eapFastPacsAllowAnonymousProvisioning"] = state?.eapFastPacsAllowAnonymousProvisioning;
            resourceInputs["eapFastPacsAllowAuthenticatedProvisioning"] = state?.eapFastPacsAllowAuthenticatedProvisioning;
            resourceInputs["eapFastPacsAllowClientCert"] = state?.eapFastPacsAllowClientCert;
            resourceInputs["eapFastPacsAllowMachineAuthentication"] = state?.eapFastPacsAllowMachineAuthentication;
            resourceInputs["eapFastPacsAuthorizationPacTtl"] = state?.eapFastPacsAuthorizationPacTtl;
            resourceInputs["eapFastPacsAuthorizationPacTtlUnit"] = state?.eapFastPacsAuthorizationPacTtlUnit;
            resourceInputs["eapFastPacsMachinePacTtl"] = state?.eapFastPacsMachinePacTtl;
            resourceInputs["eapFastPacsMachinePacTtlUnit"] = state?.eapFastPacsMachinePacTtlUnit;
            resourceInputs["eapFastPacsServerReturns"] = state?.eapFastPacsServerReturns;
            resourceInputs["eapFastPacsStatelessSessionResume"] = state?.eapFastPacsStatelessSessionResume;
            resourceInputs["eapFastPacsTunnelPacTtl"] = state?.eapFastPacsTunnelPacTtl;
            resourceInputs["eapFastPacsTunnelPacTtlUnit"] = state?.eapFastPacsTunnelPacTtlUnit;
            resourceInputs["eapFastPacsUseProactivePacUpdatePercentage"] = state?.eapFastPacsUseProactivePacUpdatePercentage;
            resourceInputs["eapFastUsePacs"] = state?.eapFastUsePacs;
            resourceInputs["eapTlsAllowAuthOfExpiredCerts"] = state?.eapTlsAllowAuthOfExpiredCerts;
            resourceInputs["eapTlsEnableStatelessSessionResume"] = state?.eapTlsEnableStatelessSessionResume;
            resourceInputs["eapTlsLBit"] = state?.eapTlsLBit;
            resourceInputs["eapTlsSessionTicketPercentage"] = state?.eapTlsSessionTicketPercentage;
            resourceInputs["eapTlsSessionTicketTtl"] = state?.eapTlsSessionTicketTtl;
            resourceInputs["eapTlsSessionTicketTtlUnit"] = state?.eapTlsSessionTicketTtlUnit;
            resourceInputs["eapTtlsChap"] = state?.eapTtlsChap;
            resourceInputs["eapTtlsEapMd5"] = state?.eapTtlsEapMd5;
            resourceInputs["eapTtlsEapMsChapV2"] = state?.eapTtlsEapMsChapV2;
            resourceInputs["eapTtlsEapMsChapV2PwdChange"] = state?.eapTtlsEapMsChapV2PwdChange;
            resourceInputs["eapTtlsEapMsChapV2PwdChangeRetries"] = state?.eapTtlsEapMsChapV2PwdChangeRetries;
            resourceInputs["eapTtlsMsChapV1"] = state?.eapTtlsMsChapV1;
            resourceInputs["eapTtlsMsChapV2"] = state?.eapTtlsMsChapV2;
            resourceInputs["eapTtlsPapAscii"] = state?.eapTtlsPapAscii;
            resourceInputs["name"] = state?.name;
            resourceInputs["peapAllowPeapEapGtc"] = state?.peapAllowPeapEapGtc;
            resourceInputs["peapAllowPeapEapGtcPwdChange"] = state?.peapAllowPeapEapGtcPwdChange;
            resourceInputs["peapAllowPeapEapGtcPwdChangeRetries"] = state?.peapAllowPeapEapGtcPwdChangeRetries;
            resourceInputs["peapAllowPeapEapMsChapV2"] = state?.peapAllowPeapEapMsChapV2;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChange"] = state?.peapAllowPeapEapMsChapV2PwdChange;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChangeRetries"] = state?.peapAllowPeapEapMsChapV2PwdChangeRetries;
            resourceInputs["peapAllowPeapEapTls"] = state?.peapAllowPeapEapTls;
            resourceInputs["peapAllowPeapEapTlsAuthOfExpiredCerts"] = state?.peapAllowPeapEapTlsAuthOfExpiredCerts;
            resourceInputs["peapPeapV0"] = state?.peapPeapV0;
            resourceInputs["preferredEapProtocol"] = state?.preferredEapProtocol;
            resourceInputs["processHostLookup"] = state?.processHostLookup;
            resourceInputs["requireCryptobinding"] = state?.requireCryptobinding;
            resourceInputs["requireMessageAuth"] = state?.requireMessageAuth;
            resourceInputs["teapDowngradeMsk"] = state?.teapDowngradeMsk;
            resourceInputs["teapEapAcceptClientCertDuringTunnelEst"] = state?.teapEapAcceptClientCertDuringTunnelEst;
            resourceInputs["teapEapChaining"] = state?.teapEapChaining;
            resourceInputs["teapEapMsChapV2"] = state?.teapEapMsChapV2;
            resourceInputs["teapEapMsChapV2PwdChange"] = state?.teapEapMsChapV2PwdChange;
            resourceInputs["teapEapMsChapV2PwdChangeRetries"] = state?.teapEapMsChapV2PwdChangeRetries;
            resourceInputs["teapEapTls"] = state?.teapEapTls;
            resourceInputs["teapEapTlsAuthOfExpiredCerts"] = state?.teapEapTlsAuthOfExpiredCerts;
            resourceInputs["teapRequestBasicPwdAuth"] = state?.teapRequestBasicPwdAuth;
        } else {
            const args = argsOrState as AllowedProtocolsArgs | undefined;
            if (args?.allowChap === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowChap'");
            }
            if (args?.allowEapFast === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowEapFast'");
            }
            if (args?.allowEapMd5 === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowEapMd5'");
            }
            if (args?.allowEapTls === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowEapTls'");
            }
            if (args?.allowEapTtls === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowEapTtls'");
            }
            if (args?.allowLeap === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowLeap'");
            }
            if (args?.allowMsChapV1 === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowMsChapV1'");
            }
            if (args?.allowMsChapV2 === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowMsChapV2'");
            }
            if (args?.allowPapAscii === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowPapAscii'");
            }
            if (args?.allowPeap === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowPeap'");
            }
            if (args?.allowPreferredEapProtocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowPreferredEapProtocol'");
            }
            if (args?.allowTeap === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowTeap'");
            }
            if (args?.allowWeakCiphersForEap === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowWeakCiphersForEap'");
            }
            if (args?.eapTlsLBit === undefined && !opts.urn) {
                throw new Error("Missing required property 'eapTlsLBit'");
            }
            if (args?.processHostLookup === undefined && !opts.urn) {
                throw new Error("Missing required property 'processHostLookup'");
            }
            if (args?.requireMessageAuth === undefined && !opts.urn) {
                throw new Error("Missing required property 'requireMessageAuth'");
            }
            resourceInputs["allow5g"] = args?.allow5g;
            resourceInputs["allowChap"] = args?.allowChap;
            resourceInputs["allowEapFast"] = args?.allowEapFast;
            resourceInputs["allowEapMd5"] = args?.allowEapMd5;
            resourceInputs["allowEapTls"] = args?.allowEapTls;
            resourceInputs["allowEapTtls"] = args?.allowEapTtls;
            resourceInputs["allowLeap"] = args?.allowLeap;
            resourceInputs["allowMsChapV1"] = args?.allowMsChapV1;
            resourceInputs["allowMsChapV2"] = args?.allowMsChapV2;
            resourceInputs["allowPapAscii"] = args?.allowPapAscii;
            resourceInputs["allowPeap"] = args?.allowPeap;
            resourceInputs["allowPreferredEapProtocol"] = args?.allowPreferredEapProtocol;
            resourceInputs["allowTeap"] = args?.allowTeap;
            resourceInputs["allowWeakCiphersForEap"] = args?.allowWeakCiphersForEap;
            resourceInputs["description"] = args?.description;
            resourceInputs["eapFastAcceptClientCert"] = args?.eapFastAcceptClientCert;
            resourceInputs["eapFastAllowMachineAuthentication"] = args?.eapFastAllowMachineAuthentication;
            resourceInputs["eapFastEapGtc"] = args?.eapFastEapGtc;
            resourceInputs["eapFastEapGtcPwdChange"] = args?.eapFastEapGtcPwdChange;
            resourceInputs["eapFastEapGtcPwdChangeRetries"] = args?.eapFastEapGtcPwdChangeRetries;
            resourceInputs["eapFastEapMsChapV2"] = args?.eapFastEapMsChapV2;
            resourceInputs["eapFastEapMsChapV2PwdChange"] = args?.eapFastEapMsChapV2PwdChange;
            resourceInputs["eapFastEapMsChapV2PwdChangeRetries"] = args?.eapFastEapMsChapV2PwdChangeRetries;
            resourceInputs["eapFastEapTls"] = args?.eapFastEapTls;
            resourceInputs["eapFastEapTlsAuthOfExpiredCerts"] = args?.eapFastEapTlsAuthOfExpiredCerts;
            resourceInputs["eapFastEnableEapChaining"] = args?.eapFastEnableEapChaining;
            resourceInputs["eapFastPacsAllowAnonymousProvisioning"] = args?.eapFastPacsAllowAnonymousProvisioning;
            resourceInputs["eapFastPacsAllowAuthenticatedProvisioning"] = args?.eapFastPacsAllowAuthenticatedProvisioning;
            resourceInputs["eapFastPacsAllowClientCert"] = args?.eapFastPacsAllowClientCert;
            resourceInputs["eapFastPacsAllowMachineAuthentication"] = args?.eapFastPacsAllowMachineAuthentication;
            resourceInputs["eapFastPacsAuthorizationPacTtl"] = args?.eapFastPacsAuthorizationPacTtl;
            resourceInputs["eapFastPacsAuthorizationPacTtlUnit"] = args?.eapFastPacsAuthorizationPacTtlUnit;
            resourceInputs["eapFastPacsMachinePacTtl"] = args?.eapFastPacsMachinePacTtl;
            resourceInputs["eapFastPacsMachinePacTtlUnit"] = args?.eapFastPacsMachinePacTtlUnit;
            resourceInputs["eapFastPacsServerReturns"] = args?.eapFastPacsServerReturns;
            resourceInputs["eapFastPacsStatelessSessionResume"] = args?.eapFastPacsStatelessSessionResume;
            resourceInputs["eapFastPacsTunnelPacTtl"] = args?.eapFastPacsTunnelPacTtl;
            resourceInputs["eapFastPacsTunnelPacTtlUnit"] = args?.eapFastPacsTunnelPacTtlUnit;
            resourceInputs["eapFastPacsUseProactivePacUpdatePercentage"] = args?.eapFastPacsUseProactivePacUpdatePercentage;
            resourceInputs["eapFastUsePacs"] = args?.eapFastUsePacs;
            resourceInputs["eapTlsAllowAuthOfExpiredCerts"] = args?.eapTlsAllowAuthOfExpiredCerts;
            resourceInputs["eapTlsEnableStatelessSessionResume"] = args?.eapTlsEnableStatelessSessionResume;
            resourceInputs["eapTlsLBit"] = args?.eapTlsLBit;
            resourceInputs["eapTlsSessionTicketPercentage"] = args?.eapTlsSessionTicketPercentage;
            resourceInputs["eapTlsSessionTicketTtl"] = args?.eapTlsSessionTicketTtl;
            resourceInputs["eapTlsSessionTicketTtlUnit"] = args?.eapTlsSessionTicketTtlUnit;
            resourceInputs["eapTtlsChap"] = args?.eapTtlsChap;
            resourceInputs["eapTtlsEapMd5"] = args?.eapTtlsEapMd5;
            resourceInputs["eapTtlsEapMsChapV2"] = args?.eapTtlsEapMsChapV2;
            resourceInputs["eapTtlsEapMsChapV2PwdChange"] = args?.eapTtlsEapMsChapV2PwdChange;
            resourceInputs["eapTtlsEapMsChapV2PwdChangeRetries"] = args?.eapTtlsEapMsChapV2PwdChangeRetries;
            resourceInputs["eapTtlsMsChapV1"] = args?.eapTtlsMsChapV1;
            resourceInputs["eapTtlsMsChapV2"] = args?.eapTtlsMsChapV2;
            resourceInputs["eapTtlsPapAscii"] = args?.eapTtlsPapAscii;
            resourceInputs["name"] = args?.name;
            resourceInputs["peapAllowPeapEapGtc"] = args?.peapAllowPeapEapGtc;
            resourceInputs["peapAllowPeapEapGtcPwdChange"] = args?.peapAllowPeapEapGtcPwdChange;
            resourceInputs["peapAllowPeapEapGtcPwdChangeRetries"] = args?.peapAllowPeapEapGtcPwdChangeRetries;
            resourceInputs["peapAllowPeapEapMsChapV2"] = args?.peapAllowPeapEapMsChapV2;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChange"] = args?.peapAllowPeapEapMsChapV2PwdChange;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChangeRetries"] = args?.peapAllowPeapEapMsChapV2PwdChangeRetries;
            resourceInputs["peapAllowPeapEapTls"] = args?.peapAllowPeapEapTls;
            resourceInputs["peapAllowPeapEapTlsAuthOfExpiredCerts"] = args?.peapAllowPeapEapTlsAuthOfExpiredCerts;
            resourceInputs["peapPeapV0"] = args?.peapPeapV0;
            resourceInputs["preferredEapProtocol"] = args?.preferredEapProtocol;
            resourceInputs["processHostLookup"] = args?.processHostLookup;
            resourceInputs["requireCryptobinding"] = args?.requireCryptobinding;
            resourceInputs["requireMessageAuth"] = args?.requireMessageAuth;
            resourceInputs["teapDowngradeMsk"] = args?.teapDowngradeMsk;
            resourceInputs["teapEapAcceptClientCertDuringTunnelEst"] = args?.teapEapAcceptClientCertDuringTunnelEst;
            resourceInputs["teapEapChaining"] = args?.teapEapChaining;
            resourceInputs["teapEapMsChapV2"] = args?.teapEapMsChapV2;
            resourceInputs["teapEapMsChapV2PwdChange"] = args?.teapEapMsChapV2PwdChange;
            resourceInputs["teapEapMsChapV2PwdChangeRetries"] = args?.teapEapMsChapV2PwdChangeRetries;
            resourceInputs["teapEapTls"] = args?.teapEapTls;
            resourceInputs["teapEapTlsAuthOfExpiredCerts"] = args?.teapEapTlsAuthOfExpiredCerts;
            resourceInputs["teapRequestBasicPwdAuth"] = args?.teapRequestBasicPwdAuth;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AllowedProtocols.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AllowedProtocols resources.
 */
export interface AllowedProtocolsState {
    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    allow5g?: pulumi.Input<boolean>;
    /**
     * Allow CHAP
     */
    allowChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP Fast
     */
    allowEapFast?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    allowEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS
     */
    allowEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TTLS
     */
    allowEapTtls?: pulumi.Input<boolean>;
    /**
     * Allow LEAP
     */
    allowLeap?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    allowMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii?: pulumi.Input<boolean>;
    /**
     * Allow PEAP
     */
    allowPeap?: pulumi.Input<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    allowPreferredEapProtocol?: pulumi.Input<boolean>;
    /**
     * Allow TEAP
     */
    allowTeap?: pulumi.Input<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    allowWeakCiphersForEap?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAcceptClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC
     */
    eapFastEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    eapFastEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    eapFastEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapFastEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    eapFastEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    eapFastEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    eapFastEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    eapFastEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable EAP chaining
     */
    eapFastEnableEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAnonymousProvisioning?: pulumi.Input<boolean>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAuthenticatedProvisioning?: pulumi.Input<boolean>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsAllowClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    eapFastPacsAuthorizationPacTtl?: pulumi.Input<number>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsAuthorizationPacTtlUnit?: pulumi.Input<string>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    eapFastPacsMachinePacTtl?: pulumi.Input<number>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsMachinePacTtlUnit?: pulumi.Input<string>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsServerReturns?: pulumi.Input<boolean>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsTunnelPacTtl?: pulumi.Input<number>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsTunnelPacTtlUnit?: pulumi.Input<string>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
     *   - Range: `1`-`100`
     */
    eapFastPacsUseProactivePacUpdatePercentage?: pulumi.Input<number>;
    /**
     * Use PACs
     */
    eapFastUsePacs?: pulumi.Input<boolean>;
    /**
     * Allow authentication of expired certificates
     */
    eapTlsAllowAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable stateless session resume
     */
    eapTlsEnableStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * EAP TLS L-Bit
     */
    eapTlsLBit?: pulumi.Input<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Range: `1`-`100`
     */
    eapTlsSessionTicketPercentage?: pulumi.Input<number>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    eapTlsSessionTicketTtl?: pulumi.Input<number>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapTlsSessionTicketTtlUnit?: pulumi.Input<string>;
    /**
     * Allow CHAP
     */
    eapTtlsChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    eapTtlsEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapTtlsEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    eapTtlsEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    eapTtlsEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow MS CHAP v1
     */
    eapTtlsMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    eapTtlsMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    eapTtlsPapAscii?: pulumi.Input<boolean>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
    /**
     * Allow PEAP EAP GTC
     */
    peapAllowPeapEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    peapAllowPeapEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    peapAllowPeapEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    peapAllowPeapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    peapAllowPeapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    peapAllowPeapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP TLS
     */
    peapAllowPeapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    peapAllowPeapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Allow PEAP v0
     */
    peapPeapV0?: pulumi.Input<boolean>;
    /**
     * Preferred EAP protocol
     *   - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    preferredEapProtocol?: pulumi.Input<string>;
    /**
     * Process host lookup
     */
    processHostLookup?: pulumi.Input<boolean>;
    /**
     * Require cryptobinding
     */
    requireCryptobinding?: pulumi.Input<boolean>;
    /**
     * Require message authentication
     */
    requireMessageAuth?: pulumi.Input<boolean>;
    /**
     * Allow downgrade to MSK
     */
    teapDowngradeMsk?: pulumi.Input<boolean>;
    /**
     * Accept client certificate during tunnel establishment
     */
    teapEapAcceptClientCertDuringTunnelEst?: pulumi.Input<boolean>;
    /**
     * Allow EAP chaining
     */
    teapEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    teapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    teapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    teapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    teapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    teapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Request basic password authentication
     */
    teapRequestBasicPwdAuth?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AllowedProtocols resource.
 */
export interface AllowedProtocolsArgs {
    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    allow5g?: pulumi.Input<boolean>;
    /**
     * Allow CHAP
     */
    allowChap: pulumi.Input<boolean>;
    /**
     * Allow EAP Fast
     */
    allowEapFast: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    allowEapMd5: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS
     */
    allowEapTls: pulumi.Input<boolean>;
    /**
     * Allow EAP TTLS
     */
    allowEapTtls: pulumi.Input<boolean>;
    /**
     * Allow LEAP
     */
    allowLeap: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    allowMsChapV2: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii: pulumi.Input<boolean>;
    /**
     * Allow PEAP
     */
    allowPeap: pulumi.Input<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    allowPreferredEapProtocol: pulumi.Input<boolean>;
    /**
     * Allow TEAP
     */
    allowTeap: pulumi.Input<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    allowWeakCiphersForEap: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAcceptClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC
     */
    eapFastEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    eapFastEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    eapFastEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapFastEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    eapFastEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    eapFastEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    eapFastEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    eapFastEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable EAP chaining
     */
    eapFastEnableEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAnonymousProvisioning?: pulumi.Input<boolean>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAuthenticatedProvisioning?: pulumi.Input<boolean>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsAllowClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    eapFastPacsAuthorizationPacTtl?: pulumi.Input<number>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsAuthorizationPacTtlUnit?: pulumi.Input<string>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    eapFastPacsMachinePacTtl?: pulumi.Input<number>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsMachinePacTtlUnit?: pulumi.Input<string>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsServerReturns?: pulumi.Input<boolean>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsTunnelPacTtl?: pulumi.Input<number>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsTunnelPacTtlUnit?: pulumi.Input<string>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
     *   - Range: `1`-`100`
     */
    eapFastPacsUseProactivePacUpdatePercentage?: pulumi.Input<number>;
    /**
     * Use PACs
     */
    eapFastUsePacs?: pulumi.Input<boolean>;
    /**
     * Allow authentication of expired certificates
     */
    eapTlsAllowAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable stateless session resume
     */
    eapTlsEnableStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * EAP TLS L-Bit
     */
    eapTlsLBit: pulumi.Input<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Range: `1`-`100`
     */
    eapTlsSessionTicketPercentage?: pulumi.Input<number>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    eapTlsSessionTicketTtl?: pulumi.Input<number>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     *   - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapTlsSessionTicketTtlUnit?: pulumi.Input<string>;
    /**
     * Allow CHAP
     */
    eapTtlsChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    eapTtlsEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapTtlsEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    eapTtlsEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    eapTtlsEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow MS CHAP v1
     */
    eapTtlsMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    eapTtlsMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    eapTtlsPapAscii?: pulumi.Input<boolean>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
    /**
     * Allow PEAP EAP GTC
     */
    peapAllowPeapEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    peapAllowPeapEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
     *   - Range: `0`-`3`
     */
    peapAllowPeapEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    peapAllowPeapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    peapAllowPeapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    peapAllowPeapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP TLS
     */
    peapAllowPeapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    peapAllowPeapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Allow PEAP v0
     */
    peapPeapV0?: pulumi.Input<boolean>;
    /**
     * Preferred EAP protocol
     *   - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    preferredEapProtocol?: pulumi.Input<string>;
    /**
     * Process host lookup
     */
    processHostLookup: pulumi.Input<boolean>;
    /**
     * Require cryptobinding
     */
    requireCryptobinding?: pulumi.Input<boolean>;
    /**
     * Require message authentication
     */
    requireMessageAuth: pulumi.Input<boolean>;
    /**
     * Allow downgrade to MSK
     */
    teapDowngradeMsk?: pulumi.Input<boolean>;
    /**
     * Accept client certificate during tunnel establishment
     */
    teapEapAcceptClientCertDuringTunnelEst?: pulumi.Input<boolean>;
    /**
     * Allow EAP chaining
     */
    teapEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    teapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    teapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
     *   - Range: `0`-`3`
     */
    teapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    teapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    teapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Request basic password authentication
     */
    teapRequestBasicPwdAuth?: pulumi.Input<boolean>;
}
