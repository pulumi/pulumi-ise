// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can manage an allowed protocols policy element.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = new ise.networkaccess.AllowedProtocols("example", {
 *     name: "Protocols1",
 *     description: "My allowed protocols",
 *     processHostLookup: true,
 *     allowPapAscii: true,
 *     allowChap: true,
 *     allowMsChapV1: true,
 *     allowMsChapV2: true,
 *     allowEapMd5: true,
 *     allowLeap: true,
 *     allowEapTls: true,
 *     allowEapTtls: true,
 *     allowEapFast: true,
 *     allowPeap: true,
 *     allowTeap: true,
 *     allowPreferredEapProtocol: true,
 *     preferredEapProtocol: "LEAP",
 *     eapTlsLBit: true,
 *     allowWeakCiphersForEap: true,
 *     requireMessageAuth: true,
 *     eapTlsAllowAuthOfExpiredCerts: true,
 *     eapTlsEnableStatelessSessionResume: true,
 *     eapTlsSessionTicketTtl: 5,
 *     eapTlsSessionTicketTtlUnit: "DAYS",
 *     eapTlsSessionTicketPercentage: 5,
 *     peapAllowPeapEapMsChapV2: true,
 *     peapAllowPeapEapMsChapV2PwdChange: true,
 *     peapAllowPeapEapMsChapV2PwdChangeRetries: 3,
 *     peapAllowPeapEapGtc: true,
 *     peapAllowPeapEapGtcPwdChange: true,
 *     peapAllowPeapEapGtcPwdChangeRetries: 3,
 *     peapAllowPeapEapTls: true,
 *     peapAllowPeapEapTlsAuthOfExpiredCerts: true,
 *     requireCryptobinding: true,
 *     peapPeapV0: true,
 *     eapTtlsPapAscii: true,
 *     eapTtlsChap: true,
 *     eapTtlsMsChapV1: true,
 *     eapTtlsMsChapV2: true,
 *     eapTtlsEapMd5: true,
 *     eapTtlsEapMsChapV2: true,
 *     eapTtlsEapMsChapV2PwdChange: true,
 *     eapTtlsEapMsChapV2PwdChangeRetries: 3,
 *     eapFastEapMsChapV2: true,
 *     eapFastEapMsChapV2PwdChange: true,
 *     eapFastEapMsChapV2PwdChangeRetries: 3,
 *     eapFastEapGtc: true,
 *     eapFastEapGtcPwdChange: true,
 *     eapFastEapGtcPwdChangeRetries: 3,
 *     eapFastEapTls: true,
 *     eapFastEapTlsAuthOfExpiredCerts: true,
 *     eapFastEnableEapChaining: true,
 *     eapFastUsePacs: true,
 *     eapFastPacsTunnelPacTtl: 5,
 *     eapFastPacsTunnelPacTtlUnit: "DAYS",
 *     eapFastPacsUseProactivePacUpdatePercentage: 5,
 *     eapFastPacsAllowAnonymousProvisioning: true,
 *     eapFastPacsAllowAuthenticatedProvisioning: true,
 *     eapFastPacsServerReturns: true,
 *     eapFastPacsAllowClientCert: true,
 *     eapFastPacsAllowMachineAuthentication: true,
 *     eapFastPacsMachinePacTtl: 5,
 *     eapFastPacsMachinePacTtlUnit: "DAYS",
 *     eapFastPacsStatelessSessionResume: true,
 *     eapFastPacsAuthorizationPacTtl: 5,
 *     eapFastPacsAuthorizationPacTtlUnit: "HOURS",
 *     teapEapMsChapV2: true,
 *     teapEapMsChapV2PwdChange: true,
 *     teapEapMsChapV2PwdChangeRetries: 3,
 *     teapEapTls: true,
 *     teapEapTlsAuthOfExpiredCerts: true,
 *     teapEapAcceptClientCertDuringTunnelEst: true,
 *     teapEapChaining: true,
 *     teapDowngradeMsk: true,
 *     teapRequestBasicPwdAuth: true,
 *     allow5g: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ise:networkaccess/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
 * ```
 */
export class AllowedProtocols extends pulumi.CustomResource {
    /**
     * Get an existing AllowedProtocols resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AllowedProtocolsState, opts?: pulumi.CustomResourceOptions): AllowedProtocols {
        return new AllowedProtocols(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ise:networkaccess/allowedProtocols:AllowedProtocols';

    /**
     * Returns true if the given object is an instance of AllowedProtocols.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AllowedProtocols {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AllowedProtocols.__pulumiType;
    }

    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    public readonly allow5g!: pulumi.Output<boolean | undefined>;
    /**
     * Allow CHAP
     */
    public readonly allowChap!: pulumi.Output<boolean>;
    /**
     * Allow EAP Fast
     */
    public readonly allowEapFast!: pulumi.Output<boolean>;
    /**
     * Allow EAP MD5
     */
    public readonly allowEapMd5!: pulumi.Output<boolean>;
    /**
     * Allow EAP TLS
     */
    public readonly allowEapTls!: pulumi.Output<boolean>;
    /**
     * Allow EAP TTLS
     */
    public readonly allowEapTtls!: pulumi.Output<boolean>;
    /**
     * Allow LEAP
     */
    public readonly allowLeap!: pulumi.Output<boolean>;
    /**
     * Allow MS CHAP v1
     */
    public readonly allowMsChapV1!: pulumi.Output<boolean>;
    /**
     * Allow MS CHAP v2
     */
    public readonly allowMsChapV2!: pulumi.Output<boolean>;
    /**
     * Allow PAP ASCII
     */
    public readonly allowPapAscii!: pulumi.Output<boolean>;
    /**
     * Allow PEAP
     */
    public readonly allowPeap!: pulumi.Output<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    public readonly allowPreferredEapProtocol!: pulumi.Output<boolean>;
    /**
     * Allow TEAP
     */
    public readonly allowTeap!: pulumi.Output<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    public readonly allowWeakCiphersForEap!: pulumi.Output<boolean>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    public readonly eapFastAcceptClientCert!: pulumi.Output<boolean | undefined>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    public readonly eapFastAllowMachineAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP GTC
     */
    public readonly eapFastEapGtc!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    public readonly eapFastEapGtcPwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
     */
    public readonly eapFastEapGtcPwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    public readonly eapFastEapMsChapV2!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    public readonly eapFastEapMsChapV2PwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    public readonly eapFastEapMsChapV2PwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow EAP TLS
     */
    public readonly eapFastEapTls!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    public readonly eapFastEapTlsAuthOfExpiredCerts!: pulumi.Output<boolean | undefined>;
    /**
     * Enable EAP chaining
     */
    public readonly eapFastEnableEapChaining!: pulumi.Output<boolean | undefined>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    public readonly eapFastPacsAllowAnonymousProvisioning!: pulumi.Output<boolean | undefined>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    public readonly eapFastPacsAllowAuthenticatedProvisioning!: pulumi.Output<boolean | undefined>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    public readonly eapFastPacsAllowClientCert!: pulumi.Output<boolean | undefined>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    public readonly eapFastPacsAllowMachineAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    public readonly eapFastPacsAuthorizationPacTtl!: pulumi.Output<number | undefined>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    public readonly eapFastPacsAuthorizationPacTtlUnit!: pulumi.Output<string | undefined>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    public readonly eapFastPacsMachinePacTtl!: pulumi.Output<number | undefined>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    public readonly eapFastPacsMachinePacTtlUnit!: pulumi.Output<string | undefined>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if
     * `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    public readonly eapFastPacsServerReturns!: pulumi.Output<boolean | undefined>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    public readonly eapFastPacsStatelessSessionResume!: pulumi.Output<boolean | undefined>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    public readonly eapFastPacsTunnelPacTtl!: pulumi.Output<number | undefined>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
     * `HOURS`, `DAYS`, `WEEKS`
     */
    public readonly eapFastPacsTunnelPacTtlUnit!: pulumi.Output<string | undefined>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
     */
    public readonly eapFastPacsUseProactivePacUpdatePercentage!: pulumi.Output<number | undefined>;
    /**
     * Use PACs
     */
    public readonly eapFastUsePacs!: pulumi.Output<boolean | undefined>;
    /**
     * Allow authentication of expired certificates
     */
    public readonly eapTlsAllowAuthOfExpiredCerts!: pulumi.Output<boolean | undefined>;
    /**
     * Enable stateless session resume
     */
    public readonly eapTlsEnableStatelessSessionResume!: pulumi.Output<boolean | undefined>;
    /**
     * EAP TLS L-Bit
     */
    public readonly eapTlsLBit!: pulumi.Output<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
     */
    public readonly eapTlsSessionTicketPercentage!: pulumi.Output<number | undefined>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    public readonly eapTlsSessionTicketTtl!: pulumi.Output<number | undefined>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    public readonly eapTlsSessionTicketTtlUnit!: pulumi.Output<string | undefined>;
    /**
     * Allow CHAP
     */
    public readonly eapTtlsChap!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MD5
     */
    public readonly eapTtlsEapMd5!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    public readonly eapTtlsEapMsChapV2!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    public readonly eapTtlsEapMsChapV2PwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    public readonly eapTtlsEapMsChapV2PwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow MS CHAP v1
     */
    public readonly eapTtlsMsChapV1!: pulumi.Output<boolean | undefined>;
    /**
     * Allow MS CHAP v2
     */
    public readonly eapTtlsMsChapV2!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PAP ASCII
     */
    public readonly eapTtlsPapAscii!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the allowed protocols
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Allow PEAP EAP GTC
     */
    public readonly peapAllowPeapEapGtc!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    public readonly peapAllowPeapEapGtcPwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
     */
    public readonly peapAllowPeapEapGtcPwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    public readonly peapAllowPeapEapMsChapV2!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    public readonly peapAllowPeapEapMsChapV2PwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
     * `0`-`3`
     */
    public readonly peapAllowPeapEapMsChapV2PwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow PEAP EAP TLS
     */
    public readonly peapAllowPeapEapTls!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    public readonly peapAllowPeapEapTlsAuthOfExpiredCerts!: pulumi.Output<boolean | undefined>;
    /**
     * Allow PEAP v0
     */
    public readonly peapPeapV0!: pulumi.Output<boolean | undefined>;
    /**
     * Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    public readonly preferredEapProtocol!: pulumi.Output<string | undefined>;
    /**
     * Process host lookup
     */
    public readonly processHostLookup!: pulumi.Output<boolean>;
    /**
     * Require cryptobinding
     */
    public readonly requireCryptobinding!: pulumi.Output<boolean | undefined>;
    /**
     * Require message authentication
     */
    public readonly requireMessageAuth!: pulumi.Output<boolean>;
    /**
     * Allow downgrade to MSK
     */
    public readonly teapDowngradeMsk!: pulumi.Output<boolean | undefined>;
    /**
     * Accept client certificate during tunnel establishment
     */
    public readonly teapEapAcceptClientCertDuringTunnelEst!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP chaining
     */
    public readonly teapEapChaining!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2
     */
    public readonly teapEapMsChapV2!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    public readonly teapEapMsChapV2PwdChange!: pulumi.Output<boolean | undefined>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    public readonly teapEapMsChapV2PwdChangeRetries!: pulumi.Output<number | undefined>;
    /**
     * Allow EAP TLS
     */
    public readonly teapEapTls!: pulumi.Output<boolean | undefined>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    public readonly teapEapTlsAuthOfExpiredCerts!: pulumi.Output<boolean | undefined>;
    /**
     * Request basic password authentication
     */
    public readonly teapRequestBasicPwdAuth!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AllowedProtocols resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AllowedProtocolsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AllowedProtocolsArgs | AllowedProtocolsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AllowedProtocolsState | undefined;
            resourceInputs["allow5g"] = state ? state.allow5g : undefined;
            resourceInputs["allowChap"] = state ? state.allowChap : undefined;
            resourceInputs["allowEapFast"] = state ? state.allowEapFast : undefined;
            resourceInputs["allowEapMd5"] = state ? state.allowEapMd5 : undefined;
            resourceInputs["allowEapTls"] = state ? state.allowEapTls : undefined;
            resourceInputs["allowEapTtls"] = state ? state.allowEapTtls : undefined;
            resourceInputs["allowLeap"] = state ? state.allowLeap : undefined;
            resourceInputs["allowMsChapV1"] = state ? state.allowMsChapV1 : undefined;
            resourceInputs["allowMsChapV2"] = state ? state.allowMsChapV2 : undefined;
            resourceInputs["allowPapAscii"] = state ? state.allowPapAscii : undefined;
            resourceInputs["allowPeap"] = state ? state.allowPeap : undefined;
            resourceInputs["allowPreferredEapProtocol"] = state ? state.allowPreferredEapProtocol : undefined;
            resourceInputs["allowTeap"] = state ? state.allowTeap : undefined;
            resourceInputs["allowWeakCiphersForEap"] = state ? state.allowWeakCiphersForEap : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eapFastAcceptClientCert"] = state ? state.eapFastAcceptClientCert : undefined;
            resourceInputs["eapFastAllowMachineAuthentication"] = state ? state.eapFastAllowMachineAuthentication : undefined;
            resourceInputs["eapFastEapGtc"] = state ? state.eapFastEapGtc : undefined;
            resourceInputs["eapFastEapGtcPwdChange"] = state ? state.eapFastEapGtcPwdChange : undefined;
            resourceInputs["eapFastEapGtcPwdChangeRetries"] = state ? state.eapFastEapGtcPwdChangeRetries : undefined;
            resourceInputs["eapFastEapMsChapV2"] = state ? state.eapFastEapMsChapV2 : undefined;
            resourceInputs["eapFastEapMsChapV2PwdChange"] = state ? state.eapFastEapMsChapV2PwdChange : undefined;
            resourceInputs["eapFastEapMsChapV2PwdChangeRetries"] = state ? state.eapFastEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["eapFastEapTls"] = state ? state.eapFastEapTls : undefined;
            resourceInputs["eapFastEapTlsAuthOfExpiredCerts"] = state ? state.eapFastEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["eapFastEnableEapChaining"] = state ? state.eapFastEnableEapChaining : undefined;
            resourceInputs["eapFastPacsAllowAnonymousProvisioning"] = state ? state.eapFastPacsAllowAnonymousProvisioning : undefined;
            resourceInputs["eapFastPacsAllowAuthenticatedProvisioning"] = state ? state.eapFastPacsAllowAuthenticatedProvisioning : undefined;
            resourceInputs["eapFastPacsAllowClientCert"] = state ? state.eapFastPacsAllowClientCert : undefined;
            resourceInputs["eapFastPacsAllowMachineAuthentication"] = state ? state.eapFastPacsAllowMachineAuthentication : undefined;
            resourceInputs["eapFastPacsAuthorizationPacTtl"] = state ? state.eapFastPacsAuthorizationPacTtl : undefined;
            resourceInputs["eapFastPacsAuthorizationPacTtlUnit"] = state ? state.eapFastPacsAuthorizationPacTtlUnit : undefined;
            resourceInputs["eapFastPacsMachinePacTtl"] = state ? state.eapFastPacsMachinePacTtl : undefined;
            resourceInputs["eapFastPacsMachinePacTtlUnit"] = state ? state.eapFastPacsMachinePacTtlUnit : undefined;
            resourceInputs["eapFastPacsServerReturns"] = state ? state.eapFastPacsServerReturns : undefined;
            resourceInputs["eapFastPacsStatelessSessionResume"] = state ? state.eapFastPacsStatelessSessionResume : undefined;
            resourceInputs["eapFastPacsTunnelPacTtl"] = state ? state.eapFastPacsTunnelPacTtl : undefined;
            resourceInputs["eapFastPacsTunnelPacTtlUnit"] = state ? state.eapFastPacsTunnelPacTtlUnit : undefined;
            resourceInputs["eapFastPacsUseProactivePacUpdatePercentage"] = state ? state.eapFastPacsUseProactivePacUpdatePercentage : undefined;
            resourceInputs["eapFastUsePacs"] = state ? state.eapFastUsePacs : undefined;
            resourceInputs["eapTlsAllowAuthOfExpiredCerts"] = state ? state.eapTlsAllowAuthOfExpiredCerts : undefined;
            resourceInputs["eapTlsEnableStatelessSessionResume"] = state ? state.eapTlsEnableStatelessSessionResume : undefined;
            resourceInputs["eapTlsLBit"] = state ? state.eapTlsLBit : undefined;
            resourceInputs["eapTlsSessionTicketPercentage"] = state ? state.eapTlsSessionTicketPercentage : undefined;
            resourceInputs["eapTlsSessionTicketTtl"] = state ? state.eapTlsSessionTicketTtl : undefined;
            resourceInputs["eapTlsSessionTicketTtlUnit"] = state ? state.eapTlsSessionTicketTtlUnit : undefined;
            resourceInputs["eapTtlsChap"] = state ? state.eapTtlsChap : undefined;
            resourceInputs["eapTtlsEapMd5"] = state ? state.eapTtlsEapMd5 : undefined;
            resourceInputs["eapTtlsEapMsChapV2"] = state ? state.eapTtlsEapMsChapV2 : undefined;
            resourceInputs["eapTtlsEapMsChapV2PwdChange"] = state ? state.eapTtlsEapMsChapV2PwdChange : undefined;
            resourceInputs["eapTtlsEapMsChapV2PwdChangeRetries"] = state ? state.eapTtlsEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["eapTtlsMsChapV1"] = state ? state.eapTtlsMsChapV1 : undefined;
            resourceInputs["eapTtlsMsChapV2"] = state ? state.eapTtlsMsChapV2 : undefined;
            resourceInputs["eapTtlsPapAscii"] = state ? state.eapTtlsPapAscii : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peapAllowPeapEapGtc"] = state ? state.peapAllowPeapEapGtc : undefined;
            resourceInputs["peapAllowPeapEapGtcPwdChange"] = state ? state.peapAllowPeapEapGtcPwdChange : undefined;
            resourceInputs["peapAllowPeapEapGtcPwdChangeRetries"] = state ? state.peapAllowPeapEapGtcPwdChangeRetries : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2"] = state ? state.peapAllowPeapEapMsChapV2 : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChange"] = state ? state.peapAllowPeapEapMsChapV2PwdChange : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChangeRetries"] = state ? state.peapAllowPeapEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["peapAllowPeapEapTls"] = state ? state.peapAllowPeapEapTls : undefined;
            resourceInputs["peapAllowPeapEapTlsAuthOfExpiredCerts"] = state ? state.peapAllowPeapEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["peapPeapV0"] = state ? state.peapPeapV0 : undefined;
            resourceInputs["preferredEapProtocol"] = state ? state.preferredEapProtocol : undefined;
            resourceInputs["processHostLookup"] = state ? state.processHostLookup : undefined;
            resourceInputs["requireCryptobinding"] = state ? state.requireCryptobinding : undefined;
            resourceInputs["requireMessageAuth"] = state ? state.requireMessageAuth : undefined;
            resourceInputs["teapDowngradeMsk"] = state ? state.teapDowngradeMsk : undefined;
            resourceInputs["teapEapAcceptClientCertDuringTunnelEst"] = state ? state.teapEapAcceptClientCertDuringTunnelEst : undefined;
            resourceInputs["teapEapChaining"] = state ? state.teapEapChaining : undefined;
            resourceInputs["teapEapMsChapV2"] = state ? state.teapEapMsChapV2 : undefined;
            resourceInputs["teapEapMsChapV2PwdChange"] = state ? state.teapEapMsChapV2PwdChange : undefined;
            resourceInputs["teapEapMsChapV2PwdChangeRetries"] = state ? state.teapEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["teapEapTls"] = state ? state.teapEapTls : undefined;
            resourceInputs["teapEapTlsAuthOfExpiredCerts"] = state ? state.teapEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["teapRequestBasicPwdAuth"] = state ? state.teapRequestBasicPwdAuth : undefined;
        } else {
            const args = argsOrState as AllowedProtocolsArgs | undefined;
            if ((!args || args.allowChap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowChap'");
            }
            if ((!args || args.allowEapFast === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowEapFast'");
            }
            if ((!args || args.allowEapMd5 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowEapMd5'");
            }
            if ((!args || args.allowEapTls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowEapTls'");
            }
            if ((!args || args.allowEapTtls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowEapTtls'");
            }
            if ((!args || args.allowLeap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowLeap'");
            }
            if ((!args || args.allowMsChapV1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowMsChapV1'");
            }
            if ((!args || args.allowMsChapV2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowMsChapV2'");
            }
            if ((!args || args.allowPapAscii === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowPapAscii'");
            }
            if ((!args || args.allowPeap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowPeap'");
            }
            if ((!args || args.allowPreferredEapProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowPreferredEapProtocol'");
            }
            if ((!args || args.allowTeap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowTeap'");
            }
            if ((!args || args.allowWeakCiphersForEap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowWeakCiphersForEap'");
            }
            if ((!args || args.eapTlsLBit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eapTlsLBit'");
            }
            if ((!args || args.processHostLookup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processHostLookup'");
            }
            if ((!args || args.requireMessageAuth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requireMessageAuth'");
            }
            resourceInputs["allow5g"] = args ? args.allow5g : undefined;
            resourceInputs["allowChap"] = args ? args.allowChap : undefined;
            resourceInputs["allowEapFast"] = args ? args.allowEapFast : undefined;
            resourceInputs["allowEapMd5"] = args ? args.allowEapMd5 : undefined;
            resourceInputs["allowEapTls"] = args ? args.allowEapTls : undefined;
            resourceInputs["allowEapTtls"] = args ? args.allowEapTtls : undefined;
            resourceInputs["allowLeap"] = args ? args.allowLeap : undefined;
            resourceInputs["allowMsChapV1"] = args ? args.allowMsChapV1 : undefined;
            resourceInputs["allowMsChapV2"] = args ? args.allowMsChapV2 : undefined;
            resourceInputs["allowPapAscii"] = args ? args.allowPapAscii : undefined;
            resourceInputs["allowPeap"] = args ? args.allowPeap : undefined;
            resourceInputs["allowPreferredEapProtocol"] = args ? args.allowPreferredEapProtocol : undefined;
            resourceInputs["allowTeap"] = args ? args.allowTeap : undefined;
            resourceInputs["allowWeakCiphersForEap"] = args ? args.allowWeakCiphersForEap : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eapFastAcceptClientCert"] = args ? args.eapFastAcceptClientCert : undefined;
            resourceInputs["eapFastAllowMachineAuthentication"] = args ? args.eapFastAllowMachineAuthentication : undefined;
            resourceInputs["eapFastEapGtc"] = args ? args.eapFastEapGtc : undefined;
            resourceInputs["eapFastEapGtcPwdChange"] = args ? args.eapFastEapGtcPwdChange : undefined;
            resourceInputs["eapFastEapGtcPwdChangeRetries"] = args ? args.eapFastEapGtcPwdChangeRetries : undefined;
            resourceInputs["eapFastEapMsChapV2"] = args ? args.eapFastEapMsChapV2 : undefined;
            resourceInputs["eapFastEapMsChapV2PwdChange"] = args ? args.eapFastEapMsChapV2PwdChange : undefined;
            resourceInputs["eapFastEapMsChapV2PwdChangeRetries"] = args ? args.eapFastEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["eapFastEapTls"] = args ? args.eapFastEapTls : undefined;
            resourceInputs["eapFastEapTlsAuthOfExpiredCerts"] = args ? args.eapFastEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["eapFastEnableEapChaining"] = args ? args.eapFastEnableEapChaining : undefined;
            resourceInputs["eapFastPacsAllowAnonymousProvisioning"] = args ? args.eapFastPacsAllowAnonymousProvisioning : undefined;
            resourceInputs["eapFastPacsAllowAuthenticatedProvisioning"] = args ? args.eapFastPacsAllowAuthenticatedProvisioning : undefined;
            resourceInputs["eapFastPacsAllowClientCert"] = args ? args.eapFastPacsAllowClientCert : undefined;
            resourceInputs["eapFastPacsAllowMachineAuthentication"] = args ? args.eapFastPacsAllowMachineAuthentication : undefined;
            resourceInputs["eapFastPacsAuthorizationPacTtl"] = args ? args.eapFastPacsAuthorizationPacTtl : undefined;
            resourceInputs["eapFastPacsAuthorizationPacTtlUnit"] = args ? args.eapFastPacsAuthorizationPacTtlUnit : undefined;
            resourceInputs["eapFastPacsMachinePacTtl"] = args ? args.eapFastPacsMachinePacTtl : undefined;
            resourceInputs["eapFastPacsMachinePacTtlUnit"] = args ? args.eapFastPacsMachinePacTtlUnit : undefined;
            resourceInputs["eapFastPacsServerReturns"] = args ? args.eapFastPacsServerReturns : undefined;
            resourceInputs["eapFastPacsStatelessSessionResume"] = args ? args.eapFastPacsStatelessSessionResume : undefined;
            resourceInputs["eapFastPacsTunnelPacTtl"] = args ? args.eapFastPacsTunnelPacTtl : undefined;
            resourceInputs["eapFastPacsTunnelPacTtlUnit"] = args ? args.eapFastPacsTunnelPacTtlUnit : undefined;
            resourceInputs["eapFastPacsUseProactivePacUpdatePercentage"] = args ? args.eapFastPacsUseProactivePacUpdatePercentage : undefined;
            resourceInputs["eapFastUsePacs"] = args ? args.eapFastUsePacs : undefined;
            resourceInputs["eapTlsAllowAuthOfExpiredCerts"] = args ? args.eapTlsAllowAuthOfExpiredCerts : undefined;
            resourceInputs["eapTlsEnableStatelessSessionResume"] = args ? args.eapTlsEnableStatelessSessionResume : undefined;
            resourceInputs["eapTlsLBit"] = args ? args.eapTlsLBit : undefined;
            resourceInputs["eapTlsSessionTicketPercentage"] = args ? args.eapTlsSessionTicketPercentage : undefined;
            resourceInputs["eapTlsSessionTicketTtl"] = args ? args.eapTlsSessionTicketTtl : undefined;
            resourceInputs["eapTlsSessionTicketTtlUnit"] = args ? args.eapTlsSessionTicketTtlUnit : undefined;
            resourceInputs["eapTtlsChap"] = args ? args.eapTtlsChap : undefined;
            resourceInputs["eapTtlsEapMd5"] = args ? args.eapTtlsEapMd5 : undefined;
            resourceInputs["eapTtlsEapMsChapV2"] = args ? args.eapTtlsEapMsChapV2 : undefined;
            resourceInputs["eapTtlsEapMsChapV2PwdChange"] = args ? args.eapTtlsEapMsChapV2PwdChange : undefined;
            resourceInputs["eapTtlsEapMsChapV2PwdChangeRetries"] = args ? args.eapTtlsEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["eapTtlsMsChapV1"] = args ? args.eapTtlsMsChapV1 : undefined;
            resourceInputs["eapTtlsMsChapV2"] = args ? args.eapTtlsMsChapV2 : undefined;
            resourceInputs["eapTtlsPapAscii"] = args ? args.eapTtlsPapAscii : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peapAllowPeapEapGtc"] = args ? args.peapAllowPeapEapGtc : undefined;
            resourceInputs["peapAllowPeapEapGtcPwdChange"] = args ? args.peapAllowPeapEapGtcPwdChange : undefined;
            resourceInputs["peapAllowPeapEapGtcPwdChangeRetries"] = args ? args.peapAllowPeapEapGtcPwdChangeRetries : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2"] = args ? args.peapAllowPeapEapMsChapV2 : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChange"] = args ? args.peapAllowPeapEapMsChapV2PwdChange : undefined;
            resourceInputs["peapAllowPeapEapMsChapV2PwdChangeRetries"] = args ? args.peapAllowPeapEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["peapAllowPeapEapTls"] = args ? args.peapAllowPeapEapTls : undefined;
            resourceInputs["peapAllowPeapEapTlsAuthOfExpiredCerts"] = args ? args.peapAllowPeapEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["peapPeapV0"] = args ? args.peapPeapV0 : undefined;
            resourceInputs["preferredEapProtocol"] = args ? args.preferredEapProtocol : undefined;
            resourceInputs["processHostLookup"] = args ? args.processHostLookup : undefined;
            resourceInputs["requireCryptobinding"] = args ? args.requireCryptobinding : undefined;
            resourceInputs["requireMessageAuth"] = args ? args.requireMessageAuth : undefined;
            resourceInputs["teapDowngradeMsk"] = args ? args.teapDowngradeMsk : undefined;
            resourceInputs["teapEapAcceptClientCertDuringTunnelEst"] = args ? args.teapEapAcceptClientCertDuringTunnelEst : undefined;
            resourceInputs["teapEapChaining"] = args ? args.teapEapChaining : undefined;
            resourceInputs["teapEapMsChapV2"] = args ? args.teapEapMsChapV2 : undefined;
            resourceInputs["teapEapMsChapV2PwdChange"] = args ? args.teapEapMsChapV2PwdChange : undefined;
            resourceInputs["teapEapMsChapV2PwdChangeRetries"] = args ? args.teapEapMsChapV2PwdChangeRetries : undefined;
            resourceInputs["teapEapTls"] = args ? args.teapEapTls : undefined;
            resourceInputs["teapEapTlsAuthOfExpiredCerts"] = args ? args.teapEapTlsAuthOfExpiredCerts : undefined;
            resourceInputs["teapRequestBasicPwdAuth"] = args ? args.teapRequestBasicPwdAuth : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AllowedProtocols.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AllowedProtocols resources.
 */
export interface AllowedProtocolsState {
    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    allow5g?: pulumi.Input<boolean>;
    /**
     * Allow CHAP
     */
    allowChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP Fast
     */
    allowEapFast?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    allowEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS
     */
    allowEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TTLS
     */
    allowEapTtls?: pulumi.Input<boolean>;
    /**
     * Allow LEAP
     */
    allowLeap?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    allowMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii?: pulumi.Input<boolean>;
    /**
     * Allow PEAP
     */
    allowPeap?: pulumi.Input<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    allowPreferredEapProtocol?: pulumi.Input<boolean>;
    /**
     * Allow TEAP
     */
    allowTeap?: pulumi.Input<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    allowWeakCiphersForEap?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAcceptClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC
     */
    eapFastEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    eapFastEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
     */
    eapFastEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapFastEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    eapFastEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    eapFastEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    eapFastEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    eapFastEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable EAP chaining
     */
    eapFastEnableEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAnonymousProvisioning?: pulumi.Input<boolean>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAuthenticatedProvisioning?: pulumi.Input<boolean>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsAllowClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    eapFastPacsAuthorizationPacTtl?: pulumi.Input<number>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsAuthorizationPacTtlUnit?: pulumi.Input<string>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    eapFastPacsMachinePacTtl?: pulumi.Input<number>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsMachinePacTtlUnit?: pulumi.Input<string>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if
     * `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsServerReturns?: pulumi.Input<boolean>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsTunnelPacTtl?: pulumi.Input<number>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
     * `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsTunnelPacTtlUnit?: pulumi.Input<string>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
     */
    eapFastPacsUseProactivePacUpdatePercentage?: pulumi.Input<number>;
    /**
     * Use PACs
     */
    eapFastUsePacs?: pulumi.Input<boolean>;
    /**
     * Allow authentication of expired certificates
     */
    eapTlsAllowAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable stateless session resume
     */
    eapTlsEnableStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * EAP TLS L-Bit
     */
    eapTlsLBit?: pulumi.Input<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
     */
    eapTlsSessionTicketPercentage?: pulumi.Input<number>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    eapTlsSessionTicketTtl?: pulumi.Input<number>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapTlsSessionTicketTtlUnit?: pulumi.Input<string>;
    /**
     * Allow CHAP
     */
    eapTtlsChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    eapTtlsEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapTtlsEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    eapTtlsEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    eapTtlsEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow MS CHAP v1
     */
    eapTtlsMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    eapTtlsMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    eapTtlsPapAscii?: pulumi.Input<boolean>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
    /**
     * Allow PEAP EAP GTC
     */
    peapAllowPeapEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    peapAllowPeapEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
     */
    peapAllowPeapEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    peapAllowPeapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    peapAllowPeapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
     * `0`-`3`
     */
    peapAllowPeapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP TLS
     */
    peapAllowPeapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    peapAllowPeapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Allow PEAP v0
     */
    peapPeapV0?: pulumi.Input<boolean>;
    /**
     * Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    preferredEapProtocol?: pulumi.Input<string>;
    /**
     * Process host lookup
     */
    processHostLookup?: pulumi.Input<boolean>;
    /**
     * Require cryptobinding
     */
    requireCryptobinding?: pulumi.Input<boolean>;
    /**
     * Require message authentication
     */
    requireMessageAuth?: pulumi.Input<boolean>;
    /**
     * Allow downgrade to MSK
     */
    teapDowngradeMsk?: pulumi.Input<boolean>;
    /**
     * Accept client certificate during tunnel establishment
     */
    teapEapAcceptClientCertDuringTunnelEst?: pulumi.Input<boolean>;
    /**
     * Allow EAP chaining
     */
    teapEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    teapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    teapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    teapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    teapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    teapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Request basic password authentication
     */
    teapRequestBasicPwdAuth?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AllowedProtocols resource.
 */
export interface AllowedProtocolsArgs {
    /**
     * Allow 5G. This field is only supported from ISE 3.2.
     */
    allow5g?: pulumi.Input<boolean>;
    /**
     * Allow CHAP
     */
    allowChap: pulumi.Input<boolean>;
    /**
     * Allow EAP Fast
     */
    allowEapFast: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    allowEapMd5: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS
     */
    allowEapTls: pulumi.Input<boolean>;
    /**
     * Allow EAP TTLS
     */
    allowEapTtls: pulumi.Input<boolean>;
    /**
     * Allow LEAP
     */
    allowLeap: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v1
     */
    allowMsChapV1: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    allowMsChapV2: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    allowPapAscii: pulumi.Input<boolean>;
    /**
     * Allow PEAP
     */
    allowPeap: pulumi.Input<boolean>;
    /**
     * Allow preferred EAP protocol
     */
    allowPreferredEapProtocol: pulumi.Input<boolean>;
    /**
     * Allow TEAP
     */
    allowTeap: pulumi.Input<boolean>;
    /**
     * Allow weak ciphers for EAP
     */
    allowWeakCiphersForEap: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAcceptClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     */
    eapFastAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC
     */
    eapFastEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     */
    eapFastEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
     */
    eapFastEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapFastEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     */
    eapFastEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    eapFastEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    eapFastEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     */
    eapFastEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable EAP chaining
     */
    eapFastEnableEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAnonymousProvisioning?: pulumi.Input<boolean>;
    /**
     * Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowAuthenticatedProvisioning?: pulumi.Input<boolean>;
    /**
     * Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsAllowClientCert?: pulumi.Input<boolean>;
    /**
     * Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsAllowMachineAuthentication?: pulumi.Input<boolean>;
    /**
     * Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     */
    eapFastPacsAuthorizationPacTtl?: pulumi.Input<number>;
    /**
     * Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsAuthorizationPacTtlUnit?: pulumi.Input<string>;
    /**
     * Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     */
    eapFastPacsMachinePacTtl?: pulumi.Input<number>;
    /**
     * Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsMachinePacTtlUnit?: pulumi.Input<string>;
    /**
     * Server returns access accept after authenticated provisioning. Is required only if
     * `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     */
    eapFastPacsServerReturns?: pulumi.Input<boolean>;
    /**
     * Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     */
    eapFastPacsTunnelPacTtl?: pulumi.Input<number>;
    /**
     * PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
     * `HOURS`, `DAYS`, `WEEKS`
     */
    eapFastPacsTunnelPacTtlUnit?: pulumi.Input<string>;
    /**
     * Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
     */
    eapFastPacsUseProactivePacUpdatePercentage?: pulumi.Input<number>;
    /**
     * Use PACs
     */
    eapFastUsePacs?: pulumi.Input<boolean>;
    /**
     * Allow authentication of expired certificates
     */
    eapTlsAllowAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Enable stateless session resume
     */
    eapTlsEnableStatelessSessionResume?: pulumi.Input<boolean>;
    /**
     * EAP TLS L-Bit
     */
    eapTlsLBit: pulumi.Input<boolean>;
    /**
     * Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
     */
    eapTlsSessionTicketPercentage?: pulumi.Input<number>;
    /**
     * Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     */
    eapTlsSessionTicketTtl?: pulumi.Input<number>;
    /**
     * Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
     * `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
     */
    eapTlsSessionTicketTtlUnit?: pulumi.Input<string>;
    /**
     * Allow CHAP
     */
    eapTtlsChap?: pulumi.Input<boolean>;
    /**
     * Allow EAP MD5
     */
    eapTtlsEapMd5?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    eapTtlsEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     */
    eapTtlsEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    eapTtlsEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow MS CHAP v1
     */
    eapTtlsMsChapV1?: pulumi.Input<boolean>;
    /**
     * Allow MS CHAP v2
     */
    eapTtlsMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PAP ASCII
     */
    eapTtlsPapAscii?: pulumi.Input<boolean>;
    /**
     * The name of the allowed protocols
     */
    name?: pulumi.Input<string>;
    /**
     * Allow PEAP EAP GTC
     */
    peapAllowPeapEapGtc?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     */
    peapAllowPeapEapGtcPwdChange?: pulumi.Input<boolean>;
    /**
     * PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
     */
    peapAllowPeapEapGtcPwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP MS CHAP v2
     */
    peapAllowPeapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     */
    peapAllowPeapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
     * `0`-`3`
     */
    peapAllowPeapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow PEAP EAP TLS
     */
    peapAllowPeapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     */
    peapAllowPeapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Allow PEAP v0
     */
    peapPeapV0?: pulumi.Input<boolean>;
    /**
     * Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
     */
    preferredEapProtocol?: pulumi.Input<string>;
    /**
     * Process host lookup
     */
    processHostLookup: pulumi.Input<boolean>;
    /**
     * Require cryptobinding
     */
    requireCryptobinding?: pulumi.Input<boolean>;
    /**
     * Require message authentication
     */
    requireMessageAuth: pulumi.Input<boolean>;
    /**
     * Allow downgrade to MSK
     */
    teapDowngradeMsk?: pulumi.Input<boolean>;
    /**
     * Accept client certificate during tunnel establishment
     */
    teapEapAcceptClientCertDuringTunnelEst?: pulumi.Input<boolean>;
    /**
     * Allow EAP chaining
     */
    teapEapChaining?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2
     */
    teapEapMsChapV2?: pulumi.Input<boolean>;
    /**
     * Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     */
    teapEapMsChapV2PwdChange?: pulumi.Input<boolean>;
    /**
     * EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
     */
    teapEapMsChapV2PwdChangeRetries?: pulumi.Input<number>;
    /**
     * Allow EAP TLS
     */
    teapEapTls?: pulumi.Input<boolean>;
    /**
     * Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     */
    teapEapTlsAuthOfExpiredCerts?: pulumi.Input<boolean>;
    /**
     * Request basic password authentication
     */
    teapRequestBasicPwdAuth?: pulumi.Input<boolean>;
}
