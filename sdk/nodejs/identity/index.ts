// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateAuthenticationProfileArgs, CertificateAuthenticationProfileState } from "./certificateAuthenticationProfile";
export type CertificateAuthenticationProfile = import("./certificateAuthenticationProfile").CertificateAuthenticationProfile;
export const CertificateAuthenticationProfile: typeof import("./certificateAuthenticationProfile").CertificateAuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["CertificateAuthenticationProfile"], () => require("./certificateAuthenticationProfile"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EndpointIdentityGroupArgs, EndpointIdentityGroupState } from "./endpointIdentityGroup";
export type EndpointIdentityGroup = import("./endpointIdentityGroup").EndpointIdentityGroup;
export const EndpointIdentityGroup: typeof import("./endpointIdentityGroup").EndpointIdentityGroup = null as any;
utilities.lazyLoad(exports, ["EndpointIdentityGroup"], () => require("./endpointIdentityGroup"));

export { GetCertificateAuthenticationProfileArgs, GetCertificateAuthenticationProfileResult, GetCertificateAuthenticationProfileOutputArgs } from "./getCertificateAuthenticationProfile";
export const getCertificateAuthenticationProfile: typeof import("./getCertificateAuthenticationProfile").getCertificateAuthenticationProfile = null as any;
export const getCertificateAuthenticationProfileOutput: typeof import("./getCertificateAuthenticationProfile").getCertificateAuthenticationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateAuthenticationProfile","getCertificateAuthenticationProfileOutput"], () => require("./getCertificateAuthenticationProfile"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetEndpointIdentityGroupArgs, GetEndpointIdentityGroupResult, GetEndpointIdentityGroupOutputArgs } from "./getEndpointIdentityGroup";
export const getEndpointIdentityGroup: typeof import("./getEndpointIdentityGroup").getEndpointIdentityGroup = null as any;
export const getEndpointIdentityGroupOutput: typeof import("./getEndpointIdentityGroup").getEndpointIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointIdentityGroup","getEndpointIdentityGroupOutput"], () => require("./getEndpointIdentityGroup"));

export { GetIdentitySourceSequenceArgs, GetIdentitySourceSequenceResult, GetIdentitySourceSequenceOutputArgs } from "./getIdentitySourceSequence";
export const getIdentitySourceSequence: typeof import("./getIdentitySourceSequence").getIdentitySourceSequence = null as any;
export const getIdentitySourceSequenceOutput: typeof import("./getIdentitySourceSequence").getIdentitySourceSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitySourceSequence","getIdentitySourceSequenceOutput"], () => require("./getIdentitySourceSequence"));

export { GetInternalUserArgs, GetInternalUserResult, GetInternalUserOutputArgs } from "./getInternalUser";
export const getInternalUser: typeof import("./getInternalUser").getInternalUser = null as any;
export const getInternalUserOutput: typeof import("./getInternalUser").getInternalUserOutput = null as any;
utilities.lazyLoad(exports, ["getInternalUser","getInternalUserOutput"], () => require("./getInternalUser"));

export { GetUserIdentityGroupArgs, GetUserIdentityGroupResult, GetUserIdentityGroupOutputArgs } from "./getUserIdentityGroup";
export const getUserIdentityGroup: typeof import("./getUserIdentityGroup").getUserIdentityGroup = null as any;
export const getUserIdentityGroupOutput: typeof import("./getUserIdentityGroup").getUserIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserIdentityGroup","getUserIdentityGroupOutput"], () => require("./getUserIdentityGroup"));

export { IdentitySourceSequenceArgs, IdentitySourceSequenceState } from "./identitySourceSequence";
export type IdentitySourceSequence = import("./identitySourceSequence").IdentitySourceSequence;
export const IdentitySourceSequence: typeof import("./identitySourceSequence").IdentitySourceSequence = null as any;
utilities.lazyLoad(exports, ["IdentitySourceSequence"], () => require("./identitySourceSequence"));

export { InternalUserArgs, InternalUserState } from "./internalUser";
export type InternalUser = import("./internalUser").InternalUser;
export const InternalUser: typeof import("./internalUser").InternalUser = null as any;
utilities.lazyLoad(exports, ["InternalUser"], () => require("./internalUser"));

export { UserIdentityGroupArgs, UserIdentityGroupState } from "./userIdentityGroup";
export type UserIdentityGroup = import("./userIdentityGroup").UserIdentityGroup;
export const UserIdentityGroup: typeof import("./userIdentityGroup").UserIdentityGroup = null as any;
utilities.lazyLoad(exports, ["UserIdentityGroup"], () => require("./userIdentityGroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ise:identity/certificateAuthenticationProfile:CertificateAuthenticationProfile":
                return new CertificateAuthenticationProfile(name, <any>undefined, { urn })
            case "ise:identity/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "ise:identity/endpointIdentityGroup:EndpointIdentityGroup":
                return new EndpointIdentityGroup(name, <any>undefined, { urn })
            case "ise:identity/identitySourceSequence:IdentitySourceSequence":
                return new IdentitySourceSequence(name, <any>undefined, { urn })
            case "ise:identity/internalUser:InternalUser":
                return new InternalUser(name, <any>undefined, { urn })
            case "ise:identity/userIdentityGroup:UserIdentityGroup":
                return new UserIdentityGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ise", "identity/certificateAuthenticationProfile", _module)
pulumi.runtime.registerResourceModule("ise", "identity/endpoint", _module)
pulumi.runtime.registerResourceModule("ise", "identity/endpointIdentityGroup", _module)
pulumi.runtime.registerResourceModule("ise", "identity/identitySourceSequence", _module)
pulumi.runtime.registerResourceModule("ise", "identity/internalUser", _module)
pulumi.runtime.registerResourceModule("ise", "identity/userIdentityGroup", _module)
