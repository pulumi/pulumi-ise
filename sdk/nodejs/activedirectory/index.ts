// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddGroupsArgs, AddGroupsState } from "./addGroups";
export type AddGroups = import("./addGroups").AddGroups;
export const AddGroups: typeof import("./addGroups").AddGroups = null as any;
utilities.lazyLoad(exports, ["AddGroups"], () => require("./addGroups"));

export { GetGroupsByDomainArgs, GetGroupsByDomainResult, GetGroupsByDomainOutputArgs } from "./getGroupsByDomain";
export const getGroupsByDomain: typeof import("./getGroupsByDomain").getGroupsByDomain = null as any;
export const getGroupsByDomainOutput: typeof import("./getGroupsByDomain").getGroupsByDomainOutput = null as any;
utilities.lazyLoad(exports, ["getGroupsByDomain","getGroupsByDomainOutput"], () => require("./getGroupsByDomain"));

export { GetJoinPointArgs, GetJoinPointResult, GetJoinPointOutputArgs } from "./getJoinPoint";
export const getJoinPoint: typeof import("./getJoinPoint").getJoinPoint = null as any;
export const getJoinPointOutput: typeof import("./getJoinPoint").getJoinPointOutput = null as any;
utilities.lazyLoad(exports, ["getJoinPoint","getJoinPointOutput"], () => require("./getJoinPoint"));

export { JoinDomainWithAllNodesArgs, JoinDomainWithAllNodesState } from "./joinDomainWithAllNodes";
export type JoinDomainWithAllNodes = import("./joinDomainWithAllNodes").JoinDomainWithAllNodes;
export const JoinDomainWithAllNodes: typeof import("./joinDomainWithAllNodes").JoinDomainWithAllNodes = null as any;
utilities.lazyLoad(exports, ["JoinDomainWithAllNodes"], () => require("./joinDomainWithAllNodes"));

export { JoinPointArgs, JoinPointState } from "./joinPoint";
export type JoinPoint = import("./joinPoint").JoinPoint;
export const JoinPoint: typeof import("./joinPoint").JoinPoint = null as any;
utilities.lazyLoad(exports, ["JoinPoint"], () => require("./joinPoint"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ise:activeDirectory/addGroups:AddGroups":
                return new AddGroups(name, <any>undefined, { urn })
            case "ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes":
                return new JoinDomainWithAllNodes(name, <any>undefined, { urn })
            case "ise:activeDirectory/joinPoint:JoinPoint":
                return new JoinPoint(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ise", "activeDirectory/addGroups", _module)
pulumi.runtime.registerResourceModule("ise", "activeDirectory/joinDomainWithAllNodes", _module)
pulumi.runtime.registerResourceModule("ise", "activeDirectory/joinPoint", _module)
