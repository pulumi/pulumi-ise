// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source can read the Internal User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = ise.Internal.getUser({
 *     id: "76d24097-41c4-4558-a4d0-a8c07ac08470",
 * });
 * ```
 */
export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ise:Internal/getUser:getUser", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * The id of the object
     */
    id?: string;
    /**
     * The name of the internal user
     */
    name?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
     */
    readonly accountNameAlias: string;
    /**
     * Requires the user to change the password
     */
    readonly changePassword: boolean;
    /**
     * Key value map
     */
    readonly customAttributes: string;
    /**
     * Description
     */
    readonly description: string;
    /**
     * Email address
     */
    readonly email: string;
    /**
     * This field is added in ISE 2.0 to support TACACS+
     */
    readonly enablePassword: string;
    /**
     * Whether the user is enabled/disabled
     */
    readonly enabled: boolean;
    /**
     * First name of the internal user
     */
    readonly firstName: string;
    /**
     * The id of the object
     */
    readonly id: string;
    /**
     * Comma separated list of identity group IDs.
     */
    readonly identityGroups: string;
    /**
     * Last name of the internal user
     */
    readonly lastName: string;
    /**
     * The name of the internal user
     */
    readonly name: string;
    /**
     * The password of the internal user
     */
    readonly password: string;
    /**
     * The ID store where the internal user's password is kept
     */
    readonly passwordIdStore: string;
    /**
     * Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
     */
    readonly passwordNeverExpires: boolean;
}
/**
 * This data source can read the Internal User.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ise from "@pulumi/ise";
 *
 * const example = ise.Internal.getUser({
 *     id: "76d24097-41c4-4558-a4d0-a8c07ac08470",
 * });
 * ```
 */
export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * The id of the object
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the internal user
     */
    name?: pulumi.Input<string>;
}
