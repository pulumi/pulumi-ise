// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace activeDirectory {
    export interface AddGroupsGroup {
        /**
         * Required for each group in the group list with no duplication between groups
         */
        name: pulumi.Input<string>;
        /**
         * Required for each group in the group list with no duplication between groups
         */
        sid: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface JoinDomainWithAllNodesAdditionalData {
        /**
         * Additional attribute name
         */
        name: pulumi.Input<string>;
        /**
         * Additional attribute value
         */
        value: pulumi.Input<string>;
    }

    export interface JoinPointAttribute {
        /**
         * Required for each attribute in the attribute list. Can contain an empty string.
         */
        defaultValue: pulumi.Input<string>;
        /**
         * Required for each attribute in the attribute list
         */
        internalName: pulumi.Input<string>;
        /**
         * Required for each attribute in the attribute list with no duplication between attributes
         */
        name: pulumi.Input<string>;
        /**
         * Required for each group in the group list
         *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
         */
        type: pulumi.Input<string>;
    }

    export interface JoinPointGroup {
        /**
         * Required for each group in the group list with no duplication between groups
         */
        name: pulumi.Input<string>;
        /**
         * Required for each group in the group list with no duplication between groups
         */
        sid: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface JoinPointRewriteRule {
        /**
         * Required for each rule in the list with no duplication between rules
         */
        rewriteMatch: pulumi.Input<string>;
        /**
         * Required for each rule in the list
         */
        rewriteResult: pulumi.Input<string>;
        /**
         * Required for each rule in the list in serial order
         */
        rowId: pulumi.Input<string>;
    }
}

export namespace deviceAdmin {
    export interface AuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.AuthenticationRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.AuthorizationExceptionRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.AuthorizationGlobalExceptionRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.AuthorizationRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface ConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.ConditionChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Condition description
         */
        description?: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Condition name
         */
        name?: pulumi.Input<string>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface ConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Condition description
         */
        description?: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Condition name
         */
        name?: pulumi.Input<string>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface PolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.deviceAdmin.PolicySetChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface PolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }
}

export namespace identity {
    export interface IdentitySourceSequenceIdentitySource {
        /**
         * Name of the identity source
         */
        name: pulumi.Input<string>;
        /**
         * Order of the identity source in the sequence
         */
        order: pulumi.Input<number>;
    }
}

export namespace network {
    export interface AccessAuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessAuthenticationRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessAuthorizationExceptionRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessAuthorizationGlobalExceptionRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessAuthorizationRuleChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessAuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessConditionChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Condition description
         */
        description?: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Condition name
         */
        name?: pulumi.Input<string>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Condition description
         */
        description?: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Condition name
         */
        name?: pulumi.Input<string>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessPolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: pulumi.Input<pulumi.Input<inputs.network.AccessPolicySetChildrenChildren>[]>;
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AccessPolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: pulumi.Input<string>;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: pulumi.Input<string>;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: pulumi.Input<string>;
        /**
         * Dictionary name
         */
        dictionaryName?: pulumi.Input<string>;
        /**
         * Dictionary value
         */
        dictionaryValue?: pulumi.Input<string>;
        /**
         * UUID for condition
         */
        id?: pulumi.Input<string>;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: pulumi.Input<boolean>;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: pulumi.Input<string>;
    }

    export interface AuthorizationProfileAdvancedAttribute {
        /**
         * Dictionary name
         */
        attributeLeftDictionaryName?: pulumi.Input<string>;
        /**
         * Attribute name
         */
        attributeLeftName?: pulumi.Input<string>;
        /**
         * Dictionary name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightDictionaryName?: pulumi.Input<string>;
        /**
         * Attribute name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightName?: pulumi.Input<string>;
        /**
         * Attribute value, only required when `attributeRightValueType` is `AttributeValue`
         */
        attributeRightValue?: pulumi.Input<string>;
        /**
         * Advanced attribute value type
         *   - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`
         */
        attributeRightValueType?: pulumi.Input<string>;
    }

    export interface DeviceIp {
        /**
         * It can be either single ip address or ip range address
         */
        ipaddress: pulumi.Input<string>;
        /**
         * It can be either single ip address or ip range address
         */
        ipaddressExclude?: pulumi.Input<string>;
        /**
         * Subnet mask length
         */
        mask?: pulumi.Input<string>;
    }

}

export namespace system {
    export interface LicenseTierStateLicense {
        /**
         * License name
         *   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
         */
        name: pulumi.Input<string>;
        /**
         * License status
         *   - Choices: `ENABLED`, `DISABLED`
         */
        status: pulumi.Input<string>;
    }
}

export namespace tacacs {
    export interface CommandSetCommand {
        /**
         * Command arguments
         */
        arguments: pulumi.Input<string>;
        /**
         * Command
         */
        command: pulumi.Input<string>;
        /**
         * Grant
         *   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
         */
        grant: pulumi.Input<string>;
    }

    export interface ProfileSessionAttribute {
        /**
         * Name
         */
        name: pulumi.Input<string>;
        /**
         * Type
         *   - Choices: `MANDATORY`, `OPTIONAL`
         */
        type: pulumi.Input<string>;
        /**
         * Value
         */
        value: pulumi.Input<string>;
    }
}
