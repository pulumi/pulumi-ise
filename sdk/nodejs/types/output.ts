// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace activeDirectory {
    export interface AddGroupsGroup {
        /**
         * Required for each group in the group list with no duplication between groups
         */
        name: string;
        /**
         * Required for each group in the group list with no duplication between groups
         */
        sid: string;
        type?: string;
    }

    export interface GetGroupsByDomainGroup {
        /**
         * Group name
         */
        name: string;
        /**
         * Group SID
         */
        sid: string;
        /**
         * Group type
         */
        type: string;
    }

    export interface GetJoinPointAttribute {
        /**
         * Required for each attribute in the attribute list. Can contain an empty string.
         */
        defaultValue: string;
        /**
         * Required for each attribute in the attribute list
         */
        internalName: string;
        /**
         * Required for each attribute in the attribute list with no duplication between attributes
         */
        name: string;
        /**
         * Required for each group in the group list
         */
        type: string;
    }

    export interface GetJoinPointGroup {
        /**
         * Required for each group in the group list with no duplication between groups
         */
        name: string;
        /**
         * Required for each group in the group list with no duplication between groups
         */
        sid: string;
        type: string;
    }

    export interface GetJoinPointRewriteRule {
        /**
         * Required for each rule in the list with no duplication between rules
         */
        rewriteMatch: string;
        /**
         * Required for each rule in the list
         */
        rewriteResult: string;
        /**
         * Required for each rule in the list in serial order
         */
        rowId: string;
    }

    export interface JoinDomainWithAllNodesAdditionalData {
        /**
         * Additional attribute name
         */
        name: string;
        /**
         * Additional attribute value
         */
        value: string;
    }

    export interface JoinPointAttribute {
        /**
         * Required for each attribute in the attribute list. Can contain an empty string.
         */
        defaultValue: string;
        /**
         * Required for each attribute in the attribute list
         */
        internalName: string;
        /**
         * Required for each attribute in the attribute list with no duplication between attributes
         */
        name: string;
        /**
         * Required for each group in the group list
         *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
         */
        type: string;
    }

    export interface JoinPointGroup {
        /**
         * Required for each group in the group list with no duplication between groups
         */
        name: string;
        /**
         * Required for each group in the group list with no duplication between groups
         */
        sid: string;
        type?: string;
    }

    export interface JoinPointRewriteRule {
        /**
         * Required for each rule in the list with no duplication between rules
         */
        rewriteMatch: string;
        /**
         * Required for each rule in the list
         */
        rewriteResult: string;
        /**
         * Required for each rule in the list in serial order
         */
        rowId: string;
    }

}

export namespace deviceAdmin {
    export interface AuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.AuthenticationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.AuthorizationExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.AuthorizationGlobalExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.AuthorizationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface ConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.ConditionChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Condition description
         */
        description?: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Condition name
         */
        name?: string;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface ConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Condition description
         */
        description?: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Condition name
         */
        name?: string;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface GetAuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetAuthenticationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetAuthorizationExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetAuthorizationGlobalExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetAuthorizationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetConditionChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Condition description
         */
        description: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Condition name
         */
        name: string;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Condition description
         */
        description: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Condition name
         */
        name: string;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetPolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.deviceAdmin.GetPolicySetChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetPolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface PolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.deviceAdmin.PolicySetChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface PolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

}

export namespace identity {
    export interface GetIdentitySourceSequenceIdentitySource {
        /**
         * Name of the identity source
         */
        name: string;
        /**
         * Order of the identity source in the sequence
         */
        order: number;
    }

    export interface IdentitySourceSequenceIdentitySource {
        /**
         * Name of the identity source
         */
        name: string;
        /**
         * Order of the identity source in the sequence
         */
        order: number;
    }

}

export namespace network {
    export interface AccessAuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessAuthenticationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessAuthorizationExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessAuthorizationGlobalExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessAuthorizationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessAuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessConditionChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Condition description
         */
        description?: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Condition name
         */
        name?: string;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Condition description
         */
        description?: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Condition name
         */
        name?: string;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessPolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens?: outputs.network.AccessPolicySetChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AccessPolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName?: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue?: string;
        /**
         * Condition type.
         *   - Choices: `ConditionAttributes`, `ConditionReference`
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName?: string;
        /**
         * Dictionary value
         */
        dictionaryValue?: string;
        /**
         * UUID for condition
         */
        id?: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate?: boolean;
        /**
         * Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         */
        operator?: string;
    }

    export interface AuthorizationProfileAdvancedAttribute {
        /**
         * Dictionary name
         */
        attributeLeftDictionaryName?: string;
        /**
         * Attribute name
         */
        attributeLeftName?: string;
        /**
         * Dictionary name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightDictionaryName?: string;
        /**
         * Attribute name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightName?: string;
        /**
         * Attribute value, only required when `attributeRightValueType` is `AttributeValue`
         */
        attributeRightValue?: string;
        /**
         * Advanced attribute value type
         *   - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`
         */
        attributeRightValueType?: string;
    }

    export interface DeviceIp {
        /**
         * It can be either single ip address or ip range address
         */
        ipaddress: string;
        /**
         * It can be either single ip address or ip range address
         */
        ipaddressExclude?: string;
        /**
         * Subnet mask length
         */
        mask?: string;
    }

    export interface GetAccessAuthenticationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessAuthenticationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthenticationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessAuthorizationExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationGlobalExceptionRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessAuthorizationGlobalExceptionRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationGlobalExceptionRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationRuleChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessAuthorizationRuleChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessAuthorizationRuleChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessConditionChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessConditionChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Condition description
         */
        description: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Condition name
         */
        name: string;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessConditionChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Condition description
         */
        description: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Condition name
         */
        name: string;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessPolicySetChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         */
        childrens: outputs.network.GetAccessPolicySetChildrenChildren[];
        /**
         * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAccessPolicySetChildrenChildren {
        /**
         * Dictionary attribute name
         */
        attributeName: string;
        /**
         * Attribute value for condition. Value type is specified in dictionary object.
         */
        attributeValue: string;
        /**
         * Condition type.
         */
        conditionType: string;
        /**
         * Dictionary name
         */
        dictionaryName: string;
        /**
         * Dictionary value
         */
        dictionaryValue: string;
        /**
         * UUID for condition
         */
        id: string;
        /**
         * Indicates whereas this condition is in negate mode
         */
        isNegate: boolean;
        /**
         * Equality operator
         */
        operator: string;
    }

    export interface GetAuthorizationProfileAdvancedAttribute {
        /**
         * Dictionary name
         */
        attributeLeftDictionaryName: string;
        /**
         * Attribute name
         */
        attributeLeftName: string;
        /**
         * Dictionary name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightDictionaryName: string;
        /**
         * Attribute name, only required when `attributeRightValueType` is `AdvancedDictionaryAttribute`
         */
        attributeRightName: string;
        /**
         * Attribute value, only required when `attributeRightValueType` is `AttributeValue`
         */
        attributeRightValue: string;
        /**
         * Advanced attribute value type
         */
        attributeRightValueType: string;
    }

    export interface GetDeviceIp {
        /**
         * It can be either single ip address or ip range address
         */
        ipaddress: string;
        /**
         * It can be either single ip address or ip range address
         */
        ipaddressExclude: string;
        /**
         * Subnet mask length
         */
        mask: string;
    }

}

export namespace system {
    export interface GetLicenseTierStateLicense {
        /**
         * License name
         */
        name: string;
        /**
         * License status
         */
        status: string;
    }

    export interface LicenseTierStateLicense {
        /**
         * License name
         *   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
         */
        name: string;
        /**
         * License status
         *   - Choices: `ENABLED`, `DISABLED`
         */
        status: string;
    }

}

export namespace tacacs {
    export interface CommandSetCommand {
        /**
         * Command arguments
         */
        arguments: string;
        /**
         * Command
         */
        command: string;
        /**
         * Grant
         *   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
         */
        grant: string;
    }

    export interface GetCommandSetCommand {
        /**
         * Command arguments
         */
        arguments: string;
        /**
         * Command
         */
        command: string;
        /**
         * Grant
         */
        grant: string;
    }

    export interface GetProfileSessionAttribute {
        /**
         * Name
         */
        name: string;
        /**
         * Type
         */
        type: string;
        /**
         * Value
         */
        value: string;
    }

    export interface ProfileSessionAttribute {
        /**
         * Name
         */
        name: string;
        /**
         * Type
         *   - Choices: `MANDATORY`, `OPTIONAL`
         */
        type: string;
        /**
         * Value
         */
        value: string;
    }

}
