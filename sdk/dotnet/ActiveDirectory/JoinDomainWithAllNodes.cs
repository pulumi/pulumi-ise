// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.ActiveDirectory
{
    /// <summary>
    /// This resource can manage an Active Directory Join Domain with All Nodes.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.ActiveDirectory.JoinDomainWithAllNodes("example", new()
    ///     {
    ///         JoinPointId = "73808580-b6e6-11ee-8960-de6d7692bc40",
    ///         AdditionalDatas = new[]
    ///         {
    ///             new Ise.ActiveDirectory.Inputs.JoinDomainWithAllNodesAdditionalDataArgs
    ///             {
    ///                 Name = "username",
    ///                 Value = "administrator",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [IseResourceType("ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes")]
    public partial class JoinDomainWithAllNodes : global::Pulumi.CustomResource
    {
        [Output("additionalDatas")]
        public Output<ImmutableArray<Outputs.JoinDomainWithAllNodesAdditionalData>> AdditionalDatas { get; private set; } = null!;

        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        [Output("joinPointId")]
        public Output<string> JoinPointId { get; private set; } = null!;


        /// <summary>
        /// Create a JoinDomainWithAllNodes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public JoinDomainWithAllNodes(string name, JoinDomainWithAllNodesArgs args, CustomResourceOptions? options = null)
            : base("ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes", name, args ?? new JoinDomainWithAllNodesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private JoinDomainWithAllNodes(string name, Input<string> id, JoinDomainWithAllNodesState? state = null, CustomResourceOptions? options = null)
            : base("ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing JoinDomainWithAllNodes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static JoinDomainWithAllNodes Get(string name, Input<string> id, JoinDomainWithAllNodesState? state = null, CustomResourceOptions? options = null)
        {
            return new JoinDomainWithAllNodes(name, id, state, options);
        }
    }

    public sealed class JoinDomainWithAllNodesArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalDatas", required: true)]
        private InputList<Inputs.JoinDomainWithAllNodesAdditionalDataArgs>? _additionalDatas;
        public InputList<Inputs.JoinDomainWithAllNodesAdditionalDataArgs> AdditionalDatas
        {
            get => _additionalDatas ?? (_additionalDatas = new InputList<Inputs.JoinDomainWithAllNodesAdditionalDataArgs>());
            set => _additionalDatas = value;
        }

        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        [Input("joinPointId", required: true)]
        public Input<string> JoinPointId { get; set; } = null!;

        public JoinDomainWithAllNodesArgs()
        {
        }
        public static new JoinDomainWithAllNodesArgs Empty => new JoinDomainWithAllNodesArgs();
    }

    public sealed class JoinDomainWithAllNodesState : global::Pulumi.ResourceArgs
    {
        [Input("additionalDatas")]
        private InputList<Inputs.JoinDomainWithAllNodesAdditionalDataGetArgs>? _additionalDatas;
        public InputList<Inputs.JoinDomainWithAllNodesAdditionalDataGetArgs> AdditionalDatas
        {
            get => _additionalDatas ?? (_additionalDatas = new InputList<Inputs.JoinDomainWithAllNodesAdditionalDataGetArgs>());
            set => _additionalDatas = value;
        }

        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        [Input("joinPointId")]
        public Input<string>? JoinPointId { get; set; }

        public JoinDomainWithAllNodesState()
        {
        }
        public static new JoinDomainWithAllNodesState Empty => new JoinDomainWithAllNodesState();
    }
}
