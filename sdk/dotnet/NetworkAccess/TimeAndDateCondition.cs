// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.NetworkAccess
{
    /// <summary>
    /// This resource can manage a Network Access Time And Date Condition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.NetworkAccess.TimeAndDateCondition("example", new()
    ///     {
    ///         Name = "Cond1",
    ///         Description = "My description",
    ///         IsNegate = false,
    ///         WeekDays = new[]
    ///         {
    ///             "Monday",
    ///         },
    ///         WeekDaysExceptions = new[]
    ///         {
    ///             "Tuesday",
    ///         },
    ///         StartDate = "2022-05-06",
    ///         EndDate = "2022-05-10",
    ///         ExceptionStartDate = "2022-06-06",
    ///         ExceptionEndDate = "2022-06-10",
    ///         StartTime = "08:00",
    ///         EndTime = "15:00",
    ///         ExceptionStartTime = "20:00",
    ///         ExceptionEndTime = "22:00",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:networkaccess/timeAndDateCondition:TimeAndDateCondition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:networkaccess/timeAndDateCondition:TimeAndDateCondition")]
    public partial class TimeAndDateCondition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Condition description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// End date
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// End time
        /// </summary>
        [Output("endTime")]
        public Output<string?> EndTime { get; private set; } = null!;

        /// <summary>
        /// Exception end date
        /// </summary>
        [Output("exceptionEndDate")]
        public Output<string?> ExceptionEndDate { get; private set; } = null!;

        /// <summary>
        /// Exception end time
        /// </summary>
        [Output("exceptionEndTime")]
        public Output<string?> ExceptionEndTime { get; private set; } = null!;

        /// <summary>
        /// Exception start date
        /// </summary>
        [Output("exceptionStartDate")]
        public Output<string?> ExceptionStartDate { get; private set; } = null!;

        /// <summary>
        /// Exception start time
        /// </summary>
        [Output("exceptionStartTime")]
        public Output<string?> ExceptionStartTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whereas this condition is in negate mode
        /// </summary>
        [Output("isNegate")]
        public Output<bool?> IsNegate { get; private set; } = null!;

        /// <summary>
        /// Condition name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Start date
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        /// <summary>
        /// Start time
        /// </summary>
        [Output("startTime")]
        public Output<string?> StartTime { get; private set; } = null!;

        /// <summary>
        /// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        /// </summary>
        [Output("weekDays")]
        public Output<ImmutableArray<string>> WeekDays { get; private set; } = null!;

        /// <summary>
        /// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        /// </summary>
        [Output("weekDaysExceptions")]
        public Output<ImmutableArray<string>> WeekDaysExceptions { get; private set; } = null!;


        /// <summary>
        /// Create a TimeAndDateCondition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TimeAndDateCondition(string name, TimeAndDateConditionArgs? args = null, CustomResourceOptions? options = null)
            : base("ise:networkaccess/timeAndDateCondition:TimeAndDateCondition", name, args ?? new TimeAndDateConditionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TimeAndDateCondition(string name, Input<string> id, TimeAndDateConditionState? state = null, CustomResourceOptions? options = null)
            : base("ise:networkaccess/timeAndDateCondition:TimeAndDateCondition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TimeAndDateCondition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TimeAndDateCondition Get(string name, Input<string> id, TimeAndDateConditionState? state = null, CustomResourceOptions? options = null)
        {
            return new TimeAndDateCondition(name, id, state, options);
        }
    }

    public sealed class TimeAndDateConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Condition description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// End time
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// Exception end date
        /// </summary>
        [Input("exceptionEndDate")]
        public Input<string>? ExceptionEndDate { get; set; }

        /// <summary>
        /// Exception end time
        /// </summary>
        [Input("exceptionEndTime")]
        public Input<string>? ExceptionEndTime { get; set; }

        /// <summary>
        /// Exception start date
        /// </summary>
        [Input("exceptionStartDate")]
        public Input<string>? ExceptionStartDate { get; set; }

        /// <summary>
        /// Exception start time
        /// </summary>
        [Input("exceptionStartTime")]
        public Input<string>? ExceptionStartTime { get; set; }

        /// <summary>
        /// Indicates whereas this condition is in negate mode
        /// </summary>
        [Input("isNegate")]
        public Input<bool>? IsNegate { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("weekDays")]
        private InputList<string>? _weekDays;

        /// <summary>
        /// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        /// </summary>
        public InputList<string> WeekDays
        {
            get => _weekDays ?? (_weekDays = new InputList<string>());
            set => _weekDays = value;
        }

        [Input("weekDaysExceptions")]
        private InputList<string>? _weekDaysExceptions;

        /// <summary>
        /// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        /// </summary>
        public InputList<string> WeekDaysExceptions
        {
            get => _weekDaysExceptions ?? (_weekDaysExceptions = new InputList<string>());
            set => _weekDaysExceptions = value;
        }

        public TimeAndDateConditionArgs()
        {
        }
        public static new TimeAndDateConditionArgs Empty => new TimeAndDateConditionArgs();
    }

    public sealed class TimeAndDateConditionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Condition description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// End time
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// Exception end date
        /// </summary>
        [Input("exceptionEndDate")]
        public Input<string>? ExceptionEndDate { get; set; }

        /// <summary>
        /// Exception end time
        /// </summary>
        [Input("exceptionEndTime")]
        public Input<string>? ExceptionEndTime { get; set; }

        /// <summary>
        /// Exception start date
        /// </summary>
        [Input("exceptionStartDate")]
        public Input<string>? ExceptionStartDate { get; set; }

        /// <summary>
        /// Exception start time
        /// </summary>
        [Input("exceptionStartTime")]
        public Input<string>? ExceptionStartTime { get; set; }

        /// <summary>
        /// Indicates whereas this condition is in negate mode
        /// </summary>
        [Input("isNegate")]
        public Input<bool>? IsNegate { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("weekDays")]
        private InputList<string>? _weekDays;

        /// <summary>
        /// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        /// </summary>
        public InputList<string> WeekDays
        {
            get => _weekDays ?? (_weekDays = new InputList<string>());
            set => _weekDays = value;
        }

        [Input("weekDaysExceptions")]
        private InputList<string>? _weekDaysExceptions;

        /// <summary>
        /// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        /// </summary>
        public InputList<string> WeekDaysExceptions
        {
            get => _weekDaysExceptions ?? (_weekDaysExceptions = new InputList<string>());
            set => _weekDaysExceptions = value;
        }

        public TimeAndDateConditionState()
        {
        }
        public static new TimeAndDateConditionState Empty => new TimeAndDateConditionState();
    }
}
