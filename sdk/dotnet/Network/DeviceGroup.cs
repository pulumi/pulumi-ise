// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Network
{
    /// <summary>
    /// This resource can manage a Network Device Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.Network.DeviceGroup("example", new()
    ///     {
    ///         Name = "Device Type#All Device Types#Group1",
    ///         Description = "My network device group",
    ///         RootGroup = "Device Type",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:network/deviceGroup:DeviceGroup example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:network/deviceGroup:DeviceGroup")]
    public partial class DeviceGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the root device group.
        /// </summary>
        [Output("rootGroup")]
        public Output<string> RootGroup { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceGroup(string name, DeviceGroupArgs args, CustomResourceOptions? options = null)
            : base("ise:network/deviceGroup:DeviceGroup", name, args ?? new DeviceGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceGroup(string name, Input<string> id, DeviceGroupState? state = null, CustomResourceOptions? options = null)
            : base("ise:network/deviceGroup:DeviceGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceGroup Get(string name, Input<string> id, DeviceGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceGroup(name, id, state, options);
        }
    }

    public sealed class DeviceGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the root device group.
        /// </summary>
        [Input("rootGroup", required: true)]
        public Input<string> RootGroup { get; set; } = null!;

        public DeviceGroupArgs()
        {
        }
        public static new DeviceGroupArgs Empty => new DeviceGroupArgs();
    }

    public sealed class DeviceGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the root device group.
        /// </summary>
        [Input("rootGroup")]
        public Input<string>? RootGroup { get; set; }

        public DeviceGroupState()
        {
        }
        public static new DeviceGroupState Empty => new DeviceGroupState();
    }
}
