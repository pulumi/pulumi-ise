// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Network
{
    public static class GetAccessTimeAndDateCondition
    {
        /// <summary>
        /// This data source can read the Network Access Time And Date Condition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetAccessTimeAndDateCondition.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccessTimeAndDateConditionResult> InvokeAsync(GetAccessTimeAndDateConditionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessTimeAndDateConditionResult>("ise:network/getAccessTimeAndDateCondition:getAccessTimeAndDateCondition", args ?? new GetAccessTimeAndDateConditionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Network Access Time And Date Condition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetAccessTimeAndDateCondition.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessTimeAndDateConditionResult> Invoke(GetAccessTimeAndDateConditionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessTimeAndDateConditionResult>("ise:network/getAccessTimeAndDateCondition:getAccessTimeAndDateCondition", args ?? new GetAccessTimeAndDateConditionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessTimeAndDateConditionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAccessTimeAndDateConditionArgs()
        {
        }
        public static new GetAccessTimeAndDateConditionArgs Empty => new GetAccessTimeAndDateConditionArgs();
    }

    public sealed class GetAccessTimeAndDateConditionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAccessTimeAndDateConditionInvokeArgs()
        {
        }
        public static new GetAccessTimeAndDateConditionInvokeArgs Empty => new GetAccessTimeAndDateConditionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessTimeAndDateConditionResult
    {
        /// <summary>
        /// Condition description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// End date
        /// </summary>
        public readonly string EndDate;
        /// <summary>
        /// End time
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// Exception end date
        /// </summary>
        public readonly string ExceptionEndDate;
        /// <summary>
        /// Exception end time
        /// </summary>
        public readonly string ExceptionEndTime;
        /// <summary>
        /// Exception start date
        /// </summary>
        public readonly string ExceptionStartDate;
        /// <summary>
        /// Exception start time
        /// </summary>
        public readonly string ExceptionStartTime;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whereas this condition is in negate mode
        /// </summary>
        public readonly bool IsNegate;
        /// <summary>
        /// Condition name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Start date
        /// </summary>
        public readonly string StartDate;
        /// <summary>
        /// Start time
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        /// </summary>
        public readonly ImmutableArray<string> WeekDays;
        /// <summary>
        /// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        /// </summary>
        public readonly ImmutableArray<string> WeekDaysExceptions;

        [OutputConstructor]
        private GetAccessTimeAndDateConditionResult(
            string description,

            string endDate,

            string endTime,

            string exceptionEndDate,

            string exceptionEndTime,

            string exceptionStartDate,

            string exceptionStartTime,

            string id,

            bool isNegate,

            string name,

            string startDate,

            string startTime,

            ImmutableArray<string> weekDays,

            ImmutableArray<string> weekDaysExceptions)
        {
            Description = description;
            EndDate = endDate;
            EndTime = endTime;
            ExceptionEndDate = exceptionEndDate;
            ExceptionEndTime = exceptionEndTime;
            ExceptionStartDate = exceptionStartDate;
            ExceptionStartTime = exceptionStartTime;
            Id = id;
            IsNegate = isNegate;
            Name = name;
            StartDate = startDate;
            StartTime = startTime;
            WeekDays = weekDays;
            WeekDaysExceptions = weekDaysExceptions;
        }
    }
}
