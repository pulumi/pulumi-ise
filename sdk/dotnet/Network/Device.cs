// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Network
{
    /// <summary>
    /// This resource can manage a Network Device.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.Network.Device("example", new()
    ///     {
    ///         Name = "Device1",
    ///         Description = "My device",
    ///         AuthenticationEnableKeyWrap = true,
    ///         AuthenticationEncryptionKey = "cisco123cisco123",
    ///         AuthenticationEncryptionKeyFormat = "ASCII",
    ///         AuthenticationMessageAuthenticatorCodeKey = "cisco123cisco1235678",
    ///         AuthenticationNetworkProtocol = "RADIUS",
    ///         AuthenticationRadiusSharedSecret = "cisco123",
    ///         AuthenticationEnableMultiSecret = true,
    ///         AuthenticationSecondRadiusSharedSecret = "cisco12345",
    ///         AuthenticationDtlsRequired = true,
    ///         CoaPort = 12345,
    ///         DtlsDnsName = "cisco.com",
    ///         Ips = new[]
    ///         {
    ///             new Ise.Network.Inputs.DeviceIpArgs
    ///             {
    ///                 Ipaddress = "2.3.4.5",
    ///                 Mask = "32",
    ///             },
    ///         },
    ///         ModelName = "Unknown",
    ///         SoftwareVersion = "Unknown",
    ///         ProfileName = "Cisco",
    ///         SnmpLinkTrapQuery = true,
    ///         SnmpMacTrapQuery = true,
    ///         SnmpPollingInterval = 1200,
    ///         SnmpRoCommunity = "rocom",
    ///         SnmpVersion = "TWO_C",
    ///         TacacsConnectModeOptions = "OFF",
    ///         TacacsSharedSecret = "cisco123",
    ///         TrustsecDeviceId = "device123",
    ///         TrustsecDevicePassword = "cisco123",
    ///         TrustsecRestApiUsername = "user123",
    ///         TrustsecRestApiPassword = "Cisco123",
    ///         TrustsecEnableModePassword = "cisco123",
    ///         TrustsecExecModePassword = "cisco123",
    ///         TrustsecExecModeUsername = "user456",
    ///         TrustsecIncludeWhenDeployingSgtUpdates = true,
    ///         TrustsecDownloadEnvironmentDataEveryXSeconds = 1000,
    ///         TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds = 1000,
    ///         TrustsecDownloadSgaclListsEveryXSeconds = 1000,
    ///         TrustsecOtherSgaDevicesToTrustThisDevice = true,
    ///         TrustsecReAuthenticationEveryXSeconds = 1000,
    ///         TrustsecSendConfigurationToDevice = true,
    ///         TrustsecSendConfigurationToDeviceUsing = "ENABLE_USING_COA",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:network/device:Device example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:network/device:Device")]
    public partial class Device : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enforce use of DTLS
        /// </summary>
        [Output("authenticationDtlsRequired")]
        public Output<bool?> AuthenticationDtlsRequired { get; private set; } = null!;

        /// <summary>
        /// Enable key wrap
        /// </summary>
        [Output("authenticationEnableKeyWrap")]
        public Output<bool?> AuthenticationEnableKeyWrap { get; private set; } = null!;

        /// <summary>
        /// Enable multiple RADIUS shared secrets
        /// </summary>
        [Output("authenticationEnableMultiSecret")]
        public Output<bool?> AuthenticationEnableMultiSecret { get; private set; } = null!;

        /// <summary>
        /// Encryption key
        /// </summary>
        [Output("authenticationEncryptionKey")]
        public Output<string?> AuthenticationEncryptionKey { get; private set; } = null!;

        /// <summary>
        /// Key input format
        ///   - Choices: `ASCII`, `HEXADECIMAL`
        /// </summary>
        [Output("authenticationEncryptionKeyFormat")]
        public Output<string?> AuthenticationEncryptionKeyFormat { get; private set; } = null!;

        /// <summary>
        /// Message authenticator code key
        /// </summary>
        [Output("authenticationMessageAuthenticatorCodeKey")]
        public Output<string?> AuthenticationMessageAuthenticatorCodeKey { get; private set; } = null!;

        /// <summary>
        /// Network protocol
        ///   - Choices: `RADIUS`, `TACACS_PLUS`
        /// </summary>
        [Output("authenticationNetworkProtocol")]
        public Output<string?> AuthenticationNetworkProtocol { get; private set; } = null!;

        /// <summary>
        /// RADIUS shared secret
        /// </summary>
        [Output("authenticationRadiusSharedSecret")]
        public Output<string?> AuthenticationRadiusSharedSecret { get; private set; } = null!;

        /// <summary>
        /// Second RADIUS shared secret
        /// </summary>
        [Output("authenticationSecondRadiusSharedSecret")]
        public Output<string?> AuthenticationSecondRadiusSharedSecret { get; private set; } = null!;

        /// <summary>
        /// CoA port
        ///   - Default value: `1700`
        /// </summary>
        [Output("coaPort")]
        public Output<int> CoaPort { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
        /// </summary>
        [Output("dtlsDnsName")]
        public Output<string?> DtlsDnsName { get; private set; } = null!;

        /// <summary>
        /// List of IP subnets
        /// </summary>
        [Output("ips")]
        public Output<ImmutableArray<Outputs.DeviceIp>> Ips { get; private set; } = null!;

        /// <summary>
        /// Model name
        /// </summary>
        [Output("modelName")]
        public Output<string?> ModelName { get; private set; } = null!;

        /// <summary>
        /// The name of the network device
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
        /// </summary>
        [Output("networkDeviceGroups")]
        public Output<ImmutableArray<string>> NetworkDeviceGroups { get; private set; } = null!;

        /// <summary>
        /// Profile name
        ///   - Default value: `Cisco`
        /// </summary>
        [Output("profileName")]
        public Output<string> ProfileName { get; private set; } = null!;

        /// <summary>
        /// SNMP link Trap Query
        /// </summary>
        [Output("snmpLinkTrapQuery")]
        public Output<bool?> SnmpLinkTrapQuery { get; private set; } = null!;

        /// <summary>
        /// SNMP MAC Trap Query
        /// </summary>
        [Output("snmpMacTrapQuery")]
        public Output<bool?> SnmpMacTrapQuery { get; private set; } = null!;

        /// <summary>
        /// Originating Policy Services Node
        /// </summary>
        [Output("snmpOriginatingPolicyServiceNode")]
        public Output<string?> SnmpOriginatingPolicyServiceNode { get; private set; } = null!;

        /// <summary>
        /// SNMP Polling Interval in seconds
        ///   - Range: `600`-`86400`
        /// </summary>
        [Output("snmpPollingInterval")]
        public Output<int?> SnmpPollingInterval { get; private set; } = null!;

        /// <summary>
        /// SNMP RO Community
        /// </summary>
        [Output("snmpRoCommunity")]
        public Output<string?> SnmpRoCommunity { get; private set; } = null!;

        /// <summary>
        /// SNMP version
        ///   - Choices: `ONE`, `TWO_C`, `THREE`
        /// </summary>
        [Output("snmpVersion")]
        public Output<string?> SnmpVersion { get; private set; } = null!;

        /// <summary>
        /// Software version
        /// </summary>
        [Output("softwareVersion")]
        public Output<string?> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// Connect mode options
        ///   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
        /// </summary>
        [Output("tacacsConnectModeOptions")]
        public Output<string?> TacacsConnectModeOptions { get; private set; } = null!;

        /// <summary>
        /// Shared secret
        /// </summary>
        [Output("tacacsSharedSecret")]
        public Output<string?> TacacsSharedSecret { get; private set; } = null!;

        /// <summary>
        /// CoA source host
        /// </summary>
        [Output("trustsecCoaSourceHost")]
        public Output<string?> TrustsecCoaSourceHost { get; private set; } = null!;

        /// <summary>
        /// TrustSec device ID
        /// </summary>
        [Output("trustsecDeviceId")]
        public Output<string?> TrustsecDeviceId { get; private set; } = null!;

        /// <summary>
        /// TrustSec device password
        /// </summary>
        [Output("trustsecDevicePassword")]
        public Output<string?> TrustsecDevicePassword { get; private set; } = null!;

        /// <summary>
        /// Download environment data every X seconds
        /// </summary>
        [Output("trustsecDownloadEnvironmentDataEveryXSeconds")]
        public Output<int?> TrustsecDownloadEnvironmentDataEveryXSeconds { get; private set; } = null!;

        /// <summary>
        /// Download peer authorization policy every X seconds
        /// </summary>
        [Output("trustsecDownloadPeerAuthorizationPolicyEveryXSeconds")]
        public Output<int?> TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds { get; private set; } = null!;

        /// <summary>
        /// Download SGACL lists every X seconds
        /// </summary>
        [Output("trustsecDownloadSgaclListsEveryXSeconds")]
        public Output<int?> TrustsecDownloadSgaclListsEveryXSeconds { get; private set; } = null!;

        /// <summary>
        /// Enable mode password
        /// </summary>
        [Output("trustsecEnableModePassword")]
        public Output<string?> TrustsecEnableModePassword { get; private set; } = null!;

        /// <summary>
        /// EXEC mode password
        /// </summary>
        [Output("trustsecExecModePassword")]
        public Output<string?> TrustsecExecModePassword { get; private set; } = null!;

        /// <summary>
        /// EXEC mode username
        /// </summary>
        [Output("trustsecExecModeUsername")]
        public Output<string?> TrustsecExecModeUsername { get; private set; } = null!;

        /// <summary>
        /// Include this device when deploying Security Group Tag Mapping Updates
        /// </summary>
        [Output("trustsecIncludeWhenDeployingSgtUpdates")]
        public Output<bool?> TrustsecIncludeWhenDeployingSgtUpdates { get; private set; } = null!;

        /// <summary>
        /// Other TrustSec devices to trust this device
        /// </summary>
        [Output("trustsecOtherSgaDevicesToTrustThisDevice")]
        public Output<bool?> TrustsecOtherSgaDevicesToTrustThisDevice { get; private set; } = null!;

        /// <summary>
        /// Re-authenticate every X seconds
        /// </summary>
        [Output("trustsecReAuthenticationEveryXSeconds")]
        public Output<int?> TrustsecReAuthenticationEveryXSeconds { get; private set; } = null!;

        /// <summary>
        /// REST API password
        /// </summary>
        [Output("trustsecRestApiPassword")]
        public Output<string?> TrustsecRestApiPassword { get; private set; } = null!;

        /// <summary>
        /// REST API username
        /// </summary>
        [Output("trustsecRestApiUsername")]
        public Output<string?> TrustsecRestApiUsername { get; private set; } = null!;

        /// <summary>
        /// Send configuration to device
        /// </summary>
        [Output("trustsecSendConfigurationToDevice")]
        public Output<bool?> TrustsecSendConfigurationToDevice { get; private set; } = null!;

        /// <summary>
        /// Send configuration to device using
        ///   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
        /// </summary>
        [Output("trustsecSendConfigurationToDeviceUsing")]
        public Output<string?> TrustsecSendConfigurationToDeviceUsing { get; private set; } = null!;


        /// <summary>
        /// Create a Device resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Device(string name, DeviceArgs args, CustomResourceOptions? options = null)
            : base("ise:network/device:Device", name, args ?? new DeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Device(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
            : base("ise:network/device:Device", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Device resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Device Get(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new Device(name, id, state, options);
        }
    }

    public sealed class DeviceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enforce use of DTLS
        /// </summary>
        [Input("authenticationDtlsRequired")]
        public Input<bool>? AuthenticationDtlsRequired { get; set; }

        /// <summary>
        /// Enable key wrap
        /// </summary>
        [Input("authenticationEnableKeyWrap")]
        public Input<bool>? AuthenticationEnableKeyWrap { get; set; }

        /// <summary>
        /// Enable multiple RADIUS shared secrets
        /// </summary>
        [Input("authenticationEnableMultiSecret")]
        public Input<bool>? AuthenticationEnableMultiSecret { get; set; }

        /// <summary>
        /// Encryption key
        /// </summary>
        [Input("authenticationEncryptionKey")]
        public Input<string>? AuthenticationEncryptionKey { get; set; }

        /// <summary>
        /// Key input format
        ///   - Choices: `ASCII`, `HEXADECIMAL`
        /// </summary>
        [Input("authenticationEncryptionKeyFormat")]
        public Input<string>? AuthenticationEncryptionKeyFormat { get; set; }

        /// <summary>
        /// Message authenticator code key
        /// </summary>
        [Input("authenticationMessageAuthenticatorCodeKey")]
        public Input<string>? AuthenticationMessageAuthenticatorCodeKey { get; set; }

        /// <summary>
        /// Network protocol
        ///   - Choices: `RADIUS`, `TACACS_PLUS`
        /// </summary>
        [Input("authenticationNetworkProtocol")]
        public Input<string>? AuthenticationNetworkProtocol { get; set; }

        /// <summary>
        /// RADIUS shared secret
        /// </summary>
        [Input("authenticationRadiusSharedSecret")]
        public Input<string>? AuthenticationRadiusSharedSecret { get; set; }

        /// <summary>
        /// Second RADIUS shared secret
        /// </summary>
        [Input("authenticationSecondRadiusSharedSecret")]
        public Input<string>? AuthenticationSecondRadiusSharedSecret { get; set; }

        /// <summary>
        /// CoA port
        ///   - Default value: `1700`
        /// </summary>
        [Input("coaPort")]
        public Input<int>? CoaPort { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
        /// </summary>
        [Input("dtlsDnsName")]
        public Input<string>? DtlsDnsName { get; set; }

        [Input("ips", required: true)]
        private InputList<Inputs.DeviceIpArgs>? _ips;

        /// <summary>
        /// List of IP subnets
        /// </summary>
        public InputList<Inputs.DeviceIpArgs> Ips
        {
            get => _ips ?? (_ips = new InputList<Inputs.DeviceIpArgs>());
            set => _ips = value;
        }

        /// <summary>
        /// Model name
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// The name of the network device
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkDeviceGroups")]
        private InputList<string>? _networkDeviceGroups;

        /// <summary>
        /// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
        /// </summary>
        public InputList<string> NetworkDeviceGroups
        {
            get => _networkDeviceGroups ?? (_networkDeviceGroups = new InputList<string>());
            set => _networkDeviceGroups = value;
        }

        /// <summary>
        /// Profile name
        ///   - Default value: `Cisco`
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// SNMP link Trap Query
        /// </summary>
        [Input("snmpLinkTrapQuery")]
        public Input<bool>? SnmpLinkTrapQuery { get; set; }

        /// <summary>
        /// SNMP MAC Trap Query
        /// </summary>
        [Input("snmpMacTrapQuery")]
        public Input<bool>? SnmpMacTrapQuery { get; set; }

        /// <summary>
        /// Originating Policy Services Node
        /// </summary>
        [Input("snmpOriginatingPolicyServiceNode")]
        public Input<string>? SnmpOriginatingPolicyServiceNode { get; set; }

        /// <summary>
        /// SNMP Polling Interval in seconds
        ///   - Range: `600`-`86400`
        /// </summary>
        [Input("snmpPollingInterval")]
        public Input<int>? SnmpPollingInterval { get; set; }

        /// <summary>
        /// SNMP RO Community
        /// </summary>
        [Input("snmpRoCommunity")]
        public Input<string>? SnmpRoCommunity { get; set; }

        /// <summary>
        /// SNMP version
        ///   - Choices: `ONE`, `TWO_C`, `THREE`
        /// </summary>
        [Input("snmpVersion")]
        public Input<string>? SnmpVersion { get; set; }

        /// <summary>
        /// Software version
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Connect mode options
        ///   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
        /// </summary>
        [Input("tacacsConnectModeOptions")]
        public Input<string>? TacacsConnectModeOptions { get; set; }

        /// <summary>
        /// Shared secret
        /// </summary>
        [Input("tacacsSharedSecret")]
        public Input<string>? TacacsSharedSecret { get; set; }

        /// <summary>
        /// CoA source host
        /// </summary>
        [Input("trustsecCoaSourceHost")]
        public Input<string>? TrustsecCoaSourceHost { get; set; }

        /// <summary>
        /// TrustSec device ID
        /// </summary>
        [Input("trustsecDeviceId")]
        public Input<string>? TrustsecDeviceId { get; set; }

        /// <summary>
        /// TrustSec device password
        /// </summary>
        [Input("trustsecDevicePassword")]
        public Input<string>? TrustsecDevicePassword { get; set; }

        /// <summary>
        /// Download environment data every X seconds
        /// </summary>
        [Input("trustsecDownloadEnvironmentDataEveryXSeconds")]
        public Input<int>? TrustsecDownloadEnvironmentDataEveryXSeconds { get; set; }

        /// <summary>
        /// Download peer authorization policy every X seconds
        /// </summary>
        [Input("trustsecDownloadPeerAuthorizationPolicyEveryXSeconds")]
        public Input<int>? TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds { get; set; }

        /// <summary>
        /// Download SGACL lists every X seconds
        /// </summary>
        [Input("trustsecDownloadSgaclListsEveryXSeconds")]
        public Input<int>? TrustsecDownloadSgaclListsEveryXSeconds { get; set; }

        /// <summary>
        /// Enable mode password
        /// </summary>
        [Input("trustsecEnableModePassword")]
        public Input<string>? TrustsecEnableModePassword { get; set; }

        /// <summary>
        /// EXEC mode password
        /// </summary>
        [Input("trustsecExecModePassword")]
        public Input<string>? TrustsecExecModePassword { get; set; }

        /// <summary>
        /// EXEC mode username
        /// </summary>
        [Input("trustsecExecModeUsername")]
        public Input<string>? TrustsecExecModeUsername { get; set; }

        /// <summary>
        /// Include this device when deploying Security Group Tag Mapping Updates
        /// </summary>
        [Input("trustsecIncludeWhenDeployingSgtUpdates")]
        public Input<bool>? TrustsecIncludeWhenDeployingSgtUpdates { get; set; }

        /// <summary>
        /// Other TrustSec devices to trust this device
        /// </summary>
        [Input("trustsecOtherSgaDevicesToTrustThisDevice")]
        public Input<bool>? TrustsecOtherSgaDevicesToTrustThisDevice { get; set; }

        /// <summary>
        /// Re-authenticate every X seconds
        /// </summary>
        [Input("trustsecReAuthenticationEveryXSeconds")]
        public Input<int>? TrustsecReAuthenticationEveryXSeconds { get; set; }

        /// <summary>
        /// REST API password
        /// </summary>
        [Input("trustsecRestApiPassword")]
        public Input<string>? TrustsecRestApiPassword { get; set; }

        /// <summary>
        /// REST API username
        /// </summary>
        [Input("trustsecRestApiUsername")]
        public Input<string>? TrustsecRestApiUsername { get; set; }

        /// <summary>
        /// Send configuration to device
        /// </summary>
        [Input("trustsecSendConfigurationToDevice")]
        public Input<bool>? TrustsecSendConfigurationToDevice { get; set; }

        /// <summary>
        /// Send configuration to device using
        ///   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
        /// </summary>
        [Input("trustsecSendConfigurationToDeviceUsing")]
        public Input<string>? TrustsecSendConfigurationToDeviceUsing { get; set; }

        public DeviceArgs()
        {
        }
        public static new DeviceArgs Empty => new DeviceArgs();
    }

    public sealed class DeviceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enforce use of DTLS
        /// </summary>
        [Input("authenticationDtlsRequired")]
        public Input<bool>? AuthenticationDtlsRequired { get; set; }

        /// <summary>
        /// Enable key wrap
        /// </summary>
        [Input("authenticationEnableKeyWrap")]
        public Input<bool>? AuthenticationEnableKeyWrap { get; set; }

        /// <summary>
        /// Enable multiple RADIUS shared secrets
        /// </summary>
        [Input("authenticationEnableMultiSecret")]
        public Input<bool>? AuthenticationEnableMultiSecret { get; set; }

        /// <summary>
        /// Encryption key
        /// </summary>
        [Input("authenticationEncryptionKey")]
        public Input<string>? AuthenticationEncryptionKey { get; set; }

        /// <summary>
        /// Key input format
        ///   - Choices: `ASCII`, `HEXADECIMAL`
        /// </summary>
        [Input("authenticationEncryptionKeyFormat")]
        public Input<string>? AuthenticationEncryptionKeyFormat { get; set; }

        /// <summary>
        /// Message authenticator code key
        /// </summary>
        [Input("authenticationMessageAuthenticatorCodeKey")]
        public Input<string>? AuthenticationMessageAuthenticatorCodeKey { get; set; }

        /// <summary>
        /// Network protocol
        ///   - Choices: `RADIUS`, `TACACS_PLUS`
        /// </summary>
        [Input("authenticationNetworkProtocol")]
        public Input<string>? AuthenticationNetworkProtocol { get; set; }

        /// <summary>
        /// RADIUS shared secret
        /// </summary>
        [Input("authenticationRadiusSharedSecret")]
        public Input<string>? AuthenticationRadiusSharedSecret { get; set; }

        /// <summary>
        /// Second RADIUS shared secret
        /// </summary>
        [Input("authenticationSecondRadiusSharedSecret")]
        public Input<string>? AuthenticationSecondRadiusSharedSecret { get; set; }

        /// <summary>
        /// CoA port
        ///   - Default value: `1700`
        /// </summary>
        [Input("coaPort")]
        public Input<int>? CoaPort { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
        /// </summary>
        [Input("dtlsDnsName")]
        public Input<string>? DtlsDnsName { get; set; }

        [Input("ips")]
        private InputList<Inputs.DeviceIpGetArgs>? _ips;

        /// <summary>
        /// List of IP subnets
        /// </summary>
        public InputList<Inputs.DeviceIpGetArgs> Ips
        {
            get => _ips ?? (_ips = new InputList<Inputs.DeviceIpGetArgs>());
            set => _ips = value;
        }

        /// <summary>
        /// Model name
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// The name of the network device
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkDeviceGroups")]
        private InputList<string>? _networkDeviceGroups;

        /// <summary>
        /// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
        /// </summary>
        public InputList<string> NetworkDeviceGroups
        {
            get => _networkDeviceGroups ?? (_networkDeviceGroups = new InputList<string>());
            set => _networkDeviceGroups = value;
        }

        /// <summary>
        /// Profile name
        ///   - Default value: `Cisco`
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// SNMP link Trap Query
        /// </summary>
        [Input("snmpLinkTrapQuery")]
        public Input<bool>? SnmpLinkTrapQuery { get; set; }

        /// <summary>
        /// SNMP MAC Trap Query
        /// </summary>
        [Input("snmpMacTrapQuery")]
        public Input<bool>? SnmpMacTrapQuery { get; set; }

        /// <summary>
        /// Originating Policy Services Node
        /// </summary>
        [Input("snmpOriginatingPolicyServiceNode")]
        public Input<string>? SnmpOriginatingPolicyServiceNode { get; set; }

        /// <summary>
        /// SNMP Polling Interval in seconds
        ///   - Range: `600`-`86400`
        /// </summary>
        [Input("snmpPollingInterval")]
        public Input<int>? SnmpPollingInterval { get; set; }

        /// <summary>
        /// SNMP RO Community
        /// </summary>
        [Input("snmpRoCommunity")]
        public Input<string>? SnmpRoCommunity { get; set; }

        /// <summary>
        /// SNMP version
        ///   - Choices: `ONE`, `TWO_C`, `THREE`
        /// </summary>
        [Input("snmpVersion")]
        public Input<string>? SnmpVersion { get; set; }

        /// <summary>
        /// Software version
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Connect mode options
        ///   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
        /// </summary>
        [Input("tacacsConnectModeOptions")]
        public Input<string>? TacacsConnectModeOptions { get; set; }

        /// <summary>
        /// Shared secret
        /// </summary>
        [Input("tacacsSharedSecret")]
        public Input<string>? TacacsSharedSecret { get; set; }

        /// <summary>
        /// CoA source host
        /// </summary>
        [Input("trustsecCoaSourceHost")]
        public Input<string>? TrustsecCoaSourceHost { get; set; }

        /// <summary>
        /// TrustSec device ID
        /// </summary>
        [Input("trustsecDeviceId")]
        public Input<string>? TrustsecDeviceId { get; set; }

        /// <summary>
        /// TrustSec device password
        /// </summary>
        [Input("trustsecDevicePassword")]
        public Input<string>? TrustsecDevicePassword { get; set; }

        /// <summary>
        /// Download environment data every X seconds
        /// </summary>
        [Input("trustsecDownloadEnvironmentDataEveryXSeconds")]
        public Input<int>? TrustsecDownloadEnvironmentDataEveryXSeconds { get; set; }

        /// <summary>
        /// Download peer authorization policy every X seconds
        /// </summary>
        [Input("trustsecDownloadPeerAuthorizationPolicyEveryXSeconds")]
        public Input<int>? TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds { get; set; }

        /// <summary>
        /// Download SGACL lists every X seconds
        /// </summary>
        [Input("trustsecDownloadSgaclListsEveryXSeconds")]
        public Input<int>? TrustsecDownloadSgaclListsEveryXSeconds { get; set; }

        /// <summary>
        /// Enable mode password
        /// </summary>
        [Input("trustsecEnableModePassword")]
        public Input<string>? TrustsecEnableModePassword { get; set; }

        /// <summary>
        /// EXEC mode password
        /// </summary>
        [Input("trustsecExecModePassword")]
        public Input<string>? TrustsecExecModePassword { get; set; }

        /// <summary>
        /// EXEC mode username
        /// </summary>
        [Input("trustsecExecModeUsername")]
        public Input<string>? TrustsecExecModeUsername { get; set; }

        /// <summary>
        /// Include this device when deploying Security Group Tag Mapping Updates
        /// </summary>
        [Input("trustsecIncludeWhenDeployingSgtUpdates")]
        public Input<bool>? TrustsecIncludeWhenDeployingSgtUpdates { get; set; }

        /// <summary>
        /// Other TrustSec devices to trust this device
        /// </summary>
        [Input("trustsecOtherSgaDevicesToTrustThisDevice")]
        public Input<bool>? TrustsecOtherSgaDevicesToTrustThisDevice { get; set; }

        /// <summary>
        /// Re-authenticate every X seconds
        /// </summary>
        [Input("trustsecReAuthenticationEveryXSeconds")]
        public Input<int>? TrustsecReAuthenticationEveryXSeconds { get; set; }

        /// <summary>
        /// REST API password
        /// </summary>
        [Input("trustsecRestApiPassword")]
        public Input<string>? TrustsecRestApiPassword { get; set; }

        /// <summary>
        /// REST API username
        /// </summary>
        [Input("trustsecRestApiUsername")]
        public Input<string>? TrustsecRestApiUsername { get; set; }

        /// <summary>
        /// Send configuration to device
        /// </summary>
        [Input("trustsecSendConfigurationToDevice")]
        public Input<bool>? TrustsecSendConfigurationToDevice { get; set; }

        /// <summary>
        /// Send configuration to device using
        ///   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
        /// </summary>
        [Input("trustsecSendConfigurationToDeviceUsing")]
        public Input<string>? TrustsecSendConfigurationToDeviceUsing { get; set; }

        public DeviceState()
        {
        }
        public static new DeviceState Empty => new DeviceState();
    }
}
