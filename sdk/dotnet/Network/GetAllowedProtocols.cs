// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Network
{
    public static class GetAllowedProtocols
    {
        /// <summary>
        /// This data source can read an allowed protocols policy element.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetAllowedProtocols.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAllowedProtocolsResult> InvokeAsync(GetAllowedProtocolsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAllowedProtocolsResult>("ise:network/getAllowedProtocols:getAllowedProtocols", args ?? new GetAllowedProtocolsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read an allowed protocols policy element.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetAllowedProtocols.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAllowedProtocolsResult> Invoke(GetAllowedProtocolsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAllowedProtocolsResult>("ise:network/getAllowedProtocols:getAllowedProtocols", args ?? new GetAllowedProtocolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAllowedProtocolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAllowedProtocolsArgs()
        {
        }
        public static new GetAllowedProtocolsArgs Empty => new GetAllowedProtocolsArgs();
    }

    public sealed class GetAllowedProtocolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAllowedProtocolsInvokeArgs()
        {
        }
        public static new GetAllowedProtocolsInvokeArgs Empty => new GetAllowedProtocolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAllowedProtocolsResult
    {
        /// <summary>
        /// Allow 5G. This field is only supported from ISE 3.2.
        /// </summary>
        public readonly bool Allow5g;
        /// <summary>
        /// Allow CHAP
        /// </summary>
        public readonly bool AllowChap;
        /// <summary>
        /// Allow EAP Fast
        /// </summary>
        public readonly bool AllowEapFast;
        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        public readonly bool AllowEapMd5;
        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        public readonly bool AllowEapTls;
        /// <summary>
        /// Allow EAP TTLS
        /// </summary>
        public readonly bool AllowEapTtls;
        /// <summary>
        /// Allow LEAP
        /// </summary>
        public readonly bool AllowLeap;
        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        public readonly bool AllowMsChapV1;
        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        public readonly bool AllowMsChapV2;
        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        public readonly bool AllowPapAscii;
        /// <summary>
        /// Allow PEAP
        /// </summary>
        public readonly bool AllowPeap;
        /// <summary>
        /// Allow preferred EAP protocol
        /// </summary>
        public readonly bool AllowPreferredEapProtocol;
        /// <summary>
        /// Allow TEAP
        /// </summary>
        public readonly bool AllowTeap;
        /// <summary>
        /// Allow weak ciphers for EAP
        /// </summary>
        public readonly bool AllowWeakCiphersForEap;
        /// <summary>
        /// Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        public readonly bool EapFastAcceptClientCert;
        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        public readonly bool EapFastAllowMachineAuthentication;
        /// <summary>
        /// Allow EAP GTC
        /// </summary>
        public readonly bool EapFastEapGtc;
        /// <summary>
        /// Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        /// </summary>
        public readonly bool EapFastEapGtcPwdChange;
        /// <summary>
        /// EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
        /// </summary>
        public readonly int EapFastEapGtcPwdChangeRetries;
        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        public readonly bool EapFastEapMsChapV2;
        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly bool EapFastEapMsChapV2PwdChange;
        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly int EapFastEapMsChapV2PwdChangeRetries;
        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        public readonly bool EapFastEapTls;
        /// <summary>
        /// Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        /// </summary>
        public readonly bool EapFastEapTlsAuthOfExpiredCerts;
        /// <summary>
        /// Enable EAP chaining
        /// </summary>
        public readonly bool EapFastEnableEapChaining;
        /// <summary>
        /// Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly bool EapFastPacsAllowAnonymousProvisioning;
        /// <summary>
        /// Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly bool EapFastPacsAllowAuthenticatedProvisioning;
        /// <summary>
        /// Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        /// </summary>
        public readonly bool EapFastPacsAllowClientCert;
        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly bool EapFastPacsAllowMachineAuthentication;
        /// <summary>
        /// Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        /// </summary>
        public readonly int EapFastPacsAuthorizationPacTtl;
        /// <summary>
        /// Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        /// </summary>
        public readonly string EapFastPacsAuthorizationPacTtlUnit;
        /// <summary>
        /// Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        /// </summary>
        public readonly int EapFastPacsMachinePacTtl;
        /// <summary>
        /// Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        /// </summary>
        public readonly string EapFastPacsMachinePacTtlUnit;
        /// <summary>
        /// Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        /// </summary>
        public readonly bool EapFastPacsServerReturns;
        /// <summary>
        /// Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly bool EapFastPacsStatelessSessionResume;
        /// <summary>
        /// PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly int EapFastPacsTunnelPacTtl;
        /// <summary>
        /// PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly string EapFastPacsTunnelPacTtlUnit;
        /// <summary>
        /// Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        public readonly int EapFastPacsUseProactivePacUpdatePercentage;
        /// <summary>
        /// Use PACs
        /// </summary>
        public readonly bool EapFastUsePacs;
        /// <summary>
        /// Allow authentication of expired certificates
        /// </summary>
        public readonly bool EapTlsAllowAuthOfExpiredCerts;
        /// <summary>
        /// Enable stateless session resume
        /// </summary>
        public readonly bool EapTlsEnableStatelessSessionResume;
        /// <summary>
        /// EAP TLS L-Bit
        /// </summary>
        public readonly bool EapTlsLBit;
        /// <summary>
        /// Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        public readonly int EapTlsSessionTicketPercentage;
        /// <summary>
        /// Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        public readonly int EapTlsSessionTicketTtl;
        /// <summary>
        /// Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        public readonly string EapTlsSessionTicketTtlUnit;
        /// <summary>
        /// Allow CHAP
        /// </summary>
        public readonly bool EapTtlsChap;
        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        public readonly bool EapTtlsEapMd5;
        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        public readonly bool EapTtlsEapMsChapV2;
        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly bool EapTtlsEapMsChapV2PwdChange;
        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly int EapTtlsEapMsChapV2PwdChangeRetries;
        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        public readonly bool EapTtlsMsChapV1;
        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        public readonly bool EapTtlsMsChapV2;
        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        public readonly bool EapTtlsPapAscii;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Allow PEAP EAP GTC
        /// </summary>
        public readonly bool PeapAllowPeapEapGtc;
        /// <summary>
        /// Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        /// </summary>
        public readonly bool PeapAllowPeapEapGtcPwdChange;
        /// <summary>
        /// PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
        /// </summary>
        public readonly int PeapAllowPeapEapGtcPwdChangeRetries;
        /// <summary>
        /// Allow PEAP EAP MS CHAP v2
        /// </summary>
        public readonly bool PeapAllowPeapEapMsChapV2;
        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly bool PeapAllowPeapEapMsChapV2PwdChange;
        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly int PeapAllowPeapEapMsChapV2PwdChangeRetries;
        /// <summary>
        /// Allow PEAP EAP TLS
        /// </summary>
        public readonly bool PeapAllowPeapEapTls;
        /// <summary>
        /// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        /// </summary>
        public readonly bool PeapAllowPeapEapTlsAuthOfExpiredCerts;
        /// <summary>
        /// Allow PEAP v0
        /// </summary>
        public readonly bool PeapPeapV0;
        /// <summary>
        /// Preferred EAP protocol
        /// </summary>
        public readonly string PreferredEapProtocol;
        /// <summary>
        /// Process host lookup
        /// </summary>
        public readonly bool ProcessHostLookup;
        /// <summary>
        /// Require cryptobinding
        /// </summary>
        public readonly bool RequireCryptobinding;
        /// <summary>
        /// Require message authentication
        /// </summary>
        public readonly bool RequireMessageAuth;
        /// <summary>
        /// Allow downgrade to MSK
        /// </summary>
        public readonly bool TeapDowngradeMsk;
        /// <summary>
        /// Accept client certificate during tunnel establishment
        /// </summary>
        public readonly bool TeapEapAcceptClientCertDuringTunnelEst;
        /// <summary>
        /// Allow EAP chaining
        /// </summary>
        public readonly bool TeapEapChaining;
        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        public readonly bool TeapEapMsChapV2;
        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly bool TeapEapMsChapV2PwdChange;
        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
        /// </summary>
        public readonly int TeapEapMsChapV2PwdChangeRetries;
        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        public readonly bool TeapEapTls;
        /// <summary>
        /// Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        /// </summary>
        public readonly bool TeapEapTlsAuthOfExpiredCerts;
        /// <summary>
        /// Request basic password authentication
        /// </summary>
        public readonly bool TeapRequestBasicPwdAuth;

        [OutputConstructor]
        private GetAllowedProtocolsResult(
            bool allow5g,

            bool allowChap,

            bool allowEapFast,

            bool allowEapMd5,

            bool allowEapTls,

            bool allowEapTtls,

            bool allowLeap,

            bool allowMsChapV1,

            bool allowMsChapV2,

            bool allowPapAscii,

            bool allowPeap,

            bool allowPreferredEapProtocol,

            bool allowTeap,

            bool allowWeakCiphersForEap,

            string description,

            bool eapFastAcceptClientCert,

            bool eapFastAllowMachineAuthentication,

            bool eapFastEapGtc,

            bool eapFastEapGtcPwdChange,

            int eapFastEapGtcPwdChangeRetries,

            bool eapFastEapMsChapV2,

            bool eapFastEapMsChapV2PwdChange,

            int eapFastEapMsChapV2PwdChangeRetries,

            bool eapFastEapTls,

            bool eapFastEapTlsAuthOfExpiredCerts,

            bool eapFastEnableEapChaining,

            bool eapFastPacsAllowAnonymousProvisioning,

            bool eapFastPacsAllowAuthenticatedProvisioning,

            bool eapFastPacsAllowClientCert,

            bool eapFastPacsAllowMachineAuthentication,

            int eapFastPacsAuthorizationPacTtl,

            string eapFastPacsAuthorizationPacTtlUnit,

            int eapFastPacsMachinePacTtl,

            string eapFastPacsMachinePacTtlUnit,

            bool eapFastPacsServerReturns,

            bool eapFastPacsStatelessSessionResume,

            int eapFastPacsTunnelPacTtl,

            string eapFastPacsTunnelPacTtlUnit,

            int eapFastPacsUseProactivePacUpdatePercentage,

            bool eapFastUsePacs,

            bool eapTlsAllowAuthOfExpiredCerts,

            bool eapTlsEnableStatelessSessionResume,

            bool eapTlsLBit,

            int eapTlsSessionTicketPercentage,

            int eapTlsSessionTicketTtl,

            string eapTlsSessionTicketTtlUnit,

            bool eapTtlsChap,

            bool eapTtlsEapMd5,

            bool eapTtlsEapMsChapV2,

            bool eapTtlsEapMsChapV2PwdChange,

            int eapTtlsEapMsChapV2PwdChangeRetries,

            bool eapTtlsMsChapV1,

            bool eapTtlsMsChapV2,

            bool eapTtlsPapAscii,

            string id,

            string name,

            bool peapAllowPeapEapGtc,

            bool peapAllowPeapEapGtcPwdChange,

            int peapAllowPeapEapGtcPwdChangeRetries,

            bool peapAllowPeapEapMsChapV2,

            bool peapAllowPeapEapMsChapV2PwdChange,

            int peapAllowPeapEapMsChapV2PwdChangeRetries,

            bool peapAllowPeapEapTls,

            bool peapAllowPeapEapTlsAuthOfExpiredCerts,

            bool peapPeapV0,

            string preferredEapProtocol,

            bool processHostLookup,

            bool requireCryptobinding,

            bool requireMessageAuth,

            bool teapDowngradeMsk,

            bool teapEapAcceptClientCertDuringTunnelEst,

            bool teapEapChaining,

            bool teapEapMsChapV2,

            bool teapEapMsChapV2PwdChange,

            int teapEapMsChapV2PwdChangeRetries,

            bool teapEapTls,

            bool teapEapTlsAuthOfExpiredCerts,

            bool teapRequestBasicPwdAuth)
        {
            Allow5g = allow5g;
            AllowChap = allowChap;
            AllowEapFast = allowEapFast;
            AllowEapMd5 = allowEapMd5;
            AllowEapTls = allowEapTls;
            AllowEapTtls = allowEapTtls;
            AllowLeap = allowLeap;
            AllowMsChapV1 = allowMsChapV1;
            AllowMsChapV2 = allowMsChapV2;
            AllowPapAscii = allowPapAscii;
            AllowPeap = allowPeap;
            AllowPreferredEapProtocol = allowPreferredEapProtocol;
            AllowTeap = allowTeap;
            AllowWeakCiphersForEap = allowWeakCiphersForEap;
            Description = description;
            EapFastAcceptClientCert = eapFastAcceptClientCert;
            EapFastAllowMachineAuthentication = eapFastAllowMachineAuthentication;
            EapFastEapGtc = eapFastEapGtc;
            EapFastEapGtcPwdChange = eapFastEapGtcPwdChange;
            EapFastEapGtcPwdChangeRetries = eapFastEapGtcPwdChangeRetries;
            EapFastEapMsChapV2 = eapFastEapMsChapV2;
            EapFastEapMsChapV2PwdChange = eapFastEapMsChapV2PwdChange;
            EapFastEapMsChapV2PwdChangeRetries = eapFastEapMsChapV2PwdChangeRetries;
            EapFastEapTls = eapFastEapTls;
            EapFastEapTlsAuthOfExpiredCerts = eapFastEapTlsAuthOfExpiredCerts;
            EapFastEnableEapChaining = eapFastEnableEapChaining;
            EapFastPacsAllowAnonymousProvisioning = eapFastPacsAllowAnonymousProvisioning;
            EapFastPacsAllowAuthenticatedProvisioning = eapFastPacsAllowAuthenticatedProvisioning;
            EapFastPacsAllowClientCert = eapFastPacsAllowClientCert;
            EapFastPacsAllowMachineAuthentication = eapFastPacsAllowMachineAuthentication;
            EapFastPacsAuthorizationPacTtl = eapFastPacsAuthorizationPacTtl;
            EapFastPacsAuthorizationPacTtlUnit = eapFastPacsAuthorizationPacTtlUnit;
            EapFastPacsMachinePacTtl = eapFastPacsMachinePacTtl;
            EapFastPacsMachinePacTtlUnit = eapFastPacsMachinePacTtlUnit;
            EapFastPacsServerReturns = eapFastPacsServerReturns;
            EapFastPacsStatelessSessionResume = eapFastPacsStatelessSessionResume;
            EapFastPacsTunnelPacTtl = eapFastPacsTunnelPacTtl;
            EapFastPacsTunnelPacTtlUnit = eapFastPacsTunnelPacTtlUnit;
            EapFastPacsUseProactivePacUpdatePercentage = eapFastPacsUseProactivePacUpdatePercentage;
            EapFastUsePacs = eapFastUsePacs;
            EapTlsAllowAuthOfExpiredCerts = eapTlsAllowAuthOfExpiredCerts;
            EapTlsEnableStatelessSessionResume = eapTlsEnableStatelessSessionResume;
            EapTlsLBit = eapTlsLBit;
            EapTlsSessionTicketPercentage = eapTlsSessionTicketPercentage;
            EapTlsSessionTicketTtl = eapTlsSessionTicketTtl;
            EapTlsSessionTicketTtlUnit = eapTlsSessionTicketTtlUnit;
            EapTtlsChap = eapTtlsChap;
            EapTtlsEapMd5 = eapTtlsEapMd5;
            EapTtlsEapMsChapV2 = eapTtlsEapMsChapV2;
            EapTtlsEapMsChapV2PwdChange = eapTtlsEapMsChapV2PwdChange;
            EapTtlsEapMsChapV2PwdChangeRetries = eapTtlsEapMsChapV2PwdChangeRetries;
            EapTtlsMsChapV1 = eapTtlsMsChapV1;
            EapTtlsMsChapV2 = eapTtlsMsChapV2;
            EapTtlsPapAscii = eapTtlsPapAscii;
            Id = id;
            Name = name;
            PeapAllowPeapEapGtc = peapAllowPeapEapGtc;
            PeapAllowPeapEapGtcPwdChange = peapAllowPeapEapGtcPwdChange;
            PeapAllowPeapEapGtcPwdChangeRetries = peapAllowPeapEapGtcPwdChangeRetries;
            PeapAllowPeapEapMsChapV2 = peapAllowPeapEapMsChapV2;
            PeapAllowPeapEapMsChapV2PwdChange = peapAllowPeapEapMsChapV2PwdChange;
            PeapAllowPeapEapMsChapV2PwdChangeRetries = peapAllowPeapEapMsChapV2PwdChangeRetries;
            PeapAllowPeapEapTls = peapAllowPeapEapTls;
            PeapAllowPeapEapTlsAuthOfExpiredCerts = peapAllowPeapEapTlsAuthOfExpiredCerts;
            PeapPeapV0 = peapPeapV0;
            PreferredEapProtocol = preferredEapProtocol;
            ProcessHostLookup = processHostLookup;
            RequireCryptobinding = requireCryptobinding;
            RequireMessageAuth = requireMessageAuth;
            TeapDowngradeMsk = teapDowngradeMsk;
            TeapEapAcceptClientCertDuringTunnelEst = teapEapAcceptClientCertDuringTunnelEst;
            TeapEapChaining = teapEapChaining;
            TeapEapMsChapV2 = teapEapMsChapV2;
            TeapEapMsChapV2PwdChange = teapEapMsChapV2PwdChange;
            TeapEapMsChapV2PwdChangeRetries = teapEapMsChapV2PwdChangeRetries;
            TeapEapTls = teapEapTls;
            TeapEapTlsAuthOfExpiredCerts = teapEapTlsAuthOfExpiredCerts;
            TeapRequestBasicPwdAuth = teapRequestBasicPwdAuth;
        }
    }
}
