// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Network
{
    public static class GetDevice
    {
        /// <summary>
        /// This data source can read the Network Device.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetDevice.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeviceResult> InvokeAsync(GetDeviceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceResult>("ise:network/getDevice:getDevice", args ?? new GetDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Network Device.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetDevice.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeviceResult> Invoke(GetDeviceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceResult>("ise:network/getDevice:getDevice", args ?? new GetDeviceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Network Device.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.Network.GetDevice.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeviceResult> Invoke(GetDeviceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceResult>("ise:network/getDevice:getDevice", args ?? new GetDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the network device
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetDeviceArgs()
        {
        }
        public static new GetDeviceArgs Empty => new GetDeviceArgs();
    }

    public sealed class GetDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the network device
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetDeviceInvokeArgs()
        {
        }
        public static new GetDeviceInvokeArgs Empty => new GetDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceResult
    {
        /// <summary>
        /// Enforce use of DTLS
        /// </summary>
        public readonly bool AuthenticationDtlsRequired;
        /// <summary>
        /// Enable key wrap
        /// </summary>
        public readonly bool AuthenticationEnableKeyWrap;
        /// <summary>
        /// Enable multiple RADIUS shared secrets
        /// </summary>
        public readonly bool AuthenticationEnableMultiSecret;
        /// <summary>
        /// Encryption key
        /// </summary>
        public readonly string AuthenticationEncryptionKey;
        /// <summary>
        /// Key input format
        /// </summary>
        public readonly string AuthenticationEncryptionKeyFormat;
        /// <summary>
        /// Message authenticator code key
        /// </summary>
        public readonly string AuthenticationMessageAuthenticatorCodeKey;
        /// <summary>
        /// Network protocol
        /// </summary>
        public readonly string AuthenticationNetworkProtocol;
        /// <summary>
        /// RADIUS shared secret
        /// </summary>
        public readonly string AuthenticationRadiusSharedSecret;
        /// <summary>
        /// Second RADIUS shared secret
        /// </summary>
        public readonly string AuthenticationSecondRadiusSharedSecret;
        /// <summary>
        /// CoA port
        /// </summary>
        public readonly int CoaPort;
        /// <summary>
        /// Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
        /// </summary>
        public readonly string DtlsDnsName;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IP subnets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeviceIpResult> Ips;
        /// <summary>
        /// Model name
        /// </summary>
        public readonly string ModelName;
        /// <summary>
        /// The name of the network device
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
        /// </summary>
        public readonly ImmutableArray<string> NetworkDeviceGroups;
        /// <summary>
        /// Profile name
        /// </summary>
        public readonly string ProfileName;
        /// <summary>
        /// SNMP link Trap Query
        /// </summary>
        public readonly bool SnmpLinkTrapQuery;
        /// <summary>
        /// SNMP MAC Trap Query
        /// </summary>
        public readonly bool SnmpMacTrapQuery;
        /// <summary>
        /// Originating Policy Services Node
        /// </summary>
        public readonly string SnmpOriginatingPolicyServiceNode;
        /// <summary>
        /// SNMP Polling Interval in seconds
        /// </summary>
        public readonly int SnmpPollingInterval;
        /// <summary>
        /// SNMP RO Community
        /// </summary>
        public readonly string SnmpRoCommunity;
        /// <summary>
        /// SNMP version
        /// </summary>
        public readonly string SnmpVersion;
        /// <summary>
        /// Software version
        /// </summary>
        public readonly string SoftwareVersion;
        /// <summary>
        /// Connect mode options
        /// </summary>
        public readonly string TacacsConnectModeOptions;
        /// <summary>
        /// Shared secret
        /// </summary>
        public readonly string TacacsSharedSecret;
        /// <summary>
        /// CoA source host
        /// </summary>
        public readonly string TrustsecCoaSourceHost;
        /// <summary>
        /// TrustSec device ID
        /// </summary>
        public readonly string TrustsecDeviceId;
        /// <summary>
        /// TrustSec device password
        /// </summary>
        public readonly string TrustsecDevicePassword;
        /// <summary>
        /// Download environment data every X seconds
        /// </summary>
        public readonly int TrustsecDownloadEnvironmentDataEveryXSeconds;
        /// <summary>
        /// Download peer authorization policy every X seconds
        /// </summary>
        public readonly int TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
        /// <summary>
        /// Download SGACL lists every X seconds
        /// </summary>
        public readonly int TrustsecDownloadSgaclListsEveryXSeconds;
        /// <summary>
        /// Enable mode password
        /// </summary>
        public readonly string TrustsecEnableModePassword;
        /// <summary>
        /// EXEC mode password
        /// </summary>
        public readonly string TrustsecExecModePassword;
        /// <summary>
        /// EXEC mode username
        /// </summary>
        public readonly string TrustsecExecModeUsername;
        /// <summary>
        /// Include this device when deploying Security Group Tag Mapping Updates
        /// </summary>
        public readonly bool TrustsecIncludeWhenDeployingSgtUpdates;
        /// <summary>
        /// Other TrustSec devices to trust this device
        /// </summary>
        public readonly bool TrustsecOtherSgaDevicesToTrustThisDevice;
        /// <summary>
        /// Re-authenticate every X seconds
        /// </summary>
        public readonly int TrustsecReAuthenticationEveryXSeconds;
        /// <summary>
        /// REST API password
        /// </summary>
        public readonly string TrustsecRestApiPassword;
        /// <summary>
        /// REST API username
        /// </summary>
        public readonly string TrustsecRestApiUsername;
        /// <summary>
        /// Send configuration to device
        /// </summary>
        public readonly bool TrustsecSendConfigurationToDevice;
        /// <summary>
        /// Send configuration to device using
        /// </summary>
        public readonly string TrustsecSendConfigurationToDeviceUsing;

        [OutputConstructor]
        private GetDeviceResult(
            bool authenticationDtlsRequired,

            bool authenticationEnableKeyWrap,

            bool authenticationEnableMultiSecret,

            string authenticationEncryptionKey,

            string authenticationEncryptionKeyFormat,

            string authenticationMessageAuthenticatorCodeKey,

            string authenticationNetworkProtocol,

            string authenticationRadiusSharedSecret,

            string authenticationSecondRadiusSharedSecret,

            int coaPort,

            string description,

            string dtlsDnsName,

            string id,

            ImmutableArray<Outputs.GetDeviceIpResult> ips,

            string modelName,

            string name,

            ImmutableArray<string> networkDeviceGroups,

            string profileName,

            bool snmpLinkTrapQuery,

            bool snmpMacTrapQuery,

            string snmpOriginatingPolicyServiceNode,

            int snmpPollingInterval,

            string snmpRoCommunity,

            string snmpVersion,

            string softwareVersion,

            string tacacsConnectModeOptions,

            string tacacsSharedSecret,

            string trustsecCoaSourceHost,

            string trustsecDeviceId,

            string trustsecDevicePassword,

            int trustsecDownloadEnvironmentDataEveryXSeconds,

            int trustsecDownloadPeerAuthorizationPolicyEveryXSeconds,

            int trustsecDownloadSgaclListsEveryXSeconds,

            string trustsecEnableModePassword,

            string trustsecExecModePassword,

            string trustsecExecModeUsername,

            bool trustsecIncludeWhenDeployingSgtUpdates,

            bool trustsecOtherSgaDevicesToTrustThisDevice,

            int trustsecReAuthenticationEveryXSeconds,

            string trustsecRestApiPassword,

            string trustsecRestApiUsername,

            bool trustsecSendConfigurationToDevice,

            string trustsecSendConfigurationToDeviceUsing)
        {
            AuthenticationDtlsRequired = authenticationDtlsRequired;
            AuthenticationEnableKeyWrap = authenticationEnableKeyWrap;
            AuthenticationEnableMultiSecret = authenticationEnableMultiSecret;
            AuthenticationEncryptionKey = authenticationEncryptionKey;
            AuthenticationEncryptionKeyFormat = authenticationEncryptionKeyFormat;
            AuthenticationMessageAuthenticatorCodeKey = authenticationMessageAuthenticatorCodeKey;
            AuthenticationNetworkProtocol = authenticationNetworkProtocol;
            AuthenticationRadiusSharedSecret = authenticationRadiusSharedSecret;
            AuthenticationSecondRadiusSharedSecret = authenticationSecondRadiusSharedSecret;
            CoaPort = coaPort;
            Description = description;
            DtlsDnsName = dtlsDnsName;
            Id = id;
            Ips = ips;
            ModelName = modelName;
            Name = name;
            NetworkDeviceGroups = networkDeviceGroups;
            ProfileName = profileName;
            SnmpLinkTrapQuery = snmpLinkTrapQuery;
            SnmpMacTrapQuery = snmpMacTrapQuery;
            SnmpOriginatingPolicyServiceNode = snmpOriginatingPolicyServiceNode;
            SnmpPollingInterval = snmpPollingInterval;
            SnmpRoCommunity = snmpRoCommunity;
            SnmpVersion = snmpVersion;
            SoftwareVersion = softwareVersion;
            TacacsConnectModeOptions = tacacsConnectModeOptions;
            TacacsSharedSecret = tacacsSharedSecret;
            TrustsecCoaSourceHost = trustsecCoaSourceHost;
            TrustsecDeviceId = trustsecDeviceId;
            TrustsecDevicePassword = trustsecDevicePassword;
            TrustsecDownloadEnvironmentDataEveryXSeconds = trustsecDownloadEnvironmentDataEveryXSeconds;
            TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds = trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
            TrustsecDownloadSgaclListsEveryXSeconds = trustsecDownloadSgaclListsEveryXSeconds;
            TrustsecEnableModePassword = trustsecEnableModePassword;
            TrustsecExecModePassword = trustsecExecModePassword;
            TrustsecExecModeUsername = trustsecExecModeUsername;
            TrustsecIncludeWhenDeployingSgtUpdates = trustsecIncludeWhenDeployingSgtUpdates;
            TrustsecOtherSgaDevicesToTrustThisDevice = trustsecOtherSgaDevicesToTrustThisDevice;
            TrustsecReAuthenticationEveryXSeconds = trustsecReAuthenticationEveryXSeconds;
            TrustsecRestApiPassword = trustsecRestApiPassword;
            TrustsecRestApiUsername = trustsecRestApiUsername;
            TrustsecSendConfigurationToDevice = trustsecSendConfigurationToDevice;
            TrustsecSendConfigurationToDeviceUsing = trustsecSendConfigurationToDeviceUsing;
        }
    }
}
