// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.System
{
    /// <summary>
    /// This resource can manage a License Tier State.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.System.LicenseTierState("example", new()
    ///     {
    ///         Licenses = new[]
    ///         {
    ///             new Ise.System.Inputs.LicenseTierStateLicenseArgs
    ///             {
    ///                 Name = "ESSENTIAL",
    ///                 Status = "ENABLED",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:system/licenseTierState:LicenseTierState example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:system/licenseTierState:LicenseTierState")]
    public partial class LicenseTierState : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of licenses
        /// </summary>
        [Output("licenses")]
        public Output<ImmutableArray<Outputs.LicenseTierStateLicense>> Licenses { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseTierState resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseTierState(string name, LicenseTierStateArgs args, CustomResourceOptions? options = null)
            : base("ise:system/licenseTierState:LicenseTierState", name, args ?? new LicenseTierStateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseTierState(string name, Input<string> id, LicenseTierStateState? state = null, CustomResourceOptions? options = null)
            : base("ise:system/licenseTierState:LicenseTierState", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseTierState resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseTierState Get(string name, Input<string> id, LicenseTierStateState? state = null, CustomResourceOptions? options = null)
        {
            return new LicenseTierState(name, id, state, options);
        }
    }

    public sealed class LicenseTierStateArgs : global::Pulumi.ResourceArgs
    {
        [Input("licenses", required: true)]
        private InputList<Inputs.LicenseTierStateLicenseArgs>? _licenses;

        /// <summary>
        /// List of licenses
        /// </summary>
        public InputList<Inputs.LicenseTierStateLicenseArgs> Licenses
        {
            get => _licenses ?? (_licenses = new InputList<Inputs.LicenseTierStateLicenseArgs>());
            set => _licenses = value;
        }

        public LicenseTierStateArgs()
        {
        }
        public static new LicenseTierStateArgs Empty => new LicenseTierStateArgs();
    }

    public sealed class LicenseTierStateState : global::Pulumi.ResourceArgs
    {
        [Input("licenses")]
        private InputList<Inputs.LicenseTierStateLicenseGetArgs>? _licenses;

        /// <summary>
        /// List of licenses
        /// </summary>
        public InputList<Inputs.LicenseTierStateLicenseGetArgs> Licenses
        {
            get => _licenses ?? (_licenses = new InputList<Inputs.LicenseTierStateLicenseGetArgs>());
            set => _licenses = value;
        }

        public LicenseTierStateState()
        {
        }
        public static new LicenseTierStateState Empty => new LicenseTierStateState();
    }
}
