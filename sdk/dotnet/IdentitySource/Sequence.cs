// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.IdentitySource
{
    /// <summary>
    /// This resource can manage an Identity Source Sequence.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.IdentitySource.Sequence("example", new()
    ///     {
    ///         Name = "Sequence1",
    ///         Description = "My identity source sequence",
    ///         BreakOnStoreFail = true,
    ///         CertificateAuthenticationProfile = "Preloaded_Certificate_Profile",
    ///         IdentitySources = new[]
    ///         {
    ///             new Ise.IdentitySource.Inputs.SequenceIdentitySourceArgs
    ///             {
    ///                 Name = "Internal Users",
    ///                 Order = 1,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import ise:IdentitySource/sequence:Sequence example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:IdentitySource/sequence:Sequence")]
    public partial class Sequence : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
        /// </summary>
        [Output("breakOnStoreFail")]
        public Output<bool> BreakOnStoreFail { get; private set; } = null!;

        /// <summary>
        /// Certificate Authentication Profile, empty if doesn't exist
        /// </summary>
        [Output("certificateAuthenticationProfile")]
        public Output<string> CertificateAuthenticationProfile { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("identitySources")]
        public Output<ImmutableArray<Outputs.SequenceIdentitySource>> IdentitySources { get; private set; } = null!;

        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Sequence resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sequence(string name, SequenceArgs args, CustomResourceOptions? options = null)
            : base("ise:IdentitySource/sequence:Sequence", name, args ?? new SequenceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sequence(string name, Input<string> id, SequenceState? state = null, CustomResourceOptions? options = null)
            : base("ise:IdentitySource/sequence:Sequence", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sequence resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sequence Get(string name, Input<string> id, SequenceState? state = null, CustomResourceOptions? options = null)
        {
            return new Sequence(name, id, state, options);
        }
    }

    public sealed class SequenceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
        /// </summary>
        [Input("breakOnStoreFail", required: true)]
        public Input<bool> BreakOnStoreFail { get; set; } = null!;

        /// <summary>
        /// Certificate Authentication Profile, empty if doesn't exist
        /// </summary>
        [Input("certificateAuthenticationProfile", required: true)]
        public Input<string> CertificateAuthenticationProfile { get; set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("identitySources", required: true)]
        private InputList<Inputs.SequenceIdentitySourceArgs>? _identitySources;
        public InputList<Inputs.SequenceIdentitySourceArgs> IdentitySources
        {
            get => _identitySources ?? (_identitySources = new InputList<Inputs.SequenceIdentitySourceArgs>());
            set => _identitySources = value;
        }

        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SequenceArgs()
        {
        }
        public static new SequenceArgs Empty => new SequenceArgs();
    }

    public sealed class SequenceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
        /// </summary>
        [Input("breakOnStoreFail")]
        public Input<bool>? BreakOnStoreFail { get; set; }

        /// <summary>
        /// Certificate Authentication Profile, empty if doesn't exist
        /// </summary>
        [Input("certificateAuthenticationProfile")]
        public Input<string>? CertificateAuthenticationProfile { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("identitySources")]
        private InputList<Inputs.SequenceIdentitySourceGetArgs>? _identitySources;
        public InputList<Inputs.SequenceIdentitySourceGetArgs> IdentitySources
        {
            get => _identitySources ?? (_identitySources = new InputList<Inputs.SequenceIdentitySourceGetArgs>());
            set => _identitySources = value;
        }

        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SequenceState()
        {
        }
        public static new SequenceState Empty => new SequenceState();
    }
}
