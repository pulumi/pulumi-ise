// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.IdentitySource
{
    public static class GetSequence
    {
        /// <summary>
        /// This data source can read the Identity Source Sequence.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.IdentitySource.GetSequence.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSequenceResult> InvokeAsync(GetSequenceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSequenceResult>("ise:IdentitySource/getSequence:getSequence", args ?? new GetSequenceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Identity Source Sequence.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.IdentitySource.GetSequence.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSequenceResult> Invoke(GetSequenceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSequenceResult>("ise:IdentitySource/getSequence:getSequence", args ?? new GetSequenceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSequenceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSequenceArgs()
        {
        }
        public static new GetSequenceArgs Empty => new GetSequenceArgs();
    }

    public sealed class GetSequenceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSequenceInvokeArgs()
        {
        }
        public static new GetSequenceInvokeArgs Empty => new GetSequenceInvokeArgs();
    }


    [OutputType]
    public sealed class GetSequenceResult
    {
        /// <summary>
        /// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
        /// </summary>
        public readonly bool BreakOnStoreFail;
        /// <summary>
        /// Certificate Authentication Profile, empty if doesn't exist
        /// </summary>
        public readonly string CertificateAuthenticationProfile;
        /// <summary>
        /// Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetSequenceIdentitySourceResult> IdentitySources;
        /// <summary>
        /// The name of the identity source sequence
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetSequenceResult(
            bool breakOnStoreFail,

            string certificateAuthenticationProfile,

            string description,

            string id,

            ImmutableArray<Outputs.GetSequenceIdentitySourceResult> identitySources,

            string name)
        {
            BreakOnStoreFail = breakOnStoreFail;
            CertificateAuthenticationProfile = certificateAuthenticationProfile;
            Description = description;
            Id = id;
            IdentitySources = identitySources;
            Name = name;
        }
    }
}
