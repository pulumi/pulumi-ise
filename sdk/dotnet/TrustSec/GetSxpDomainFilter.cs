// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.TrustSec
{
    public static class GetSxpDomainFilter
    {
        /// <summary>
        /// This data source can read the SXP Domain Filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.TrustSec.GetSxpDomainFilter.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSxpDomainFilterResult> InvokeAsync(GetSxpDomainFilterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSxpDomainFilterResult>("ise:trustsec/getSxpDomainFilter:getSxpDomainFilter", args ?? new GetSxpDomainFilterArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the SXP Domain Filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.TrustSec.GetSxpDomainFilter.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSxpDomainFilterResult> Invoke(GetSxpDomainFilterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSxpDomainFilterResult>("ise:trustsec/getSxpDomainFilter:getSxpDomainFilter", args ?? new GetSxpDomainFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSxpDomainFilterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSxpDomainFilterArgs()
        {
        }
        public static new GetSxpDomainFilterArgs Empty => new GetSxpDomainFilterArgs();
    }

    public sealed class GetSxpDomainFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSxpDomainFilterInvokeArgs()
        {
        }
        public static new GetSxpDomainFilterInvokeArgs Empty => new GetSxpDomainFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetSxpDomainFilterResult
    {
        /// <summary>
        /// Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of SXP Domains, separated with comma
        /// </summary>
        public readonly string Domains;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// SGT name or ID. At least one of subnet or sgt or vn should be defined
        /// </summary>
        public readonly string Sgt;
        /// <summary>
        /// Subnet for filter policy (hostname is not supported). At least one of subnet or sgt or vn should be defined
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// Virtual Network. At least one of subnet or sgt or vn should be defined
        /// </summary>
        public readonly string Vn;

        [OutputConstructor]
        private GetSxpDomainFilterResult(
            string description,

            string domains,

            string id,

            string name,

            string sgt,

            string subnet,

            string vn)
        {
            Description = description;
            Domains = domains;
            Id = id;
            Name = name;
            Sgt = sgt;
            Subnet = subnet;
            Vn = vn;
        }
    }
}
