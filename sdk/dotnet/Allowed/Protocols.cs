// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.Allowed
{
    /// <summary>
    /// This resource can manage an allowed protocols policy element.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.Allowed.Protocols("example", new()
    ///     {
    ///         Name = "Protocols1",
    ///         Description = "My allowed protocols",
    ///         ProcessHostLookup = true,
    ///         AllowPapAscii = true,
    ///         AllowChap = true,
    ///         AllowMsChapV1 = true,
    ///         AllowMsChapV2 = true,
    ///         AllowEapMd5 = true,
    ///         AllowLeap = true,
    ///         AllowEapTls = true,
    ///         AllowEapTtls = true,
    ///         AllowEapFast = true,
    ///         AllowPeap = true,
    ///         AllowTeap = true,
    ///         AllowPreferredEapProtocol = true,
    ///         PreferredEapProtocol = "LEAP",
    ///         EapTlsLBit = true,
    ///         AllowWeakCiphersForEap = true,
    ///         RequireMessageAuth = true,
    ///         EapTlsAllowAuthOfExpiredCerts = true,
    ///         EapTlsEnableStatelessSessionResume = true,
    ///         EapTlsSessionTicketTtl = 5,
    ///         EapTlsSessionTicketTtlUnit = "DAYS",
    ///         EapTlsSessionTicketPercentage = 5,
    ///         PeapAllowPeapEapMsChapV2 = true,
    ///         PeapAllowPeapEapMsChapV2PwdChange = true,
    ///         PeapAllowPeapEapMsChapV2PwdChangeRetries = 3,
    ///         PeapAllowPeapEapGtc = true,
    ///         PeapAllowPeapEapGtcPwdChange = true,
    ///         PeapAllowPeapEapGtcPwdChangeRetries = 3,
    ///         PeapAllowPeapEapTls = true,
    ///         PeapAllowPeapEapTlsAuthOfExpiredCerts = true,
    ///         RequireCryptobinding = true,
    ///         PeapPeapV0 = true,
    ///         EapTtlsPapAscii = true,
    ///         EapTtlsChap = true,
    ///         EapTtlsMsChapV1 = true,
    ///         EapTtlsMsChapV2 = true,
    ///         EapTtlsEapMd5 = true,
    ///         EapTtlsEapMsChapV2 = true,
    ///         EapTtlsEapMsChapV2PwdChange = true,
    ///         EapTtlsEapMsChapV2PwdChangeRetries = 3,
    ///         EapFastEapMsChapV2 = true,
    ///         EapFastEapMsChapV2PwdChange = true,
    ///         EapFastEapMsChapV2PwdChangeRetries = 3,
    ///         EapFastEapGtc = true,
    ///         EapFastEapGtcPwdChange = true,
    ///         EapFastEapGtcPwdChangeRetries = 3,
    ///         EapFastEapTls = true,
    ///         EapFastEapTlsAuthOfExpiredCerts = true,
    ///         EapFastEnableEapChaining = true,
    ///         EapFastUsePacs = true,
    ///         EapFastPacsTunnelPacTtl = 5,
    ///         EapFastPacsTunnelPacTtlUnit = "DAYS",
    ///         EapFastPacsUseProactivePacUpdatePercentage = 5,
    ///         EapFastPacsAllowAnonymousProvisioning = true,
    ///         EapFastPacsAllowAuthenticatedProvisioning = true,
    ///         EapFastPacsServerReturns = true,
    ///         EapFastPacsAllowClientCert = true,
    ///         EapFastPacsAllowMachineAuthentication = true,
    ///         EapFastPacsMachinePacTtl = 5,
    ///         EapFastPacsMachinePacTtlUnit = "DAYS",
    ///         EapFastPacsStatelessSessionResume = true,
    ///         EapFastPacsAuthorizationPacTtl = 5,
    ///         EapFastPacsAuthorizationPacTtlUnit = "HOURS",
    ///         TeapEapMsChapV2 = true,
    ///         TeapEapMsChapV2PwdChange = true,
    ///         TeapEapMsChapV2PwdChangeRetries = 3,
    ///         TeapEapTls = true,
    ///         TeapEapTlsAuthOfExpiredCerts = true,
    ///         TeapEapAcceptClientCertDuringTunnelEst = true,
    ///         TeapEapChaining = true,
    ///         TeapDowngradeMsk = true,
    ///         TeapRequestBasicPwdAuth = true,
    ///         Allow5g = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import ise:Allowed/protocols:Protocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:Allowed/protocols:Protocols")]
    public partial class Protocols : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow 5G. This field is only supported from ISE 3.2.
        /// </summary>
        [Output("allow5g")]
        public Output<bool?> Allow5g { get; private set; } = null!;

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Output("allowChap")]
        public Output<bool> AllowChap { get; private set; } = null!;

        /// <summary>
        /// Allow EAP Fast
        /// </summary>
        [Output("allowEapFast")]
        public Output<bool> AllowEapFast { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Output("allowEapMd5")]
        public Output<bool> AllowEapMd5 { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Output("allowEapTls")]
        public Output<bool> AllowEapTls { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TTLS
        /// </summary>
        [Output("allowEapTtls")]
        public Output<bool> AllowEapTtls { get; private set; } = null!;

        /// <summary>
        /// Allow LEAP
        /// </summary>
        [Output("allowLeap")]
        public Output<bool> AllowLeap { get; private set; } = null!;

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Output("allowMsChapV1")]
        public Output<bool> AllowMsChapV1 { get; private set; } = null!;

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Output("allowMsChapV2")]
        public Output<bool> AllowMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Output("allowPapAscii")]
        public Output<bool> AllowPapAscii { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP
        /// </summary>
        [Output("allowPeap")]
        public Output<bool> AllowPeap { get; private set; } = null!;

        /// <summary>
        /// Allow preferred EAP protocol
        /// </summary>
        [Output("allowPreferredEapProtocol")]
        public Output<bool> AllowPreferredEapProtocol { get; private set; } = null!;

        /// <summary>
        /// Allow TEAP
        /// </summary>
        [Output("allowTeap")]
        public Output<bool> AllowTeap { get; private set; } = null!;

        /// <summary>
        /// Allow weak ciphers for EAP
        /// </summary>
        [Output("allowWeakCiphersForEap")]
        public Output<bool> AllowWeakCiphersForEap { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Output("eapFastAcceptClientCert")]
        public Output<bool?> EapFastAcceptClientCert { get; private set; } = null!;

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Output("eapFastAllowMachineAuthentication")]
        public Output<bool?> EapFastAllowMachineAuthentication { get; private set; } = null!;

        /// <summary>
        /// Allow EAP GTC
        /// </summary>
        [Output("eapFastEapGtc")]
        public Output<bool?> EapFastEapGtc { get; private set; } = null!;

        /// <summary>
        /// Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        /// </summary>
        [Output("eapFastEapGtcPwdChange")]
        public Output<bool?> EapFastEapGtcPwdChange { get; private set; } = null!;

        /// <summary>
        /// EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Output("eapFastEapGtcPwdChangeRetries")]
        public Output<int?> EapFastEapGtcPwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Output("eapFastEapMsChapV2")]
        public Output<bool?> EapFastEapMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Output("eapFastEapMsChapV2PwdChange")]
        public Output<bool?> EapFastEapMsChapV2PwdChange { get; private set; } = null!;

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Output("eapFastEapMsChapV2PwdChangeRetries")]
        public Output<int?> EapFastEapMsChapV2PwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Output("eapFastEapTls")]
        public Output<bool?> EapFastEapTls { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        /// </summary>
        [Output("eapFastEapTlsAuthOfExpiredCerts")]
        public Output<bool?> EapFastEapTlsAuthOfExpiredCerts { get; private set; } = null!;

        /// <summary>
        /// Enable EAP chaining
        /// </summary>
        [Output("eapFastEnableEapChaining")]
        public Output<bool?> EapFastEnableEapChaining { get; private set; } = null!;

        /// <summary>
        /// Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Output("eapFastPacsAllowAnonymousProvisioning")]
        public Output<bool?> EapFastPacsAllowAnonymousProvisioning { get; private set; } = null!;

        /// <summary>
        /// Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Output("eapFastPacsAllowAuthenticatedProvisioning")]
        public Output<bool?> EapFastPacsAllowAuthenticatedProvisioning { get; private set; } = null!;

        /// <summary>
        /// Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is
        /// `true`.
        /// </summary>
        [Output("eapFastPacsAllowClientCert")]
        public Output<bool?> EapFastPacsAllowClientCert { get; private set; } = null!;

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Output("eapFastPacsAllowMachineAuthentication")]
        public Output<bool?> EapFastPacsAllowMachineAuthentication { get; private set; } = null!;

        /// <summary>
        /// Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        /// </summary>
        [Output("eapFastPacsAuthorizationPacTtl")]
        public Output<int?> EapFastPacsAuthorizationPacTtl { get; private set; } = null!;

        /// <summary>
        /// Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:
        /// `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Output("eapFastPacsAuthorizationPacTtlUnit")]
        public Output<string?> EapFastPacsAuthorizationPacTtlUnit { get; private set; } = null!;

        /// <summary>
        /// Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        /// </summary>
        [Output("eapFastPacsMachinePacTtl")]
        public Output<int?> EapFastPacsMachinePacTtl { get; private set; } = null!;

        /// <summary>
        /// Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Output("eapFastPacsMachinePacTtlUnit")]
        public Output<string?> EapFastPacsMachinePacTtlUnit { get; private set; } = null!;

        /// <summary>
        /// Server returns access accept after authenticated provisioning. Is required only if
        /// `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        /// </summary>
        [Output("eapFastPacsServerReturns")]
        public Output<bool?> EapFastPacsServerReturns { get; private set; } = null!;

        /// <summary>
        /// Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Output("eapFastPacsStatelessSessionResume")]
        public Output<bool?> EapFastPacsStatelessSessionResume { get; private set; } = null!;

        /// <summary>
        /// PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Output("eapFastPacsTunnelPacTtl")]
        public Output<int?> EapFastPacsTunnelPacTtl { get; private set; } = null!;

        /// <summary>
        /// PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
        /// `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Output("eapFastPacsTunnelPacTtlUnit")]
        public Output<string?> EapFastPacsTunnelPacTtlUnit { get; private set; } = null!;

        /// <summary>
        /// Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`
        /// </summary>
        [Output("eapFastPacsUseProactivePacUpdatePercentage")]
        public Output<int?> EapFastPacsUseProactivePacUpdatePercentage { get; private set; } = null!;

        /// <summary>
        /// Use PACs
        /// </summary>
        [Output("eapFastUsePacs")]
        public Output<bool?> EapFastUsePacs { get; private set; } = null!;

        /// <summary>
        /// Allow authentication of expired certificates
        /// </summary>
        [Output("eapTlsAllowAuthOfExpiredCerts")]
        public Output<bool?> EapTlsAllowAuthOfExpiredCerts { get; private set; } = null!;

        /// <summary>
        /// Enable stateless session resume
        /// </summary>
        [Output("eapTlsEnableStatelessSessionResume")]
        public Output<bool?> EapTlsEnableStatelessSessionResume { get; private set; } = null!;

        /// <summary>
        /// EAP TLS L-Bit
        /// </summary>
        [Output("eapTlsLBit")]
        public Output<bool> EapTlsLBit { get; private set; } = null!;

        /// <summary>
        /// Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`
        /// </summary>
        [Output("eapTlsSessionTicketPercentage")]
        public Output<int?> EapTlsSessionTicketPercentage { get; private set; } = null!;

        /// <summary>
        /// Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        [Output("eapTlsSessionTicketTtl")]
        public Output<int?> EapTlsSessionTicketTtl { get; private set; } = null!;

        /// <summary>
        /// Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Output("eapTlsSessionTicketTtlUnit")]
        public Output<string?> EapTlsSessionTicketTtlUnit { get; private set; } = null!;

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Output("eapTtlsChap")]
        public Output<bool?> EapTtlsChap { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Output("eapTtlsEapMd5")]
        public Output<bool?> EapTtlsEapMd5 { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Output("eapTtlsEapMsChapV2")]
        public Output<bool?> EapTtlsEapMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Output("eapTtlsEapMsChapV2PwdChange")]
        public Output<bool?> EapTtlsEapMsChapV2PwdChange { get; private set; } = null!;

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Output("eapTtlsEapMsChapV2PwdChangeRetries")]
        public Output<int?> EapTtlsEapMsChapV2PwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Output("eapTtlsMsChapV1")]
        public Output<bool?> EapTtlsMsChapV1 { get; private set; } = null!;

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Output("eapTtlsMsChapV2")]
        public Output<bool?> EapTtlsMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Output("eapTtlsPapAscii")]
        public Output<bool?> EapTtlsPapAscii { get; private set; } = null!;

        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP GTC
        /// </summary>
        [Output("peapAllowPeapEapGtc")]
        public Output<bool?> PeapAllowPeapEapGtc { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        /// </summary>
        [Output("peapAllowPeapEapGtcPwdChange")]
        public Output<bool?> PeapAllowPeapEapGtcPwdChange { get; private set; } = null!;

        /// <summary>
        /// PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Output("peapAllowPeapEapGtcPwdChangeRetries")]
        public Output<int?> PeapAllowPeapEapGtcPwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2
        /// </summary>
        [Output("peapAllowPeapEapMsChapV2")]
        public Output<bool?> PeapAllowPeapEapMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Output("peapAllowPeapEapMsChapV2PwdChange")]
        public Output<bool?> PeapAllowPeapEapMsChapV2PwdChange { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:
        /// `0`-`3`
        /// </summary>
        [Output("peapAllowPeapEapMsChapV2PwdChangeRetries")]
        public Output<int?> PeapAllowPeapEapMsChapV2PwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP TLS
        /// </summary>
        [Output("peapAllowPeapEapTls")]
        public Output<bool?> PeapAllowPeapEapTls { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        /// </summary>
        [Output("peapAllowPeapEapTlsAuthOfExpiredCerts")]
        public Output<bool?> PeapAllowPeapEapTlsAuthOfExpiredCerts { get; private set; } = null!;

        /// <summary>
        /// Allow PEAP v0
        /// </summary>
        [Output("peapPeapV0")]
        public Output<bool?> PeapPeapV0 { get; private set; } = null!;

        /// <summary>
        /// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        /// </summary>
        [Output("preferredEapProtocol")]
        public Output<string?> PreferredEapProtocol { get; private set; } = null!;

        /// <summary>
        /// Process host lookup
        /// </summary>
        [Output("processHostLookup")]
        public Output<bool> ProcessHostLookup { get; private set; } = null!;

        /// <summary>
        /// Require cryptobinding
        /// </summary>
        [Output("requireCryptobinding")]
        public Output<bool?> RequireCryptobinding { get; private set; } = null!;

        /// <summary>
        /// Require message authentication
        /// </summary>
        [Output("requireMessageAuth")]
        public Output<bool> RequireMessageAuth { get; private set; } = null!;

        /// <summary>
        /// Allow downgrade to MSK
        /// </summary>
        [Output("teapDowngradeMsk")]
        public Output<bool?> TeapDowngradeMsk { get; private set; } = null!;

        /// <summary>
        /// Accept client certificate during tunnel establishment
        /// </summary>
        [Output("teapEapAcceptClientCertDuringTunnelEst")]
        public Output<bool?> TeapEapAcceptClientCertDuringTunnelEst { get; private set; } = null!;

        /// <summary>
        /// Allow EAP chaining
        /// </summary>
        [Output("teapEapChaining")]
        public Output<bool?> TeapEapChaining { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Output("teapEapMsChapV2")]
        public Output<bool?> TeapEapMsChapV2 { get; private set; } = null!;

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Output("teapEapMsChapV2PwdChange")]
        public Output<bool?> TeapEapMsChapV2PwdChange { get; private set; } = null!;

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Output("teapEapMsChapV2PwdChangeRetries")]
        public Output<int?> TeapEapMsChapV2PwdChangeRetries { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Output("teapEapTls")]
        public Output<bool?> TeapEapTls { get; private set; } = null!;

        /// <summary>
        /// Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        /// </summary>
        [Output("teapEapTlsAuthOfExpiredCerts")]
        public Output<bool?> TeapEapTlsAuthOfExpiredCerts { get; private set; } = null!;

        /// <summary>
        /// Request basic password authentication
        /// </summary>
        [Output("teapRequestBasicPwdAuth")]
        public Output<bool?> TeapRequestBasicPwdAuth { get; private set; } = null!;


        /// <summary>
        /// Create a Protocols resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Protocols(string name, ProtocolsArgs args, CustomResourceOptions? options = null)
            : base("ise:Allowed/protocols:Protocols", name, args ?? new ProtocolsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Protocols(string name, Input<string> id, ProtocolsState? state = null, CustomResourceOptions? options = null)
            : base("ise:Allowed/protocols:Protocols", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Protocols resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Protocols Get(string name, Input<string> id, ProtocolsState? state = null, CustomResourceOptions? options = null)
        {
            return new Protocols(name, id, state, options);
        }
    }

    public sealed class ProtocolsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow 5G. This field is only supported from ISE 3.2.
        /// </summary>
        [Input("allow5g")]
        public Input<bool>? Allow5g { get; set; }

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Input("allowChap", required: true)]
        public Input<bool> AllowChap { get; set; } = null!;

        /// <summary>
        /// Allow EAP Fast
        /// </summary>
        [Input("allowEapFast", required: true)]
        public Input<bool> AllowEapFast { get; set; } = null!;

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Input("allowEapMd5", required: true)]
        public Input<bool> AllowEapMd5 { get; set; } = null!;

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("allowEapTls", required: true)]
        public Input<bool> AllowEapTls { get; set; } = null!;

        /// <summary>
        /// Allow EAP TTLS
        /// </summary>
        [Input("allowEapTtls", required: true)]
        public Input<bool> AllowEapTtls { get; set; } = null!;

        /// <summary>
        /// Allow LEAP
        /// </summary>
        [Input("allowLeap", required: true)]
        public Input<bool> AllowLeap { get; set; } = null!;

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Input("allowMsChapV1", required: true)]
        public Input<bool> AllowMsChapV1 { get; set; } = null!;

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Input("allowMsChapV2", required: true)]
        public Input<bool> AllowMsChapV2 { get; set; } = null!;

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Input("allowPapAscii", required: true)]
        public Input<bool> AllowPapAscii { get; set; } = null!;

        /// <summary>
        /// Allow PEAP
        /// </summary>
        [Input("allowPeap", required: true)]
        public Input<bool> AllowPeap { get; set; } = null!;

        /// <summary>
        /// Allow preferred EAP protocol
        /// </summary>
        [Input("allowPreferredEapProtocol", required: true)]
        public Input<bool> AllowPreferredEapProtocol { get; set; } = null!;

        /// <summary>
        /// Allow TEAP
        /// </summary>
        [Input("allowTeap", required: true)]
        public Input<bool> AllowTeap { get; set; } = null!;

        /// <summary>
        /// Allow weak ciphers for EAP
        /// </summary>
        [Input("allowWeakCiphersForEap", required: true)]
        public Input<bool> AllowWeakCiphersForEap { get; set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Input("eapFastAcceptClientCert")]
        public Input<bool>? EapFastAcceptClientCert { get; set; }

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Input("eapFastAllowMachineAuthentication")]
        public Input<bool>? EapFastAllowMachineAuthentication { get; set; }

        /// <summary>
        /// Allow EAP GTC
        /// </summary>
        [Input("eapFastEapGtc")]
        public Input<bool>? EapFastEapGtc { get; set; }

        /// <summary>
        /// Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        /// </summary>
        [Input("eapFastEapGtcPwdChange")]
        public Input<bool>? EapFastEapGtcPwdChange { get; set; }

        /// <summary>
        /// EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapFastEapGtcPwdChangeRetries")]
        public Input<int>? EapFastEapGtcPwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("eapFastEapMsChapV2")]
        public Input<bool>? EapFastEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("eapFastEapMsChapV2PwdChange")]
        public Input<bool>? EapFastEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapFastEapMsChapV2PwdChangeRetries")]
        public Input<int>? EapFastEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("eapFastEapTls")]
        public Input<bool>? EapFastEapTls { get; set; }

        /// <summary>
        /// Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        /// </summary>
        [Input("eapFastEapTlsAuthOfExpiredCerts")]
        public Input<bool>? EapFastEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Enable EAP chaining
        /// </summary>
        [Input("eapFastEnableEapChaining")]
        public Input<bool>? EapFastEnableEapChaining { get; set; }

        /// <summary>
        /// Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowAnonymousProvisioning")]
        public Input<bool>? EapFastPacsAllowAnonymousProvisioning { get; set; }

        /// <summary>
        /// Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowAuthenticatedProvisioning")]
        public Input<bool>? EapFastPacsAllowAuthenticatedProvisioning { get; set; }

        /// <summary>
        /// Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is
        /// `true`.
        /// </summary>
        [Input("eapFastPacsAllowClientCert")]
        public Input<bool>? EapFastPacsAllowClientCert { get; set; }

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowMachineAuthentication")]
        public Input<bool>? EapFastPacsAllowMachineAuthentication { get; set; }

        /// <summary>
        /// Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        /// </summary>
        [Input("eapFastPacsAuthorizationPacTtl")]
        public Input<int>? EapFastPacsAuthorizationPacTtl { get; set; }

        /// <summary>
        /// Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:
        /// `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsAuthorizationPacTtlUnit")]
        public Input<string>? EapFastPacsAuthorizationPacTtlUnit { get; set; }

        /// <summary>
        /// Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        /// </summary>
        [Input("eapFastPacsMachinePacTtl")]
        public Input<int>? EapFastPacsMachinePacTtl { get; set; }

        /// <summary>
        /// Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsMachinePacTtlUnit")]
        public Input<string>? EapFastPacsMachinePacTtlUnit { get; set; }

        /// <summary>
        /// Server returns access accept after authenticated provisioning. Is required only if
        /// `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        /// </summary>
        [Input("eapFastPacsServerReturns")]
        public Input<bool>? EapFastPacsServerReturns { get; set; }

        /// <summary>
        /// Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsStatelessSessionResume")]
        public Input<bool>? EapFastPacsStatelessSessionResume { get; set; }

        /// <summary>
        /// PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsTunnelPacTtl")]
        public Input<int>? EapFastPacsTunnelPacTtl { get; set; }

        /// <summary>
        /// PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
        /// `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsTunnelPacTtlUnit")]
        public Input<string>? EapFastPacsTunnelPacTtlUnit { get; set; }

        /// <summary>
        /// Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`
        /// </summary>
        [Input("eapFastPacsUseProactivePacUpdatePercentage")]
        public Input<int>? EapFastPacsUseProactivePacUpdatePercentage { get; set; }

        /// <summary>
        /// Use PACs
        /// </summary>
        [Input("eapFastUsePacs")]
        public Input<bool>? EapFastUsePacs { get; set; }

        /// <summary>
        /// Allow authentication of expired certificates
        /// </summary>
        [Input("eapTlsAllowAuthOfExpiredCerts")]
        public Input<bool>? EapTlsAllowAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Enable stateless session resume
        /// </summary>
        [Input("eapTlsEnableStatelessSessionResume")]
        public Input<bool>? EapTlsEnableStatelessSessionResume { get; set; }

        /// <summary>
        /// EAP TLS L-Bit
        /// </summary>
        [Input("eapTlsLBit", required: true)]
        public Input<bool> EapTlsLBit { get; set; } = null!;

        /// <summary>
        /// Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`
        /// </summary>
        [Input("eapTlsSessionTicketPercentage")]
        public Input<int>? EapTlsSessionTicketPercentage { get; set; }

        /// <summary>
        /// Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        [Input("eapTlsSessionTicketTtl")]
        public Input<int>? EapTlsSessionTicketTtl { get; set; }

        /// <summary>
        /// Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapTlsSessionTicketTtlUnit")]
        public Input<string>? EapTlsSessionTicketTtlUnit { get; set; }

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Input("eapTtlsChap")]
        public Input<bool>? EapTtlsChap { get; set; }

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Input("eapTtlsEapMd5")]
        public Input<bool>? EapTtlsEapMd5 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("eapTtlsEapMsChapV2")]
        public Input<bool>? EapTtlsEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("eapTtlsEapMsChapV2PwdChange")]
        public Input<bool>? EapTtlsEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapTtlsEapMsChapV2PwdChangeRetries")]
        public Input<int>? EapTtlsEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Input("eapTtlsMsChapV1")]
        public Input<bool>? EapTtlsMsChapV1 { get; set; }

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Input("eapTtlsMsChapV2")]
        public Input<bool>? EapTtlsMsChapV2 { get; set; }

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Input("eapTtlsPapAscii")]
        public Input<bool>? EapTtlsPapAscii { get; set; }

        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Allow PEAP EAP GTC
        /// </summary>
        [Input("peapAllowPeapEapGtc")]
        public Input<bool>? PeapAllowPeapEapGtc { get; set; }

        /// <summary>
        /// Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapGtcPwdChange")]
        public Input<bool>? PeapAllowPeapEapGtcPwdChange { get; set; }

        /// <summary>
        /// PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("peapAllowPeapEapGtcPwdChangeRetries")]
        public Input<int>? PeapAllowPeapEapGtcPwdChangeRetries { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2")]
        public Input<bool>? PeapAllowPeapEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2PwdChange")]
        public Input<bool>? PeapAllowPeapEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:
        /// `0`-`3`
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2PwdChangeRetries")]
        public Input<int>? PeapAllowPeapEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow PEAP EAP TLS
        /// </summary>
        [Input("peapAllowPeapEapTls")]
        public Input<bool>? PeapAllowPeapEapTls { get; set; }

        /// <summary>
        /// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapTlsAuthOfExpiredCerts")]
        public Input<bool>? PeapAllowPeapEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Allow PEAP v0
        /// </summary>
        [Input("peapPeapV0")]
        public Input<bool>? PeapPeapV0 { get; set; }

        /// <summary>
        /// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        /// </summary>
        [Input("preferredEapProtocol")]
        public Input<string>? PreferredEapProtocol { get; set; }

        /// <summary>
        /// Process host lookup
        /// </summary>
        [Input("processHostLookup", required: true)]
        public Input<bool> ProcessHostLookup { get; set; } = null!;

        /// <summary>
        /// Require cryptobinding
        /// </summary>
        [Input("requireCryptobinding")]
        public Input<bool>? RequireCryptobinding { get; set; }

        /// <summary>
        /// Require message authentication
        /// </summary>
        [Input("requireMessageAuth", required: true)]
        public Input<bool> RequireMessageAuth { get; set; } = null!;

        /// <summary>
        /// Allow downgrade to MSK
        /// </summary>
        [Input("teapDowngradeMsk")]
        public Input<bool>? TeapDowngradeMsk { get; set; }

        /// <summary>
        /// Accept client certificate during tunnel establishment
        /// </summary>
        [Input("teapEapAcceptClientCertDuringTunnelEst")]
        public Input<bool>? TeapEapAcceptClientCertDuringTunnelEst { get; set; }

        /// <summary>
        /// Allow EAP chaining
        /// </summary>
        [Input("teapEapChaining")]
        public Input<bool>? TeapEapChaining { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("teapEapMsChapV2")]
        public Input<bool>? TeapEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("teapEapMsChapV2PwdChange")]
        public Input<bool>? TeapEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("teapEapMsChapV2PwdChangeRetries")]
        public Input<int>? TeapEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("teapEapTls")]
        public Input<bool>? TeapEapTls { get; set; }

        /// <summary>
        /// Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        /// </summary>
        [Input("teapEapTlsAuthOfExpiredCerts")]
        public Input<bool>? TeapEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Request basic password authentication
        /// </summary>
        [Input("teapRequestBasicPwdAuth")]
        public Input<bool>? TeapRequestBasicPwdAuth { get; set; }

        public ProtocolsArgs()
        {
        }
        public static new ProtocolsArgs Empty => new ProtocolsArgs();
    }

    public sealed class ProtocolsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow 5G. This field is only supported from ISE 3.2.
        /// </summary>
        [Input("allow5g")]
        public Input<bool>? Allow5g { get; set; }

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Input("allowChap")]
        public Input<bool>? AllowChap { get; set; }

        /// <summary>
        /// Allow EAP Fast
        /// </summary>
        [Input("allowEapFast")]
        public Input<bool>? AllowEapFast { get; set; }

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Input("allowEapMd5")]
        public Input<bool>? AllowEapMd5 { get; set; }

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("allowEapTls")]
        public Input<bool>? AllowEapTls { get; set; }

        /// <summary>
        /// Allow EAP TTLS
        /// </summary>
        [Input("allowEapTtls")]
        public Input<bool>? AllowEapTtls { get; set; }

        /// <summary>
        /// Allow LEAP
        /// </summary>
        [Input("allowLeap")]
        public Input<bool>? AllowLeap { get; set; }

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Input("allowMsChapV1")]
        public Input<bool>? AllowMsChapV1 { get; set; }

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Input("allowMsChapV2")]
        public Input<bool>? AllowMsChapV2 { get; set; }

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Input("allowPapAscii")]
        public Input<bool>? AllowPapAscii { get; set; }

        /// <summary>
        /// Allow PEAP
        /// </summary>
        [Input("allowPeap")]
        public Input<bool>? AllowPeap { get; set; }

        /// <summary>
        /// Allow preferred EAP protocol
        /// </summary>
        [Input("allowPreferredEapProtocol")]
        public Input<bool>? AllowPreferredEapProtocol { get; set; }

        /// <summary>
        /// Allow TEAP
        /// </summary>
        [Input("allowTeap")]
        public Input<bool>? AllowTeap { get; set; }

        /// <summary>
        /// Allow weak ciphers for EAP
        /// </summary>
        [Input("allowWeakCiphersForEap")]
        public Input<bool>? AllowWeakCiphersForEap { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Input("eapFastAcceptClientCert")]
        public Input<bool>? EapFastAcceptClientCert { get; set; }

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        /// </summary>
        [Input("eapFastAllowMachineAuthentication")]
        public Input<bool>? EapFastAllowMachineAuthentication { get; set; }

        /// <summary>
        /// Allow EAP GTC
        /// </summary>
        [Input("eapFastEapGtc")]
        public Input<bool>? EapFastEapGtc { get; set; }

        /// <summary>
        /// Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        /// </summary>
        [Input("eapFastEapGtcPwdChange")]
        public Input<bool>? EapFastEapGtcPwdChange { get; set; }

        /// <summary>
        /// EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapFastEapGtcPwdChangeRetries")]
        public Input<int>? EapFastEapGtcPwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("eapFastEapMsChapV2")]
        public Input<bool>? EapFastEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("eapFastEapMsChapV2PwdChange")]
        public Input<bool>? EapFastEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapFastEapMsChapV2PwdChangeRetries")]
        public Input<int>? EapFastEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("eapFastEapTls")]
        public Input<bool>? EapFastEapTls { get; set; }

        /// <summary>
        /// Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        /// </summary>
        [Input("eapFastEapTlsAuthOfExpiredCerts")]
        public Input<bool>? EapFastEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Enable EAP chaining
        /// </summary>
        [Input("eapFastEnableEapChaining")]
        public Input<bool>? EapFastEnableEapChaining { get; set; }

        /// <summary>
        /// Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowAnonymousProvisioning")]
        public Input<bool>? EapFastPacsAllowAnonymousProvisioning { get; set; }

        /// <summary>
        /// Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowAuthenticatedProvisioning")]
        public Input<bool>? EapFastPacsAllowAuthenticatedProvisioning { get; set; }

        /// <summary>
        /// Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is
        /// `true`.
        /// </summary>
        [Input("eapFastPacsAllowClientCert")]
        public Input<bool>? EapFastPacsAllowClientCert { get; set; }

        /// <summary>
        /// Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsAllowMachineAuthentication")]
        public Input<bool>? EapFastPacsAllowMachineAuthentication { get; set; }

        /// <summary>
        /// Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        /// </summary>
        [Input("eapFastPacsAuthorizationPacTtl")]
        public Input<int>? EapFastPacsAuthorizationPacTtl { get; set; }

        /// <summary>
        /// Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:
        /// `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsAuthorizationPacTtlUnit")]
        public Input<string>? EapFastPacsAuthorizationPacTtlUnit { get; set; }

        /// <summary>
        /// Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        /// </summary>
        [Input("eapFastPacsMachinePacTtl")]
        public Input<int>? EapFastPacsMachinePacTtl { get; set; }

        /// <summary>
        /// Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsMachinePacTtlUnit")]
        public Input<string>? EapFastPacsMachinePacTtlUnit { get; set; }

        /// <summary>
        /// Server returns access accept after authenticated provisioning. Is required only if
        /// `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        /// </summary>
        [Input("eapFastPacsServerReturns")]
        public Input<bool>? EapFastPacsServerReturns { get; set; }

        /// <summary>
        /// Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsStatelessSessionResume")]
        public Input<bool>? EapFastPacsStatelessSessionResume { get; set; }

        /// <summary>
        /// PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        /// </summary>
        [Input("eapFastPacsTunnelPacTtl")]
        public Input<int>? EapFastPacsTunnelPacTtl { get; set; }

        /// <summary>
        /// PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
        /// `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapFastPacsTunnelPacTtlUnit")]
        public Input<string>? EapFastPacsTunnelPacTtlUnit { get; set; }

        /// <summary>
        /// Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`
        /// </summary>
        [Input("eapFastPacsUseProactivePacUpdatePercentage")]
        public Input<int>? EapFastPacsUseProactivePacUpdatePercentage { get; set; }

        /// <summary>
        /// Use PACs
        /// </summary>
        [Input("eapFastUsePacs")]
        public Input<bool>? EapFastUsePacs { get; set; }

        /// <summary>
        /// Allow authentication of expired certificates
        /// </summary>
        [Input("eapTlsAllowAuthOfExpiredCerts")]
        public Input<bool>? EapTlsAllowAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Enable stateless session resume
        /// </summary>
        [Input("eapTlsEnableStatelessSessionResume")]
        public Input<bool>? EapTlsEnableStatelessSessionResume { get; set; }

        /// <summary>
        /// EAP TLS L-Bit
        /// </summary>
        [Input("eapTlsLBit")]
        public Input<bool>? EapTlsLBit { get; set; }

        /// <summary>
        /// Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`
        /// </summary>
        [Input("eapTlsSessionTicketPercentage")]
        public Input<int>? EapTlsSessionTicketPercentage { get; set; }

        /// <summary>
        /// Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        /// </summary>
        [Input("eapTlsSessionTicketTtl")]
        public Input<int>? EapTlsSessionTicketTtl { get; set; }

        /// <summary>
        /// Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,
        /// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        /// </summary>
        [Input("eapTlsSessionTicketTtlUnit")]
        public Input<string>? EapTlsSessionTicketTtlUnit { get; set; }

        /// <summary>
        /// Allow CHAP
        /// </summary>
        [Input("eapTtlsChap")]
        public Input<bool>? EapTtlsChap { get; set; }

        /// <summary>
        /// Allow EAP MD5
        /// </summary>
        [Input("eapTtlsEapMd5")]
        public Input<bool>? EapTtlsEapMd5 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("eapTtlsEapMsChapV2")]
        public Input<bool>? EapTtlsEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("eapTtlsEapMsChapV2PwdChange")]
        public Input<bool>? EapTtlsEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("eapTtlsEapMsChapV2PwdChangeRetries")]
        public Input<int>? EapTtlsEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow MS CHAP v1
        /// </summary>
        [Input("eapTtlsMsChapV1")]
        public Input<bool>? EapTtlsMsChapV1 { get; set; }

        /// <summary>
        /// Allow MS CHAP v2
        /// </summary>
        [Input("eapTtlsMsChapV2")]
        public Input<bool>? EapTtlsMsChapV2 { get; set; }

        /// <summary>
        /// Allow PAP ASCII
        /// </summary>
        [Input("eapTtlsPapAscii")]
        public Input<bool>? EapTtlsPapAscii { get; set; }

        /// <summary>
        /// The name of the allowed protocols
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Allow PEAP EAP GTC
        /// </summary>
        [Input("peapAllowPeapEapGtc")]
        public Input<bool>? PeapAllowPeapEapGtc { get; set; }

        /// <summary>
        /// Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapGtcPwdChange")]
        public Input<bool>? PeapAllowPeapEapGtcPwdChange { get; set; }

        /// <summary>
        /// PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("peapAllowPeapEapGtcPwdChangeRetries")]
        public Input<int>? PeapAllowPeapEapGtcPwdChangeRetries { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2")]
        public Input<bool>? PeapAllowPeapEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2PwdChange")]
        public Input<bool>? PeapAllowPeapEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:
        /// `0`-`3`
        /// </summary>
        [Input("peapAllowPeapEapMsChapV2PwdChangeRetries")]
        public Input<int>? PeapAllowPeapEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow PEAP EAP TLS
        /// </summary>
        [Input("peapAllowPeapEapTls")]
        public Input<bool>? PeapAllowPeapEapTls { get; set; }

        /// <summary>
        /// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        /// </summary>
        [Input("peapAllowPeapEapTlsAuthOfExpiredCerts")]
        public Input<bool>? PeapAllowPeapEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Allow PEAP v0
        /// </summary>
        [Input("peapPeapV0")]
        public Input<bool>? PeapPeapV0 { get; set; }

        /// <summary>
        /// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        /// </summary>
        [Input("preferredEapProtocol")]
        public Input<string>? PreferredEapProtocol { get; set; }

        /// <summary>
        /// Process host lookup
        /// </summary>
        [Input("processHostLookup")]
        public Input<bool>? ProcessHostLookup { get; set; }

        /// <summary>
        /// Require cryptobinding
        /// </summary>
        [Input("requireCryptobinding")]
        public Input<bool>? RequireCryptobinding { get; set; }

        /// <summary>
        /// Require message authentication
        /// </summary>
        [Input("requireMessageAuth")]
        public Input<bool>? RequireMessageAuth { get; set; }

        /// <summary>
        /// Allow downgrade to MSK
        /// </summary>
        [Input("teapDowngradeMsk")]
        public Input<bool>? TeapDowngradeMsk { get; set; }

        /// <summary>
        /// Accept client certificate during tunnel establishment
        /// </summary>
        [Input("teapEapAcceptClientCertDuringTunnelEst")]
        public Input<bool>? TeapEapAcceptClientCertDuringTunnelEst { get; set; }

        /// <summary>
        /// Allow EAP chaining
        /// </summary>
        [Input("teapEapChaining")]
        public Input<bool>? TeapEapChaining { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2
        /// </summary>
        [Input("teapEapMsChapV2")]
        public Input<bool>? TeapEapMsChapV2 { get; set; }

        /// <summary>
        /// Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        /// </summary>
        [Input("teapEapMsChapV2PwdChange")]
        public Input<bool>? TeapEapMsChapV2PwdChange { get; set; }

        /// <summary>
        /// EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`
        /// </summary>
        [Input("teapEapMsChapV2PwdChangeRetries")]
        public Input<int>? TeapEapMsChapV2PwdChangeRetries { get; set; }

        /// <summary>
        /// Allow EAP TLS
        /// </summary>
        [Input("teapEapTls")]
        public Input<bool>? TeapEapTls { get; set; }

        /// <summary>
        /// Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        /// </summary>
        [Input("teapEapTlsAuthOfExpiredCerts")]
        public Input<bool>? TeapEapTlsAuthOfExpiredCerts { get; set; }

        /// <summary>
        /// Request basic password authentication
        /// </summary>
        [Input("teapRequestBasicPwdAuth")]
        public Input<bool>? TeapRequestBasicPwdAuth { get; set; }

        public ProtocolsState()
        {
        }
        public static new ProtocolsState Empty => new ProtocolsState();
    }
}
