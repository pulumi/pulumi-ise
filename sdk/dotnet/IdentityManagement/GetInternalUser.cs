// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.IdentityManagement
{
    public static class GetInternalUser
    {
        /// <summary>
        /// This data source can read the Internal User.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.IdentityManagement.GetInternalUser.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInternalUserResult> InvokeAsync(GetInternalUserArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInternalUserResult>("ise:identitymanagement/getInternalUser:getInternalUser", args ?? new GetInternalUserArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Internal User.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.IdentityManagement.GetInternalUser.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInternalUserResult> Invoke(GetInternalUserInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInternalUserResult>("ise:identitymanagement/getInternalUser:getInternalUser", args ?? new GetInternalUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Internal User.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.IdentityManagement.GetInternalUser.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInternalUserResult> Invoke(GetInternalUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInternalUserResult>("ise:identitymanagement/getInternalUser:getInternalUser", args ?? new GetInternalUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInternalUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the internal user
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetInternalUserArgs()
        {
        }
        public static new GetInternalUserArgs Empty => new GetInternalUserArgs();
    }

    public sealed class GetInternalUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the internal user
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetInternalUserInvokeArgs()
        {
        }
        public static new GetInternalUserInvokeArgs Empty => new GetInternalUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetInternalUserResult
    {
        /// <summary>
        /// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
        /// </summary>
        public readonly string AccountNameAlias;
        /// <summary>
        /// Requires the user to change the password
        /// </summary>
        public readonly bool ChangePassword;
        /// <summary>
        /// Key value map
        /// </summary>
        public readonly string CustomAttributes;
        /// <summary>
        /// Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Email address
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// This field is added in ISE 2.0 to support TACACS+
        /// </summary>
        public readonly string EnablePassword;
        /// <summary>
        /// Whether the user is enabled/disabled
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// First name of the internal user
        /// </summary>
        public readonly string FirstName;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Comma separated list of identity group IDs.
        /// </summary>
        public readonly string IdentityGroups;
        /// <summary>
        /// Last name of the internal user
        /// </summary>
        public readonly string LastName;
        /// <summary>
        /// The name of the internal user
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password of the internal user
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The ID store where the internal user's password is kept
        /// </summary>
        public readonly string PasswordIdStore;
        /// <summary>
        /// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
        /// </summary>
        public readonly bool PasswordNeverExpires;

        [OutputConstructor]
        private GetInternalUserResult(
            string accountNameAlias,

            bool changePassword,

            string customAttributes,

            string description,

            string email,

            string enablePassword,

            bool enabled,

            string firstName,

            string id,

            string identityGroups,

            string lastName,

            string name,

            string password,

            string passwordIdStore,

            bool passwordNeverExpires)
        {
            AccountNameAlias = accountNameAlias;
            ChangePassword = changePassword;
            CustomAttributes = customAttributes;
            Description = description;
            Email = email;
            EnablePassword = enablePassword;
            Enabled = enabled;
            FirstName = firstName;
            Id = id;
            IdentityGroups = identityGroups;
            LastName = lastName;
            Name = name;
            Password = password;
            PasswordIdStore = passwordIdStore;
            PasswordNeverExpires = passwordNeverExpires;
        }
    }
}
