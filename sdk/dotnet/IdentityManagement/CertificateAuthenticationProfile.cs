// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.IdentityManagement
{
    /// <summary>
    /// This resource can manage a Certificate Authentication Profile.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.IdentityManagement.CertificateAuthenticationProfile("example", new()
    ///     {
    ///         Name = "CertProf1",
    ///         Description = "My cert profile",
    ///         AllowedAsUserName = false,
    ///         ExternalIdentityStoreName = "[not applicable]",
    ///         CertificateAttributeName = "SUBJECT_COMMON_NAME",
    ///         MatchMode = "NEVER",
    ///         UsernameFrom = "CERTIFICATE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile")]
    public partial class CertificateAuthenticationProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow as username - Default value: `false`
        /// </summary>
        [Output("allowedAsUserName")]
        public Output<bool> AllowedAsUserName { get; private set; } = null!;

        /// <summary>
        /// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
        /// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
        /// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
        /// `SUBJECT_COMMON_NAME`
        /// </summary>
        [Output("certificateAttributeName")]
        public Output<string> CertificateAttributeName { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
        /// value: `[not applicable]`
        /// </summary>
        [Output("externalIdentityStoreName")]
        public Output<string> ExternalIdentityStoreName { get; private set; } = null!;

        /// <summary>
        /// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
        /// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
        /// </summary>
        [Output("matchMode")]
        public Output<string> MatchMode { get; private set; } = null!;

        /// <summary>
        /// The name of the certificate profile
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
        /// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
        /// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
        /// </summary>
        [Output("usernameFrom")]
        public Output<string> UsernameFrom { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateAuthenticationProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthenticationProfile(string name, CertificateAuthenticationProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile", name, args ?? new CertificateAuthenticationProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthenticationProfile(string name, Input<string> id, CertificateAuthenticationProfileState? state = null, CustomResourceOptions? options = null)
            : base("ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthenticationProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthenticationProfile Get(string name, Input<string> id, CertificateAuthenticationProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateAuthenticationProfile(name, id, state, options);
        }
    }

    public sealed class CertificateAuthenticationProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow as username - Default value: `false`
        /// </summary>
        [Input("allowedAsUserName")]
        public Input<bool>? AllowedAsUserName { get; set; }

        /// <summary>
        /// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
        /// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
        /// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
        /// `SUBJECT_COMMON_NAME`
        /// </summary>
        [Input("certificateAttributeName")]
        public Input<string>? CertificateAttributeName { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
        /// value: `[not applicable]`
        /// </summary>
        [Input("externalIdentityStoreName")]
        public Input<string>? ExternalIdentityStoreName { get; set; }

        /// <summary>
        /// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
        /// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
        /// </summary>
        [Input("matchMode")]
        public Input<string>? MatchMode { get; set; }

        /// <summary>
        /// The name of the certificate profile
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
        /// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
        /// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
        /// </summary>
        [Input("usernameFrom")]
        public Input<string>? UsernameFrom { get; set; }

        public CertificateAuthenticationProfileArgs()
        {
        }
        public static new CertificateAuthenticationProfileArgs Empty => new CertificateAuthenticationProfileArgs();
    }

    public sealed class CertificateAuthenticationProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow as username - Default value: `false`
        /// </summary>
        [Input("allowedAsUserName")]
        public Input<bool>? AllowedAsUserName { get; set; }

        /// <summary>
        /// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
        /// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
        /// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
        /// `SUBJECT_COMMON_NAME`
        /// </summary>
        [Input("certificateAttributeName")]
        public Input<string>? CertificateAttributeName { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
        /// value: `[not applicable]`
        /// </summary>
        [Input("externalIdentityStoreName")]
        public Input<string>? ExternalIdentityStoreName { get; set; }

        /// <summary>
        /// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
        /// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
        /// </summary>
        [Input("matchMode")]
        public Input<string>? MatchMode { get; set; }

        /// <summary>
        /// The name of the certificate profile
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
        /// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
        /// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
        /// </summary>
        [Input("usernameFrom")]
        public Input<string>? UsernameFrom { get; set; }

        public CertificateAuthenticationProfileState()
        {
        }
        public static new CertificateAuthenticationProfileState Empty => new CertificateAuthenticationProfileState();
    }
}
