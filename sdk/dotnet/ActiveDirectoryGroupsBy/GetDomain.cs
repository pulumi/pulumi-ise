// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.ActiveDirectoryGroupsBy
{
    public static class GetDomain
    {
        /// <summary>
        /// This data source can read the Active Directory Groups By Domain.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.ActiveDirectoryGroupsBy.GetDomain.Invoke(new()
        ///     {
        ///         JoinPointId = "73808580-b6e6-11ee-8960-de6d7692bc40",
        ///         Domain = "cisco.com",
        ///         Filter = "CN=ISE Admins",
        ///         SidFilter = "cisco.com/S-1-5-33-544",
        ///         TypeFilter = "UNIVERSAL",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("ise:ActiveDirectoryGroupsBy/getDomain:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Active Directory Groups By Domain.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.ActiveDirectoryGroupsBy.GetDomain.Invoke(new()
        ///     {
        ///         JoinPointId = "73808580-b6e6-11ee-8960-de6d7692bc40",
        ///         Domain = "cisco.com",
        ///         Filter = "CN=ISE Admins",
        ///         SidFilter = "cisco.com/S-1-5-33-544",
        ///         TypeFilter = "UNIVERSAL",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("ise:ActiveDirectoryGroupsBy/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain whose groups we want to fetch
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// Exact match filter on group's CN
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        [Input("joinPointId", required: true)]
        public string JoinPointId { get; set; } = null!;

        /// <summary>
        /// Exact match filter on group's SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
        /// </summary>
        [Input("sidFilter")]
        public string? SidFilter { get; set; }

        /// <summary>
        /// Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
        /// </summary>
        [Input("typeFilter")]
        public string? TypeFilter { get; set; }

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain whose groups we want to fetch
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Exact match filter on group's CN
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        [Input("joinPointId", required: true)]
        public Input<string> JoinPointId { get; set; } = null!;

        /// <summary>
        /// Exact match filter on group's SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
        /// </summary>
        [Input("sidFilter")]
        public Input<string>? SidFilter { get; set; }

        /// <summary>
        /// Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
        /// </summary>
        [Input("typeFilter")]
        public Input<string>? TypeFilter { get; set; }

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// The domain whose groups we want to fetch
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Exact match filter on group's CN
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Active Directory Join Point ID
        /// </summary>
        public readonly string JoinPointId;
        /// <summary>
        /// Exact match filter on group's SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
        /// </summary>
        public readonly string? SidFilter;
        /// <summary>
        /// Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
        /// </summary>
        public readonly string? TypeFilter;

        [OutputConstructor]
        private GetDomainResult(
            string domain,

            string? filter,

            ImmutableArray<Outputs.GetDomainGroupResult> groups,

            string id,

            string joinPointId,

            string? sidFilter,

            string? typeFilter)
        {
            Domain = domain;
            Filter = filter;
            Groups = groups;
            Id = id;
            JoinPointId = joinPointId;
            SidFilter = sidFilter;
            TypeFilter = typeFilter;
        }
    }
}
