// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.DeviceAdmin
{
    public static class GetCondition
    {
        /// <summary>
        /// This data source can read the Device Admin Condition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.DeviceAdmin.GetCondition.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConditionResult> InvokeAsync(GetConditionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConditionResult>("ise:DeviceAdmin/getCondition:getCondition", args ?? new GetConditionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Device Admin Condition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ise = Pulumi.Ise;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ise.DeviceAdmin.GetCondition.Invoke(new()
        ///     {
        ///         Id = "76d24097-41c4-4558-a4d0-a8c07ac08470",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConditionResult> Invoke(GetConditionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConditionResult>("ise:DeviceAdmin/getCondition:getCondition", args ?? new GetConditionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConditionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetConditionArgs()
        {
        }
        public static new GetConditionArgs Empty => new GetConditionArgs();
    }

    public sealed class GetConditionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Condition name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetConditionInvokeArgs()
        {
        }
        public static new GetConditionInvokeArgs Empty => new GetConditionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConditionResult
    {
        /// <summary>
        /// Dictionary attribute name
        /// </summary>
        public readonly string AttributeName;
        /// <summary>
        /// Attribute value for condition. Value type is specified in dictionary object.
        /// </summary>
        public readonly string AttributeValue;
        /// <summary>
        /// List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConditionChildrenResult> Childrens;
        /// <summary>
        /// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
        /// </summary>
        public readonly string ConditionType;
        /// <summary>
        /// Condition description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Dictionary name
        /// </summary>
        public readonly string DictionaryName;
        /// <summary>
        /// Dictionary value
        /// </summary>
        public readonly string DictionaryValue;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whereas this condition is in negate mode
        /// </summary>
        public readonly bool IsNegate;
        /// <summary>
        /// Condition name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Equality operator
        /// </summary>
        public readonly string Operator;

        [OutputConstructor]
        private GetConditionResult(
            string attributeName,

            string attributeValue,

            ImmutableArray<Outputs.GetConditionChildrenResult> childrens,

            string conditionType,

            string description,

            string dictionaryName,

            string dictionaryValue,

            string id,

            bool isNegate,

            string name,

            string @operator)
        {
            AttributeName = attributeName;
            AttributeValue = attributeValue;
            Childrens = childrens;
            ConditionType = conditionType;
            Description = description;
            DictionaryName = dictionaryName;
            DictionaryValue = dictionaryValue;
            Id = id;
            IsNegate = isNegate;
            Name = name;
            Operator = @operator;
        }
    }
}
