// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ise.DeviceAdmin
{
    /// <summary>
    /// This resource can manage a TACACS Command Set.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ise = Pulumi.Ise;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ise.DeviceAdmin.TacacsCommandSet("example", new()
    ///     {
    ///         Name = "CommandSet1",
    ///         Description = "My TACACS command set",
    ///         PermitUnmatched = true,
    ///         Commands = new[]
    ///         {
    ///             new Ise.DeviceAdmin.Inputs.TacacsCommandSetCommandArgs
    ///             {
    ///                 Grant = "PERMIT",
    ///                 Command = "show",
    ///                 Arguments = "",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import ise:deviceadmin/tacacsCommandSet:TacacsCommandSet example "76d24097-41c4-4558-a4d0-a8c07ac08470"
    /// ```
    /// </summary>
    [IseResourceType("ise:deviceadmin/tacacsCommandSet:TacacsCommandSet")]
    public partial class TacacsCommandSet : global::Pulumi.CustomResource
    {
        [Output("commands")]
        public Output<ImmutableArray<Outputs.TacacsCommandSetCommand>> Commands { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the TACACS command set
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Permit unmatched commands
        ///   - Default value: `False`
        /// </summary>
        [Output("permitUnmatched")]
        public Output<bool> PermitUnmatched { get; private set; } = null!;


        /// <summary>
        /// Create a TacacsCommandSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TacacsCommandSet(string name, TacacsCommandSetArgs? args = null, CustomResourceOptions? options = null)
            : base("ise:deviceadmin/tacacsCommandSet:TacacsCommandSet", name, args ?? new TacacsCommandSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TacacsCommandSet(string name, Input<string> id, TacacsCommandSetState? state = null, CustomResourceOptions? options = null)
            : base("ise:deviceadmin/tacacsCommandSet:TacacsCommandSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TacacsCommandSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TacacsCommandSet Get(string name, Input<string> id, TacacsCommandSetState? state = null, CustomResourceOptions? options = null)
        {
            return new TacacsCommandSet(name, id, state, options);
        }
    }

    public sealed class TacacsCommandSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<Inputs.TacacsCommandSetCommandArgs>? _commands;
        public InputList<Inputs.TacacsCommandSetCommandArgs> Commands
        {
            get => _commands ?? (_commands = new InputList<Inputs.TacacsCommandSetCommandArgs>());
            set => _commands = value;
        }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the TACACS command set
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Permit unmatched commands
        ///   - Default value: `False`
        /// </summary>
        [Input("permitUnmatched")]
        public Input<bool>? PermitUnmatched { get; set; }

        public TacacsCommandSetArgs()
        {
        }
        public static new TacacsCommandSetArgs Empty => new TacacsCommandSetArgs();
    }

    public sealed class TacacsCommandSetState : global::Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<Inputs.TacacsCommandSetCommandGetArgs>? _commands;
        public InputList<Inputs.TacacsCommandSetCommandGetArgs> Commands
        {
            get => _commands ?? (_commands = new InputList<Inputs.TacacsCommandSetCommandGetArgs>());
            set => _commands = value;
        }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the TACACS command set
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Permit unmatched commands
        ///   - Default value: `False`
        /// </summary>
        [Input("permitUnmatched")]
        public Input<bool>? PermitUnmatched { get; set; }

        public TacacsCommandSetState()
        {
        }
        public static new TacacsCommandSetState Empty => new TacacsCommandSetState();
    }
}
