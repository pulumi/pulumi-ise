// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceIpArgs Empty = new DeviceIpArgs();

    /**
     * It can be either single ip address or ip range address
     * 
     */
    @Import(name="ipaddress", required=true)
    private Output<String> ipaddress;

    /**
     * @return It can be either single ip address or ip range address
     * 
     */
    public Output<String> ipaddress() {
        return this.ipaddress;
    }

    /**
     * It can be either single ip address or ip range address
     * 
     */
    @Import(name="ipaddressExclude")
    private @Nullable Output<String> ipaddressExclude;

    /**
     * @return It can be either single ip address or ip range address
     * 
     */
    public Optional<Output<String>> ipaddressExclude() {
        return Optional.ofNullable(this.ipaddressExclude);
    }

    /**
     * Subnet mask length
     * 
     */
    @Import(name="mask")
    private @Nullable Output<String> mask;

    /**
     * @return Subnet mask length
     * 
     */
    public Optional<Output<String>> mask() {
        return Optional.ofNullable(this.mask);
    }

    private DeviceIpArgs() {}

    private DeviceIpArgs(DeviceIpArgs $) {
        this.ipaddress = $.ipaddress;
        this.ipaddressExclude = $.ipaddressExclude;
        this.mask = $.mask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceIpArgs $;

        public Builder() {
            $ = new DeviceIpArgs();
        }

        public Builder(DeviceIpArgs defaults) {
            $ = new DeviceIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipaddress It can be either single ip address or ip range address
         * 
         * @return builder
         * 
         */
        public Builder ipaddress(Output<String> ipaddress) {
            $.ipaddress = ipaddress;
            return this;
        }

        /**
         * @param ipaddress It can be either single ip address or ip range address
         * 
         * @return builder
         * 
         */
        public Builder ipaddress(String ipaddress) {
            return ipaddress(Output.of(ipaddress));
        }

        /**
         * @param ipaddressExclude It can be either single ip address or ip range address
         * 
         * @return builder
         * 
         */
        public Builder ipaddressExclude(@Nullable Output<String> ipaddressExclude) {
            $.ipaddressExclude = ipaddressExclude;
            return this;
        }

        /**
         * @param ipaddressExclude It can be either single ip address or ip range address
         * 
         * @return builder
         * 
         */
        public Builder ipaddressExclude(String ipaddressExclude) {
            return ipaddressExclude(Output.of(ipaddressExclude));
        }

        /**
         * @param mask Subnet mask length
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable Output<String> mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param mask Subnet mask length
         * 
         * @return builder
         * 
         */
        public Builder mask(String mask) {
            return mask(Output.of(mask));
        }

        public DeviceIpArgs build() {
            if ($.ipaddress == null) {
                throw new MissingRequiredPropertyException("DeviceIpArgs", "ipaddress");
            }
            return $;
        }
    }

}
