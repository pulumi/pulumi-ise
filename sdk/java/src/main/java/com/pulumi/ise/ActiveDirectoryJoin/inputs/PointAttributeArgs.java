// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.ActiveDirectoryJoin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PointAttributeArgs extends com.pulumi.resources.ResourceArgs {

    public static final PointAttributeArgs Empty = new PointAttributeArgs();

    /**
     * Required for each attribute in the attribute list. Can contain an empty string.
     * 
     */
    @Import(name="defaultValue", required=true)
    private Output<String> defaultValue;

    /**
     * @return Required for each attribute in the attribute list. Can contain an empty string.
     * 
     */
    public Output<String> defaultValue() {
        return this.defaultValue;
    }

    /**
     * Required for each attribute in the attribute list
     * 
     */
    @Import(name="internalName", required=true)
    private Output<String> internalName;

    /**
     * @return Required for each attribute in the attribute list
     * 
     */
    public Output<String> internalName() {
        return this.internalName;
    }

    /**
     * Required for each attribute in the attribute list with no duplication between attributes
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Required for each attribute in the attribute list with no duplication between attributes
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Required for each group in the group list
     *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Required for each group in the group list
     *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PointAttributeArgs() {}

    private PointAttributeArgs(PointAttributeArgs $) {
        this.defaultValue = $.defaultValue;
        this.internalName = $.internalName;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PointAttributeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PointAttributeArgs $;

        public Builder() {
            $ = new PointAttributeArgs();
        }

        public Builder(PointAttributeArgs defaults) {
            $ = new PointAttributeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue Required for each attribute in the attribute list. Can contain an empty string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue Required for each attribute in the attribute list. Can contain an empty string.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param internalName Required for each attribute in the attribute list
         * 
         * @return builder
         * 
         */
        public Builder internalName(Output<String> internalName) {
            $.internalName = internalName;
            return this;
        }

        /**
         * @param internalName Required for each attribute in the attribute list
         * 
         * @return builder
         * 
         */
        public Builder internalName(String internalName) {
            return internalName(Output.of(internalName));
        }

        /**
         * @param name Required for each attribute in the attribute list with no duplication between attributes
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required for each attribute in the attribute list with no duplication between attributes
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Required for each group in the group list
         *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Required for each group in the group list
         *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PointAttributeArgs build() {
            if ($.defaultValue == null) {
                throw new MissingRequiredPropertyException("PointAttributeArgs", "defaultValue");
            }
            if ($.internalName == null) {
                throw new MissingRequiredPropertyException("PointAttributeArgs", "internalName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PointAttributeArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("PointAttributeArgs", "type");
            }
            return $;
        }
    }

}
