// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.deviceadmin.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ise.deviceadmin.inputs.TacacsCommandSetCommandArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TacacsCommandSetState extends com.pulumi.resources.ResourceArgs {

    public static final TacacsCommandSetState Empty = new TacacsCommandSetState();

    @Import(name="commands")
    private @Nullable Output<List<TacacsCommandSetCommandArgs>> commands;

    public Optional<Output<List<TacacsCommandSetCommandArgs>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the TACACS command set
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the TACACS command set
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Permit unmatched commands
     *   - Default value: `false`
     * 
     */
    @Import(name="permitUnmatched")
    private @Nullable Output<Boolean> permitUnmatched;

    /**
     * @return Permit unmatched commands
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> permitUnmatched() {
        return Optional.ofNullable(this.permitUnmatched);
    }

    private TacacsCommandSetState() {}

    private TacacsCommandSetState(TacacsCommandSetState $) {
        this.commands = $.commands;
        this.description = $.description;
        this.name = $.name;
        this.permitUnmatched = $.permitUnmatched;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TacacsCommandSetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TacacsCommandSetState $;

        public Builder() {
            $ = new TacacsCommandSetState();
        }

        public Builder(TacacsCommandSetState defaults) {
            $ = new TacacsCommandSetState(Objects.requireNonNull(defaults));
        }

        public Builder commands(@Nullable Output<List<TacacsCommandSetCommandArgs>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<TacacsCommandSetCommandArgs> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(TacacsCommandSetCommandArgs... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the TACACS command set
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the TACACS command set
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permitUnmatched Permit unmatched commands
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder permitUnmatched(@Nullable Output<Boolean> permitUnmatched) {
            $.permitUnmatched = permitUnmatched;
            return this;
        }

        /**
         * @param permitUnmatched Permit unmatched commands
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder permitUnmatched(Boolean permitUnmatched) {
            return permitUnmatched(Output.of(permitUnmatched));
        }

        public TacacsCommandSetState build() {
            return $;
        }
    }

}
