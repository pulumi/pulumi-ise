// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.networkaccess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConditionChildrenChildren {
    /**
     * @return Dictionary attribute name
     * 
     */
    private String attributeName;
    /**
     * @return Attribute value for condition. Value type is specified in dictionary object.
     * 
     */
    private String attributeValue;
    /**
     * @return Condition type.
     * 
     */
    private String conditionType;
    /**
     * @return Condition description
     * 
     */
    private String description;
    /**
     * @return Dictionary name
     * 
     */
    private String dictionaryName;
    /**
     * @return Dictionary value
     * 
     */
    private String dictionaryValue;
    /**
     * @return UUID for condition
     * 
     */
    private String id;
    /**
     * @return Indicates whereas this condition is in negate mode
     * 
     */
    private Boolean isNegate;
    /**
     * @return Condition name. Required if `conditionType` is `ConditionReference`, if `conditionType` is `ConditionAttributes` then this attribute is not used.
     * 
     */
    private String name;
    /**
     * @return Equality operator
     * 
     */
    private String operator;

    private GetConditionChildrenChildren() {}
    /**
     * @return Dictionary attribute name
     * 
     */
    public String attributeName() {
        return this.attributeName;
    }
    /**
     * @return Attribute value for condition. Value type is specified in dictionary object.
     * 
     */
    public String attributeValue() {
        return this.attributeValue;
    }
    /**
     * @return Condition type.
     * 
     */
    public String conditionType() {
        return this.conditionType;
    }
    /**
     * @return Condition description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Dictionary name
     * 
     */
    public String dictionaryName() {
        return this.dictionaryName;
    }
    /**
     * @return Dictionary value
     * 
     */
    public String dictionaryValue() {
        return this.dictionaryValue;
    }
    /**
     * @return UUID for condition
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whereas this condition is in negate mode
     * 
     */
    public Boolean isNegate() {
        return this.isNegate;
    }
    /**
     * @return Condition name. Required if `conditionType` is `ConditionReference`, if `conditionType` is `ConditionAttributes` then this attribute is not used.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Equality operator
     * 
     */
    public String operator() {
        return this.operator;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConditionChildrenChildren defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attributeName;
        private String attributeValue;
        private String conditionType;
        private String description;
        private String dictionaryName;
        private String dictionaryValue;
        private String id;
        private Boolean isNegate;
        private String name;
        private String operator;
        public Builder() {}
        public Builder(GetConditionChildrenChildren defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeName = defaults.attributeName;
    	      this.attributeValue = defaults.attributeValue;
    	      this.conditionType = defaults.conditionType;
    	      this.description = defaults.description;
    	      this.dictionaryName = defaults.dictionaryName;
    	      this.dictionaryValue = defaults.dictionaryValue;
    	      this.id = defaults.id;
    	      this.isNegate = defaults.isNegate;
    	      this.name = defaults.name;
    	      this.operator = defaults.operator;
        }

        @CustomType.Setter
        public Builder attributeName(String attributeName) {
            if (attributeName == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "attributeName");
            }
            this.attributeName = attributeName;
            return this;
        }
        @CustomType.Setter
        public Builder attributeValue(String attributeValue) {
            if (attributeValue == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "attributeValue");
            }
            this.attributeValue = attributeValue;
            return this;
        }
        @CustomType.Setter
        public Builder conditionType(String conditionType) {
            if (conditionType == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "conditionType");
            }
            this.conditionType = conditionType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryName(String dictionaryName) {
            if (dictionaryName == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "dictionaryName");
            }
            this.dictionaryName = dictionaryName;
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryValue(String dictionaryValue) {
            if (dictionaryValue == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "dictionaryValue");
            }
            this.dictionaryValue = dictionaryValue;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isNegate(Boolean isNegate) {
            if (isNegate == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "isNegate");
            }
            this.isNegate = isNegate;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetConditionChildrenChildren", "operator");
            }
            this.operator = operator;
            return this;
        }
        public GetConditionChildrenChildren build() {
            final var _resultValue = new GetConditionChildrenChildren();
            _resultValue.attributeName = attributeName;
            _resultValue.attributeValue = attributeValue;
            _resultValue.conditionType = conditionType;
            _resultValue.description = description;
            _resultValue.dictionaryName = dictionaryName;
            _resultValue.dictionaryValue = dictionaryValue;
            _resultValue.id = id;
            _resultValue.isNegate = isNegate;
            _resultValue.name = name;
            _resultValue.operator = operator;
            return _resultValue;
        }
    }
}
