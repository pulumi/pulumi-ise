// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.Network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.Network.outputs.GetDeviceIp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeviceResult {
    /**
     * @return Enforce use of DTLS
     * 
     */
    private Boolean authenticationDtlsRequired;
    /**
     * @return Enable key wrap
     * 
     */
    private Boolean authenticationEnableKeyWrap;
    /**
     * @return Enable multiple RADIUS shared secrets
     * 
     */
    private Boolean authenticationEnableMultiSecret;
    /**
     * @return Encryption key
     * 
     */
    private String authenticationEncryptionKey;
    /**
     * @return Key input format
     * 
     */
    private String authenticationEncryptionKeyFormat;
    /**
     * @return Message authenticator code key
     * 
     */
    private String authenticationMessageAuthenticatorCodeKey;
    /**
     * @return Network protocol
     * 
     */
    private String authenticationNetworkProtocol;
    /**
     * @return RADIUS shared secret
     * 
     */
    private String authenticationRadiusSharedSecret;
    /**
     * @return Second RADIUS shared secret
     * 
     */
    private String authenticationSecondRadiusSharedSecret;
    /**
     * @return CoA port
     * 
     */
    private Integer coaPort;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     * 
     */
    private String dtlsDnsName;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return List of IP subnets
     * 
     */
    private List<GetDeviceIp> ips;
    /**
     * @return Model name
     * 
     */
    private String modelName;
    /**
     * @return The name of the network device
     * 
     */
    private String name;
    /**
     * @return List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     * 
     */
    private List<String> networkDeviceGroups;
    /**
     * @return Profile name
     * 
     */
    private String profileName;
    /**
     * @return SNMP link Trap Query
     * 
     */
    private Boolean snmpLinkTrapQuery;
    /**
     * @return SNMP MAC Trap Query
     * 
     */
    private Boolean snmpMacTrapQuery;
    /**
     * @return Originating Policy Services Node
     * 
     */
    private String snmpOriginatingPolicyServiceNode;
    /**
     * @return SNMP Polling Interval in seconds
     * 
     */
    private Integer snmpPollingInterval;
    /**
     * @return SNMP RO Community
     * 
     */
    private String snmpRoCommunity;
    /**
     * @return SNMP version
     * 
     */
    private String snmpVersion;
    /**
     * @return Software version
     * 
     */
    private String softwareVersion;
    /**
     * @return Connect mode options
     * 
     */
    private String tacacsConnectModeOptions;
    /**
     * @return Shared secret
     * 
     */
    private String tacacsSharedSecret;
    /**
     * @return CoA source host
     * 
     */
    private String trustsecCoaSourceHost;
    /**
     * @return TrustSec device ID
     * 
     */
    private String trustsecDeviceId;
    /**
     * @return TrustSec device password
     * 
     */
    private String trustsecDevicePassword;
    /**
     * @return Download environment data every X seconds
     * 
     */
    private Integer trustsecDownloadEnviromentDataEveryXSeconds;
    /**
     * @return Download peer authorization policy every X seconds
     * 
     */
    private Integer trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
    /**
     * @return Download SGACL lists every X seconds
     * 
     */
    private Integer trustsecDownloadSgaclListsEveryXSeconds;
    /**
     * @return Enable mode password
     * 
     */
    private String trustsecEnableModePassword;
    /**
     * @return EXEC mode password
     * 
     */
    private String trustsecExecModePassword;
    /**
     * @return EXEC mode username
     * 
     */
    private String trustsecExecModeUsername;
    /**
     * @return Include this device when deploying Security Group Tag Mapping Updates
     * 
     */
    private Boolean trustsecIncludeWhenDeployingSgtUpdates;
    /**
     * @return Other TrustSec devices to trust this device
     * 
     */
    private Boolean trustsecOtherSgaDevicesToTrustThisDevice;
    /**
     * @return Re-authenticate every X seconds
     * 
     */
    private Integer trustsecReAuthenticationEveryXSeconds;
    /**
     * @return REST API password
     * 
     */
    private String trustsecRestApiPassword;
    /**
     * @return REST API username
     * 
     */
    private String trustsecRestApiUsername;
    /**
     * @return Send configuration to device
     * 
     */
    private Boolean trustsecSendConfigurationToDevice;
    /**
     * @return Send configuration to device using
     * 
     */
    private String trustsecSendConfigurationToDeviceUsing;

    private GetDeviceResult() {}
    /**
     * @return Enforce use of DTLS
     * 
     */
    public Boolean authenticationDtlsRequired() {
        return this.authenticationDtlsRequired;
    }
    /**
     * @return Enable key wrap
     * 
     */
    public Boolean authenticationEnableKeyWrap() {
        return this.authenticationEnableKeyWrap;
    }
    /**
     * @return Enable multiple RADIUS shared secrets
     * 
     */
    public Boolean authenticationEnableMultiSecret() {
        return this.authenticationEnableMultiSecret;
    }
    /**
     * @return Encryption key
     * 
     */
    public String authenticationEncryptionKey() {
        return this.authenticationEncryptionKey;
    }
    /**
     * @return Key input format
     * 
     */
    public String authenticationEncryptionKeyFormat() {
        return this.authenticationEncryptionKeyFormat;
    }
    /**
     * @return Message authenticator code key
     * 
     */
    public String authenticationMessageAuthenticatorCodeKey() {
        return this.authenticationMessageAuthenticatorCodeKey;
    }
    /**
     * @return Network protocol
     * 
     */
    public String authenticationNetworkProtocol() {
        return this.authenticationNetworkProtocol;
    }
    /**
     * @return RADIUS shared secret
     * 
     */
    public String authenticationRadiusSharedSecret() {
        return this.authenticationRadiusSharedSecret;
    }
    /**
     * @return Second RADIUS shared secret
     * 
     */
    public String authenticationSecondRadiusSharedSecret() {
        return this.authenticationSecondRadiusSharedSecret;
    }
    /**
     * @return CoA port
     * 
     */
    public Integer coaPort() {
        return this.coaPort;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     * 
     */
    public String dtlsDnsName() {
        return this.dtlsDnsName;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of IP subnets
     * 
     */
    public List<GetDeviceIp> ips() {
        return this.ips;
    }
    /**
     * @return Model name
     * 
     */
    public String modelName() {
        return this.modelName;
    }
    /**
     * @return The name of the network device
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     * 
     */
    public List<String> networkDeviceGroups() {
        return this.networkDeviceGroups;
    }
    /**
     * @return Profile name
     * 
     */
    public String profileName() {
        return this.profileName;
    }
    /**
     * @return SNMP link Trap Query
     * 
     */
    public Boolean snmpLinkTrapQuery() {
        return this.snmpLinkTrapQuery;
    }
    /**
     * @return SNMP MAC Trap Query
     * 
     */
    public Boolean snmpMacTrapQuery() {
        return this.snmpMacTrapQuery;
    }
    /**
     * @return Originating Policy Services Node
     * 
     */
    public String snmpOriginatingPolicyServiceNode() {
        return this.snmpOriginatingPolicyServiceNode;
    }
    /**
     * @return SNMP Polling Interval in seconds
     * 
     */
    public Integer snmpPollingInterval() {
        return this.snmpPollingInterval;
    }
    /**
     * @return SNMP RO Community
     * 
     */
    public String snmpRoCommunity() {
        return this.snmpRoCommunity;
    }
    /**
     * @return SNMP version
     * 
     */
    public String snmpVersion() {
        return this.snmpVersion;
    }
    /**
     * @return Software version
     * 
     */
    public String softwareVersion() {
        return this.softwareVersion;
    }
    /**
     * @return Connect mode options
     * 
     */
    public String tacacsConnectModeOptions() {
        return this.tacacsConnectModeOptions;
    }
    /**
     * @return Shared secret
     * 
     */
    public String tacacsSharedSecret() {
        return this.tacacsSharedSecret;
    }
    /**
     * @return CoA source host
     * 
     */
    public String trustsecCoaSourceHost() {
        return this.trustsecCoaSourceHost;
    }
    /**
     * @return TrustSec device ID
     * 
     */
    public String trustsecDeviceId() {
        return this.trustsecDeviceId;
    }
    /**
     * @return TrustSec device password
     * 
     */
    public String trustsecDevicePassword() {
        return this.trustsecDevicePassword;
    }
    /**
     * @return Download environment data every X seconds
     * 
     */
    public Integer trustsecDownloadEnviromentDataEveryXSeconds() {
        return this.trustsecDownloadEnviromentDataEveryXSeconds;
    }
    /**
     * @return Download peer authorization policy every X seconds
     * 
     */
    public Integer trustsecDownloadPeerAuthorizationPolicyEveryXSeconds() {
        return this.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
    }
    /**
     * @return Download SGACL lists every X seconds
     * 
     */
    public Integer trustsecDownloadSgaclListsEveryXSeconds() {
        return this.trustsecDownloadSgaclListsEveryXSeconds;
    }
    /**
     * @return Enable mode password
     * 
     */
    public String trustsecEnableModePassword() {
        return this.trustsecEnableModePassword;
    }
    /**
     * @return EXEC mode password
     * 
     */
    public String trustsecExecModePassword() {
        return this.trustsecExecModePassword;
    }
    /**
     * @return EXEC mode username
     * 
     */
    public String trustsecExecModeUsername() {
        return this.trustsecExecModeUsername;
    }
    /**
     * @return Include this device when deploying Security Group Tag Mapping Updates
     * 
     */
    public Boolean trustsecIncludeWhenDeployingSgtUpdates() {
        return this.trustsecIncludeWhenDeployingSgtUpdates;
    }
    /**
     * @return Other TrustSec devices to trust this device
     * 
     */
    public Boolean trustsecOtherSgaDevicesToTrustThisDevice() {
        return this.trustsecOtherSgaDevicesToTrustThisDevice;
    }
    /**
     * @return Re-authenticate every X seconds
     * 
     */
    public Integer trustsecReAuthenticationEveryXSeconds() {
        return this.trustsecReAuthenticationEveryXSeconds;
    }
    /**
     * @return REST API password
     * 
     */
    public String trustsecRestApiPassword() {
        return this.trustsecRestApiPassword;
    }
    /**
     * @return REST API username
     * 
     */
    public String trustsecRestApiUsername() {
        return this.trustsecRestApiUsername;
    }
    /**
     * @return Send configuration to device
     * 
     */
    public Boolean trustsecSendConfigurationToDevice() {
        return this.trustsecSendConfigurationToDevice;
    }
    /**
     * @return Send configuration to device using
     * 
     */
    public String trustsecSendConfigurationToDeviceUsing() {
        return this.trustsecSendConfigurationToDeviceUsing;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean authenticationDtlsRequired;
        private Boolean authenticationEnableKeyWrap;
        private Boolean authenticationEnableMultiSecret;
        private String authenticationEncryptionKey;
        private String authenticationEncryptionKeyFormat;
        private String authenticationMessageAuthenticatorCodeKey;
        private String authenticationNetworkProtocol;
        private String authenticationRadiusSharedSecret;
        private String authenticationSecondRadiusSharedSecret;
        private Integer coaPort;
        private String description;
        private String dtlsDnsName;
        private String id;
        private List<GetDeviceIp> ips;
        private String modelName;
        private String name;
        private List<String> networkDeviceGroups;
        private String profileName;
        private Boolean snmpLinkTrapQuery;
        private Boolean snmpMacTrapQuery;
        private String snmpOriginatingPolicyServiceNode;
        private Integer snmpPollingInterval;
        private String snmpRoCommunity;
        private String snmpVersion;
        private String softwareVersion;
        private String tacacsConnectModeOptions;
        private String tacacsSharedSecret;
        private String trustsecCoaSourceHost;
        private String trustsecDeviceId;
        private String trustsecDevicePassword;
        private Integer trustsecDownloadEnviromentDataEveryXSeconds;
        private Integer trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
        private Integer trustsecDownloadSgaclListsEveryXSeconds;
        private String trustsecEnableModePassword;
        private String trustsecExecModePassword;
        private String trustsecExecModeUsername;
        private Boolean trustsecIncludeWhenDeployingSgtUpdates;
        private Boolean trustsecOtherSgaDevicesToTrustThisDevice;
        private Integer trustsecReAuthenticationEveryXSeconds;
        private String trustsecRestApiPassword;
        private String trustsecRestApiUsername;
        private Boolean trustsecSendConfigurationToDevice;
        private String trustsecSendConfigurationToDeviceUsing;
        public Builder() {}
        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationDtlsRequired = defaults.authenticationDtlsRequired;
    	      this.authenticationEnableKeyWrap = defaults.authenticationEnableKeyWrap;
    	      this.authenticationEnableMultiSecret = defaults.authenticationEnableMultiSecret;
    	      this.authenticationEncryptionKey = defaults.authenticationEncryptionKey;
    	      this.authenticationEncryptionKeyFormat = defaults.authenticationEncryptionKeyFormat;
    	      this.authenticationMessageAuthenticatorCodeKey = defaults.authenticationMessageAuthenticatorCodeKey;
    	      this.authenticationNetworkProtocol = defaults.authenticationNetworkProtocol;
    	      this.authenticationRadiusSharedSecret = defaults.authenticationRadiusSharedSecret;
    	      this.authenticationSecondRadiusSharedSecret = defaults.authenticationSecondRadiusSharedSecret;
    	      this.coaPort = defaults.coaPort;
    	      this.description = defaults.description;
    	      this.dtlsDnsName = defaults.dtlsDnsName;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.modelName = defaults.modelName;
    	      this.name = defaults.name;
    	      this.networkDeviceGroups = defaults.networkDeviceGroups;
    	      this.profileName = defaults.profileName;
    	      this.snmpLinkTrapQuery = defaults.snmpLinkTrapQuery;
    	      this.snmpMacTrapQuery = defaults.snmpMacTrapQuery;
    	      this.snmpOriginatingPolicyServiceNode = defaults.snmpOriginatingPolicyServiceNode;
    	      this.snmpPollingInterval = defaults.snmpPollingInterval;
    	      this.snmpRoCommunity = defaults.snmpRoCommunity;
    	      this.snmpVersion = defaults.snmpVersion;
    	      this.softwareVersion = defaults.softwareVersion;
    	      this.tacacsConnectModeOptions = defaults.tacacsConnectModeOptions;
    	      this.tacacsSharedSecret = defaults.tacacsSharedSecret;
    	      this.trustsecCoaSourceHost = defaults.trustsecCoaSourceHost;
    	      this.trustsecDeviceId = defaults.trustsecDeviceId;
    	      this.trustsecDevicePassword = defaults.trustsecDevicePassword;
    	      this.trustsecDownloadEnviromentDataEveryXSeconds = defaults.trustsecDownloadEnviromentDataEveryXSeconds;
    	      this.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds = defaults.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
    	      this.trustsecDownloadSgaclListsEveryXSeconds = defaults.trustsecDownloadSgaclListsEveryXSeconds;
    	      this.trustsecEnableModePassword = defaults.trustsecEnableModePassword;
    	      this.trustsecExecModePassword = defaults.trustsecExecModePassword;
    	      this.trustsecExecModeUsername = defaults.trustsecExecModeUsername;
    	      this.trustsecIncludeWhenDeployingSgtUpdates = defaults.trustsecIncludeWhenDeployingSgtUpdates;
    	      this.trustsecOtherSgaDevicesToTrustThisDevice = defaults.trustsecOtherSgaDevicesToTrustThisDevice;
    	      this.trustsecReAuthenticationEveryXSeconds = defaults.trustsecReAuthenticationEveryXSeconds;
    	      this.trustsecRestApiPassword = defaults.trustsecRestApiPassword;
    	      this.trustsecRestApiUsername = defaults.trustsecRestApiUsername;
    	      this.trustsecSendConfigurationToDevice = defaults.trustsecSendConfigurationToDevice;
    	      this.trustsecSendConfigurationToDeviceUsing = defaults.trustsecSendConfigurationToDeviceUsing;
        }

        @CustomType.Setter
        public Builder authenticationDtlsRequired(Boolean authenticationDtlsRequired) {
            if (authenticationDtlsRequired == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationDtlsRequired");
            }
            this.authenticationDtlsRequired = authenticationDtlsRequired;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationEnableKeyWrap(Boolean authenticationEnableKeyWrap) {
            if (authenticationEnableKeyWrap == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationEnableKeyWrap");
            }
            this.authenticationEnableKeyWrap = authenticationEnableKeyWrap;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationEnableMultiSecret(Boolean authenticationEnableMultiSecret) {
            if (authenticationEnableMultiSecret == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationEnableMultiSecret");
            }
            this.authenticationEnableMultiSecret = authenticationEnableMultiSecret;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationEncryptionKey(String authenticationEncryptionKey) {
            if (authenticationEncryptionKey == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationEncryptionKey");
            }
            this.authenticationEncryptionKey = authenticationEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationEncryptionKeyFormat(String authenticationEncryptionKeyFormat) {
            if (authenticationEncryptionKeyFormat == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationEncryptionKeyFormat");
            }
            this.authenticationEncryptionKeyFormat = authenticationEncryptionKeyFormat;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationMessageAuthenticatorCodeKey(String authenticationMessageAuthenticatorCodeKey) {
            if (authenticationMessageAuthenticatorCodeKey == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationMessageAuthenticatorCodeKey");
            }
            this.authenticationMessageAuthenticatorCodeKey = authenticationMessageAuthenticatorCodeKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationNetworkProtocol(String authenticationNetworkProtocol) {
            if (authenticationNetworkProtocol == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationNetworkProtocol");
            }
            this.authenticationNetworkProtocol = authenticationNetworkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationRadiusSharedSecret(String authenticationRadiusSharedSecret) {
            if (authenticationRadiusSharedSecret == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationRadiusSharedSecret");
            }
            this.authenticationRadiusSharedSecret = authenticationRadiusSharedSecret;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationSecondRadiusSharedSecret(String authenticationSecondRadiusSharedSecret) {
            if (authenticationSecondRadiusSharedSecret == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "authenticationSecondRadiusSharedSecret");
            }
            this.authenticationSecondRadiusSharedSecret = authenticationSecondRadiusSharedSecret;
            return this;
        }
        @CustomType.Setter
        public Builder coaPort(Integer coaPort) {
            if (coaPort == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "coaPort");
            }
            this.coaPort = coaPort;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dtlsDnsName(String dtlsDnsName) {
            if (dtlsDnsName == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "dtlsDnsName");
            }
            this.dtlsDnsName = dtlsDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<GetDeviceIp> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(GetDeviceIp... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder modelName(String modelName) {
            if (modelName == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "modelName");
            }
            this.modelName = modelName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkDeviceGroups(List<String> networkDeviceGroups) {
            if (networkDeviceGroups == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "networkDeviceGroups");
            }
            this.networkDeviceGroups = networkDeviceGroups;
            return this;
        }
        public Builder networkDeviceGroups(String... networkDeviceGroups) {
            return networkDeviceGroups(List.of(networkDeviceGroups));
        }
        @CustomType.Setter
        public Builder profileName(String profileName) {
            if (profileName == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "profileName");
            }
            this.profileName = profileName;
            return this;
        }
        @CustomType.Setter
        public Builder snmpLinkTrapQuery(Boolean snmpLinkTrapQuery) {
            if (snmpLinkTrapQuery == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpLinkTrapQuery");
            }
            this.snmpLinkTrapQuery = snmpLinkTrapQuery;
            return this;
        }
        @CustomType.Setter
        public Builder snmpMacTrapQuery(Boolean snmpMacTrapQuery) {
            if (snmpMacTrapQuery == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpMacTrapQuery");
            }
            this.snmpMacTrapQuery = snmpMacTrapQuery;
            return this;
        }
        @CustomType.Setter
        public Builder snmpOriginatingPolicyServiceNode(String snmpOriginatingPolicyServiceNode) {
            if (snmpOriginatingPolicyServiceNode == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpOriginatingPolicyServiceNode");
            }
            this.snmpOriginatingPolicyServiceNode = snmpOriginatingPolicyServiceNode;
            return this;
        }
        @CustomType.Setter
        public Builder snmpPollingInterval(Integer snmpPollingInterval) {
            if (snmpPollingInterval == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpPollingInterval");
            }
            this.snmpPollingInterval = snmpPollingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder snmpRoCommunity(String snmpRoCommunity) {
            if (snmpRoCommunity == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpRoCommunity");
            }
            this.snmpRoCommunity = snmpRoCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder snmpVersion(String snmpVersion) {
            if (snmpVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "snmpVersion");
            }
            this.snmpVersion = snmpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder softwareVersion(String softwareVersion) {
            if (softwareVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "softwareVersion");
            }
            this.softwareVersion = softwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tacacsConnectModeOptions(String tacacsConnectModeOptions) {
            if (tacacsConnectModeOptions == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "tacacsConnectModeOptions");
            }
            this.tacacsConnectModeOptions = tacacsConnectModeOptions;
            return this;
        }
        @CustomType.Setter
        public Builder tacacsSharedSecret(String tacacsSharedSecret) {
            if (tacacsSharedSecret == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "tacacsSharedSecret");
            }
            this.tacacsSharedSecret = tacacsSharedSecret;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecCoaSourceHost(String trustsecCoaSourceHost) {
            if (trustsecCoaSourceHost == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecCoaSourceHost");
            }
            this.trustsecCoaSourceHost = trustsecCoaSourceHost;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecDeviceId(String trustsecDeviceId) {
            if (trustsecDeviceId == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecDeviceId");
            }
            this.trustsecDeviceId = trustsecDeviceId;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecDevicePassword(String trustsecDevicePassword) {
            if (trustsecDevicePassword == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecDevicePassword");
            }
            this.trustsecDevicePassword = trustsecDevicePassword;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecDownloadEnviromentDataEveryXSeconds(Integer trustsecDownloadEnviromentDataEveryXSeconds) {
            if (trustsecDownloadEnviromentDataEveryXSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecDownloadEnviromentDataEveryXSeconds");
            }
            this.trustsecDownloadEnviromentDataEveryXSeconds = trustsecDownloadEnviromentDataEveryXSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecDownloadPeerAuthorizationPolicyEveryXSeconds(Integer trustsecDownloadPeerAuthorizationPolicyEveryXSeconds) {
            if (trustsecDownloadPeerAuthorizationPolicyEveryXSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds");
            }
            this.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds = trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecDownloadSgaclListsEveryXSeconds(Integer trustsecDownloadSgaclListsEveryXSeconds) {
            if (trustsecDownloadSgaclListsEveryXSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecDownloadSgaclListsEveryXSeconds");
            }
            this.trustsecDownloadSgaclListsEveryXSeconds = trustsecDownloadSgaclListsEveryXSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecEnableModePassword(String trustsecEnableModePassword) {
            if (trustsecEnableModePassword == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecEnableModePassword");
            }
            this.trustsecEnableModePassword = trustsecEnableModePassword;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecExecModePassword(String trustsecExecModePassword) {
            if (trustsecExecModePassword == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecExecModePassword");
            }
            this.trustsecExecModePassword = trustsecExecModePassword;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecExecModeUsername(String trustsecExecModeUsername) {
            if (trustsecExecModeUsername == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecExecModeUsername");
            }
            this.trustsecExecModeUsername = trustsecExecModeUsername;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecIncludeWhenDeployingSgtUpdates(Boolean trustsecIncludeWhenDeployingSgtUpdates) {
            if (trustsecIncludeWhenDeployingSgtUpdates == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecIncludeWhenDeployingSgtUpdates");
            }
            this.trustsecIncludeWhenDeployingSgtUpdates = trustsecIncludeWhenDeployingSgtUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecOtherSgaDevicesToTrustThisDevice(Boolean trustsecOtherSgaDevicesToTrustThisDevice) {
            if (trustsecOtherSgaDevicesToTrustThisDevice == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecOtherSgaDevicesToTrustThisDevice");
            }
            this.trustsecOtherSgaDevicesToTrustThisDevice = trustsecOtherSgaDevicesToTrustThisDevice;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecReAuthenticationEveryXSeconds(Integer trustsecReAuthenticationEveryXSeconds) {
            if (trustsecReAuthenticationEveryXSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecReAuthenticationEveryXSeconds");
            }
            this.trustsecReAuthenticationEveryXSeconds = trustsecReAuthenticationEveryXSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecRestApiPassword(String trustsecRestApiPassword) {
            if (trustsecRestApiPassword == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecRestApiPassword");
            }
            this.trustsecRestApiPassword = trustsecRestApiPassword;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecRestApiUsername(String trustsecRestApiUsername) {
            if (trustsecRestApiUsername == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecRestApiUsername");
            }
            this.trustsecRestApiUsername = trustsecRestApiUsername;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecSendConfigurationToDevice(Boolean trustsecSendConfigurationToDevice) {
            if (trustsecSendConfigurationToDevice == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecSendConfigurationToDevice");
            }
            this.trustsecSendConfigurationToDevice = trustsecSendConfigurationToDevice;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecSendConfigurationToDeviceUsing(String trustsecSendConfigurationToDeviceUsing) {
            if (trustsecSendConfigurationToDeviceUsing == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "trustsecSendConfigurationToDeviceUsing");
            }
            this.trustsecSendConfigurationToDeviceUsing = trustsecSendConfigurationToDeviceUsing;
            return this;
        }
        public GetDeviceResult build() {
            final var _resultValue = new GetDeviceResult();
            _resultValue.authenticationDtlsRequired = authenticationDtlsRequired;
            _resultValue.authenticationEnableKeyWrap = authenticationEnableKeyWrap;
            _resultValue.authenticationEnableMultiSecret = authenticationEnableMultiSecret;
            _resultValue.authenticationEncryptionKey = authenticationEncryptionKey;
            _resultValue.authenticationEncryptionKeyFormat = authenticationEncryptionKeyFormat;
            _resultValue.authenticationMessageAuthenticatorCodeKey = authenticationMessageAuthenticatorCodeKey;
            _resultValue.authenticationNetworkProtocol = authenticationNetworkProtocol;
            _resultValue.authenticationRadiusSharedSecret = authenticationRadiusSharedSecret;
            _resultValue.authenticationSecondRadiusSharedSecret = authenticationSecondRadiusSharedSecret;
            _resultValue.coaPort = coaPort;
            _resultValue.description = description;
            _resultValue.dtlsDnsName = dtlsDnsName;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.modelName = modelName;
            _resultValue.name = name;
            _resultValue.networkDeviceGroups = networkDeviceGroups;
            _resultValue.profileName = profileName;
            _resultValue.snmpLinkTrapQuery = snmpLinkTrapQuery;
            _resultValue.snmpMacTrapQuery = snmpMacTrapQuery;
            _resultValue.snmpOriginatingPolicyServiceNode = snmpOriginatingPolicyServiceNode;
            _resultValue.snmpPollingInterval = snmpPollingInterval;
            _resultValue.snmpRoCommunity = snmpRoCommunity;
            _resultValue.snmpVersion = snmpVersion;
            _resultValue.softwareVersion = softwareVersion;
            _resultValue.tacacsConnectModeOptions = tacacsConnectModeOptions;
            _resultValue.tacacsSharedSecret = tacacsSharedSecret;
            _resultValue.trustsecCoaSourceHost = trustsecCoaSourceHost;
            _resultValue.trustsecDeviceId = trustsecDeviceId;
            _resultValue.trustsecDevicePassword = trustsecDevicePassword;
            _resultValue.trustsecDownloadEnviromentDataEveryXSeconds = trustsecDownloadEnviromentDataEveryXSeconds;
            _resultValue.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds = trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
            _resultValue.trustsecDownloadSgaclListsEveryXSeconds = trustsecDownloadSgaclListsEveryXSeconds;
            _resultValue.trustsecEnableModePassword = trustsecEnableModePassword;
            _resultValue.trustsecExecModePassword = trustsecExecModePassword;
            _resultValue.trustsecExecModeUsername = trustsecExecModeUsername;
            _resultValue.trustsecIncludeWhenDeployingSgtUpdates = trustsecIncludeWhenDeployingSgtUpdates;
            _resultValue.trustsecOtherSgaDevicesToTrustThisDevice = trustsecOtherSgaDevicesToTrustThisDevice;
            _resultValue.trustsecReAuthenticationEveryXSeconds = trustsecReAuthenticationEveryXSeconds;
            _resultValue.trustsecRestApiPassword = trustsecRestApiPassword;
            _resultValue.trustsecRestApiUsername = trustsecRestApiUsername;
            _resultValue.trustsecSendConfigurationToDevice = trustsecSendConfigurationToDevice;
            _resultValue.trustsecSendConfigurationToDeviceUsing = trustsecSendConfigurationToDeviceUsing;
            return _resultValue;
        }
    }
}
