// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.CertificateAuthentication.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProfileResult {
    /**
     * @return Allow as username
     * 
     */
    private Boolean allowedAsUserName;
    /**
     * @return Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
     * 
     */
    private String certificateAttributeName;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
     * 
     */
    private String externalIdentityStoreName;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE*IDENTITY*AMBIGUITY, BINARY_COMPARISON
     * 
     */
    private String matchMode;
    /**
     * @return The name of the certificate profile
     * 
     */
    private String name;
    /**
     * @return The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
     * 
     */
    private String usernameFrom;

    private GetProfileResult() {}
    /**
     * @return Allow as username
     * 
     */
    public Boolean allowedAsUserName() {
        return this.allowedAsUserName;
    }
    /**
     * @return Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
     * 
     */
    public String certificateAttributeName() {
        return this.certificateAttributeName;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
     * 
     */
    public String externalIdentityStoreName() {
        return this.externalIdentityStoreName;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE*IDENTITY*AMBIGUITY, BINARY_COMPARISON
     * 
     */
    public String matchMode() {
        return this.matchMode;
    }
    /**
     * @return The name of the certificate profile
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
     * 
     */
    public String usernameFrom() {
        return this.usernameFrom;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProfileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowedAsUserName;
        private String certificateAttributeName;
        private String description;
        private String externalIdentityStoreName;
        private String id;
        private String matchMode;
        private String name;
        private String usernameFrom;
        public Builder() {}
        public Builder(GetProfileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedAsUserName = defaults.allowedAsUserName;
    	      this.certificateAttributeName = defaults.certificateAttributeName;
    	      this.description = defaults.description;
    	      this.externalIdentityStoreName = defaults.externalIdentityStoreName;
    	      this.id = defaults.id;
    	      this.matchMode = defaults.matchMode;
    	      this.name = defaults.name;
    	      this.usernameFrom = defaults.usernameFrom;
        }

        @CustomType.Setter
        public Builder allowedAsUserName(Boolean allowedAsUserName) {
            if (allowedAsUserName == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "allowedAsUserName");
            }
            this.allowedAsUserName = allowedAsUserName;
            return this;
        }
        @CustomType.Setter
        public Builder certificateAttributeName(String certificateAttributeName) {
            if (certificateAttributeName == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "certificateAttributeName");
            }
            this.certificateAttributeName = certificateAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalIdentityStoreName(String externalIdentityStoreName) {
            if (externalIdentityStoreName == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "externalIdentityStoreName");
            }
            this.externalIdentityStoreName = externalIdentityStoreName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder matchMode(String matchMode) {
            if (matchMode == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "matchMode");
            }
            this.matchMode = matchMode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder usernameFrom(String usernameFrom) {
            if (usernameFrom == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "usernameFrom");
            }
            this.usernameFrom = usernameFrom;
            return this;
        }
        public GetProfileResult build() {
            final var _resultValue = new GetProfileResult();
            _resultValue.allowedAsUserName = allowedAsUserName;
            _resultValue.certificateAttributeName = certificateAttributeName;
            _resultValue.description = description;
            _resultValue.externalIdentityStoreName = externalIdentityStoreName;
            _resultValue.id = id;
            _resultValue.matchMode = matchMode;
            _resultValue.name = name;
            _resultValue.usernameFrom = usernameFrom;
            return _resultValue;
        }
    }
}
