// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.identitymanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthenticationProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthenticationProfileArgs Empty = new CertificateAuthenticationProfileArgs();

    /**
     * Allow as username
     *   - Default value: `false`
     * 
     */
    @Import(name="allowedAsUserName")
    private @Nullable Output<Boolean> allowedAsUserName;

    /**
     * @return Allow as username
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> allowedAsUserName() {
        return Optional.ofNullable(this.allowedAsUserName);
    }

    /**
     * Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
     *   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
     *   - Default value: `SUBJECT_COMMON_NAME`
     * 
     */
    @Import(name="certificateAttributeName")
    private @Nullable Output<String> certificateAttributeName;

    /**
     * @return Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
     *   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
     *   - Default value: `SUBJECT_COMMON_NAME`
     * 
     */
    public Optional<Output<String>> certificateAttributeName() {
        return Optional.ofNullable(this.certificateAttributeName);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
     *   - Default value: `[not applicable]`
     * 
     */
    @Import(name="externalIdentityStoreName")
    private @Nullable Output<String> externalIdentityStoreName;

    /**
     * @return Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
     *   - Default value: `[not applicable]`
     * 
     */
    public Optional<Output<String>> externalIdentityStoreName() {
        return Optional.ofNullable(this.externalIdentityStoreName);
    }

    /**
     * Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
     *   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
     *   - Default value: `NEVER`
     * 
     */
    @Import(name="matchMode")
    private @Nullable Output<String> matchMode;

    /**
     * @return Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
     *   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
     *   - Default value: `NEVER`
     * 
     */
    public Optional<Output<String>> matchMode() {
        return Optional.ofNullable(this.matchMode);
    }

    /**
     * The name of the certificate profile
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate profile
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
     *   - Choices: `CERTIFICATE`, `UPN`
     *   - Default value: `CERTIFICATE`
     * 
     */
    @Import(name="usernameFrom")
    private @Nullable Output<String> usernameFrom;

    /**
     * @return The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
     *   - Choices: `CERTIFICATE`, `UPN`
     *   - Default value: `CERTIFICATE`
     * 
     */
    public Optional<Output<String>> usernameFrom() {
        return Optional.ofNullable(this.usernameFrom);
    }

    private CertificateAuthenticationProfileArgs() {}

    private CertificateAuthenticationProfileArgs(CertificateAuthenticationProfileArgs $) {
        this.allowedAsUserName = $.allowedAsUserName;
        this.certificateAttributeName = $.certificateAttributeName;
        this.description = $.description;
        this.externalIdentityStoreName = $.externalIdentityStoreName;
        this.matchMode = $.matchMode;
        this.name = $.name;
        this.usernameFrom = $.usernameFrom;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthenticationProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthenticationProfileArgs $;

        public Builder() {
            $ = new CertificateAuthenticationProfileArgs();
        }

        public Builder(CertificateAuthenticationProfileArgs defaults) {
            $ = new CertificateAuthenticationProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedAsUserName Allow as username
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder allowedAsUserName(@Nullable Output<Boolean> allowedAsUserName) {
            $.allowedAsUserName = allowedAsUserName;
            return this;
        }

        /**
         * @param allowedAsUserName Allow as username
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder allowedAsUserName(Boolean allowedAsUserName) {
            return allowedAsUserName(Output.of(allowedAsUserName));
        }

        /**
         * @param certificateAttributeName Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
         *   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
         *   - Default value: `SUBJECT_COMMON_NAME`
         * 
         * @return builder
         * 
         */
        public Builder certificateAttributeName(@Nullable Output<String> certificateAttributeName) {
            $.certificateAttributeName = certificateAttributeName;
            return this;
        }

        /**
         * @param certificateAttributeName Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.
         *   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
         *   - Default value: `SUBJECT_COMMON_NAME`
         * 
         * @return builder
         * 
         */
        public Builder certificateAttributeName(String certificateAttributeName) {
            return certificateAttributeName(Output.of(certificateAttributeName));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalIdentityStoreName Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
         *   - Default value: `[not applicable]`
         * 
         * @return builder
         * 
         */
        public Builder externalIdentityStoreName(@Nullable Output<String> externalIdentityStoreName) {
            $.externalIdentityStoreName = externalIdentityStoreName;
            return this;
        }

        /**
         * @param externalIdentityStoreName Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
         *   - Default value: `[not applicable]`
         * 
         * @return builder
         * 
         */
        public Builder externalIdentityStoreName(String externalIdentityStoreName) {
            return externalIdentityStoreName(Output.of(externalIdentityStoreName));
        }

        /**
         * @param matchMode Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
         *   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
         *   - Default value: `NEVER`
         * 
         * @return builder
         * 
         */
        public Builder matchMode(@Nullable Output<String> matchMode) {
            $.matchMode = matchMode;
            return this;
        }

        /**
         * @param matchMode Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
         *   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
         *   - Default value: `NEVER`
         * 
         * @return builder
         * 
         */
        public Builder matchMode(String matchMode) {
            return matchMode(Output.of(matchMode));
        }

        /**
         * @param name The name of the certificate profile
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate profile
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param usernameFrom The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
         *   - Choices: `CERTIFICATE`, `UPN`
         *   - Default value: `CERTIFICATE`
         * 
         * @return builder
         * 
         */
        public Builder usernameFrom(@Nullable Output<String> usernameFrom) {
            $.usernameFrom = usernameFrom;
            return this;
        }

        /**
         * @param usernameFrom The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
         *   - Choices: `CERTIFICATE`, `UPN`
         *   - Default value: `CERTIFICATE`
         * 
         * @return builder
         * 
         */
        public Builder usernameFrom(String usernameFrom) {
            return usernameFrom(Output.of(usernameFrom));
        }

        public CertificateAuthenticationProfileArgs build() {
            return $;
        }
    }

}
