// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.system;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.system.inputs.LicenseTierStateLicenseArgs;
import java.util.List;
import java.util.Objects;


public final class LicenseTierStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseTierStateArgs Empty = new LicenseTierStateArgs();

    /**
     * List of licenses
     * 
     */
    @Import(name="licenses", required=true)
    private Output<List<LicenseTierStateLicenseArgs>> licenses;

    /**
     * @return List of licenses
     * 
     */
    public Output<List<LicenseTierStateLicenseArgs>> licenses() {
        return this.licenses;
    }

    private LicenseTierStateArgs() {}

    private LicenseTierStateArgs(LicenseTierStateArgs $) {
        this.licenses = $.licenses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseTierStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseTierStateArgs $;

        public Builder() {
            $ = new LicenseTierStateArgs();
        }

        public Builder(LicenseTierStateArgs defaults) {
            $ = new LicenseTierStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(Output<List<LicenseTierStateLicenseArgs>> licenses) {
            $.licenses = licenses;
            return this;
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(List<LicenseTierStateLicenseArgs> licenses) {
            return licenses(Output.of(licenses));
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(LicenseTierStateLicenseArgs... licenses) {
            return licenses(List.of(licenses));
        }

        public LicenseTierStateArgs build() {
            if ($.licenses == null) {
                throw new MissingRequiredPropertyException("LicenseTierStateArgs", "licenses");
            }
            return $;
        }
    }

}
