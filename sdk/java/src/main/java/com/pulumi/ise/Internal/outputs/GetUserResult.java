// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.Internal.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
     * 
     */
    private String accountNameAlias;
    /**
     * @return Requires the user to change the password
     * 
     */
    private Boolean changePassword;
    /**
     * @return Key value map
     * 
     */
    private String customAttributes;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return Email address
     * 
     */
    private String email;
    /**
     * @return This field is added in ISE 2.0 to support TACACS+
     * 
     */
    private String enablePassword;
    /**
     * @return Whether the user is enabled/disabled
     * 
     */
    private Boolean enabled;
    /**
     * @return First name of the internal user
     * 
     */
    private String firstName;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Comma separated list of identity group IDs.
     * 
     */
    private String identityGroups;
    /**
     * @return Last name of the internal user
     * 
     */
    private String lastName;
    /**
     * @return The name of the internal user
     * 
     */
    private String name;
    /**
     * @return The password of the internal user
     * 
     */
    private String password;
    /**
     * @return The ID store where the internal user&#39;s password is kept
     * 
     */
    private String passwordIdStore;
    /**
     * @return Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
     * 
     */
    private Boolean passwordNeverExpires;

    private GetUserResult() {}
    /**
     * @return The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
     * 
     */
    public String accountNameAlias() {
        return this.accountNameAlias;
    }
    /**
     * @return Requires the user to change the password
     * 
     */
    public Boolean changePassword() {
        return this.changePassword;
    }
    /**
     * @return Key value map
     * 
     */
    public String customAttributes() {
        return this.customAttributes;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Email address
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return This field is added in ISE 2.0 to support TACACS+
     * 
     */
    public String enablePassword() {
        return this.enablePassword;
    }
    /**
     * @return Whether the user is enabled/disabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return First name of the internal user
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Comma separated list of identity group IDs.
     * 
     */
    public String identityGroups() {
        return this.identityGroups;
    }
    /**
     * @return Last name of the internal user
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return The name of the internal user
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The password of the internal user
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The ID store where the internal user&#39;s password is kept
     * 
     */
    public String passwordIdStore() {
        return this.passwordIdStore;
    }
    /**
     * @return Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
     * 
     */
    public Boolean passwordNeverExpires() {
        return this.passwordNeverExpires;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountNameAlias;
        private Boolean changePassword;
        private String customAttributes;
        private String description;
        private String email;
        private String enablePassword;
        private Boolean enabled;
        private String firstName;
        private String id;
        private String identityGroups;
        private String lastName;
        private String name;
        private String password;
        private String passwordIdStore;
        private Boolean passwordNeverExpires;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountNameAlias = defaults.accountNameAlias;
    	      this.changePassword = defaults.changePassword;
    	      this.customAttributes = defaults.customAttributes;
    	      this.description = defaults.description;
    	      this.email = defaults.email;
    	      this.enablePassword = defaults.enablePassword;
    	      this.enabled = defaults.enabled;
    	      this.firstName = defaults.firstName;
    	      this.id = defaults.id;
    	      this.identityGroups = defaults.identityGroups;
    	      this.lastName = defaults.lastName;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.passwordIdStore = defaults.passwordIdStore;
    	      this.passwordNeverExpires = defaults.passwordNeverExpires;
        }

        @CustomType.Setter
        public Builder accountNameAlias(String accountNameAlias) {
            if (accountNameAlias == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "accountNameAlias");
            }
            this.accountNameAlias = accountNameAlias;
            return this;
        }
        @CustomType.Setter
        public Builder changePassword(Boolean changePassword) {
            if (changePassword == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "changePassword");
            }
            this.changePassword = changePassword;
            return this;
        }
        @CustomType.Setter
        public Builder customAttributes(String customAttributes) {
            if (customAttributes == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "customAttributes");
            }
            this.customAttributes = customAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder enablePassword(String enablePassword) {
            if (enablePassword == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "enablePassword");
            }
            this.enablePassword = enablePassword;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityGroups(String identityGroups) {
            if (identityGroups == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "identityGroups");
            }
            this.identityGroups = identityGroups;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordIdStore(String passwordIdStore) {
            if (passwordIdStore == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "passwordIdStore");
            }
            this.passwordIdStore = passwordIdStore;
            return this;
        }
        @CustomType.Setter
        public Builder passwordNeverExpires(Boolean passwordNeverExpires) {
            if (passwordNeverExpires == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "passwordNeverExpires");
            }
            this.passwordNeverExpires = passwordNeverExpires;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.accountNameAlias = accountNameAlias;
            _resultValue.changePassword = changePassword;
            _resultValue.customAttributes = customAttributes;
            _resultValue.description = description;
            _resultValue.email = email;
            _resultValue.enablePassword = enablePassword;
            _resultValue.enabled = enabled;
            _resultValue.firstName = firstName;
            _resultValue.id = id;
            _resultValue.identityGroups = identityGroups;
            _resultValue.lastName = lastName;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.passwordIdStore = passwordIdStore;
            _resultValue.passwordNeverExpires = passwordNeverExpires;
            return _resultValue;
        }
    }
}
