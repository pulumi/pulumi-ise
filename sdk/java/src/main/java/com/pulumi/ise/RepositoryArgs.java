// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Enable PKI
     * 
     */
    @Import(name="enablePki")
    private @Nullable Output<Boolean> enablePki;

    /**
     * @return Enable PKI
     * 
     */
    public Optional<Output<Boolean>> enablePki() {
        return Optional.ofNullable(this.enablePki);
    }

    /**
     * Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password can contain alphanumeric and/or special characters.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password can contain alphanumeric and/or special characters.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Path should always start with &#34;/&#34; and can contain alphanumeric, underscore, hyphen and dot characters.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Path should always start with &#34;/&#34; and can contain alphanumeric, underscore, hyphen and dot characters.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Name of the server
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Name of the server
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.enablePki = $.enablePki;
        this.name = $.name;
        this.password = $.password;
        this.path = $.path;
        this.protocol = $.protocol;
        this.serverName = $.serverName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enablePki Enable PKI
         * 
         * @return builder
         * 
         */
        public Builder enablePki(@Nullable Output<Boolean> enablePki) {
            $.enablePki = enablePki;
            return this;
        }

        /**
         * @param enablePki Enable PKI
         * 
         * @return builder
         * 
         */
        public Builder enablePki(Boolean enablePki) {
            return enablePki(Output.of(enablePki));
        }

        /**
         * @param name Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password can contain alphanumeric and/or special characters.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password can contain alphanumeric and/or special characters.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param path Path should always start with &#34;/&#34; and can contain alphanumeric, underscore, hyphen and dot characters.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path should always start with &#34;/&#34; and can contain alphanumeric, underscore, hyphen and dot characters.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param protocol Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param serverName Name of the server
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Name of the server
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public RepositoryArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("RepositoryArgs", "path");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("RepositoryArgs", "protocol");
            }
            return $;
        }
    }

}
