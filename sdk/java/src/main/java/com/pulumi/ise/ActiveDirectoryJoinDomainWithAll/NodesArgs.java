// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.ActiveDirectoryJoinDomainWithAll;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.ActiveDirectoryJoinDomainWithAll.inputs.NodesAdditionalDataArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class NodesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodesArgs Empty = new NodesArgs();

    @Import(name="additionalDatas", required=true)
    private Output<List<NodesAdditionalDataArgs>> additionalDatas;

    public Output<List<NodesAdditionalDataArgs>> additionalDatas() {
        return this.additionalDatas;
    }

    /**
     * Active Directory Join Point ID
     * 
     */
    @Import(name="joinPointId", required=true)
    private Output<String> joinPointId;

    /**
     * @return Active Directory Join Point ID
     * 
     */
    public Output<String> joinPointId() {
        return this.joinPointId;
    }

    private NodesArgs() {}

    private NodesArgs(NodesArgs $) {
        this.additionalDatas = $.additionalDatas;
        this.joinPointId = $.joinPointId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodesArgs $;

        public Builder() {
            $ = new NodesArgs();
        }

        public Builder(NodesArgs defaults) {
            $ = new NodesArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalDatas(Output<List<NodesAdditionalDataArgs>> additionalDatas) {
            $.additionalDatas = additionalDatas;
            return this;
        }

        public Builder additionalDatas(List<NodesAdditionalDataArgs> additionalDatas) {
            return additionalDatas(Output.of(additionalDatas));
        }

        public Builder additionalDatas(NodesAdditionalDataArgs... additionalDatas) {
            return additionalDatas(List.of(additionalDatas));
        }

        /**
         * @param joinPointId Active Directory Join Point ID
         * 
         * @return builder
         * 
         */
        public Builder joinPointId(Output<String> joinPointId) {
            $.joinPointId = joinPointId;
            return this;
        }

        /**
         * @param joinPointId Active Directory Join Point ID
         * 
         * @return builder
         * 
         */
        public Builder joinPointId(String joinPointId) {
            return joinPointId(Output.of(joinPointId));
        }

        public NodesArgs build() {
            if ($.additionalDatas == null) {
                throw new MissingRequiredPropertyException("NodesArgs", "additionalDatas");
            }
            if ($.joinPointId == null) {
                throw new MissingRequiredPropertyException("NodesArgs", "joinPointId");
            }
            return $;
        }
    }

}
