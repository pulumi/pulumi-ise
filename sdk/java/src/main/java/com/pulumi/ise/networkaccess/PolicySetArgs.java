// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.networkaccess;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.networkaccess.inputs.PolicySetChildrenArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicySetArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicySetArgs Empty = new PolicySetArgs();

    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     * 
     */
    @Import(name="childrens")
    private @Nullable Output<List<PolicySetChildrenArgs>> childrens;

    /**
     * @return List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     * 
     */
    public Optional<Output<List<PolicySetChildrenArgs>>> childrens() {
        return Optional.ofNullable(this.childrens);
    }

    /**
     * Dictionary attribute name
     * 
     */
    @Import(name="conditionAttributeName")
    private @Nullable Output<String> conditionAttributeName;

    /**
     * @return Dictionary attribute name
     * 
     */
    public Optional<Output<String>> conditionAttributeName() {
        return Optional.ofNullable(this.conditionAttributeName);
    }

    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     * 
     */
    @Import(name="conditionAttributeValue")
    private @Nullable Output<String> conditionAttributeValue;

    /**
     * @return Attribute value for condition. Value type is specified in dictionary object.
     * 
     */
    public Optional<Output<String>> conditionAttributeValue() {
        return Optional.ofNullable(this.conditionAttributeValue);
    }

    /**
     * Dictionary name
     * 
     */
    @Import(name="conditionDictionaryName")
    private @Nullable Output<String> conditionDictionaryName;

    /**
     * @return Dictionary name
     * 
     */
    public Optional<Output<String>> conditionDictionaryName() {
        return Optional.ofNullable(this.conditionDictionaryName);
    }

    /**
     * Dictionary value
     * 
     */
    @Import(name="conditionDictionaryValue")
    private @Nullable Output<String> conditionDictionaryValue;

    /**
     * @return Dictionary value
     * 
     */
    public Optional<Output<String>> conditionDictionaryValue() {
        return Optional.ofNullable(this.conditionDictionaryValue);
    }

    /**
     * UUID for condition
     * 
     */
    @Import(name="conditionId")
    private @Nullable Output<String> conditionId;

    /**
     * @return UUID for condition
     * 
     */
    public Optional<Output<String>> conditionId() {
        return Optional.ofNullable(this.conditionId);
    }

    /**
     * Indicates whereas this condition is in negate mode
     * 
     */
    @Import(name="conditionIsNegate")
    private @Nullable Output<Boolean> conditionIsNegate;

    /**
     * @return Indicates whereas this condition is in negate mode
     * 
     */
    public Optional<Output<Boolean>> conditionIsNegate() {
        return Optional.ofNullable(this.conditionIsNegate);
    }

    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     * 
     */
    @Import(name="conditionOperator")
    private @Nullable Output<String> conditionOperator;

    /**
     * @return Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     * 
     */
    public Optional<Output<String>> conditionOperator() {
        return Optional.ofNullable(this.conditionOperator);
    }

    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     * 
     */
    @Import(name="conditionType")
    private @Nullable Output<String> conditionType;

    /**
     * @return Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     * 
     */
    public Optional<Output<String>> conditionType() {
        return Optional.ofNullable(this.conditionType);
    }

    /**
     * Indicates if this policy set is the default one
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Indicates if this policy set is the default one
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * The description of the policy set
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the policy set
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Flag which indicates if the policy set service is of type &#39;Proxy Sequence&#39; or &#39;Allowed Protocols&#39;
     * 
     */
    @Import(name="isProxy")
    private @Nullable Output<Boolean> isProxy;

    /**
     * @return Flag which indicates if the policy set service is of type &#39;Proxy Sequence&#39; or &#39;Allowed Protocols&#39;
     * 
     */
    public Optional<Output<Boolean>> isProxy() {
        return Optional.ofNullable(this.isProxy);
    }

    /**
     * Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The rank (priority) in relation to other policy sets. Lower rank is higher priority.
     * 
     */
    @Import(name="rank")
    private @Nullable Output<Integer> rank;

    /**
     * @return The rank (priority) in relation to other policy sets. Lower rank is higher priority.
     * 
     */
    public Optional<Output<Integer>> rank() {
        return Optional.ofNullable(this.rank);
    }

    /**
     * Policy set service identifier. &#39;Allowed Protocols&#39; or &#39;Server Sequence&#39;.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Policy set service identifier. &#39;Allowed Protocols&#39; or &#39;Server Sequence&#39;.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The state that the policy set is in. A disabled policy set cannot be matched.
     *   - Choices: `disabled`, `enabled`, `monitor`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state that the policy set is in. A disabled policy set cannot be matched.
     *   - Choices: `disabled`, `enabled`, `monitor`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private PolicySetArgs() {}

    private PolicySetArgs(PolicySetArgs $) {
        this.childrens = $.childrens;
        this.conditionAttributeName = $.conditionAttributeName;
        this.conditionAttributeValue = $.conditionAttributeValue;
        this.conditionDictionaryName = $.conditionDictionaryName;
        this.conditionDictionaryValue = $.conditionDictionaryValue;
        this.conditionId = $.conditionId;
        this.conditionIsNegate = $.conditionIsNegate;
        this.conditionOperator = $.conditionOperator;
        this.conditionType = $.conditionType;
        this.default_ = $.default_;
        this.description = $.description;
        this.isProxy = $.isProxy;
        this.name = $.name;
        this.rank = $.rank;
        this.serviceName = $.serviceName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicySetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicySetArgs $;

        public Builder() {
            $ = new PolicySetArgs();
        }

        public Builder(PolicySetArgs defaults) {
            $ = new PolicySetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childrens List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         * 
         * @return builder
         * 
         */
        public Builder childrens(@Nullable Output<List<PolicySetChildrenArgs>> childrens) {
            $.childrens = childrens;
            return this;
        }

        /**
         * @param childrens List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         * 
         * @return builder
         * 
         */
        public Builder childrens(List<PolicySetChildrenArgs> childrens) {
            return childrens(Output.of(childrens));
        }

        /**
         * @param childrens List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
         * 
         * @return builder
         * 
         */
        public Builder childrens(PolicySetChildrenArgs... childrens) {
            return childrens(List.of(childrens));
        }

        /**
         * @param conditionAttributeName Dictionary attribute name
         * 
         * @return builder
         * 
         */
        public Builder conditionAttributeName(@Nullable Output<String> conditionAttributeName) {
            $.conditionAttributeName = conditionAttributeName;
            return this;
        }

        /**
         * @param conditionAttributeName Dictionary attribute name
         * 
         * @return builder
         * 
         */
        public Builder conditionAttributeName(String conditionAttributeName) {
            return conditionAttributeName(Output.of(conditionAttributeName));
        }

        /**
         * @param conditionAttributeValue Attribute value for condition. Value type is specified in dictionary object.
         * 
         * @return builder
         * 
         */
        public Builder conditionAttributeValue(@Nullable Output<String> conditionAttributeValue) {
            $.conditionAttributeValue = conditionAttributeValue;
            return this;
        }

        /**
         * @param conditionAttributeValue Attribute value for condition. Value type is specified in dictionary object.
         * 
         * @return builder
         * 
         */
        public Builder conditionAttributeValue(String conditionAttributeValue) {
            return conditionAttributeValue(Output.of(conditionAttributeValue));
        }

        /**
         * @param conditionDictionaryName Dictionary name
         * 
         * @return builder
         * 
         */
        public Builder conditionDictionaryName(@Nullable Output<String> conditionDictionaryName) {
            $.conditionDictionaryName = conditionDictionaryName;
            return this;
        }

        /**
         * @param conditionDictionaryName Dictionary name
         * 
         * @return builder
         * 
         */
        public Builder conditionDictionaryName(String conditionDictionaryName) {
            return conditionDictionaryName(Output.of(conditionDictionaryName));
        }

        /**
         * @param conditionDictionaryValue Dictionary value
         * 
         * @return builder
         * 
         */
        public Builder conditionDictionaryValue(@Nullable Output<String> conditionDictionaryValue) {
            $.conditionDictionaryValue = conditionDictionaryValue;
            return this;
        }

        /**
         * @param conditionDictionaryValue Dictionary value
         * 
         * @return builder
         * 
         */
        public Builder conditionDictionaryValue(String conditionDictionaryValue) {
            return conditionDictionaryValue(Output.of(conditionDictionaryValue));
        }

        /**
         * @param conditionId UUID for condition
         * 
         * @return builder
         * 
         */
        public Builder conditionId(@Nullable Output<String> conditionId) {
            $.conditionId = conditionId;
            return this;
        }

        /**
         * @param conditionId UUID for condition
         * 
         * @return builder
         * 
         */
        public Builder conditionId(String conditionId) {
            return conditionId(Output.of(conditionId));
        }

        /**
         * @param conditionIsNegate Indicates whereas this condition is in negate mode
         * 
         * @return builder
         * 
         */
        public Builder conditionIsNegate(@Nullable Output<Boolean> conditionIsNegate) {
            $.conditionIsNegate = conditionIsNegate;
            return this;
        }

        /**
         * @param conditionIsNegate Indicates whereas this condition is in negate mode
         * 
         * @return builder
         * 
         */
        public Builder conditionIsNegate(Boolean conditionIsNegate) {
            return conditionIsNegate(Output.of(conditionIsNegate));
        }

        /**
         * @param conditionOperator Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         * 
         * @return builder
         * 
         */
        public Builder conditionOperator(@Nullable Output<String> conditionOperator) {
            $.conditionOperator = conditionOperator;
            return this;
        }

        /**
         * @param conditionOperator Equality operator
         *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
         * 
         * @return builder
         * 
         */
        public Builder conditionOperator(String conditionOperator) {
            return conditionOperator(Output.of(conditionOperator));
        }

        /**
         * @param conditionType Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         * 
         * @return builder
         * 
         */
        public Builder conditionType(@Nullable Output<String> conditionType) {
            $.conditionType = conditionType;
            return this;
        }

        /**
         * @param conditionType Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
         *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
         * 
         * @return builder
         * 
         */
        public Builder conditionType(String conditionType) {
            return conditionType(Output.of(conditionType));
        }

        /**
         * @param default_ Indicates if this policy set is the default one
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Indicates if this policy set is the default one
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description The description of the policy set
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy set
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isProxy Flag which indicates if the policy set service is of type &#39;Proxy Sequence&#39; or &#39;Allowed Protocols&#39;
         * 
         * @return builder
         * 
         */
        public Builder isProxy(@Nullable Output<Boolean> isProxy) {
            $.isProxy = isProxy;
            return this;
        }

        /**
         * @param isProxy Flag which indicates if the policy set service is of type &#39;Proxy Sequence&#39; or &#39;Allowed Protocols&#39;
         * 
         * @return builder
         * 
         */
        public Builder isProxy(Boolean isProxy) {
            return isProxy(Output.of(isProxy));
        }

        /**
         * @param name Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rank The rank (priority) in relation to other policy sets. Lower rank is higher priority.
         * 
         * @return builder
         * 
         */
        public Builder rank(@Nullable Output<Integer> rank) {
            $.rank = rank;
            return this;
        }

        /**
         * @param rank The rank (priority) in relation to other policy sets. Lower rank is higher priority.
         * 
         * @return builder
         * 
         */
        public Builder rank(Integer rank) {
            return rank(Output.of(rank));
        }

        /**
         * @param serviceName Policy set service identifier. &#39;Allowed Protocols&#39; or &#39;Server Sequence&#39;.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Policy set service identifier. &#39;Allowed Protocols&#39; or &#39;Server Sequence&#39;.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param state The state that the policy set is in. A disabled policy set cannot be matched.
         *   - Choices: `disabled`, `enabled`, `monitor`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state that the policy set is in. A disabled policy set cannot be matched.
         *   - Choices: `disabled`, `enabled`, `monitor`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public PolicySetArgs build() {
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("PolicySetArgs", "serviceName");
            }
            return $;
        }
    }

}
