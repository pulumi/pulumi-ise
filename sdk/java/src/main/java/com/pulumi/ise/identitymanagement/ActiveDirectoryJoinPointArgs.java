// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.identitymanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.identitymanagement.inputs.ActiveDirectoryJoinPointAttributeArgs;
import com.pulumi.ise.identitymanagement.inputs.ActiveDirectoryJoinPointGroupArgs;
import com.pulumi.ise.identitymanagement.inputs.ActiveDirectoryJoinPointRewriteRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActiveDirectoryJoinPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryJoinPointArgs Empty = new ActiveDirectoryJoinPointArgs();

    /**
     * String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
     *   - Default value: `Default_Scope`
     * 
     */
    @Import(name="adScopesNames")
    private @Nullable Output<String> adScopesNames;

    /**
     * @return String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
     *   - Default value: `Default_Scope`
     * 
     */
    public Optional<Output<String>> adScopesNames() {
        return Optional.ofNullable(this.adScopesNames);
    }

    /**
     * Aging Time
     *   - Default value: `5`
     * 
     */
    @Import(name="agingTime")
    private @Nullable Output<Integer> agingTime;

    /**
     * @return Aging Time
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> agingTime() {
        return Optional.ofNullable(this.agingTime);
    }

    /**
     * List of AD attributes
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<ActiveDirectoryJoinPointAttributeArgs>> attributes;

    /**
     * @return List of AD attributes
     * 
     */
    public Optional<Output<List<ActiveDirectoryJoinPointAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
     *   - Choices: `WIRELESS`, `WIRED`, `BOTH`
     * 
     */
    @Import(name="authProtectionType")
    private @Nullable Output<String> authProtectionType;

    /**
     * @return Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
     *   - Choices: `WIRELESS`, `WIRED`, `BOTH`
     * 
     */
    public Optional<Output<String>> authProtectionType() {
        return Optional.ofNullable(this.authProtectionType);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="department")
    private @Nullable Output<String> department;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * Join point description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Join point description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * AD domain associated with the join point
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return AD domain associated with the join point
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Enable Callback For Dial In Client
     *   - Default value: `false`
     * 
     */
    @Import(name="enableCallbackForDialinClient")
    private @Nullable Output<Boolean> enableCallbackForDialinClient;

    /**
     * @return Enable Callback For Dial In Client
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableCallbackForDialinClient() {
        return Optional.ofNullable(this.enableCallbackForDialinClient);
    }

    /**
     * Enable Dial In Permission Check
     *   - Default value: `false`
     * 
     */
    @Import(name="enableDialinPermissionCheck")
    private @Nullable Output<Boolean> enableDialinPermissionCheck;

    /**
     * @return Enable Dial In Permission Check
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableDialinPermissionCheck() {
        return Optional.ofNullable(this.enableDialinPermissionCheck);
    }

    /**
     * - Default value: `true`
     * 
     */
    @Import(name="enableDomainAllowedList")
    private @Nullable Output<Boolean> enableDomainAllowedList;

    /**
     * @return - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> enableDomainAllowedList() {
        return Optional.ofNullable(this.enableDomainAllowedList);
    }

    /**
     * Enable prevent AD account lockout due to too many bad password attempts
     *   - Default value: `false`
     * 
     */
    @Import(name="enableFailedAuthProtection")
    private @Nullable Output<Boolean> enableFailedAuthProtection;

    /**
     * @return Enable prevent AD account lockout due to too many bad password attempts
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableFailedAuthProtection() {
        return Optional.ofNullable(this.enableFailedAuthProtection);
    }

    /**
     * Enable Machine Access
     *   - Default value: `true`
     * 
     */
    @Import(name="enableMachineAccess")
    private @Nullable Output<Boolean> enableMachineAccess;

    /**
     * @return Enable Machine Access
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> enableMachineAccess() {
        return Optional.ofNullable(this.enableMachineAccess);
    }

    /**
     * Enable Machine Authentication
     *   - Default value: `true`
     * 
     */
    @Import(name="enableMachineAuth")
    private @Nullable Output<Boolean> enableMachineAuth;

    /**
     * @return Enable Machine Authentication
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> enableMachineAuth() {
        return Optional.ofNullable(this.enableMachineAuth);
    }

    /**
     * Enable Password Change
     *   - Default value: `true`
     * 
     */
    @Import(name="enablePassChange")
    private @Nullable Output<Boolean> enablePassChange;

    /**
     * @return Enable Password Change
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> enablePassChange() {
        return Optional.ofNullable(this.enablePassChange);
    }

    /**
     * Enable Rewrites
     *   - Default value: `false`
     * 
     */
    @Import(name="enableRewrites")
    private @Nullable Output<Boolean> enableRewrites;

    /**
     * @return Enable Rewrites
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableRewrites() {
        return Optional.ofNullable(this.enableRewrites);
    }

    /**
     * Number of bad password attempts
     *   - Default value: `5`
     * 
     */
    @Import(name="failedAuthThreshold")
    private @Nullable Output<Integer> failedAuthThreshold;

    /**
     * @return Number of bad password attempts
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> failedAuthThreshold() {
        return Optional.ofNullable(this.failedAuthThreshold);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * List of AD Groups
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<ActiveDirectoryJoinPointGroupArgs>> groups;

    /**
     * @return List of AD Groups
     * 
     */
    public Optional<Output<List<ActiveDirectoryJoinPointGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Identity Not In AD Behaviour
     *   - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`
     * 
     */
    @Import(name="identityNotInAdBehaviour")
    private @Nullable Output<String> identityNotInAdBehaviour;

    /**
     * @return Identity Not In AD Behaviour
     *   - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`
     * 
     */
    public Optional<Output<String>> identityNotInAdBehaviour() {
        return Optional.ofNullable(this.identityNotInAdBehaviour);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="locality")
    private @Nullable Output<String> locality;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> locality() {
        return Optional.ofNullable(this.locality);
    }

    /**
     * The name of the active directory join point
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the active directory join point
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * Plain Text Authentication
     *   - Default value: `false`
     * 
     */
    @Import(name="plaintextAuth")
    private @Nullable Output<Boolean> plaintextAuth;

    /**
     * @return Plain Text Authentication
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> plaintextAuth() {
        return Optional.ofNullable(this.plaintextAuth);
    }

    /**
     * List of Rewrite rules
     * 
     */
    @Import(name="rewriteRules")
    private @Nullable Output<List<ActiveDirectoryJoinPointRewriteRuleArgs>> rewriteRules;

    /**
     * @return List of Rewrite rules
     * 
     */
    public Optional<Output<List<ActiveDirectoryJoinPointRewriteRuleArgs>>> rewriteRules() {
        return Optional.ofNullable(this.rewriteRules);
    }

    /**
     * Schema
     *   - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return Schema
     *   - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="stateOrProvince")
    private @Nullable Output<String> stateOrProvince;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="streetAddress")
    private @Nullable Output<String> streetAddress;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> streetAddress() {
        return Optional.ofNullable(this.streetAddress);
    }

    /**
     * User info attribute
     * 
     */
    @Import(name="telephone")
    private @Nullable Output<String> telephone;

    /**
     * @return User info attribute
     * 
     */
    public Optional<Output<String>> telephone() {
        return Optional.ofNullable(this.telephone);
    }

    /**
     * Unreachable Domains Behaviour
     *   - Choices: `PROCEED`, `DROP`
     * 
     */
    @Import(name="unreachableDomainsBehaviour")
    private @Nullable Output<String> unreachableDomainsBehaviour;

    /**
     * @return Unreachable Domains Behaviour
     *   - Choices: `PROCEED`, `DROP`
     * 
     */
    public Optional<Output<String>> unreachableDomainsBehaviour() {
        return Optional.ofNullable(this.unreachableDomainsBehaviour);
    }

    private ActiveDirectoryJoinPointArgs() {}

    private ActiveDirectoryJoinPointArgs(ActiveDirectoryJoinPointArgs $) {
        this.adScopesNames = $.adScopesNames;
        this.agingTime = $.agingTime;
        this.attributes = $.attributes;
        this.authProtectionType = $.authProtectionType;
        this.country = $.country;
        this.department = $.department;
        this.description = $.description;
        this.domain = $.domain;
        this.email = $.email;
        this.enableCallbackForDialinClient = $.enableCallbackForDialinClient;
        this.enableDialinPermissionCheck = $.enableDialinPermissionCheck;
        this.enableDomainAllowedList = $.enableDomainAllowedList;
        this.enableFailedAuthProtection = $.enableFailedAuthProtection;
        this.enableMachineAccess = $.enableMachineAccess;
        this.enableMachineAuth = $.enableMachineAuth;
        this.enablePassChange = $.enablePassChange;
        this.enableRewrites = $.enableRewrites;
        this.failedAuthThreshold = $.failedAuthThreshold;
        this.firstName = $.firstName;
        this.groups = $.groups;
        this.identityNotInAdBehaviour = $.identityNotInAdBehaviour;
        this.jobTitle = $.jobTitle;
        this.lastName = $.lastName;
        this.locality = $.locality;
        this.name = $.name;
        this.organizationalUnit = $.organizationalUnit;
        this.plaintextAuth = $.plaintextAuth;
        this.rewriteRules = $.rewriteRules;
        this.schema = $.schema;
        this.stateOrProvince = $.stateOrProvince;
        this.streetAddress = $.streetAddress;
        this.telephone = $.telephone;
        this.unreachableDomainsBehaviour = $.unreachableDomainsBehaviour;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryJoinPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryJoinPointArgs $;

        public Builder() {
            $ = new ActiveDirectoryJoinPointArgs();
        }

        public Builder(ActiveDirectoryJoinPointArgs defaults) {
            $ = new ActiveDirectoryJoinPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adScopesNames String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
         *   - Default value: `Default_Scope`
         * 
         * @return builder
         * 
         */
        public Builder adScopesNames(@Nullable Output<String> adScopesNames) {
            $.adScopesNames = adScopesNames;
            return this;
        }

        /**
         * @param adScopesNames String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
         *   - Default value: `Default_Scope`
         * 
         * @return builder
         * 
         */
        public Builder adScopesNames(String adScopesNames) {
            return adScopesNames(Output.of(adScopesNames));
        }

        /**
         * @param agingTime Aging Time
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder agingTime(@Nullable Output<Integer> agingTime) {
            $.agingTime = agingTime;
            return this;
        }

        /**
         * @param agingTime Aging Time
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder agingTime(Integer agingTime) {
            return agingTime(Output.of(agingTime));
        }

        /**
         * @param attributes List of AD attributes
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<ActiveDirectoryJoinPointAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes List of AD attributes
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<ActiveDirectoryJoinPointAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes List of AD attributes
         * 
         * @return builder
         * 
         */
        public Builder attributes(ActiveDirectoryJoinPointAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param authProtectionType Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
         *   - Choices: `WIRELESS`, `WIRED`, `BOTH`
         * 
         * @return builder
         * 
         */
        public Builder authProtectionType(@Nullable Output<String> authProtectionType) {
            $.authProtectionType = authProtectionType;
            return this;
        }

        /**
         * @param authProtectionType Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
         *   - Choices: `WIRELESS`, `WIRED`, `BOTH`
         * 
         * @return builder
         * 
         */
        public Builder authProtectionType(String authProtectionType) {
            return authProtectionType(Output.of(authProtectionType));
        }

        /**
         * @param country User info attribute
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country User info attribute
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param department User info attribute
         * 
         * @return builder
         * 
         */
        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        /**
         * @param department User info attribute
         * 
         * @return builder
         * 
         */
        public Builder department(String department) {
            return department(Output.of(department));
        }

        /**
         * @param description Join point description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Join point description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain AD domain associated with the join point
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain AD domain associated with the join point
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param email User info attribute
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email User info attribute
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param enableCallbackForDialinClient Enable Callback For Dial In Client
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCallbackForDialinClient(@Nullable Output<Boolean> enableCallbackForDialinClient) {
            $.enableCallbackForDialinClient = enableCallbackForDialinClient;
            return this;
        }

        /**
         * @param enableCallbackForDialinClient Enable Callback For Dial In Client
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCallbackForDialinClient(Boolean enableCallbackForDialinClient) {
            return enableCallbackForDialinClient(Output.of(enableCallbackForDialinClient));
        }

        /**
         * @param enableDialinPermissionCheck Enable Dial In Permission Check
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableDialinPermissionCheck(@Nullable Output<Boolean> enableDialinPermissionCheck) {
            $.enableDialinPermissionCheck = enableDialinPermissionCheck;
            return this;
        }

        /**
         * @param enableDialinPermissionCheck Enable Dial In Permission Check
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableDialinPermissionCheck(Boolean enableDialinPermissionCheck) {
            return enableDialinPermissionCheck(Output.of(enableDialinPermissionCheck));
        }

        /**
         * @param enableDomainAllowedList - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableDomainAllowedList(@Nullable Output<Boolean> enableDomainAllowedList) {
            $.enableDomainAllowedList = enableDomainAllowedList;
            return this;
        }

        /**
         * @param enableDomainAllowedList - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableDomainAllowedList(Boolean enableDomainAllowedList) {
            return enableDomainAllowedList(Output.of(enableDomainAllowedList));
        }

        /**
         * @param enableFailedAuthProtection Enable prevent AD account lockout due to too many bad password attempts
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableFailedAuthProtection(@Nullable Output<Boolean> enableFailedAuthProtection) {
            $.enableFailedAuthProtection = enableFailedAuthProtection;
            return this;
        }

        /**
         * @param enableFailedAuthProtection Enable prevent AD account lockout due to too many bad password attempts
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableFailedAuthProtection(Boolean enableFailedAuthProtection) {
            return enableFailedAuthProtection(Output.of(enableFailedAuthProtection));
        }

        /**
         * @param enableMachineAccess Enable Machine Access
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableMachineAccess(@Nullable Output<Boolean> enableMachineAccess) {
            $.enableMachineAccess = enableMachineAccess;
            return this;
        }

        /**
         * @param enableMachineAccess Enable Machine Access
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableMachineAccess(Boolean enableMachineAccess) {
            return enableMachineAccess(Output.of(enableMachineAccess));
        }

        /**
         * @param enableMachineAuth Enable Machine Authentication
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableMachineAuth(@Nullable Output<Boolean> enableMachineAuth) {
            $.enableMachineAuth = enableMachineAuth;
            return this;
        }

        /**
         * @param enableMachineAuth Enable Machine Authentication
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableMachineAuth(Boolean enableMachineAuth) {
            return enableMachineAuth(Output.of(enableMachineAuth));
        }

        /**
         * @param enablePassChange Enable Password Change
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enablePassChange(@Nullable Output<Boolean> enablePassChange) {
            $.enablePassChange = enablePassChange;
            return this;
        }

        /**
         * @param enablePassChange Enable Password Change
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enablePassChange(Boolean enablePassChange) {
            return enablePassChange(Output.of(enablePassChange));
        }

        /**
         * @param enableRewrites Enable Rewrites
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableRewrites(@Nullable Output<Boolean> enableRewrites) {
            $.enableRewrites = enableRewrites;
            return this;
        }

        /**
         * @param enableRewrites Enable Rewrites
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableRewrites(Boolean enableRewrites) {
            return enableRewrites(Output.of(enableRewrites));
        }

        /**
         * @param failedAuthThreshold Number of bad password attempts
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder failedAuthThreshold(@Nullable Output<Integer> failedAuthThreshold) {
            $.failedAuthThreshold = failedAuthThreshold;
            return this;
        }

        /**
         * @param failedAuthThreshold Number of bad password attempts
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder failedAuthThreshold(Integer failedAuthThreshold) {
            return failedAuthThreshold(Output.of(failedAuthThreshold));
        }

        /**
         * @param firstName User info attribute
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User info attribute
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<ActiveDirectoryJoinPointGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(List<ActiveDirectoryJoinPointGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(ActiveDirectoryJoinPointGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param identityNotInAdBehaviour Identity Not In AD Behaviour
         *   - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`
         * 
         * @return builder
         * 
         */
        public Builder identityNotInAdBehaviour(@Nullable Output<String> identityNotInAdBehaviour) {
            $.identityNotInAdBehaviour = identityNotInAdBehaviour;
            return this;
        }

        /**
         * @param identityNotInAdBehaviour Identity Not In AD Behaviour
         *   - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`
         * 
         * @return builder
         * 
         */
        public Builder identityNotInAdBehaviour(String identityNotInAdBehaviour) {
            return identityNotInAdBehaviour(Output.of(identityNotInAdBehaviour));
        }

        /**
         * @param jobTitle User info attribute
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        /**
         * @param jobTitle User info attribute
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        /**
         * @param lastName User info attribute
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User info attribute
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param locality User info attribute
         * 
         * @return builder
         * 
         */
        public Builder locality(@Nullable Output<String> locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param locality User info attribute
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            return locality(Output.of(locality));
        }

        /**
         * @param name The name of the active directory join point
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the active directory join point
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationalUnit User info attribute
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param organizationalUnit User info attribute
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        /**
         * @param plaintextAuth Plain Text Authentication
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder plaintextAuth(@Nullable Output<Boolean> plaintextAuth) {
            $.plaintextAuth = plaintextAuth;
            return this;
        }

        /**
         * @param plaintextAuth Plain Text Authentication
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder plaintextAuth(Boolean plaintextAuth) {
            return plaintextAuth(Output.of(plaintextAuth));
        }

        /**
         * @param rewriteRules List of Rewrite rules
         * 
         * @return builder
         * 
         */
        public Builder rewriteRules(@Nullable Output<List<ActiveDirectoryJoinPointRewriteRuleArgs>> rewriteRules) {
            $.rewriteRules = rewriteRules;
            return this;
        }

        /**
         * @param rewriteRules List of Rewrite rules
         * 
         * @return builder
         * 
         */
        public Builder rewriteRules(List<ActiveDirectoryJoinPointRewriteRuleArgs> rewriteRules) {
            return rewriteRules(Output.of(rewriteRules));
        }

        /**
         * @param rewriteRules List of Rewrite rules
         * 
         * @return builder
         * 
         */
        public Builder rewriteRules(ActiveDirectoryJoinPointRewriteRuleArgs... rewriteRules) {
            return rewriteRules(List.of(rewriteRules));
        }

        /**
         * @param schema Schema
         *   - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema Schema
         *   - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param stateOrProvince User info attribute
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(@Nullable Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        /**
         * @param stateOrProvince User info attribute
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        /**
         * @param streetAddress User info attribute
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(@Nullable Output<String> streetAddress) {
            $.streetAddress = streetAddress;
            return this;
        }

        /**
         * @param streetAddress User info attribute
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(String streetAddress) {
            return streetAddress(Output.of(streetAddress));
        }

        /**
         * @param telephone User info attribute
         * 
         * @return builder
         * 
         */
        public Builder telephone(@Nullable Output<String> telephone) {
            $.telephone = telephone;
            return this;
        }

        /**
         * @param telephone User info attribute
         * 
         * @return builder
         * 
         */
        public Builder telephone(String telephone) {
            return telephone(Output.of(telephone));
        }

        /**
         * @param unreachableDomainsBehaviour Unreachable Domains Behaviour
         *   - Choices: `PROCEED`, `DROP`
         * 
         * @return builder
         * 
         */
        public Builder unreachableDomainsBehaviour(@Nullable Output<String> unreachableDomainsBehaviour) {
            $.unreachableDomainsBehaviour = unreachableDomainsBehaviour;
            return this;
        }

        /**
         * @param unreachableDomainsBehaviour Unreachable Domains Behaviour
         *   - Choices: `PROCEED`, `DROP`
         * 
         * @return builder
         * 
         */
        public Builder unreachableDomainsBehaviour(String unreachableDomainsBehaviour) {
            return unreachableDomainsBehaviour(Output.of(unreachableDomainsBehaviour));
        }

        public ActiveDirectoryJoinPointArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryJoinPointArgs", "domain");
            }
            return $;
        }
    }

}
