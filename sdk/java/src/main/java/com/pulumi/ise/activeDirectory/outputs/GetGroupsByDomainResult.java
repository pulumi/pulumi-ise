// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.activeDirectory.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.activeDirectory.outputs.GetGroupsByDomainGroup;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGroupsByDomainResult {
    /**
     * @return The domain whose groups we want to fetch
     * 
     */
    private String domain;
    /**
     * @return Exact match filter on group&#39;s CN
     * 
     */
    private @Nullable String filter;
    /**
     * @return List of groups
     * 
     */
    private List<GetGroupsByDomainGroup> groups;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Active Directory Join Point ID
     * 
     */
    private String joinPointId;
    /**
     * @return Exact match filter on group&#39;s SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
     * 
     */
    private @Nullable String sidFilter;
    /**
     * @return Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
     * 
     */
    private @Nullable String typeFilter;

    private GetGroupsByDomainResult() {}
    /**
     * @return The domain whose groups we want to fetch
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Exact match filter on group&#39;s CN
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return List of groups
     * 
     */
    public List<GetGroupsByDomainGroup> groups() {
        return this.groups;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Active Directory Join Point ID
     * 
     */
    public String joinPointId() {
        return this.joinPointId;
    }
    /**
     * @return Exact match filter on group&#39;s SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
     * 
     */
    public Optional<String> sidFilter() {
        return Optional.ofNullable(this.sidFilter);
    }
    /**
     * @return Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
     * 
     */
    public Optional<String> typeFilter() {
        return Optional.ofNullable(this.typeFilter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupsByDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private @Nullable String filter;
        private List<GetGroupsByDomainGroup> groups;
        private String id;
        private String joinPointId;
        private @Nullable String sidFilter;
        private @Nullable String typeFilter;
        public Builder() {}
        public Builder(GetGroupsByDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.filter = defaults.filter;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.joinPointId = defaults.joinPointId;
    	      this.sidFilter = defaults.sidFilter;
    	      this.typeFilter = defaults.typeFilter;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetGroupsByDomainResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GetGroupsByDomainGroup> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetGroupsByDomainResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(GetGroupsByDomainGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupsByDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder joinPointId(String joinPointId) {
            if (joinPointId == null) {
              throw new MissingRequiredPropertyException("GetGroupsByDomainResult", "joinPointId");
            }
            this.joinPointId = joinPointId;
            return this;
        }
        @CustomType.Setter
        public Builder sidFilter(@Nullable String sidFilter) {

            this.sidFilter = sidFilter;
            return this;
        }
        @CustomType.Setter
        public Builder typeFilter(@Nullable String typeFilter) {

            this.typeFilter = typeFilter;
            return this;
        }
        public GetGroupsByDomainResult build() {
            final var _resultValue = new GetGroupsByDomainResult();
            _resultValue.domain = domain;
            _resultValue.filter = filter;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.joinPointId = joinPointId;
            _resultValue.sidFilter = sidFilter;
            _resultValue.typeFilter = typeFilter;
            return _resultValue;
        }
    }
}
