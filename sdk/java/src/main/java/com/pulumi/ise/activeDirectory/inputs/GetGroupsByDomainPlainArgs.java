// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.activeDirectory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupsByDomainPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupsByDomainPlainArgs Empty = new GetGroupsByDomainPlainArgs();

    /**
     * The domain whose groups we want to fetch
     * 
     */
    @Import(name="domain", required=true)
    private String domain;

    /**
     * @return The domain whose groups we want to fetch
     * 
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Exact match filter on group&#39;s CN
     * 
     */
    @Import(name="filter")
    private @Nullable String filter;

    /**
     * @return Exact match filter on group&#39;s CN
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Active Directory Join Point ID
     * 
     */
    @Import(name="joinPointId", required=true)
    private String joinPointId;

    /**
     * @return Active Directory Join Point ID
     * 
     */
    public String joinPointId() {
        return this.joinPointId;
    }

    /**
     * Exact match filter on group&#39;s SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
     * 
     */
    @Import(name="sidFilter")
    private @Nullable String sidFilter;

    /**
     * @return Exact match filter on group&#39;s SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
     * 
     */
    public Optional<String> sidFilter() {
        return Optional.ofNullable(this.sidFilter);
    }

    /**
     * Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
     * 
     */
    @Import(name="typeFilter")
    private @Nullable String typeFilter;

    /**
     * @return Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
     * 
     */
    public Optional<String> typeFilter() {
        return Optional.ofNullable(this.typeFilter);
    }

    private GetGroupsByDomainPlainArgs() {}

    private GetGroupsByDomainPlainArgs(GetGroupsByDomainPlainArgs $) {
        this.domain = $.domain;
        this.filter = $.filter;
        this.joinPointId = $.joinPointId;
        this.sidFilter = $.sidFilter;
        this.typeFilter = $.typeFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupsByDomainPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupsByDomainPlainArgs $;

        public Builder() {
            $ = new GetGroupsByDomainPlainArgs();
        }

        public Builder(GetGroupsByDomainPlainArgs defaults) {
            $ = new GetGroupsByDomainPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain whose groups we want to fetch
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param filter Exact match filter on group&#39;s CN
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param joinPointId Active Directory Join Point ID
         * 
         * @return builder
         * 
         */
        public Builder joinPointId(String joinPointId) {
            $.joinPointId = joinPointId;
            return this;
        }

        /**
         * @param sidFilter Exact match filter on group&#39;s SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.
         * 
         * @return builder
         * 
         */
        public Builder sidFilter(@Nullable String sidFilter) {
            $.sidFilter = sidFilter;
            return this;
        }

        /**
         * @param typeFilter Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.
         * 
         * @return builder
         * 
         */
        public Builder typeFilter(@Nullable String typeFilter) {
            $.typeFilter = typeFilter;
            return this;
        }

        public GetGroupsByDomainPlainArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("GetGroupsByDomainPlainArgs", "domain");
            }
            if ($.joinPointId == null) {
                throw new MissingRequiredPropertyException("GetGroupsByDomainPlainArgs", "joinPointId");
            }
            return $;
        }
    }

}
