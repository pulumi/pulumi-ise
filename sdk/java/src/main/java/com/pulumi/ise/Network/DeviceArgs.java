// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.network.inputs.DeviceIpArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceArgs Empty = new DeviceArgs();

    /**
     * Enforce use of DTLS
     * 
     */
    @Import(name="authenticationDtlsRequired")
    private @Nullable Output<Boolean> authenticationDtlsRequired;

    /**
     * @return Enforce use of DTLS
     * 
     */
    public Optional<Output<Boolean>> authenticationDtlsRequired() {
        return Optional.ofNullable(this.authenticationDtlsRequired);
    }

    /**
     * Enable key wrap
     * 
     */
    @Import(name="authenticationEnableKeyWrap")
    private @Nullable Output<Boolean> authenticationEnableKeyWrap;

    /**
     * @return Enable key wrap
     * 
     */
    public Optional<Output<Boolean>> authenticationEnableKeyWrap() {
        return Optional.ofNullable(this.authenticationEnableKeyWrap);
    }

    /**
     * Enable multiple RADIUS shared secrets
     * 
     */
    @Import(name="authenticationEnableMultiSecret")
    private @Nullable Output<Boolean> authenticationEnableMultiSecret;

    /**
     * @return Enable multiple RADIUS shared secrets
     * 
     */
    public Optional<Output<Boolean>> authenticationEnableMultiSecret() {
        return Optional.ofNullable(this.authenticationEnableMultiSecret);
    }

    /**
     * Encryption key
     * 
     */
    @Import(name="authenticationEncryptionKey")
    private @Nullable Output<String> authenticationEncryptionKey;

    /**
     * @return Encryption key
     * 
     */
    public Optional<Output<String>> authenticationEncryptionKey() {
        return Optional.ofNullable(this.authenticationEncryptionKey);
    }

    /**
     * Key input format - Choices: `ASCII`, `HEXADECIMAL`
     * 
     */
    @Import(name="authenticationEncryptionKeyFormat")
    private @Nullable Output<String> authenticationEncryptionKeyFormat;

    /**
     * @return Key input format - Choices: `ASCII`, `HEXADECIMAL`
     * 
     */
    public Optional<Output<String>> authenticationEncryptionKeyFormat() {
        return Optional.ofNullable(this.authenticationEncryptionKeyFormat);
    }

    /**
     * Message authenticator code key
     * 
     */
    @Import(name="authenticationMessageAuthenticatorCodeKey")
    private @Nullable Output<String> authenticationMessageAuthenticatorCodeKey;

    /**
     * @return Message authenticator code key
     * 
     */
    public Optional<Output<String>> authenticationMessageAuthenticatorCodeKey() {
        return Optional.ofNullable(this.authenticationMessageAuthenticatorCodeKey);
    }

    /**
     * Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
     * 
     */
    @Import(name="authenticationNetworkProtocol")
    private @Nullable Output<String> authenticationNetworkProtocol;

    /**
     * @return Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
     * 
     */
    public Optional<Output<String>> authenticationNetworkProtocol() {
        return Optional.ofNullable(this.authenticationNetworkProtocol);
    }

    /**
     * RADIUS shared secret
     * 
     */
    @Import(name="authenticationRadiusSharedSecret")
    private @Nullable Output<String> authenticationRadiusSharedSecret;

    /**
     * @return RADIUS shared secret
     * 
     */
    public Optional<Output<String>> authenticationRadiusSharedSecret() {
        return Optional.ofNullable(this.authenticationRadiusSharedSecret);
    }

    /**
     * Second RADIUS shared secret
     * 
     */
    @Import(name="authenticationSecondRadiusSharedSecret")
    private @Nullable Output<String> authenticationSecondRadiusSharedSecret;

    /**
     * @return Second RADIUS shared secret
     * 
     */
    public Optional<Output<String>> authenticationSecondRadiusSharedSecret() {
        return Optional.ofNullable(this.authenticationSecondRadiusSharedSecret);
    }

    /**
     * CoA port - Default value: `1700`
     * 
     */
    @Import(name="coaPort")
    private @Nullable Output<Integer> coaPort;

    /**
     * @return CoA port - Default value: `1700`
     * 
     */
    public Optional<Output<Integer>> coaPort() {
        return Optional.ofNullable(this.coaPort);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     * 
     */
    @Import(name="dtlsDnsName")
    private @Nullable Output<String> dtlsDnsName;

    /**
     * @return This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
     * 
     */
    public Optional<Output<String>> dtlsDnsName() {
        return Optional.ofNullable(this.dtlsDnsName);
    }

    /**
     * List of IP subnets
     * 
     */
    @Import(name="ips", required=true)
    private Output<List<DeviceIpArgs>> ips;

    /**
     * @return List of IP subnets
     * 
     */
    public Output<List<DeviceIpArgs>> ips() {
        return this.ips;
    }

    /**
     * Model name
     * 
     */
    @Import(name="modelName")
    private @Nullable Output<String> modelName;

    /**
     * @return Model name
     * 
     */
    public Optional<Output<String>> modelName() {
        return Optional.ofNullable(this.modelName);
    }

    /**
     * The name of the network device
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the network device
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     * 
     */
    @Import(name="networkDeviceGroups")
    private @Nullable Output<List<String>> networkDeviceGroups;

    /**
     * @return List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
     * 
     */
    public Optional<Output<List<String>>> networkDeviceGroups() {
        return Optional.ofNullable(this.networkDeviceGroups);
    }

    /**
     * Profile name - Default value: `Cisco`
     * 
     */
    @Import(name="profileName")
    private @Nullable Output<String> profileName;

    /**
     * @return Profile name - Default value: `Cisco`
     * 
     */
    public Optional<Output<String>> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * SNMP link Trap Query
     * 
     */
    @Import(name="snmpLinkTrapQuery")
    private @Nullable Output<Boolean> snmpLinkTrapQuery;

    /**
     * @return SNMP link Trap Query
     * 
     */
    public Optional<Output<Boolean>> snmpLinkTrapQuery() {
        return Optional.ofNullable(this.snmpLinkTrapQuery);
    }

    /**
     * SNMP MAC Trap Query
     * 
     */
    @Import(name="snmpMacTrapQuery")
    private @Nullable Output<Boolean> snmpMacTrapQuery;

    /**
     * @return SNMP MAC Trap Query
     * 
     */
    public Optional<Output<Boolean>> snmpMacTrapQuery() {
        return Optional.ofNullable(this.snmpMacTrapQuery);
    }

    /**
     * Originating Policy Services Node
     * 
     */
    @Import(name="snmpOriginatingPolicyServiceNode")
    private @Nullable Output<String> snmpOriginatingPolicyServiceNode;

    /**
     * @return Originating Policy Services Node
     * 
     */
    public Optional<Output<String>> snmpOriginatingPolicyServiceNode() {
        return Optional.ofNullable(this.snmpOriginatingPolicyServiceNode);
    }

    /**
     * SNMP Polling Interval in seconds - Range: `600`-`86400`
     * 
     */
    @Import(name="snmpPollingInterval")
    private @Nullable Output<Integer> snmpPollingInterval;

    /**
     * @return SNMP Polling Interval in seconds - Range: `600`-`86400`
     * 
     */
    public Optional<Output<Integer>> snmpPollingInterval() {
        return Optional.ofNullable(this.snmpPollingInterval);
    }

    /**
     * SNMP RO Community
     * 
     */
    @Import(name="snmpRoCommunity")
    private @Nullable Output<String> snmpRoCommunity;

    /**
     * @return SNMP RO Community
     * 
     */
    public Optional<Output<String>> snmpRoCommunity() {
        return Optional.ofNullable(this.snmpRoCommunity);
    }

    /**
     * SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
     * 
     */
    @Import(name="snmpVersion")
    private @Nullable Output<String> snmpVersion;

    /**
     * @return SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
     * 
     */
    public Optional<Output<String>> snmpVersion() {
        return Optional.ofNullable(this.snmpVersion);
    }

    /**
     * Software version
     * 
     */
    @Import(name="softwareVersion")
    private @Nullable Output<String> softwareVersion;

    /**
     * @return Software version
     * 
     */
    public Optional<Output<String>> softwareVersion() {
        return Optional.ofNullable(this.softwareVersion);
    }

    /**
     * Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
     * 
     */
    @Import(name="tacacsConnectModeOptions")
    private @Nullable Output<String> tacacsConnectModeOptions;

    /**
     * @return Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
     * 
     */
    public Optional<Output<String>> tacacsConnectModeOptions() {
        return Optional.ofNullable(this.tacacsConnectModeOptions);
    }

    /**
     * Shared secret
     * 
     */
    @Import(name="tacacsSharedSecret")
    private @Nullable Output<String> tacacsSharedSecret;

    /**
     * @return Shared secret
     * 
     */
    public Optional<Output<String>> tacacsSharedSecret() {
        return Optional.ofNullable(this.tacacsSharedSecret);
    }

    /**
     * CoA source host
     * 
     */
    @Import(name="trustsecCoaSourceHost")
    private @Nullable Output<String> trustsecCoaSourceHost;

    /**
     * @return CoA source host
     * 
     */
    public Optional<Output<String>> trustsecCoaSourceHost() {
        return Optional.ofNullable(this.trustsecCoaSourceHost);
    }

    /**
     * TrustSec device ID
     * 
     */
    @Import(name="trustsecDeviceId")
    private @Nullable Output<String> trustsecDeviceId;

    /**
     * @return TrustSec device ID
     * 
     */
    public Optional<Output<String>> trustsecDeviceId() {
        return Optional.ofNullable(this.trustsecDeviceId);
    }

    /**
     * TrustSec device password
     * 
     */
    @Import(name="trustsecDevicePassword")
    private @Nullable Output<String> trustsecDevicePassword;

    /**
     * @return TrustSec device password
     * 
     */
    public Optional<Output<String>> trustsecDevicePassword() {
        return Optional.ofNullable(this.trustsecDevicePassword);
    }

    /**
     * Download environment data every X seconds
     * 
     */
    @Import(name="trustsecDownloadEnviromentDataEveryXSeconds")
    private @Nullable Output<Integer> trustsecDownloadEnviromentDataEveryXSeconds;

    /**
     * @return Download environment data every X seconds
     * 
     */
    public Optional<Output<Integer>> trustsecDownloadEnviromentDataEveryXSeconds() {
        return Optional.ofNullable(this.trustsecDownloadEnviromentDataEveryXSeconds);
    }

    /**
     * Download peer authorization policy every X seconds
     * 
     */
    @Import(name="trustsecDownloadPeerAuthorizationPolicyEveryXSeconds")
    private @Nullable Output<Integer> trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;

    /**
     * @return Download peer authorization policy every X seconds
     * 
     */
    public Optional<Output<Integer>> trustsecDownloadPeerAuthorizationPolicyEveryXSeconds() {
        return Optional.ofNullable(this.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds);
    }

    /**
     * Download SGACL lists every X seconds
     * 
     */
    @Import(name="trustsecDownloadSgaclListsEveryXSeconds")
    private @Nullable Output<Integer> trustsecDownloadSgaclListsEveryXSeconds;

    /**
     * @return Download SGACL lists every X seconds
     * 
     */
    public Optional<Output<Integer>> trustsecDownloadSgaclListsEveryXSeconds() {
        return Optional.ofNullable(this.trustsecDownloadSgaclListsEveryXSeconds);
    }

    /**
     * Enable mode password
     * 
     */
    @Import(name="trustsecEnableModePassword")
    private @Nullable Output<String> trustsecEnableModePassword;

    /**
     * @return Enable mode password
     * 
     */
    public Optional<Output<String>> trustsecEnableModePassword() {
        return Optional.ofNullable(this.trustsecEnableModePassword);
    }

    /**
     * EXEC mode password
     * 
     */
    @Import(name="trustsecExecModePassword")
    private @Nullable Output<String> trustsecExecModePassword;

    /**
     * @return EXEC mode password
     * 
     */
    public Optional<Output<String>> trustsecExecModePassword() {
        return Optional.ofNullable(this.trustsecExecModePassword);
    }

    /**
     * EXEC mode username
     * 
     */
    @Import(name="trustsecExecModeUsername")
    private @Nullable Output<String> trustsecExecModeUsername;

    /**
     * @return EXEC mode username
     * 
     */
    public Optional<Output<String>> trustsecExecModeUsername() {
        return Optional.ofNullable(this.trustsecExecModeUsername);
    }

    /**
     * Include this device when deploying Security Group Tag Mapping Updates
     * 
     */
    @Import(name="trustsecIncludeWhenDeployingSgtUpdates")
    private @Nullable Output<Boolean> trustsecIncludeWhenDeployingSgtUpdates;

    /**
     * @return Include this device when deploying Security Group Tag Mapping Updates
     * 
     */
    public Optional<Output<Boolean>> trustsecIncludeWhenDeployingSgtUpdates() {
        return Optional.ofNullable(this.trustsecIncludeWhenDeployingSgtUpdates);
    }

    /**
     * Other TrustSec devices to trust this device
     * 
     */
    @Import(name="trustsecOtherSgaDevicesToTrustThisDevice")
    private @Nullable Output<Boolean> trustsecOtherSgaDevicesToTrustThisDevice;

    /**
     * @return Other TrustSec devices to trust this device
     * 
     */
    public Optional<Output<Boolean>> trustsecOtherSgaDevicesToTrustThisDevice() {
        return Optional.ofNullable(this.trustsecOtherSgaDevicesToTrustThisDevice);
    }

    /**
     * Re-authenticate every X seconds
     * 
     */
    @Import(name="trustsecReAuthenticationEveryXSeconds")
    private @Nullable Output<Integer> trustsecReAuthenticationEveryXSeconds;

    /**
     * @return Re-authenticate every X seconds
     * 
     */
    public Optional<Output<Integer>> trustsecReAuthenticationEveryXSeconds() {
        return Optional.ofNullable(this.trustsecReAuthenticationEveryXSeconds);
    }

    /**
     * REST API password
     * 
     */
    @Import(name="trustsecRestApiPassword")
    private @Nullable Output<String> trustsecRestApiPassword;

    /**
     * @return REST API password
     * 
     */
    public Optional<Output<String>> trustsecRestApiPassword() {
        return Optional.ofNullable(this.trustsecRestApiPassword);
    }

    /**
     * REST API username
     * 
     */
    @Import(name="trustsecRestApiUsername")
    private @Nullable Output<String> trustsecRestApiUsername;

    /**
     * @return REST API username
     * 
     */
    public Optional<Output<String>> trustsecRestApiUsername() {
        return Optional.ofNullable(this.trustsecRestApiUsername);
    }

    /**
     * Send configuration to device
     * 
     */
    @Import(name="trustsecSendConfigurationToDevice")
    private @Nullable Output<Boolean> trustsecSendConfigurationToDevice;

    /**
     * @return Send configuration to device
     * 
     */
    public Optional<Output<Boolean>> trustsecSendConfigurationToDevice() {
        return Optional.ofNullable(this.trustsecSendConfigurationToDevice);
    }

    /**
     * Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
     * 
     */
    @Import(name="trustsecSendConfigurationToDeviceUsing")
    private @Nullable Output<String> trustsecSendConfigurationToDeviceUsing;

    /**
     * @return Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
     * 
     */
    public Optional<Output<String>> trustsecSendConfigurationToDeviceUsing() {
        return Optional.ofNullable(this.trustsecSendConfigurationToDeviceUsing);
    }

    private DeviceArgs() {}

    private DeviceArgs(DeviceArgs $) {
        this.authenticationDtlsRequired = $.authenticationDtlsRequired;
        this.authenticationEnableKeyWrap = $.authenticationEnableKeyWrap;
        this.authenticationEnableMultiSecret = $.authenticationEnableMultiSecret;
        this.authenticationEncryptionKey = $.authenticationEncryptionKey;
        this.authenticationEncryptionKeyFormat = $.authenticationEncryptionKeyFormat;
        this.authenticationMessageAuthenticatorCodeKey = $.authenticationMessageAuthenticatorCodeKey;
        this.authenticationNetworkProtocol = $.authenticationNetworkProtocol;
        this.authenticationRadiusSharedSecret = $.authenticationRadiusSharedSecret;
        this.authenticationSecondRadiusSharedSecret = $.authenticationSecondRadiusSharedSecret;
        this.coaPort = $.coaPort;
        this.description = $.description;
        this.dtlsDnsName = $.dtlsDnsName;
        this.ips = $.ips;
        this.modelName = $.modelName;
        this.name = $.name;
        this.networkDeviceGroups = $.networkDeviceGroups;
        this.profileName = $.profileName;
        this.snmpLinkTrapQuery = $.snmpLinkTrapQuery;
        this.snmpMacTrapQuery = $.snmpMacTrapQuery;
        this.snmpOriginatingPolicyServiceNode = $.snmpOriginatingPolicyServiceNode;
        this.snmpPollingInterval = $.snmpPollingInterval;
        this.snmpRoCommunity = $.snmpRoCommunity;
        this.snmpVersion = $.snmpVersion;
        this.softwareVersion = $.softwareVersion;
        this.tacacsConnectModeOptions = $.tacacsConnectModeOptions;
        this.tacacsSharedSecret = $.tacacsSharedSecret;
        this.trustsecCoaSourceHost = $.trustsecCoaSourceHost;
        this.trustsecDeviceId = $.trustsecDeviceId;
        this.trustsecDevicePassword = $.trustsecDevicePassword;
        this.trustsecDownloadEnviromentDataEveryXSeconds = $.trustsecDownloadEnviromentDataEveryXSeconds;
        this.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds = $.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
        this.trustsecDownloadSgaclListsEveryXSeconds = $.trustsecDownloadSgaclListsEveryXSeconds;
        this.trustsecEnableModePassword = $.trustsecEnableModePassword;
        this.trustsecExecModePassword = $.trustsecExecModePassword;
        this.trustsecExecModeUsername = $.trustsecExecModeUsername;
        this.trustsecIncludeWhenDeployingSgtUpdates = $.trustsecIncludeWhenDeployingSgtUpdates;
        this.trustsecOtherSgaDevicesToTrustThisDevice = $.trustsecOtherSgaDevicesToTrustThisDevice;
        this.trustsecReAuthenticationEveryXSeconds = $.trustsecReAuthenticationEveryXSeconds;
        this.trustsecRestApiPassword = $.trustsecRestApiPassword;
        this.trustsecRestApiUsername = $.trustsecRestApiUsername;
        this.trustsecSendConfigurationToDevice = $.trustsecSendConfigurationToDevice;
        this.trustsecSendConfigurationToDeviceUsing = $.trustsecSendConfigurationToDeviceUsing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceArgs $;

        public Builder() {
            $ = new DeviceArgs();
        }

        public Builder(DeviceArgs defaults) {
            $ = new DeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationDtlsRequired Enforce use of DTLS
         * 
         * @return builder
         * 
         */
        public Builder authenticationDtlsRequired(@Nullable Output<Boolean> authenticationDtlsRequired) {
            $.authenticationDtlsRequired = authenticationDtlsRequired;
            return this;
        }

        /**
         * @param authenticationDtlsRequired Enforce use of DTLS
         * 
         * @return builder
         * 
         */
        public Builder authenticationDtlsRequired(Boolean authenticationDtlsRequired) {
            return authenticationDtlsRequired(Output.of(authenticationDtlsRequired));
        }

        /**
         * @param authenticationEnableKeyWrap Enable key wrap
         * 
         * @return builder
         * 
         */
        public Builder authenticationEnableKeyWrap(@Nullable Output<Boolean> authenticationEnableKeyWrap) {
            $.authenticationEnableKeyWrap = authenticationEnableKeyWrap;
            return this;
        }

        /**
         * @param authenticationEnableKeyWrap Enable key wrap
         * 
         * @return builder
         * 
         */
        public Builder authenticationEnableKeyWrap(Boolean authenticationEnableKeyWrap) {
            return authenticationEnableKeyWrap(Output.of(authenticationEnableKeyWrap));
        }

        /**
         * @param authenticationEnableMultiSecret Enable multiple RADIUS shared secrets
         * 
         * @return builder
         * 
         */
        public Builder authenticationEnableMultiSecret(@Nullable Output<Boolean> authenticationEnableMultiSecret) {
            $.authenticationEnableMultiSecret = authenticationEnableMultiSecret;
            return this;
        }

        /**
         * @param authenticationEnableMultiSecret Enable multiple RADIUS shared secrets
         * 
         * @return builder
         * 
         */
        public Builder authenticationEnableMultiSecret(Boolean authenticationEnableMultiSecret) {
            return authenticationEnableMultiSecret(Output.of(authenticationEnableMultiSecret));
        }

        /**
         * @param authenticationEncryptionKey Encryption key
         * 
         * @return builder
         * 
         */
        public Builder authenticationEncryptionKey(@Nullable Output<String> authenticationEncryptionKey) {
            $.authenticationEncryptionKey = authenticationEncryptionKey;
            return this;
        }

        /**
         * @param authenticationEncryptionKey Encryption key
         * 
         * @return builder
         * 
         */
        public Builder authenticationEncryptionKey(String authenticationEncryptionKey) {
            return authenticationEncryptionKey(Output.of(authenticationEncryptionKey));
        }

        /**
         * @param authenticationEncryptionKeyFormat Key input format - Choices: `ASCII`, `HEXADECIMAL`
         * 
         * @return builder
         * 
         */
        public Builder authenticationEncryptionKeyFormat(@Nullable Output<String> authenticationEncryptionKeyFormat) {
            $.authenticationEncryptionKeyFormat = authenticationEncryptionKeyFormat;
            return this;
        }

        /**
         * @param authenticationEncryptionKeyFormat Key input format - Choices: `ASCII`, `HEXADECIMAL`
         * 
         * @return builder
         * 
         */
        public Builder authenticationEncryptionKeyFormat(String authenticationEncryptionKeyFormat) {
            return authenticationEncryptionKeyFormat(Output.of(authenticationEncryptionKeyFormat));
        }

        /**
         * @param authenticationMessageAuthenticatorCodeKey Message authenticator code key
         * 
         * @return builder
         * 
         */
        public Builder authenticationMessageAuthenticatorCodeKey(@Nullable Output<String> authenticationMessageAuthenticatorCodeKey) {
            $.authenticationMessageAuthenticatorCodeKey = authenticationMessageAuthenticatorCodeKey;
            return this;
        }

        /**
         * @param authenticationMessageAuthenticatorCodeKey Message authenticator code key
         * 
         * @return builder
         * 
         */
        public Builder authenticationMessageAuthenticatorCodeKey(String authenticationMessageAuthenticatorCodeKey) {
            return authenticationMessageAuthenticatorCodeKey(Output.of(authenticationMessageAuthenticatorCodeKey));
        }

        /**
         * @param authenticationNetworkProtocol Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
         * 
         * @return builder
         * 
         */
        public Builder authenticationNetworkProtocol(@Nullable Output<String> authenticationNetworkProtocol) {
            $.authenticationNetworkProtocol = authenticationNetworkProtocol;
            return this;
        }

        /**
         * @param authenticationNetworkProtocol Network protocol - Choices: `RADIUS`, `TACACS_PLUS`
         * 
         * @return builder
         * 
         */
        public Builder authenticationNetworkProtocol(String authenticationNetworkProtocol) {
            return authenticationNetworkProtocol(Output.of(authenticationNetworkProtocol));
        }

        /**
         * @param authenticationRadiusSharedSecret RADIUS shared secret
         * 
         * @return builder
         * 
         */
        public Builder authenticationRadiusSharedSecret(@Nullable Output<String> authenticationRadiusSharedSecret) {
            $.authenticationRadiusSharedSecret = authenticationRadiusSharedSecret;
            return this;
        }

        /**
         * @param authenticationRadiusSharedSecret RADIUS shared secret
         * 
         * @return builder
         * 
         */
        public Builder authenticationRadiusSharedSecret(String authenticationRadiusSharedSecret) {
            return authenticationRadiusSharedSecret(Output.of(authenticationRadiusSharedSecret));
        }

        /**
         * @param authenticationSecondRadiusSharedSecret Second RADIUS shared secret
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecondRadiusSharedSecret(@Nullable Output<String> authenticationSecondRadiusSharedSecret) {
            $.authenticationSecondRadiusSharedSecret = authenticationSecondRadiusSharedSecret;
            return this;
        }

        /**
         * @param authenticationSecondRadiusSharedSecret Second RADIUS shared secret
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecondRadiusSharedSecret(String authenticationSecondRadiusSharedSecret) {
            return authenticationSecondRadiusSharedSecret(Output.of(authenticationSecondRadiusSharedSecret));
        }

        /**
         * @param coaPort CoA port - Default value: `1700`
         * 
         * @return builder
         * 
         */
        public Builder coaPort(@Nullable Output<Integer> coaPort) {
            $.coaPort = coaPort;
            return this;
        }

        /**
         * @param coaPort CoA port - Default value: `1700`
         * 
         * @return builder
         * 
         */
        public Builder coaPort(Integer coaPort) {
            return coaPort(Output.of(coaPort));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dtlsDnsName This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
         * 
         * @return builder
         * 
         */
        public Builder dtlsDnsName(@Nullable Output<String> dtlsDnsName) {
            $.dtlsDnsName = dtlsDnsName;
            return this;
        }

        /**
         * @param dtlsDnsName This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
         * 
         * @return builder
         * 
         */
        public Builder dtlsDnsName(String dtlsDnsName) {
            return dtlsDnsName(Output.of(dtlsDnsName));
        }

        /**
         * @param ips List of IP subnets
         * 
         * @return builder
         * 
         */
        public Builder ips(Output<List<DeviceIpArgs>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips List of IP subnets
         * 
         * @return builder
         * 
         */
        public Builder ips(List<DeviceIpArgs> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips List of IP subnets
         * 
         * @return builder
         * 
         */
        public Builder ips(DeviceIpArgs... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param modelName Model name
         * 
         * @return builder
         * 
         */
        public Builder modelName(@Nullable Output<String> modelName) {
            $.modelName = modelName;
            return this;
        }

        /**
         * @param modelName Model name
         * 
         * @return builder
         * 
         */
        public Builder modelName(String modelName) {
            return modelName(Output.of(modelName));
        }

        /**
         * @param name The name of the network device
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network device
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkDeviceGroups List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
         * 
         * @return builder
         * 
         */
        public Builder networkDeviceGroups(@Nullable Output<List<String>> networkDeviceGroups) {
            $.networkDeviceGroups = networkDeviceGroups;
            return this;
        }

        /**
         * @param networkDeviceGroups List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
         * 
         * @return builder
         * 
         */
        public Builder networkDeviceGroups(List<String> networkDeviceGroups) {
            return networkDeviceGroups(Output.of(networkDeviceGroups));
        }

        /**
         * @param networkDeviceGroups List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
         * 
         * @return builder
         * 
         */
        public Builder networkDeviceGroups(String... networkDeviceGroups) {
            return networkDeviceGroups(List.of(networkDeviceGroups));
        }

        /**
         * @param profileName Profile name - Default value: `Cisco`
         * 
         * @return builder
         * 
         */
        public Builder profileName(@Nullable Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName Profile name - Default value: `Cisco`
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param snmpLinkTrapQuery SNMP link Trap Query
         * 
         * @return builder
         * 
         */
        public Builder snmpLinkTrapQuery(@Nullable Output<Boolean> snmpLinkTrapQuery) {
            $.snmpLinkTrapQuery = snmpLinkTrapQuery;
            return this;
        }

        /**
         * @param snmpLinkTrapQuery SNMP link Trap Query
         * 
         * @return builder
         * 
         */
        public Builder snmpLinkTrapQuery(Boolean snmpLinkTrapQuery) {
            return snmpLinkTrapQuery(Output.of(snmpLinkTrapQuery));
        }

        /**
         * @param snmpMacTrapQuery SNMP MAC Trap Query
         * 
         * @return builder
         * 
         */
        public Builder snmpMacTrapQuery(@Nullable Output<Boolean> snmpMacTrapQuery) {
            $.snmpMacTrapQuery = snmpMacTrapQuery;
            return this;
        }

        /**
         * @param snmpMacTrapQuery SNMP MAC Trap Query
         * 
         * @return builder
         * 
         */
        public Builder snmpMacTrapQuery(Boolean snmpMacTrapQuery) {
            return snmpMacTrapQuery(Output.of(snmpMacTrapQuery));
        }

        /**
         * @param snmpOriginatingPolicyServiceNode Originating Policy Services Node
         * 
         * @return builder
         * 
         */
        public Builder snmpOriginatingPolicyServiceNode(@Nullable Output<String> snmpOriginatingPolicyServiceNode) {
            $.snmpOriginatingPolicyServiceNode = snmpOriginatingPolicyServiceNode;
            return this;
        }

        /**
         * @param snmpOriginatingPolicyServiceNode Originating Policy Services Node
         * 
         * @return builder
         * 
         */
        public Builder snmpOriginatingPolicyServiceNode(String snmpOriginatingPolicyServiceNode) {
            return snmpOriginatingPolicyServiceNode(Output.of(snmpOriginatingPolicyServiceNode));
        }

        /**
         * @param snmpPollingInterval SNMP Polling Interval in seconds - Range: `600`-`86400`
         * 
         * @return builder
         * 
         */
        public Builder snmpPollingInterval(@Nullable Output<Integer> snmpPollingInterval) {
            $.snmpPollingInterval = snmpPollingInterval;
            return this;
        }

        /**
         * @param snmpPollingInterval SNMP Polling Interval in seconds - Range: `600`-`86400`
         * 
         * @return builder
         * 
         */
        public Builder snmpPollingInterval(Integer snmpPollingInterval) {
            return snmpPollingInterval(Output.of(snmpPollingInterval));
        }

        /**
         * @param snmpRoCommunity SNMP RO Community
         * 
         * @return builder
         * 
         */
        public Builder snmpRoCommunity(@Nullable Output<String> snmpRoCommunity) {
            $.snmpRoCommunity = snmpRoCommunity;
            return this;
        }

        /**
         * @param snmpRoCommunity SNMP RO Community
         * 
         * @return builder
         * 
         */
        public Builder snmpRoCommunity(String snmpRoCommunity) {
            return snmpRoCommunity(Output.of(snmpRoCommunity));
        }

        /**
         * @param snmpVersion SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
         * 
         * @return builder
         * 
         */
        public Builder snmpVersion(@Nullable Output<String> snmpVersion) {
            $.snmpVersion = snmpVersion;
            return this;
        }

        /**
         * @param snmpVersion SNMP version - Choices: `ONE`, `TWO_C`, `THREE`
         * 
         * @return builder
         * 
         */
        public Builder snmpVersion(String snmpVersion) {
            return snmpVersion(Output.of(snmpVersion));
        }

        /**
         * @param softwareVersion Software version
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(@Nullable Output<String> softwareVersion) {
            $.softwareVersion = softwareVersion;
            return this;
        }

        /**
         * @param softwareVersion Software version
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(String softwareVersion) {
            return softwareVersion(Output.of(softwareVersion));
        }

        /**
         * @param tacacsConnectModeOptions Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
         * 
         * @return builder
         * 
         */
        public Builder tacacsConnectModeOptions(@Nullable Output<String> tacacsConnectModeOptions) {
            $.tacacsConnectModeOptions = tacacsConnectModeOptions;
            return this;
        }

        /**
         * @param tacacsConnectModeOptions Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
         * 
         * @return builder
         * 
         */
        public Builder tacacsConnectModeOptions(String tacacsConnectModeOptions) {
            return tacacsConnectModeOptions(Output.of(tacacsConnectModeOptions));
        }

        /**
         * @param tacacsSharedSecret Shared secret
         * 
         * @return builder
         * 
         */
        public Builder tacacsSharedSecret(@Nullable Output<String> tacacsSharedSecret) {
            $.tacacsSharedSecret = tacacsSharedSecret;
            return this;
        }

        /**
         * @param tacacsSharedSecret Shared secret
         * 
         * @return builder
         * 
         */
        public Builder tacacsSharedSecret(String tacacsSharedSecret) {
            return tacacsSharedSecret(Output.of(tacacsSharedSecret));
        }

        /**
         * @param trustsecCoaSourceHost CoA source host
         * 
         * @return builder
         * 
         */
        public Builder trustsecCoaSourceHost(@Nullable Output<String> trustsecCoaSourceHost) {
            $.trustsecCoaSourceHost = trustsecCoaSourceHost;
            return this;
        }

        /**
         * @param trustsecCoaSourceHost CoA source host
         * 
         * @return builder
         * 
         */
        public Builder trustsecCoaSourceHost(String trustsecCoaSourceHost) {
            return trustsecCoaSourceHost(Output.of(trustsecCoaSourceHost));
        }

        /**
         * @param trustsecDeviceId TrustSec device ID
         * 
         * @return builder
         * 
         */
        public Builder trustsecDeviceId(@Nullable Output<String> trustsecDeviceId) {
            $.trustsecDeviceId = trustsecDeviceId;
            return this;
        }

        /**
         * @param trustsecDeviceId TrustSec device ID
         * 
         * @return builder
         * 
         */
        public Builder trustsecDeviceId(String trustsecDeviceId) {
            return trustsecDeviceId(Output.of(trustsecDeviceId));
        }

        /**
         * @param trustsecDevicePassword TrustSec device password
         * 
         * @return builder
         * 
         */
        public Builder trustsecDevicePassword(@Nullable Output<String> trustsecDevicePassword) {
            $.trustsecDevicePassword = trustsecDevicePassword;
            return this;
        }

        /**
         * @param trustsecDevicePassword TrustSec device password
         * 
         * @return builder
         * 
         */
        public Builder trustsecDevicePassword(String trustsecDevicePassword) {
            return trustsecDevicePassword(Output.of(trustsecDevicePassword));
        }

        /**
         * @param trustsecDownloadEnviromentDataEveryXSeconds Download environment data every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadEnviromentDataEveryXSeconds(@Nullable Output<Integer> trustsecDownloadEnviromentDataEveryXSeconds) {
            $.trustsecDownloadEnviromentDataEveryXSeconds = trustsecDownloadEnviromentDataEveryXSeconds;
            return this;
        }

        /**
         * @param trustsecDownloadEnviromentDataEveryXSeconds Download environment data every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadEnviromentDataEveryXSeconds(Integer trustsecDownloadEnviromentDataEveryXSeconds) {
            return trustsecDownloadEnviromentDataEveryXSeconds(Output.of(trustsecDownloadEnviromentDataEveryXSeconds));
        }

        /**
         * @param trustsecDownloadPeerAuthorizationPolicyEveryXSeconds Download peer authorization policy every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadPeerAuthorizationPolicyEveryXSeconds(@Nullable Output<Integer> trustsecDownloadPeerAuthorizationPolicyEveryXSeconds) {
            $.trustsecDownloadPeerAuthorizationPolicyEveryXSeconds = trustsecDownloadPeerAuthorizationPolicyEveryXSeconds;
            return this;
        }

        /**
         * @param trustsecDownloadPeerAuthorizationPolicyEveryXSeconds Download peer authorization policy every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadPeerAuthorizationPolicyEveryXSeconds(Integer trustsecDownloadPeerAuthorizationPolicyEveryXSeconds) {
            return trustsecDownloadPeerAuthorizationPolicyEveryXSeconds(Output.of(trustsecDownloadPeerAuthorizationPolicyEveryXSeconds));
        }

        /**
         * @param trustsecDownloadSgaclListsEveryXSeconds Download SGACL lists every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadSgaclListsEveryXSeconds(@Nullable Output<Integer> trustsecDownloadSgaclListsEveryXSeconds) {
            $.trustsecDownloadSgaclListsEveryXSeconds = trustsecDownloadSgaclListsEveryXSeconds;
            return this;
        }

        /**
         * @param trustsecDownloadSgaclListsEveryXSeconds Download SGACL lists every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecDownloadSgaclListsEveryXSeconds(Integer trustsecDownloadSgaclListsEveryXSeconds) {
            return trustsecDownloadSgaclListsEveryXSeconds(Output.of(trustsecDownloadSgaclListsEveryXSeconds));
        }

        /**
         * @param trustsecEnableModePassword Enable mode password
         * 
         * @return builder
         * 
         */
        public Builder trustsecEnableModePassword(@Nullable Output<String> trustsecEnableModePassword) {
            $.trustsecEnableModePassword = trustsecEnableModePassword;
            return this;
        }

        /**
         * @param trustsecEnableModePassword Enable mode password
         * 
         * @return builder
         * 
         */
        public Builder trustsecEnableModePassword(String trustsecEnableModePassword) {
            return trustsecEnableModePassword(Output.of(trustsecEnableModePassword));
        }

        /**
         * @param trustsecExecModePassword EXEC mode password
         * 
         * @return builder
         * 
         */
        public Builder trustsecExecModePassword(@Nullable Output<String> trustsecExecModePassword) {
            $.trustsecExecModePassword = trustsecExecModePassword;
            return this;
        }

        /**
         * @param trustsecExecModePassword EXEC mode password
         * 
         * @return builder
         * 
         */
        public Builder trustsecExecModePassword(String trustsecExecModePassword) {
            return trustsecExecModePassword(Output.of(trustsecExecModePassword));
        }

        /**
         * @param trustsecExecModeUsername EXEC mode username
         * 
         * @return builder
         * 
         */
        public Builder trustsecExecModeUsername(@Nullable Output<String> trustsecExecModeUsername) {
            $.trustsecExecModeUsername = trustsecExecModeUsername;
            return this;
        }

        /**
         * @param trustsecExecModeUsername EXEC mode username
         * 
         * @return builder
         * 
         */
        public Builder trustsecExecModeUsername(String trustsecExecModeUsername) {
            return trustsecExecModeUsername(Output.of(trustsecExecModeUsername));
        }

        /**
         * @param trustsecIncludeWhenDeployingSgtUpdates Include this device when deploying Security Group Tag Mapping Updates
         * 
         * @return builder
         * 
         */
        public Builder trustsecIncludeWhenDeployingSgtUpdates(@Nullable Output<Boolean> trustsecIncludeWhenDeployingSgtUpdates) {
            $.trustsecIncludeWhenDeployingSgtUpdates = trustsecIncludeWhenDeployingSgtUpdates;
            return this;
        }

        /**
         * @param trustsecIncludeWhenDeployingSgtUpdates Include this device when deploying Security Group Tag Mapping Updates
         * 
         * @return builder
         * 
         */
        public Builder trustsecIncludeWhenDeployingSgtUpdates(Boolean trustsecIncludeWhenDeployingSgtUpdates) {
            return trustsecIncludeWhenDeployingSgtUpdates(Output.of(trustsecIncludeWhenDeployingSgtUpdates));
        }

        /**
         * @param trustsecOtherSgaDevicesToTrustThisDevice Other TrustSec devices to trust this device
         * 
         * @return builder
         * 
         */
        public Builder trustsecOtherSgaDevicesToTrustThisDevice(@Nullable Output<Boolean> trustsecOtherSgaDevicesToTrustThisDevice) {
            $.trustsecOtherSgaDevicesToTrustThisDevice = trustsecOtherSgaDevicesToTrustThisDevice;
            return this;
        }

        /**
         * @param trustsecOtherSgaDevicesToTrustThisDevice Other TrustSec devices to trust this device
         * 
         * @return builder
         * 
         */
        public Builder trustsecOtherSgaDevicesToTrustThisDevice(Boolean trustsecOtherSgaDevicesToTrustThisDevice) {
            return trustsecOtherSgaDevicesToTrustThisDevice(Output.of(trustsecOtherSgaDevicesToTrustThisDevice));
        }

        /**
         * @param trustsecReAuthenticationEveryXSeconds Re-authenticate every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecReAuthenticationEveryXSeconds(@Nullable Output<Integer> trustsecReAuthenticationEveryXSeconds) {
            $.trustsecReAuthenticationEveryXSeconds = trustsecReAuthenticationEveryXSeconds;
            return this;
        }

        /**
         * @param trustsecReAuthenticationEveryXSeconds Re-authenticate every X seconds
         * 
         * @return builder
         * 
         */
        public Builder trustsecReAuthenticationEveryXSeconds(Integer trustsecReAuthenticationEveryXSeconds) {
            return trustsecReAuthenticationEveryXSeconds(Output.of(trustsecReAuthenticationEveryXSeconds));
        }

        /**
         * @param trustsecRestApiPassword REST API password
         * 
         * @return builder
         * 
         */
        public Builder trustsecRestApiPassword(@Nullable Output<String> trustsecRestApiPassword) {
            $.trustsecRestApiPassword = trustsecRestApiPassword;
            return this;
        }

        /**
         * @param trustsecRestApiPassword REST API password
         * 
         * @return builder
         * 
         */
        public Builder trustsecRestApiPassword(String trustsecRestApiPassword) {
            return trustsecRestApiPassword(Output.of(trustsecRestApiPassword));
        }

        /**
         * @param trustsecRestApiUsername REST API username
         * 
         * @return builder
         * 
         */
        public Builder trustsecRestApiUsername(@Nullable Output<String> trustsecRestApiUsername) {
            $.trustsecRestApiUsername = trustsecRestApiUsername;
            return this;
        }

        /**
         * @param trustsecRestApiUsername REST API username
         * 
         * @return builder
         * 
         */
        public Builder trustsecRestApiUsername(String trustsecRestApiUsername) {
            return trustsecRestApiUsername(Output.of(trustsecRestApiUsername));
        }

        /**
         * @param trustsecSendConfigurationToDevice Send configuration to device
         * 
         * @return builder
         * 
         */
        public Builder trustsecSendConfigurationToDevice(@Nullable Output<Boolean> trustsecSendConfigurationToDevice) {
            $.trustsecSendConfigurationToDevice = trustsecSendConfigurationToDevice;
            return this;
        }

        /**
         * @param trustsecSendConfigurationToDevice Send configuration to device
         * 
         * @return builder
         * 
         */
        public Builder trustsecSendConfigurationToDevice(Boolean trustsecSendConfigurationToDevice) {
            return trustsecSendConfigurationToDevice(Output.of(trustsecSendConfigurationToDevice));
        }

        /**
         * @param trustsecSendConfigurationToDeviceUsing Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
         * 
         * @return builder
         * 
         */
        public Builder trustsecSendConfigurationToDeviceUsing(@Nullable Output<String> trustsecSendConfigurationToDeviceUsing) {
            $.trustsecSendConfigurationToDeviceUsing = trustsecSendConfigurationToDeviceUsing;
            return this;
        }

        /**
         * @param trustsecSendConfigurationToDeviceUsing Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
         * 
         * @return builder
         * 
         */
        public Builder trustsecSendConfigurationToDeviceUsing(String trustsecSendConfigurationToDeviceUsing) {
            return trustsecSendConfigurationToDeviceUsing(Output.of(trustsecSendConfigurationToDeviceUsing));
        }

        public DeviceArgs build() {
            if ($.ips == null) {
                throw new MissingRequiredPropertyException("DeviceArgs", "ips");
            }
            return $;
        }
    }

}
