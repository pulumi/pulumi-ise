// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.identitymanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.identitymanagement.outputs.GetActiveDirectoryJoinPointAttribute;
import com.pulumi.ise.identitymanagement.outputs.GetActiveDirectoryJoinPointGroup;
import com.pulumi.ise.identitymanagement.outputs.GetActiveDirectoryJoinPointRewriteRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetActiveDirectoryJoinPointResult {
    /**
     * @return String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
     * 
     */
    private String adScopesNames;
    /**
     * @return Aging Time
     * 
     */
    private Integer agingTime;
    /**
     * @return List of AD attributes
     * 
     */
    private List<GetActiveDirectoryJoinPointAttribute> attributes;
    /**
     * @return Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
     * 
     */
    private String authProtectionType;
    /**
     * @return User info attribute
     * 
     */
    private String country;
    /**
     * @return User info attribute
     * 
     */
    private String department;
    /**
     * @return Join point description
     * 
     */
    private String description;
    /**
     * @return AD domain associated with the join point
     * 
     */
    private String domain;
    /**
     * @return User info attribute
     * 
     */
    private String email;
    /**
     * @return Enable Callback For Dial In Client
     * 
     */
    private Boolean enableCallbackForDialinClient;
    /**
     * @return Enable Dial In Permission Check
     * 
     */
    private Boolean enableDialinPermissionCheck;
    private Boolean enableDomainAllowedList;
    /**
     * @return Enable prevent AD account lockout due to too many bad password attempts
     * 
     */
    private Boolean enableFailedAuthProtection;
    /**
     * @return Enable Machine Access
     * 
     */
    private Boolean enableMachineAccess;
    /**
     * @return Enable Machine Authentication
     * 
     */
    private Boolean enableMachineAuth;
    /**
     * @return Enable Password Change
     * 
     */
    private Boolean enablePassChange;
    /**
     * @return Enable Rewrites
     * 
     */
    private Boolean enableRewrites;
    /**
     * @return Number of bad password attempts
     * 
     */
    private Integer failedAuthThreshold;
    /**
     * @return User info attribute
     * 
     */
    private String firstName;
    /**
     * @return List of AD Groups
     * 
     */
    private List<GetActiveDirectoryJoinPointGroup> groups;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Identity Not In AD Behaviour
     * 
     */
    private String identityNotInAdBehaviour;
    /**
     * @return User info attribute
     * 
     */
    private String jobTitle;
    /**
     * @return User info attribute
     * 
     */
    private String lastName;
    /**
     * @return User info attribute
     * 
     */
    private String locality;
    /**
     * @return The name of the active directory join point
     * 
     */
    private String name;
    /**
     * @return User info attribute
     * 
     */
    private String organizationalUnit;
    /**
     * @return Plain Text Authentication
     * 
     */
    private Boolean plaintextAuth;
    /**
     * @return List of Rewrite rules
     * 
     */
    private List<GetActiveDirectoryJoinPointRewriteRule> rewriteRules;
    /**
     * @return Schema
     * 
     */
    private String schema;
    /**
     * @return User info attribute
     * 
     */
    private String stateOrProvince;
    /**
     * @return User info attribute
     * 
     */
    private String streetAddress;
    /**
     * @return User info attribute
     * 
     */
    private String telephone;
    /**
     * @return Unreachable Domains Behaviour
     * 
     */
    private String unreachableDomainsBehaviour;

    private GetActiveDirectoryJoinPointResult() {}
    /**
     * @return String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.
     * 
     */
    public String adScopesNames() {
        return this.adScopesNames;
    }
    /**
     * @return Aging Time
     * 
     */
    public Integer agingTime() {
        return this.agingTime;
    }
    /**
     * @return List of AD attributes
     * 
     */
    public List<GetActiveDirectoryJoinPointAttribute> attributes() {
        return this.attributes;
    }
    /**
     * @return Enable prevent AD account lockout for WIRELESS/WIRED/BOTH
     * 
     */
    public String authProtectionType() {
        return this.authProtectionType;
    }
    /**
     * @return User info attribute
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return User info attribute
     * 
     */
    public String department() {
        return this.department;
    }
    /**
     * @return Join point description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return AD domain associated with the join point
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return User info attribute
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Enable Callback For Dial In Client
     * 
     */
    public Boolean enableCallbackForDialinClient() {
        return this.enableCallbackForDialinClient;
    }
    /**
     * @return Enable Dial In Permission Check
     * 
     */
    public Boolean enableDialinPermissionCheck() {
        return this.enableDialinPermissionCheck;
    }
    public Boolean enableDomainAllowedList() {
        return this.enableDomainAllowedList;
    }
    /**
     * @return Enable prevent AD account lockout due to too many bad password attempts
     * 
     */
    public Boolean enableFailedAuthProtection() {
        return this.enableFailedAuthProtection;
    }
    /**
     * @return Enable Machine Access
     * 
     */
    public Boolean enableMachineAccess() {
        return this.enableMachineAccess;
    }
    /**
     * @return Enable Machine Authentication
     * 
     */
    public Boolean enableMachineAuth() {
        return this.enableMachineAuth;
    }
    /**
     * @return Enable Password Change
     * 
     */
    public Boolean enablePassChange() {
        return this.enablePassChange;
    }
    /**
     * @return Enable Rewrites
     * 
     */
    public Boolean enableRewrites() {
        return this.enableRewrites;
    }
    /**
     * @return Number of bad password attempts
     * 
     */
    public Integer failedAuthThreshold() {
        return this.failedAuthThreshold;
    }
    /**
     * @return User info attribute
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return List of AD Groups
     * 
     */
    public List<GetActiveDirectoryJoinPointGroup> groups() {
        return this.groups;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identity Not In AD Behaviour
     * 
     */
    public String identityNotInAdBehaviour() {
        return this.identityNotInAdBehaviour;
    }
    /**
     * @return User info attribute
     * 
     */
    public String jobTitle() {
        return this.jobTitle;
    }
    /**
     * @return User info attribute
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return User info attribute
     * 
     */
    public String locality() {
        return this.locality;
    }
    /**
     * @return The name of the active directory join point
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return User info attribute
     * 
     */
    public String organizationalUnit() {
        return this.organizationalUnit;
    }
    /**
     * @return Plain Text Authentication
     * 
     */
    public Boolean plaintextAuth() {
        return this.plaintextAuth;
    }
    /**
     * @return List of Rewrite rules
     * 
     */
    public List<GetActiveDirectoryJoinPointRewriteRule> rewriteRules() {
        return this.rewriteRules;
    }
    /**
     * @return Schema
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return User info attribute
     * 
     */
    public String stateOrProvince() {
        return this.stateOrProvince;
    }
    /**
     * @return User info attribute
     * 
     */
    public String streetAddress() {
        return this.streetAddress;
    }
    /**
     * @return User info attribute
     * 
     */
    public String telephone() {
        return this.telephone;
    }
    /**
     * @return Unreachable Domains Behaviour
     * 
     */
    public String unreachableDomainsBehaviour() {
        return this.unreachableDomainsBehaviour;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetActiveDirectoryJoinPointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adScopesNames;
        private Integer agingTime;
        private List<GetActiveDirectoryJoinPointAttribute> attributes;
        private String authProtectionType;
        private String country;
        private String department;
        private String description;
        private String domain;
        private String email;
        private Boolean enableCallbackForDialinClient;
        private Boolean enableDialinPermissionCheck;
        private Boolean enableDomainAllowedList;
        private Boolean enableFailedAuthProtection;
        private Boolean enableMachineAccess;
        private Boolean enableMachineAuth;
        private Boolean enablePassChange;
        private Boolean enableRewrites;
        private Integer failedAuthThreshold;
        private String firstName;
        private List<GetActiveDirectoryJoinPointGroup> groups;
        private String id;
        private String identityNotInAdBehaviour;
        private String jobTitle;
        private String lastName;
        private String locality;
        private String name;
        private String organizationalUnit;
        private Boolean plaintextAuth;
        private List<GetActiveDirectoryJoinPointRewriteRule> rewriteRules;
        private String schema;
        private String stateOrProvince;
        private String streetAddress;
        private String telephone;
        private String unreachableDomainsBehaviour;
        public Builder() {}
        public Builder(GetActiveDirectoryJoinPointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adScopesNames = defaults.adScopesNames;
    	      this.agingTime = defaults.agingTime;
    	      this.attributes = defaults.attributes;
    	      this.authProtectionType = defaults.authProtectionType;
    	      this.country = defaults.country;
    	      this.department = defaults.department;
    	      this.description = defaults.description;
    	      this.domain = defaults.domain;
    	      this.email = defaults.email;
    	      this.enableCallbackForDialinClient = defaults.enableCallbackForDialinClient;
    	      this.enableDialinPermissionCheck = defaults.enableDialinPermissionCheck;
    	      this.enableDomainAllowedList = defaults.enableDomainAllowedList;
    	      this.enableFailedAuthProtection = defaults.enableFailedAuthProtection;
    	      this.enableMachineAccess = defaults.enableMachineAccess;
    	      this.enableMachineAuth = defaults.enableMachineAuth;
    	      this.enablePassChange = defaults.enablePassChange;
    	      this.enableRewrites = defaults.enableRewrites;
    	      this.failedAuthThreshold = defaults.failedAuthThreshold;
    	      this.firstName = defaults.firstName;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.identityNotInAdBehaviour = defaults.identityNotInAdBehaviour;
    	      this.jobTitle = defaults.jobTitle;
    	      this.lastName = defaults.lastName;
    	      this.locality = defaults.locality;
    	      this.name = defaults.name;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.plaintextAuth = defaults.plaintextAuth;
    	      this.rewriteRules = defaults.rewriteRules;
    	      this.schema = defaults.schema;
    	      this.stateOrProvince = defaults.stateOrProvince;
    	      this.streetAddress = defaults.streetAddress;
    	      this.telephone = defaults.telephone;
    	      this.unreachableDomainsBehaviour = defaults.unreachableDomainsBehaviour;
        }

        @CustomType.Setter
        public Builder adScopesNames(String adScopesNames) {
            if (adScopesNames == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "adScopesNames");
            }
            this.adScopesNames = adScopesNames;
            return this;
        }
        @CustomType.Setter
        public Builder agingTime(Integer agingTime) {
            if (agingTime == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "agingTime");
            }
            this.agingTime = agingTime;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(List<GetActiveDirectoryJoinPointAttribute> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(GetActiveDirectoryJoinPointAttribute... attributes) {
            return attributes(List.of(attributes));
        }
        @CustomType.Setter
        public Builder authProtectionType(String authProtectionType) {
            if (authProtectionType == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "authProtectionType");
            }
            this.authProtectionType = authProtectionType;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder department(String department) {
            if (department == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "department");
            }
            this.department = department;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder enableCallbackForDialinClient(Boolean enableCallbackForDialinClient) {
            if (enableCallbackForDialinClient == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableCallbackForDialinClient");
            }
            this.enableCallbackForDialinClient = enableCallbackForDialinClient;
            return this;
        }
        @CustomType.Setter
        public Builder enableDialinPermissionCheck(Boolean enableDialinPermissionCheck) {
            if (enableDialinPermissionCheck == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableDialinPermissionCheck");
            }
            this.enableDialinPermissionCheck = enableDialinPermissionCheck;
            return this;
        }
        @CustomType.Setter
        public Builder enableDomainAllowedList(Boolean enableDomainAllowedList) {
            if (enableDomainAllowedList == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableDomainAllowedList");
            }
            this.enableDomainAllowedList = enableDomainAllowedList;
            return this;
        }
        @CustomType.Setter
        public Builder enableFailedAuthProtection(Boolean enableFailedAuthProtection) {
            if (enableFailedAuthProtection == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableFailedAuthProtection");
            }
            this.enableFailedAuthProtection = enableFailedAuthProtection;
            return this;
        }
        @CustomType.Setter
        public Builder enableMachineAccess(Boolean enableMachineAccess) {
            if (enableMachineAccess == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableMachineAccess");
            }
            this.enableMachineAccess = enableMachineAccess;
            return this;
        }
        @CustomType.Setter
        public Builder enableMachineAuth(Boolean enableMachineAuth) {
            if (enableMachineAuth == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableMachineAuth");
            }
            this.enableMachineAuth = enableMachineAuth;
            return this;
        }
        @CustomType.Setter
        public Builder enablePassChange(Boolean enablePassChange) {
            if (enablePassChange == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enablePassChange");
            }
            this.enablePassChange = enablePassChange;
            return this;
        }
        @CustomType.Setter
        public Builder enableRewrites(Boolean enableRewrites) {
            if (enableRewrites == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "enableRewrites");
            }
            this.enableRewrites = enableRewrites;
            return this;
        }
        @CustomType.Setter
        public Builder failedAuthThreshold(Integer failedAuthThreshold) {
            if (failedAuthThreshold == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "failedAuthThreshold");
            }
            this.failedAuthThreshold = failedAuthThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GetActiveDirectoryJoinPointGroup> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(GetActiveDirectoryJoinPointGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityNotInAdBehaviour(String identityNotInAdBehaviour) {
            if (identityNotInAdBehaviour == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "identityNotInAdBehaviour");
            }
            this.identityNotInAdBehaviour = identityNotInAdBehaviour;
            return this;
        }
        @CustomType.Setter
        public Builder jobTitle(String jobTitle) {
            if (jobTitle == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "jobTitle");
            }
            this.jobTitle = jobTitle;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder locality(String locality) {
            if (locality == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "locality");
            }
            this.locality = locality;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(String organizationalUnit) {
            if (organizationalUnit == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "organizationalUnit");
            }
            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder plaintextAuth(Boolean plaintextAuth) {
            if (plaintextAuth == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "plaintextAuth");
            }
            this.plaintextAuth = plaintextAuth;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRules(List<GetActiveDirectoryJoinPointRewriteRule> rewriteRules) {
            if (rewriteRules == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "rewriteRules");
            }
            this.rewriteRules = rewriteRules;
            return this;
        }
        public Builder rewriteRules(GetActiveDirectoryJoinPointRewriteRule... rewriteRules) {
            return rewriteRules(List.of(rewriteRules));
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder stateOrProvince(String stateOrProvince) {
            if (stateOrProvince == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "stateOrProvince");
            }
            this.stateOrProvince = stateOrProvince;
            return this;
        }
        @CustomType.Setter
        public Builder streetAddress(String streetAddress) {
            if (streetAddress == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "streetAddress");
            }
            this.streetAddress = streetAddress;
            return this;
        }
        @CustomType.Setter
        public Builder telephone(String telephone) {
            if (telephone == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "telephone");
            }
            this.telephone = telephone;
            return this;
        }
        @CustomType.Setter
        public Builder unreachableDomainsBehaviour(String unreachableDomainsBehaviour) {
            if (unreachableDomainsBehaviour == null) {
              throw new MissingRequiredPropertyException("GetActiveDirectoryJoinPointResult", "unreachableDomainsBehaviour");
            }
            this.unreachableDomainsBehaviour = unreachableDomainsBehaviour;
            return this;
        }
        public GetActiveDirectoryJoinPointResult build() {
            final var _resultValue = new GetActiveDirectoryJoinPointResult();
            _resultValue.adScopesNames = adScopesNames;
            _resultValue.agingTime = agingTime;
            _resultValue.attributes = attributes;
            _resultValue.authProtectionType = authProtectionType;
            _resultValue.country = country;
            _resultValue.department = department;
            _resultValue.description = description;
            _resultValue.domain = domain;
            _resultValue.email = email;
            _resultValue.enableCallbackForDialinClient = enableCallbackForDialinClient;
            _resultValue.enableDialinPermissionCheck = enableDialinPermissionCheck;
            _resultValue.enableDomainAllowedList = enableDomainAllowedList;
            _resultValue.enableFailedAuthProtection = enableFailedAuthProtection;
            _resultValue.enableMachineAccess = enableMachineAccess;
            _resultValue.enableMachineAuth = enableMachineAuth;
            _resultValue.enablePassChange = enablePassChange;
            _resultValue.enableRewrites = enableRewrites;
            _resultValue.failedAuthThreshold = failedAuthThreshold;
            _resultValue.firstName = firstName;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.identityNotInAdBehaviour = identityNotInAdBehaviour;
            _resultValue.jobTitle = jobTitle;
            _resultValue.lastName = lastName;
            _resultValue.locality = locality;
            _resultValue.name = name;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.plaintextAuth = plaintextAuth;
            _resultValue.rewriteRules = rewriteRules;
            _resultValue.schema = schema;
            _resultValue.stateOrProvince = stateOrProvince;
            _resultValue.streetAddress = streetAddress;
            _resultValue.telephone = telephone;
            _resultValue.unreachableDomainsBehaviour = unreachableDomainsBehaviour;
            return _resultValue;
        }
    }
}
