// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.LicenseTier.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ise.LicenseTier.inputs.StateLicenseArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StateState extends com.pulumi.resources.ResourceArgs {

    public static final StateState Empty = new StateState();

    /**
     * List of licenses
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<StateLicenseArgs>> licenses;

    /**
     * @return List of licenses
     * 
     */
    public Optional<Output<List<StateLicenseArgs>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    private StateState() {}

    private StateState(StateState $) {
        this.licenses = $.licenses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StateState $;

        public Builder() {
            $ = new StateState();
        }

        public Builder(StateState defaults) {
            $ = new StateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(@Nullable Output<List<StateLicenseArgs>> licenses) {
            $.licenses = licenses;
            return this;
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(List<StateLicenseArgs> licenses) {
            return licenses(Output.of(licenses));
        }

        /**
         * @param licenses List of licenses
         * 
         * @return builder
         * 
         */
        public Builder licenses(StateLicenseArgs... licenses) {
            return licenses(List.of(licenses));
        }

        public StateState build() {
            return $;
        }
    }

}
