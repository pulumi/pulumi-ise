// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.activeDirectory;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.activeDirectory.inputs.AddGroupsGroupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AddGroupsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddGroupsArgs Empty = new AddGroupsArgs();

    /**
     * String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default
     * value: `Default_Scope`
     * 
     */
    @Import(name="adScopesNames")
    private @Nullable Output<String> adScopesNames;

    /**
     * @return String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default
     * value: `Default_Scope`
     * 
     */
    public Optional<Output<String>> adScopesNames() {
        return Optional.ofNullable(this.adScopesNames);
    }

    /**
     * Join point Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Join point Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * AD domain associated with the join point
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return AD domain associated with the join point
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * - Default value: `true`
     * 
     */
    @Import(name="enableDomainAllowedList")
    private @Nullable Output<Boolean> enableDomainAllowedList;

    /**
     * @return - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> enableDomainAllowedList() {
        return Optional.ofNullable(this.enableDomainAllowedList);
    }

    /**
     * List of AD Groups
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<AddGroupsGroupArgs>> groups;

    /**
     * @return List of AD Groups
     * 
     */
    public Optional<Output<List<AddGroupsGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Active Directory Join Point ID
     * 
     */
    @Import(name="joinPointId", required=true)
    private Output<String> joinPointId;

    /**
     * @return Active Directory Join Point ID
     * 
     */
    public Output<String> joinPointId() {
        return this.joinPointId;
    }

    /**
     * The name of the active directory join point
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the active directory join point
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private AddGroupsArgs() {}

    private AddGroupsArgs(AddGroupsArgs $) {
        this.adScopesNames = $.adScopesNames;
        this.description = $.description;
        this.domain = $.domain;
        this.enableDomainAllowedList = $.enableDomainAllowedList;
        this.groups = $.groups;
        this.joinPointId = $.joinPointId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddGroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddGroupsArgs $;

        public Builder() {
            $ = new AddGroupsArgs();
        }

        public Builder(AddGroupsArgs defaults) {
            $ = new AddGroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adScopesNames String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default
         * value: `Default_Scope`
         * 
         * @return builder
         * 
         */
        public Builder adScopesNames(@Nullable Output<String> adScopesNames) {
            $.adScopesNames = adScopesNames;
            return this;
        }

        /**
         * @param adScopesNames String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default
         * value: `Default_Scope`
         * 
         * @return builder
         * 
         */
        public Builder adScopesNames(String adScopesNames) {
            return adScopesNames(Output.of(adScopesNames));
        }

        /**
         * @param description Join point Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Join point Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain AD domain associated with the join point
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain AD domain associated with the join point
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param enableDomainAllowedList - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableDomainAllowedList(@Nullable Output<Boolean> enableDomainAllowedList) {
            $.enableDomainAllowedList = enableDomainAllowedList;
            return this;
        }

        /**
         * @param enableDomainAllowedList - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder enableDomainAllowedList(Boolean enableDomainAllowedList) {
            return enableDomainAllowedList(Output.of(enableDomainAllowedList));
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<AddGroupsGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(List<AddGroupsGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups List of AD Groups
         * 
         * @return builder
         * 
         */
        public Builder groups(AddGroupsGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param joinPointId Active Directory Join Point ID
         * 
         * @return builder
         * 
         */
        public Builder joinPointId(Output<String> joinPointId) {
            $.joinPointId = joinPointId;
            return this;
        }

        /**
         * @param joinPointId Active Directory Join Point ID
         * 
         * @return builder
         * 
         */
        public Builder joinPointId(String joinPointId) {
            return joinPointId(Output.of(joinPointId));
        }

        /**
         * @param name The name of the active directory join point
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the active directory join point
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AddGroupsArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("AddGroupsArgs", "domain");
            }
            if ($.joinPointId == null) {
                throw new MissingRequiredPropertyException("AddGroupsArgs", "joinPointId");
            }
            return $;
        }
    }

}
