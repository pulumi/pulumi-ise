// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.IdentitySource;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ise.IdentitySource.inputs.SequenceIdentitySourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SequenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SequenceArgs Empty = new SequenceArgs();

    /**
     * Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
     * 
     */
    @Import(name="breakOnStoreFail", required=true)
    private Output<Boolean> breakOnStoreFail;

    /**
     * @return Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
     * 
     */
    public Output<Boolean> breakOnStoreFail() {
        return this.breakOnStoreFail;
    }

    /**
     * Certificate Authentication Profile, empty if doesn&#39;t exist
     * 
     */
    @Import(name="certificateAuthenticationProfile", required=true)
    private Output<String> certificateAuthenticationProfile;

    /**
     * @return Certificate Authentication Profile, empty if doesn&#39;t exist
     * 
     */
    public Output<String> certificateAuthenticationProfile() {
        return this.certificateAuthenticationProfile;
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="identitySources", required=true)
    private Output<List<SequenceIdentitySourceArgs>> identitySources;

    public Output<List<SequenceIdentitySourceArgs>> identitySources() {
        return this.identitySources;
    }

    /**
     * The name of the identity source sequence
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the identity source sequence
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SequenceArgs() {}

    private SequenceArgs(SequenceArgs $) {
        this.breakOnStoreFail = $.breakOnStoreFail;
        this.certificateAuthenticationProfile = $.certificateAuthenticationProfile;
        this.description = $.description;
        this.identitySources = $.identitySources;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SequenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SequenceArgs $;

        public Builder() {
            $ = new SequenceArgs();
        }

        public Builder(SequenceArgs defaults) {
            $ = new SequenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param breakOnStoreFail Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
         * 
         * @return builder
         * 
         */
        public Builder breakOnStoreFail(Output<Boolean> breakOnStoreFail) {
            $.breakOnStoreFail = breakOnStoreFail;
            return this;
        }

        /**
         * @param breakOnStoreFail Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
         * 
         * @return builder
         * 
         */
        public Builder breakOnStoreFail(Boolean breakOnStoreFail) {
            return breakOnStoreFail(Output.of(breakOnStoreFail));
        }

        /**
         * @param certificateAuthenticationProfile Certificate Authentication Profile, empty if doesn&#39;t exist
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthenticationProfile(Output<String> certificateAuthenticationProfile) {
            $.certificateAuthenticationProfile = certificateAuthenticationProfile;
            return this;
        }

        /**
         * @param certificateAuthenticationProfile Certificate Authentication Profile, empty if doesn&#39;t exist
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthenticationProfile(String certificateAuthenticationProfile) {
            return certificateAuthenticationProfile(Output.of(certificateAuthenticationProfile));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder identitySources(Output<List<SequenceIdentitySourceArgs>> identitySources) {
            $.identitySources = identitySources;
            return this;
        }

        public Builder identitySources(List<SequenceIdentitySourceArgs> identitySources) {
            return identitySources(Output.of(identitySources));
        }

        public Builder identitySources(SequenceIdentitySourceArgs... identitySources) {
            return identitySources(List.of(identitySources));
        }

        /**
         * @param name The name of the identity source sequence
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the identity source sequence
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SequenceArgs build() {
            if ($.breakOnStoreFail == null) {
                throw new MissingRequiredPropertyException("SequenceArgs", "breakOnStoreFail");
            }
            if ($.certificateAuthenticationProfile == null) {
                throw new MissingRequiredPropertyException("SequenceArgs", "certificateAuthenticationProfile");
            }
            if ($.identitySources == null) {
                throw new MissingRequiredPropertyException("SequenceArgs", "identitySources");
            }
            return $;
        }
    }

}
