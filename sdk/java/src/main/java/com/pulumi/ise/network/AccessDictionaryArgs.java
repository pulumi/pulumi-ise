// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessDictionaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessDictionaryArgs Empty = new AccessDictionaryArgs();

    /**
     * The description of the dictionary
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the dictionary
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
     * 
     */
    @Import(name="dictionaryAttrType", required=true)
    private Output<String> dictionaryAttrType;

    /**
     * @return The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
     * 
     */
    public Output<String> dictionaryAttrType() {
        return this.dictionaryAttrType;
    }

    /**
     * The dictionary name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The dictionary name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The version of the dictionary
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the dictionary
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private AccessDictionaryArgs() {}

    private AccessDictionaryArgs(AccessDictionaryArgs $) {
        this.description = $.description;
        this.dictionaryAttrType = $.dictionaryAttrType;
        this.name = $.name;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessDictionaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessDictionaryArgs $;

        public Builder() {
            $ = new AccessDictionaryArgs();
        }

        public Builder(AccessDictionaryArgs defaults) {
            $ = new AccessDictionaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dictionaryAttrType The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
         * 
         * @return builder
         * 
         */
        public Builder dictionaryAttrType(Output<String> dictionaryAttrType) {
            $.dictionaryAttrType = dictionaryAttrType;
            return this;
        }

        /**
         * @param dictionaryAttrType The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
         * 
         * @return builder
         * 
         */
        public Builder dictionaryAttrType(String dictionaryAttrType) {
            return dictionaryAttrType(Output.of(dictionaryAttrType));
        }

        /**
         * @param name The dictionary name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The dictionary name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param version The version of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AccessDictionaryArgs build() {
            if ($.dictionaryAttrType == null) {
                throw new MissingRequiredPropertyException("AccessDictionaryArgs", "dictionaryAttrType");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("AccessDictionaryArgs", "version");
            }
            return $;
        }
    }

}
