// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.TacacsCommand.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SetCommand {
    /**
     * @return Command arguments
     * 
     */
    private String arguments;
    /**
     * @return Command
     * 
     */
    private String command;
    /**
     * @return Grant
     *   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
     * 
     */
    private String grant;

    private SetCommand() {}
    /**
     * @return Command arguments
     * 
     */
    public String arguments() {
        return this.arguments;
    }
    /**
     * @return Command
     * 
     */
    public String command() {
        return this.command;
    }
    /**
     * @return Grant
     *   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
     * 
     */
    public String grant() {
        return this.grant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SetCommand defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arguments;
        private String command;
        private String grant;
        public Builder() {}
        public Builder(SetCommand defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.command = defaults.command;
    	      this.grant = defaults.grant;
        }

        @CustomType.Setter
        public Builder arguments(String arguments) {
            if (arguments == null) {
              throw new MissingRequiredPropertyException("SetCommand", "arguments");
            }
            this.arguments = arguments;
            return this;
        }
        @CustomType.Setter
        public Builder command(String command) {
            if (command == null) {
              throw new MissingRequiredPropertyException("SetCommand", "command");
            }
            this.command = command;
            return this;
        }
        @CustomType.Setter
        public Builder grant(String grant) {
            if (grant == null) {
              throw new MissingRequiredPropertyException("SetCommand", "grant");
            }
            this.grant = grant;
            return this;
        }
        public SetCommand build() {
            final var _resultValue = new SetCommand();
            _resultValue.arguments = arguments;
            _resultValue.command = command;
            _resultValue.grant = grant;
            return _resultValue;
        }
    }
}
