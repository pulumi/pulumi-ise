// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessTimeAndDateConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessTimeAndDateConditionArgs Empty = new AccessTimeAndDateConditionArgs();

    /**
     * Condition description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Condition description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * End date
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return End date
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * End time
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return End time
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Exception end date
     * 
     */
    @Import(name="exceptionEndDate")
    private @Nullable Output<String> exceptionEndDate;

    /**
     * @return Exception end date
     * 
     */
    public Optional<Output<String>> exceptionEndDate() {
        return Optional.ofNullable(this.exceptionEndDate);
    }

    /**
     * Exception end time
     * 
     */
    @Import(name="exceptionEndTime")
    private @Nullable Output<String> exceptionEndTime;

    /**
     * @return Exception end time
     * 
     */
    public Optional<Output<String>> exceptionEndTime() {
        return Optional.ofNullable(this.exceptionEndTime);
    }

    /**
     * Exception start date
     * 
     */
    @Import(name="exceptionStartDate")
    private @Nullable Output<String> exceptionStartDate;

    /**
     * @return Exception start date
     * 
     */
    public Optional<Output<String>> exceptionStartDate() {
        return Optional.ofNullable(this.exceptionStartDate);
    }

    /**
     * Exception start time
     * 
     */
    @Import(name="exceptionStartTime")
    private @Nullable Output<String> exceptionStartTime;

    /**
     * @return Exception start time
     * 
     */
    public Optional<Output<String>> exceptionStartTime() {
        return Optional.ofNullable(this.exceptionStartTime);
    }

    /**
     * Indicates whereas this condition is in negate mode
     * 
     */
    @Import(name="isNegate")
    private @Nullable Output<Boolean> isNegate;

    /**
     * @return Indicates whereas this condition is in negate mode
     * 
     */
    public Optional<Output<Boolean>> isNegate() {
        return Optional.ofNullable(this.isNegate);
    }

    /**
     * Condition name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Condition name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Start date
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return Start date
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * Start time
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Start time
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
     * 
     */
    @Import(name="weekDays")
    private @Nullable Output<List<String>> weekDays;

    /**
     * @return Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
     * 
     */
    public Optional<Output<List<String>>> weekDays() {
        return Optional.ofNullable(this.weekDays);
    }

    /**
     * Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
     * 
     */
    @Import(name="weekDaysExceptions")
    private @Nullable Output<List<String>> weekDaysExceptions;

    /**
     * @return Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
     * 
     */
    public Optional<Output<List<String>>> weekDaysExceptions() {
        return Optional.ofNullable(this.weekDaysExceptions);
    }

    private AccessTimeAndDateConditionArgs() {}

    private AccessTimeAndDateConditionArgs(AccessTimeAndDateConditionArgs $) {
        this.description = $.description;
        this.endDate = $.endDate;
        this.endTime = $.endTime;
        this.exceptionEndDate = $.exceptionEndDate;
        this.exceptionEndTime = $.exceptionEndTime;
        this.exceptionStartDate = $.exceptionStartDate;
        this.exceptionStartTime = $.exceptionStartTime;
        this.isNegate = $.isNegate;
        this.name = $.name;
        this.startDate = $.startDate;
        this.startTime = $.startTime;
        this.weekDays = $.weekDays;
        this.weekDaysExceptions = $.weekDaysExceptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessTimeAndDateConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessTimeAndDateConditionArgs $;

        public Builder() {
            $ = new AccessTimeAndDateConditionArgs();
        }

        public Builder(AccessTimeAndDateConditionArgs defaults) {
            $ = new AccessTimeAndDateConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Condition description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Condition description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endDate End date
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate End date
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param endTime End time
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime End time
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param exceptionEndDate Exception end date
         * 
         * @return builder
         * 
         */
        public Builder exceptionEndDate(@Nullable Output<String> exceptionEndDate) {
            $.exceptionEndDate = exceptionEndDate;
            return this;
        }

        /**
         * @param exceptionEndDate Exception end date
         * 
         * @return builder
         * 
         */
        public Builder exceptionEndDate(String exceptionEndDate) {
            return exceptionEndDate(Output.of(exceptionEndDate));
        }

        /**
         * @param exceptionEndTime Exception end time
         * 
         * @return builder
         * 
         */
        public Builder exceptionEndTime(@Nullable Output<String> exceptionEndTime) {
            $.exceptionEndTime = exceptionEndTime;
            return this;
        }

        /**
         * @param exceptionEndTime Exception end time
         * 
         * @return builder
         * 
         */
        public Builder exceptionEndTime(String exceptionEndTime) {
            return exceptionEndTime(Output.of(exceptionEndTime));
        }

        /**
         * @param exceptionStartDate Exception start date
         * 
         * @return builder
         * 
         */
        public Builder exceptionStartDate(@Nullable Output<String> exceptionStartDate) {
            $.exceptionStartDate = exceptionStartDate;
            return this;
        }

        /**
         * @param exceptionStartDate Exception start date
         * 
         * @return builder
         * 
         */
        public Builder exceptionStartDate(String exceptionStartDate) {
            return exceptionStartDate(Output.of(exceptionStartDate));
        }

        /**
         * @param exceptionStartTime Exception start time
         * 
         * @return builder
         * 
         */
        public Builder exceptionStartTime(@Nullable Output<String> exceptionStartTime) {
            $.exceptionStartTime = exceptionStartTime;
            return this;
        }

        /**
         * @param exceptionStartTime Exception start time
         * 
         * @return builder
         * 
         */
        public Builder exceptionStartTime(String exceptionStartTime) {
            return exceptionStartTime(Output.of(exceptionStartTime));
        }

        /**
         * @param isNegate Indicates whereas this condition is in negate mode
         * 
         * @return builder
         * 
         */
        public Builder isNegate(@Nullable Output<Boolean> isNegate) {
            $.isNegate = isNegate;
            return this;
        }

        /**
         * @param isNegate Indicates whereas this condition is in negate mode
         * 
         * @return builder
         * 
         */
        public Builder isNegate(Boolean isNegate) {
            return isNegate(Output.of(isNegate));
        }

        /**
         * @param name Condition name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Condition name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startDate Start date
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate Start date
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param startTime Start time
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Start time
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param weekDays Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(@Nullable Output<List<String>> weekDays) {
            $.weekDays = weekDays;
            return this;
        }

        /**
         * @param weekDays Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(List<String> weekDays) {
            return weekDays(Output.of(weekDays));
        }

        /**
         * @param weekDays Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
         * 
         * @return builder
         * 
         */
        public Builder weekDays(String... weekDays) {
            return weekDays(List.of(weekDays));
        }

        /**
         * @param weekDaysExceptions Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDaysExceptions(@Nullable Output<List<String>> weekDaysExceptions) {
            $.weekDaysExceptions = weekDaysExceptions;
            return this;
        }

        /**
         * @param weekDaysExceptions Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDaysExceptions(List<String> weekDaysExceptions) {
            return weekDaysExceptions(Output.of(weekDaysExceptions));
        }

        /**
         * @param weekDaysExceptions Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder weekDaysExceptions(String... weekDaysExceptions) {
            return weekDaysExceptions(List.of(weekDaysExceptions));
        }

        public AccessTimeAndDateConditionArgs build() {
            return $;
        }
    }

}
