// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ise.networkaccess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAllowedProtocolsResult {
    /**
     * @return Allow 5G. This field is only supported from ISE 3.2.
     * 
     */
    private Boolean allow5g;
    /**
     * @return Allow CHAP
     * 
     */
    private Boolean allowChap;
    /**
     * @return Allow EAP Fast
     * 
     */
    private Boolean allowEapFast;
    /**
     * @return Allow EAP MD5
     * 
     */
    private Boolean allowEapMd5;
    /**
     * @return Allow EAP TLS
     * 
     */
    private Boolean allowEapTls;
    /**
     * @return Allow EAP TTLS
     * 
     */
    private Boolean allowEapTtls;
    /**
     * @return Allow LEAP
     * 
     */
    private Boolean allowLeap;
    /**
     * @return Allow MS CHAP v1
     * 
     */
    private Boolean allowMsChapV1;
    /**
     * @return Allow MS CHAP v2
     * 
     */
    private Boolean allowMsChapV2;
    /**
     * @return Allow PAP ASCII
     * 
     */
    private Boolean allowPapAscii;
    /**
     * @return Allow PEAP
     * 
     */
    private Boolean allowPeap;
    /**
     * @return Allow preferred EAP protocol
     * 
     */
    private Boolean allowPreferredEapProtocol;
    /**
     * @return Allow TEAP
     * 
     */
    private Boolean allowTeap;
    /**
     * @return Allow weak ciphers for EAP
     * 
     */
    private Boolean allowWeakCiphersForEap;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     * 
     */
    private Boolean eapFastAcceptClientCert;
    /**
     * @return Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     * 
     */
    private Boolean eapFastAllowMachineAuthentication;
    /**
     * @return Allow EAP GTC
     * 
     */
    private Boolean eapFastEapGtc;
    /**
     * @return Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     * 
     */
    private Boolean eapFastEapGtcPwdChange;
    /**
     * @return EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
     * 
     */
    private Integer eapFastEapGtcPwdChangeRetries;
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    private Boolean eapFastEapMsChapV2;
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     * 
     */
    private Boolean eapFastEapMsChapV2PwdChange;
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
     * 
     */
    private Integer eapFastEapMsChapV2PwdChangeRetries;
    /**
     * @return Allow EAP TLS
     * 
     */
    private Boolean eapFastEapTls;
    /**
     * @return Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     * 
     */
    private Boolean eapFastEapTlsAuthOfExpiredCerts;
    /**
     * @return Enable EAP chaining
     * 
     */
    private Boolean eapFastEnableEapChaining;
    /**
     * @return Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Boolean eapFastPacsAllowAnonymousProvisioning;
    /**
     * @return Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Boolean eapFastPacsAllowAuthenticatedProvisioning;
    /**
     * @return Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     * 
     */
    private Boolean eapFastPacsAllowClientCert;
    /**
     * @return Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Boolean eapFastPacsAllowMachineAuthentication;
    /**
     * @return Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     * 
     */
    private Integer eapFastPacsAuthorizationPacTtl;
    /**
     * @return Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     * 
     */
    private String eapFastPacsAuthorizationPacTtlUnit;
    /**
     * @return Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     * 
     */
    private Integer eapFastPacsMachinePacTtl;
    /**
     * @return Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     * 
     */
    private String eapFastPacsMachinePacTtlUnit;
    /**
     * @return Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     * 
     */
    private Boolean eapFastPacsServerReturns;
    /**
     * @return Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Boolean eapFastPacsStatelessSessionResume;
    /**
     * @return PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Integer eapFastPacsTunnelPacTtl;
    /**
     * @return PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private String eapFastPacsTunnelPacTtlUnit;
    /**
     * @return Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    private Integer eapFastPacsUseProactivePacUpdatePercentage;
    /**
     * @return Use PACs
     * 
     */
    private Boolean eapFastUsePacs;
    /**
     * @return Allow authentication of expired certificates
     * 
     */
    private Boolean eapTlsAllowAuthOfExpiredCerts;
    /**
     * @return Enable stateless session resume
     * 
     */
    private Boolean eapTlsEnableStatelessSessionResume;
    /**
     * @return EAP TLS L-Bit
     * 
     */
    private Boolean eapTlsLBit;
    /**
     * @return Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    private Integer eapTlsSessionTicketPercentage;
    /**
     * @return Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    private Integer eapTlsSessionTicketTtl;
    /**
     * @return Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    private String eapTlsSessionTicketTtlUnit;
    /**
     * @return Allow CHAP
     * 
     */
    private Boolean eapTtlsChap;
    /**
     * @return Allow EAP MD5
     * 
     */
    private Boolean eapTtlsEapMd5;
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    private Boolean eapTtlsEapMsChapV2;
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     * 
     */
    private Boolean eapTtlsEapMsChapV2PwdChange;
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
     * 
     */
    private Integer eapTtlsEapMsChapV2PwdChangeRetries;
    /**
     * @return Allow MS CHAP v1
     * 
     */
    private Boolean eapTtlsMsChapV1;
    /**
     * @return Allow MS CHAP v2
     * 
     */
    private Boolean eapTtlsMsChapV2;
    /**
     * @return Allow PAP ASCII
     * 
     */
    private Boolean eapTtlsPapAscii;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return The name of the allowed protocols
     * 
     */
    private String name;
    /**
     * @return Allow PEAP EAP GTC
     * 
     */
    private Boolean peapAllowPeapEapGtc;
    /**
     * @return Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     * 
     */
    private Boolean peapAllowPeapEapGtcPwdChange;
    /**
     * @return PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
     * 
     */
    private Integer peapAllowPeapEapGtcPwdChangeRetries;
    /**
     * @return Allow PEAP EAP MS CHAP v2
     * 
     */
    private Boolean peapAllowPeapEapMsChapV2;
    /**
     * @return Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     * 
     */
    private Boolean peapAllowPeapEapMsChapV2PwdChange;
    /**
     * @return Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
     * 
     */
    private Integer peapAllowPeapEapMsChapV2PwdChangeRetries;
    /**
     * @return Allow PEAP EAP TLS
     * 
     */
    private Boolean peapAllowPeapEapTls;
    /**
     * @return Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     * 
     */
    private Boolean peapAllowPeapEapTlsAuthOfExpiredCerts;
    /**
     * @return Allow PEAP v0
     * 
     */
    private Boolean peapPeapV0;
    /**
     * @return Preferred EAP protocol
     * 
     */
    private String preferredEapProtocol;
    /**
     * @return Process host lookup
     * 
     */
    private Boolean processHostLookup;
    /**
     * @return Require cryptobinding
     * 
     */
    private Boolean requireCryptobinding;
    /**
     * @return Require message authentication
     * 
     */
    private Boolean requireMessageAuth;
    /**
     * @return Allow downgrade to MSK
     * 
     */
    private Boolean teapDowngradeMsk;
    /**
     * @return Accept client certificate during tunnel establishment
     * 
     */
    private Boolean teapEapAcceptClientCertDuringTunnelEst;
    /**
     * @return Allow EAP chaining
     * 
     */
    private Boolean teapEapChaining;
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    private Boolean teapEapMsChapV2;
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     * 
     */
    private Boolean teapEapMsChapV2PwdChange;
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
     * 
     */
    private Integer teapEapMsChapV2PwdChangeRetries;
    /**
     * @return Allow EAP TLS
     * 
     */
    private Boolean teapEapTls;
    /**
     * @return Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     * 
     */
    private Boolean teapEapTlsAuthOfExpiredCerts;
    /**
     * @return Request basic password authentication
     * 
     */
    private Boolean teapRequestBasicPwdAuth;

    private GetAllowedProtocolsResult() {}
    /**
     * @return Allow 5G. This field is only supported from ISE 3.2.
     * 
     */
    public Boolean allow5g() {
        return this.allow5g;
    }
    /**
     * @return Allow CHAP
     * 
     */
    public Boolean allowChap() {
        return this.allowChap;
    }
    /**
     * @return Allow EAP Fast
     * 
     */
    public Boolean allowEapFast() {
        return this.allowEapFast;
    }
    /**
     * @return Allow EAP MD5
     * 
     */
    public Boolean allowEapMd5() {
        return this.allowEapMd5;
    }
    /**
     * @return Allow EAP TLS
     * 
     */
    public Boolean allowEapTls() {
        return this.allowEapTls;
    }
    /**
     * @return Allow EAP TTLS
     * 
     */
    public Boolean allowEapTtls() {
        return this.allowEapTtls;
    }
    /**
     * @return Allow LEAP
     * 
     */
    public Boolean allowLeap() {
        return this.allowLeap;
    }
    /**
     * @return Allow MS CHAP v1
     * 
     */
    public Boolean allowMsChapV1() {
        return this.allowMsChapV1;
    }
    /**
     * @return Allow MS CHAP v2
     * 
     */
    public Boolean allowMsChapV2() {
        return this.allowMsChapV2;
    }
    /**
     * @return Allow PAP ASCII
     * 
     */
    public Boolean allowPapAscii() {
        return this.allowPapAscii;
    }
    /**
     * @return Allow PEAP
     * 
     */
    public Boolean allowPeap() {
        return this.allowPeap;
    }
    /**
     * @return Allow preferred EAP protocol
     * 
     */
    public Boolean allowPreferredEapProtocol() {
        return this.allowPreferredEapProtocol;
    }
    /**
     * @return Allow TEAP
     * 
     */
    public Boolean allowTeap() {
        return this.allowTeap;
    }
    /**
     * @return Allow weak ciphers for EAP
     * 
     */
    public Boolean allowWeakCiphersForEap() {
        return this.allowWeakCiphersForEap;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
     * 
     */
    public Boolean eapFastAcceptClientCert() {
        return this.eapFastAcceptClientCert;
    }
    /**
     * @return Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
     * 
     */
    public Boolean eapFastAllowMachineAuthentication() {
        return this.eapFastAllowMachineAuthentication;
    }
    /**
     * @return Allow EAP GTC
     * 
     */
    public Boolean eapFastEapGtc() {
        return this.eapFastEapGtc;
    }
    /**
     * @return Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
     * 
     */
    public Boolean eapFastEapGtcPwdChange() {
        return this.eapFastEapGtcPwdChange;
    }
    /**
     * @return EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
     * 
     */
    public Integer eapFastEapGtcPwdChangeRetries() {
        return this.eapFastEapGtcPwdChangeRetries;
    }
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    public Boolean eapFastEapMsChapV2() {
        return this.eapFastEapMsChapV2;
    }
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
     * 
     */
    public Boolean eapFastEapMsChapV2PwdChange() {
        return this.eapFastEapMsChapV2PwdChange;
    }
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
     * 
     */
    public Integer eapFastEapMsChapV2PwdChangeRetries() {
        return this.eapFastEapMsChapV2PwdChangeRetries;
    }
    /**
     * @return Allow EAP TLS
     * 
     */
    public Boolean eapFastEapTls() {
        return this.eapFastEapTls;
    }
    /**
     * @return Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
     * 
     */
    public Boolean eapFastEapTlsAuthOfExpiredCerts() {
        return this.eapFastEapTlsAuthOfExpiredCerts;
    }
    /**
     * @return Enable EAP chaining
     * 
     */
    public Boolean eapFastEnableEapChaining() {
        return this.eapFastEnableEapChaining;
    }
    /**
     * @return Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Boolean eapFastPacsAllowAnonymousProvisioning() {
        return this.eapFastPacsAllowAnonymousProvisioning;
    }
    /**
     * @return Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Boolean eapFastPacsAllowAuthenticatedProvisioning() {
        return this.eapFastPacsAllowAuthenticatedProvisioning;
    }
    /**
     * @return Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     * 
     */
    public Boolean eapFastPacsAllowClientCert() {
        return this.eapFastPacsAllowClientCert;
    }
    /**
     * @return Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Boolean eapFastPacsAllowMachineAuthentication() {
        return this.eapFastPacsAllowMachineAuthentication;
    }
    /**
     * @return Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     * 
     */
    public Integer eapFastPacsAuthorizationPacTtl() {
        return this.eapFastPacsAuthorizationPacTtl;
    }
    /**
     * @return Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
     * 
     */
    public String eapFastPacsAuthorizationPacTtlUnit() {
        return this.eapFastPacsAuthorizationPacTtlUnit;
    }
    /**
     * @return Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     * 
     */
    public Integer eapFastPacsMachinePacTtl() {
        return this.eapFastPacsMachinePacTtl;
    }
    /**
     * @return Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
     * 
     */
    public String eapFastPacsMachinePacTtlUnit() {
        return this.eapFastPacsMachinePacTtlUnit;
    }
    /**
     * @return Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
     * 
     */
    public Boolean eapFastPacsServerReturns() {
        return this.eapFastPacsServerReturns;
    }
    /**
     * @return Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Boolean eapFastPacsStatelessSessionResume() {
        return this.eapFastPacsStatelessSessionResume;
    }
    /**
     * @return PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Integer eapFastPacsTunnelPacTtl() {
        return this.eapFastPacsTunnelPacTtl;
    }
    /**
     * @return PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public String eapFastPacsTunnelPacTtlUnit() {
        return this.eapFastPacsTunnelPacTtlUnit;
    }
    /**
     * @return Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
     * 
     */
    public Integer eapFastPacsUseProactivePacUpdatePercentage() {
        return this.eapFastPacsUseProactivePacUpdatePercentage;
    }
    /**
     * @return Use PACs
     * 
     */
    public Boolean eapFastUsePacs() {
        return this.eapFastUsePacs;
    }
    /**
     * @return Allow authentication of expired certificates
     * 
     */
    public Boolean eapTlsAllowAuthOfExpiredCerts() {
        return this.eapTlsAllowAuthOfExpiredCerts;
    }
    /**
     * @return Enable stateless session resume
     * 
     */
    public Boolean eapTlsEnableStatelessSessionResume() {
        return this.eapTlsEnableStatelessSessionResume;
    }
    /**
     * @return EAP TLS L-Bit
     * 
     */
    public Boolean eapTlsLBit() {
        return this.eapTlsLBit;
    }
    /**
     * @return Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    public Integer eapTlsSessionTicketPercentage() {
        return this.eapTlsSessionTicketPercentage;
    }
    /**
     * @return Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    public Integer eapTlsSessionTicketTtl() {
        return this.eapTlsSessionTicketTtl;
    }
    /**
     * @return Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
     * 
     */
    public String eapTlsSessionTicketTtlUnit() {
        return this.eapTlsSessionTicketTtlUnit;
    }
    /**
     * @return Allow CHAP
     * 
     */
    public Boolean eapTtlsChap() {
        return this.eapTtlsChap;
    }
    /**
     * @return Allow EAP MD5
     * 
     */
    public Boolean eapTtlsEapMd5() {
        return this.eapTtlsEapMd5;
    }
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    public Boolean eapTtlsEapMsChapV2() {
        return this.eapTtlsEapMsChapV2;
    }
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
     * 
     */
    public Boolean eapTtlsEapMsChapV2PwdChange() {
        return this.eapTtlsEapMsChapV2PwdChange;
    }
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
     * 
     */
    public Integer eapTtlsEapMsChapV2PwdChangeRetries() {
        return this.eapTtlsEapMsChapV2PwdChangeRetries;
    }
    /**
     * @return Allow MS CHAP v1
     * 
     */
    public Boolean eapTtlsMsChapV1() {
        return this.eapTtlsMsChapV1;
    }
    /**
     * @return Allow MS CHAP v2
     * 
     */
    public Boolean eapTtlsMsChapV2() {
        return this.eapTtlsMsChapV2;
    }
    /**
     * @return Allow PAP ASCII
     * 
     */
    public Boolean eapTtlsPapAscii() {
        return this.eapTtlsPapAscii;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the allowed protocols
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Allow PEAP EAP GTC
     * 
     */
    public Boolean peapAllowPeapEapGtc() {
        return this.peapAllowPeapEapGtc;
    }
    /**
     * @return Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
     * 
     */
    public Boolean peapAllowPeapEapGtcPwdChange() {
        return this.peapAllowPeapEapGtcPwdChange;
    }
    /**
     * @return PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
     * 
     */
    public Integer peapAllowPeapEapGtcPwdChangeRetries() {
        return this.peapAllowPeapEapGtcPwdChangeRetries;
    }
    /**
     * @return Allow PEAP EAP MS CHAP v2
     * 
     */
    public Boolean peapAllowPeapEapMsChapV2() {
        return this.peapAllowPeapEapMsChapV2;
    }
    /**
     * @return Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
     * 
     */
    public Boolean peapAllowPeapEapMsChapV2PwdChange() {
        return this.peapAllowPeapEapMsChapV2PwdChange;
    }
    /**
     * @return Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
     * 
     */
    public Integer peapAllowPeapEapMsChapV2PwdChangeRetries() {
        return this.peapAllowPeapEapMsChapV2PwdChangeRetries;
    }
    /**
     * @return Allow PEAP EAP TLS
     * 
     */
    public Boolean peapAllowPeapEapTls() {
        return this.peapAllowPeapEapTls;
    }
    /**
     * @return Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
     * 
     */
    public Boolean peapAllowPeapEapTlsAuthOfExpiredCerts() {
        return this.peapAllowPeapEapTlsAuthOfExpiredCerts;
    }
    /**
     * @return Allow PEAP v0
     * 
     */
    public Boolean peapPeapV0() {
        return this.peapPeapV0;
    }
    /**
     * @return Preferred EAP protocol
     * 
     */
    public String preferredEapProtocol() {
        return this.preferredEapProtocol;
    }
    /**
     * @return Process host lookup
     * 
     */
    public Boolean processHostLookup() {
        return this.processHostLookup;
    }
    /**
     * @return Require cryptobinding
     * 
     */
    public Boolean requireCryptobinding() {
        return this.requireCryptobinding;
    }
    /**
     * @return Require message authentication
     * 
     */
    public Boolean requireMessageAuth() {
        return this.requireMessageAuth;
    }
    /**
     * @return Allow downgrade to MSK
     * 
     */
    public Boolean teapDowngradeMsk() {
        return this.teapDowngradeMsk;
    }
    /**
     * @return Accept client certificate during tunnel establishment
     * 
     */
    public Boolean teapEapAcceptClientCertDuringTunnelEst() {
        return this.teapEapAcceptClientCertDuringTunnelEst;
    }
    /**
     * @return Allow EAP chaining
     * 
     */
    public Boolean teapEapChaining() {
        return this.teapEapChaining;
    }
    /**
     * @return Allow EAP MS CHAP v2
     * 
     */
    public Boolean teapEapMsChapV2() {
        return this.teapEapMsChapV2;
    }
    /**
     * @return Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
     * 
     */
    public Boolean teapEapMsChapV2PwdChange() {
        return this.teapEapMsChapV2PwdChange;
    }
    /**
     * @return EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
     * 
     */
    public Integer teapEapMsChapV2PwdChangeRetries() {
        return this.teapEapMsChapV2PwdChangeRetries;
    }
    /**
     * @return Allow EAP TLS
     * 
     */
    public Boolean teapEapTls() {
        return this.teapEapTls;
    }
    /**
     * @return Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
     * 
     */
    public Boolean teapEapTlsAuthOfExpiredCerts() {
        return this.teapEapTlsAuthOfExpiredCerts;
    }
    /**
     * @return Request basic password authentication
     * 
     */
    public Boolean teapRequestBasicPwdAuth() {
        return this.teapRequestBasicPwdAuth;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAllowedProtocolsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allow5g;
        private Boolean allowChap;
        private Boolean allowEapFast;
        private Boolean allowEapMd5;
        private Boolean allowEapTls;
        private Boolean allowEapTtls;
        private Boolean allowLeap;
        private Boolean allowMsChapV1;
        private Boolean allowMsChapV2;
        private Boolean allowPapAscii;
        private Boolean allowPeap;
        private Boolean allowPreferredEapProtocol;
        private Boolean allowTeap;
        private Boolean allowWeakCiphersForEap;
        private String description;
        private Boolean eapFastAcceptClientCert;
        private Boolean eapFastAllowMachineAuthentication;
        private Boolean eapFastEapGtc;
        private Boolean eapFastEapGtcPwdChange;
        private Integer eapFastEapGtcPwdChangeRetries;
        private Boolean eapFastEapMsChapV2;
        private Boolean eapFastEapMsChapV2PwdChange;
        private Integer eapFastEapMsChapV2PwdChangeRetries;
        private Boolean eapFastEapTls;
        private Boolean eapFastEapTlsAuthOfExpiredCerts;
        private Boolean eapFastEnableEapChaining;
        private Boolean eapFastPacsAllowAnonymousProvisioning;
        private Boolean eapFastPacsAllowAuthenticatedProvisioning;
        private Boolean eapFastPacsAllowClientCert;
        private Boolean eapFastPacsAllowMachineAuthentication;
        private Integer eapFastPacsAuthorizationPacTtl;
        private String eapFastPacsAuthorizationPacTtlUnit;
        private Integer eapFastPacsMachinePacTtl;
        private String eapFastPacsMachinePacTtlUnit;
        private Boolean eapFastPacsServerReturns;
        private Boolean eapFastPacsStatelessSessionResume;
        private Integer eapFastPacsTunnelPacTtl;
        private String eapFastPacsTunnelPacTtlUnit;
        private Integer eapFastPacsUseProactivePacUpdatePercentage;
        private Boolean eapFastUsePacs;
        private Boolean eapTlsAllowAuthOfExpiredCerts;
        private Boolean eapTlsEnableStatelessSessionResume;
        private Boolean eapTlsLBit;
        private Integer eapTlsSessionTicketPercentage;
        private Integer eapTlsSessionTicketTtl;
        private String eapTlsSessionTicketTtlUnit;
        private Boolean eapTtlsChap;
        private Boolean eapTtlsEapMd5;
        private Boolean eapTtlsEapMsChapV2;
        private Boolean eapTtlsEapMsChapV2PwdChange;
        private Integer eapTtlsEapMsChapV2PwdChangeRetries;
        private Boolean eapTtlsMsChapV1;
        private Boolean eapTtlsMsChapV2;
        private Boolean eapTtlsPapAscii;
        private String id;
        private String name;
        private Boolean peapAllowPeapEapGtc;
        private Boolean peapAllowPeapEapGtcPwdChange;
        private Integer peapAllowPeapEapGtcPwdChangeRetries;
        private Boolean peapAllowPeapEapMsChapV2;
        private Boolean peapAllowPeapEapMsChapV2PwdChange;
        private Integer peapAllowPeapEapMsChapV2PwdChangeRetries;
        private Boolean peapAllowPeapEapTls;
        private Boolean peapAllowPeapEapTlsAuthOfExpiredCerts;
        private Boolean peapPeapV0;
        private String preferredEapProtocol;
        private Boolean processHostLookup;
        private Boolean requireCryptobinding;
        private Boolean requireMessageAuth;
        private Boolean teapDowngradeMsk;
        private Boolean teapEapAcceptClientCertDuringTunnelEst;
        private Boolean teapEapChaining;
        private Boolean teapEapMsChapV2;
        private Boolean teapEapMsChapV2PwdChange;
        private Integer teapEapMsChapV2PwdChangeRetries;
        private Boolean teapEapTls;
        private Boolean teapEapTlsAuthOfExpiredCerts;
        private Boolean teapRequestBasicPwdAuth;
        public Builder() {}
        public Builder(GetAllowedProtocolsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allow5g = defaults.allow5g;
    	      this.allowChap = defaults.allowChap;
    	      this.allowEapFast = defaults.allowEapFast;
    	      this.allowEapMd5 = defaults.allowEapMd5;
    	      this.allowEapTls = defaults.allowEapTls;
    	      this.allowEapTtls = defaults.allowEapTtls;
    	      this.allowLeap = defaults.allowLeap;
    	      this.allowMsChapV1 = defaults.allowMsChapV1;
    	      this.allowMsChapV2 = defaults.allowMsChapV2;
    	      this.allowPapAscii = defaults.allowPapAscii;
    	      this.allowPeap = defaults.allowPeap;
    	      this.allowPreferredEapProtocol = defaults.allowPreferredEapProtocol;
    	      this.allowTeap = defaults.allowTeap;
    	      this.allowWeakCiphersForEap = defaults.allowWeakCiphersForEap;
    	      this.description = defaults.description;
    	      this.eapFastAcceptClientCert = defaults.eapFastAcceptClientCert;
    	      this.eapFastAllowMachineAuthentication = defaults.eapFastAllowMachineAuthentication;
    	      this.eapFastEapGtc = defaults.eapFastEapGtc;
    	      this.eapFastEapGtcPwdChange = defaults.eapFastEapGtcPwdChange;
    	      this.eapFastEapGtcPwdChangeRetries = defaults.eapFastEapGtcPwdChangeRetries;
    	      this.eapFastEapMsChapV2 = defaults.eapFastEapMsChapV2;
    	      this.eapFastEapMsChapV2PwdChange = defaults.eapFastEapMsChapV2PwdChange;
    	      this.eapFastEapMsChapV2PwdChangeRetries = defaults.eapFastEapMsChapV2PwdChangeRetries;
    	      this.eapFastEapTls = defaults.eapFastEapTls;
    	      this.eapFastEapTlsAuthOfExpiredCerts = defaults.eapFastEapTlsAuthOfExpiredCerts;
    	      this.eapFastEnableEapChaining = defaults.eapFastEnableEapChaining;
    	      this.eapFastPacsAllowAnonymousProvisioning = defaults.eapFastPacsAllowAnonymousProvisioning;
    	      this.eapFastPacsAllowAuthenticatedProvisioning = defaults.eapFastPacsAllowAuthenticatedProvisioning;
    	      this.eapFastPacsAllowClientCert = defaults.eapFastPacsAllowClientCert;
    	      this.eapFastPacsAllowMachineAuthentication = defaults.eapFastPacsAllowMachineAuthentication;
    	      this.eapFastPacsAuthorizationPacTtl = defaults.eapFastPacsAuthorizationPacTtl;
    	      this.eapFastPacsAuthorizationPacTtlUnit = defaults.eapFastPacsAuthorizationPacTtlUnit;
    	      this.eapFastPacsMachinePacTtl = defaults.eapFastPacsMachinePacTtl;
    	      this.eapFastPacsMachinePacTtlUnit = defaults.eapFastPacsMachinePacTtlUnit;
    	      this.eapFastPacsServerReturns = defaults.eapFastPacsServerReturns;
    	      this.eapFastPacsStatelessSessionResume = defaults.eapFastPacsStatelessSessionResume;
    	      this.eapFastPacsTunnelPacTtl = defaults.eapFastPacsTunnelPacTtl;
    	      this.eapFastPacsTunnelPacTtlUnit = defaults.eapFastPacsTunnelPacTtlUnit;
    	      this.eapFastPacsUseProactivePacUpdatePercentage = defaults.eapFastPacsUseProactivePacUpdatePercentage;
    	      this.eapFastUsePacs = defaults.eapFastUsePacs;
    	      this.eapTlsAllowAuthOfExpiredCerts = defaults.eapTlsAllowAuthOfExpiredCerts;
    	      this.eapTlsEnableStatelessSessionResume = defaults.eapTlsEnableStatelessSessionResume;
    	      this.eapTlsLBit = defaults.eapTlsLBit;
    	      this.eapTlsSessionTicketPercentage = defaults.eapTlsSessionTicketPercentage;
    	      this.eapTlsSessionTicketTtl = defaults.eapTlsSessionTicketTtl;
    	      this.eapTlsSessionTicketTtlUnit = defaults.eapTlsSessionTicketTtlUnit;
    	      this.eapTtlsChap = defaults.eapTtlsChap;
    	      this.eapTtlsEapMd5 = defaults.eapTtlsEapMd5;
    	      this.eapTtlsEapMsChapV2 = defaults.eapTtlsEapMsChapV2;
    	      this.eapTtlsEapMsChapV2PwdChange = defaults.eapTtlsEapMsChapV2PwdChange;
    	      this.eapTtlsEapMsChapV2PwdChangeRetries = defaults.eapTtlsEapMsChapV2PwdChangeRetries;
    	      this.eapTtlsMsChapV1 = defaults.eapTtlsMsChapV1;
    	      this.eapTtlsMsChapV2 = defaults.eapTtlsMsChapV2;
    	      this.eapTtlsPapAscii = defaults.eapTtlsPapAscii;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.peapAllowPeapEapGtc = defaults.peapAllowPeapEapGtc;
    	      this.peapAllowPeapEapGtcPwdChange = defaults.peapAllowPeapEapGtcPwdChange;
    	      this.peapAllowPeapEapGtcPwdChangeRetries = defaults.peapAllowPeapEapGtcPwdChangeRetries;
    	      this.peapAllowPeapEapMsChapV2 = defaults.peapAllowPeapEapMsChapV2;
    	      this.peapAllowPeapEapMsChapV2PwdChange = defaults.peapAllowPeapEapMsChapV2PwdChange;
    	      this.peapAllowPeapEapMsChapV2PwdChangeRetries = defaults.peapAllowPeapEapMsChapV2PwdChangeRetries;
    	      this.peapAllowPeapEapTls = defaults.peapAllowPeapEapTls;
    	      this.peapAllowPeapEapTlsAuthOfExpiredCerts = defaults.peapAllowPeapEapTlsAuthOfExpiredCerts;
    	      this.peapPeapV0 = defaults.peapPeapV0;
    	      this.preferredEapProtocol = defaults.preferredEapProtocol;
    	      this.processHostLookup = defaults.processHostLookup;
    	      this.requireCryptobinding = defaults.requireCryptobinding;
    	      this.requireMessageAuth = defaults.requireMessageAuth;
    	      this.teapDowngradeMsk = defaults.teapDowngradeMsk;
    	      this.teapEapAcceptClientCertDuringTunnelEst = defaults.teapEapAcceptClientCertDuringTunnelEst;
    	      this.teapEapChaining = defaults.teapEapChaining;
    	      this.teapEapMsChapV2 = defaults.teapEapMsChapV2;
    	      this.teapEapMsChapV2PwdChange = defaults.teapEapMsChapV2PwdChange;
    	      this.teapEapMsChapV2PwdChangeRetries = defaults.teapEapMsChapV2PwdChangeRetries;
    	      this.teapEapTls = defaults.teapEapTls;
    	      this.teapEapTlsAuthOfExpiredCerts = defaults.teapEapTlsAuthOfExpiredCerts;
    	      this.teapRequestBasicPwdAuth = defaults.teapRequestBasicPwdAuth;
        }

        @CustomType.Setter
        public Builder allow5g(Boolean allow5g) {
            if (allow5g == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allow5g");
            }
            this.allow5g = allow5g;
            return this;
        }
        @CustomType.Setter
        public Builder allowChap(Boolean allowChap) {
            if (allowChap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowChap");
            }
            this.allowChap = allowChap;
            return this;
        }
        @CustomType.Setter
        public Builder allowEapFast(Boolean allowEapFast) {
            if (allowEapFast == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowEapFast");
            }
            this.allowEapFast = allowEapFast;
            return this;
        }
        @CustomType.Setter
        public Builder allowEapMd5(Boolean allowEapMd5) {
            if (allowEapMd5 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowEapMd5");
            }
            this.allowEapMd5 = allowEapMd5;
            return this;
        }
        @CustomType.Setter
        public Builder allowEapTls(Boolean allowEapTls) {
            if (allowEapTls == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowEapTls");
            }
            this.allowEapTls = allowEapTls;
            return this;
        }
        @CustomType.Setter
        public Builder allowEapTtls(Boolean allowEapTtls) {
            if (allowEapTtls == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowEapTtls");
            }
            this.allowEapTtls = allowEapTtls;
            return this;
        }
        @CustomType.Setter
        public Builder allowLeap(Boolean allowLeap) {
            if (allowLeap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowLeap");
            }
            this.allowLeap = allowLeap;
            return this;
        }
        @CustomType.Setter
        public Builder allowMsChapV1(Boolean allowMsChapV1) {
            if (allowMsChapV1 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowMsChapV1");
            }
            this.allowMsChapV1 = allowMsChapV1;
            return this;
        }
        @CustomType.Setter
        public Builder allowMsChapV2(Boolean allowMsChapV2) {
            if (allowMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowMsChapV2");
            }
            this.allowMsChapV2 = allowMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder allowPapAscii(Boolean allowPapAscii) {
            if (allowPapAscii == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowPapAscii");
            }
            this.allowPapAscii = allowPapAscii;
            return this;
        }
        @CustomType.Setter
        public Builder allowPeap(Boolean allowPeap) {
            if (allowPeap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowPeap");
            }
            this.allowPeap = allowPeap;
            return this;
        }
        @CustomType.Setter
        public Builder allowPreferredEapProtocol(Boolean allowPreferredEapProtocol) {
            if (allowPreferredEapProtocol == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowPreferredEapProtocol");
            }
            this.allowPreferredEapProtocol = allowPreferredEapProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder allowTeap(Boolean allowTeap) {
            if (allowTeap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowTeap");
            }
            this.allowTeap = allowTeap;
            return this;
        }
        @CustomType.Setter
        public Builder allowWeakCiphersForEap(Boolean allowWeakCiphersForEap) {
            if (allowWeakCiphersForEap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "allowWeakCiphersForEap");
            }
            this.allowWeakCiphersForEap = allowWeakCiphersForEap;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastAcceptClientCert(Boolean eapFastAcceptClientCert) {
            if (eapFastAcceptClientCert == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastAcceptClientCert");
            }
            this.eapFastAcceptClientCert = eapFastAcceptClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastAllowMachineAuthentication(Boolean eapFastAllowMachineAuthentication) {
            if (eapFastAllowMachineAuthentication == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastAllowMachineAuthentication");
            }
            this.eapFastAllowMachineAuthentication = eapFastAllowMachineAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapGtc(Boolean eapFastEapGtc) {
            if (eapFastEapGtc == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapGtc");
            }
            this.eapFastEapGtc = eapFastEapGtc;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapGtcPwdChange(Boolean eapFastEapGtcPwdChange) {
            if (eapFastEapGtcPwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapGtcPwdChange");
            }
            this.eapFastEapGtcPwdChange = eapFastEapGtcPwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapGtcPwdChangeRetries(Integer eapFastEapGtcPwdChangeRetries) {
            if (eapFastEapGtcPwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapGtcPwdChangeRetries");
            }
            this.eapFastEapGtcPwdChangeRetries = eapFastEapGtcPwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapMsChapV2(Boolean eapFastEapMsChapV2) {
            if (eapFastEapMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapMsChapV2");
            }
            this.eapFastEapMsChapV2 = eapFastEapMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapMsChapV2PwdChange(Boolean eapFastEapMsChapV2PwdChange) {
            if (eapFastEapMsChapV2PwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapMsChapV2PwdChange");
            }
            this.eapFastEapMsChapV2PwdChange = eapFastEapMsChapV2PwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapMsChapV2PwdChangeRetries(Integer eapFastEapMsChapV2PwdChangeRetries) {
            if (eapFastEapMsChapV2PwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapMsChapV2PwdChangeRetries");
            }
            this.eapFastEapMsChapV2PwdChangeRetries = eapFastEapMsChapV2PwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapTls(Boolean eapFastEapTls) {
            if (eapFastEapTls == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapTls");
            }
            this.eapFastEapTls = eapFastEapTls;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEapTlsAuthOfExpiredCerts(Boolean eapFastEapTlsAuthOfExpiredCerts) {
            if (eapFastEapTlsAuthOfExpiredCerts == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEapTlsAuthOfExpiredCerts");
            }
            this.eapFastEapTlsAuthOfExpiredCerts = eapFastEapTlsAuthOfExpiredCerts;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastEnableEapChaining(Boolean eapFastEnableEapChaining) {
            if (eapFastEnableEapChaining == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastEnableEapChaining");
            }
            this.eapFastEnableEapChaining = eapFastEnableEapChaining;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAllowAnonymousProvisioning(Boolean eapFastPacsAllowAnonymousProvisioning) {
            if (eapFastPacsAllowAnonymousProvisioning == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAllowAnonymousProvisioning");
            }
            this.eapFastPacsAllowAnonymousProvisioning = eapFastPacsAllowAnonymousProvisioning;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAllowAuthenticatedProvisioning(Boolean eapFastPacsAllowAuthenticatedProvisioning) {
            if (eapFastPacsAllowAuthenticatedProvisioning == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAllowAuthenticatedProvisioning");
            }
            this.eapFastPacsAllowAuthenticatedProvisioning = eapFastPacsAllowAuthenticatedProvisioning;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAllowClientCert(Boolean eapFastPacsAllowClientCert) {
            if (eapFastPacsAllowClientCert == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAllowClientCert");
            }
            this.eapFastPacsAllowClientCert = eapFastPacsAllowClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAllowMachineAuthentication(Boolean eapFastPacsAllowMachineAuthentication) {
            if (eapFastPacsAllowMachineAuthentication == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAllowMachineAuthentication");
            }
            this.eapFastPacsAllowMachineAuthentication = eapFastPacsAllowMachineAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAuthorizationPacTtl(Integer eapFastPacsAuthorizationPacTtl) {
            if (eapFastPacsAuthorizationPacTtl == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAuthorizationPacTtl");
            }
            this.eapFastPacsAuthorizationPacTtl = eapFastPacsAuthorizationPacTtl;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsAuthorizationPacTtlUnit(String eapFastPacsAuthorizationPacTtlUnit) {
            if (eapFastPacsAuthorizationPacTtlUnit == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsAuthorizationPacTtlUnit");
            }
            this.eapFastPacsAuthorizationPacTtlUnit = eapFastPacsAuthorizationPacTtlUnit;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsMachinePacTtl(Integer eapFastPacsMachinePacTtl) {
            if (eapFastPacsMachinePacTtl == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsMachinePacTtl");
            }
            this.eapFastPacsMachinePacTtl = eapFastPacsMachinePacTtl;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsMachinePacTtlUnit(String eapFastPacsMachinePacTtlUnit) {
            if (eapFastPacsMachinePacTtlUnit == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsMachinePacTtlUnit");
            }
            this.eapFastPacsMachinePacTtlUnit = eapFastPacsMachinePacTtlUnit;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsServerReturns(Boolean eapFastPacsServerReturns) {
            if (eapFastPacsServerReturns == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsServerReturns");
            }
            this.eapFastPacsServerReturns = eapFastPacsServerReturns;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsStatelessSessionResume(Boolean eapFastPacsStatelessSessionResume) {
            if (eapFastPacsStatelessSessionResume == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsStatelessSessionResume");
            }
            this.eapFastPacsStatelessSessionResume = eapFastPacsStatelessSessionResume;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsTunnelPacTtl(Integer eapFastPacsTunnelPacTtl) {
            if (eapFastPacsTunnelPacTtl == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsTunnelPacTtl");
            }
            this.eapFastPacsTunnelPacTtl = eapFastPacsTunnelPacTtl;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsTunnelPacTtlUnit(String eapFastPacsTunnelPacTtlUnit) {
            if (eapFastPacsTunnelPacTtlUnit == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsTunnelPacTtlUnit");
            }
            this.eapFastPacsTunnelPacTtlUnit = eapFastPacsTunnelPacTtlUnit;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastPacsUseProactivePacUpdatePercentage(Integer eapFastPacsUseProactivePacUpdatePercentage) {
            if (eapFastPacsUseProactivePacUpdatePercentage == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastPacsUseProactivePacUpdatePercentage");
            }
            this.eapFastPacsUseProactivePacUpdatePercentage = eapFastPacsUseProactivePacUpdatePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder eapFastUsePacs(Boolean eapFastUsePacs) {
            if (eapFastUsePacs == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapFastUsePacs");
            }
            this.eapFastUsePacs = eapFastUsePacs;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsAllowAuthOfExpiredCerts(Boolean eapTlsAllowAuthOfExpiredCerts) {
            if (eapTlsAllowAuthOfExpiredCerts == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsAllowAuthOfExpiredCerts");
            }
            this.eapTlsAllowAuthOfExpiredCerts = eapTlsAllowAuthOfExpiredCerts;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsEnableStatelessSessionResume(Boolean eapTlsEnableStatelessSessionResume) {
            if (eapTlsEnableStatelessSessionResume == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsEnableStatelessSessionResume");
            }
            this.eapTlsEnableStatelessSessionResume = eapTlsEnableStatelessSessionResume;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsLBit(Boolean eapTlsLBit) {
            if (eapTlsLBit == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsLBit");
            }
            this.eapTlsLBit = eapTlsLBit;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsSessionTicketPercentage(Integer eapTlsSessionTicketPercentage) {
            if (eapTlsSessionTicketPercentage == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsSessionTicketPercentage");
            }
            this.eapTlsSessionTicketPercentage = eapTlsSessionTicketPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsSessionTicketTtl(Integer eapTlsSessionTicketTtl) {
            if (eapTlsSessionTicketTtl == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsSessionTicketTtl");
            }
            this.eapTlsSessionTicketTtl = eapTlsSessionTicketTtl;
            return this;
        }
        @CustomType.Setter
        public Builder eapTlsSessionTicketTtlUnit(String eapTlsSessionTicketTtlUnit) {
            if (eapTlsSessionTicketTtlUnit == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTlsSessionTicketTtlUnit");
            }
            this.eapTlsSessionTicketTtlUnit = eapTlsSessionTicketTtlUnit;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsChap(Boolean eapTtlsChap) {
            if (eapTtlsChap == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsChap");
            }
            this.eapTtlsChap = eapTtlsChap;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsEapMd5(Boolean eapTtlsEapMd5) {
            if (eapTtlsEapMd5 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsEapMd5");
            }
            this.eapTtlsEapMd5 = eapTtlsEapMd5;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsEapMsChapV2(Boolean eapTtlsEapMsChapV2) {
            if (eapTtlsEapMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsEapMsChapV2");
            }
            this.eapTtlsEapMsChapV2 = eapTtlsEapMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsEapMsChapV2PwdChange(Boolean eapTtlsEapMsChapV2PwdChange) {
            if (eapTtlsEapMsChapV2PwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsEapMsChapV2PwdChange");
            }
            this.eapTtlsEapMsChapV2PwdChange = eapTtlsEapMsChapV2PwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsEapMsChapV2PwdChangeRetries(Integer eapTtlsEapMsChapV2PwdChangeRetries) {
            if (eapTtlsEapMsChapV2PwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsEapMsChapV2PwdChangeRetries");
            }
            this.eapTtlsEapMsChapV2PwdChangeRetries = eapTtlsEapMsChapV2PwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsMsChapV1(Boolean eapTtlsMsChapV1) {
            if (eapTtlsMsChapV1 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsMsChapV1");
            }
            this.eapTtlsMsChapV1 = eapTtlsMsChapV1;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsMsChapV2(Boolean eapTtlsMsChapV2) {
            if (eapTtlsMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsMsChapV2");
            }
            this.eapTtlsMsChapV2 = eapTtlsMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder eapTtlsPapAscii(Boolean eapTtlsPapAscii) {
            if (eapTtlsPapAscii == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "eapTtlsPapAscii");
            }
            this.eapTtlsPapAscii = eapTtlsPapAscii;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapGtc(Boolean peapAllowPeapEapGtc) {
            if (peapAllowPeapEapGtc == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapGtc");
            }
            this.peapAllowPeapEapGtc = peapAllowPeapEapGtc;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapGtcPwdChange(Boolean peapAllowPeapEapGtcPwdChange) {
            if (peapAllowPeapEapGtcPwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapGtcPwdChange");
            }
            this.peapAllowPeapEapGtcPwdChange = peapAllowPeapEapGtcPwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapGtcPwdChangeRetries(Integer peapAllowPeapEapGtcPwdChangeRetries) {
            if (peapAllowPeapEapGtcPwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapGtcPwdChangeRetries");
            }
            this.peapAllowPeapEapGtcPwdChangeRetries = peapAllowPeapEapGtcPwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapMsChapV2(Boolean peapAllowPeapEapMsChapV2) {
            if (peapAllowPeapEapMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapMsChapV2");
            }
            this.peapAllowPeapEapMsChapV2 = peapAllowPeapEapMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapMsChapV2PwdChange(Boolean peapAllowPeapEapMsChapV2PwdChange) {
            if (peapAllowPeapEapMsChapV2PwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapMsChapV2PwdChange");
            }
            this.peapAllowPeapEapMsChapV2PwdChange = peapAllowPeapEapMsChapV2PwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapMsChapV2PwdChangeRetries(Integer peapAllowPeapEapMsChapV2PwdChangeRetries) {
            if (peapAllowPeapEapMsChapV2PwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapMsChapV2PwdChangeRetries");
            }
            this.peapAllowPeapEapMsChapV2PwdChangeRetries = peapAllowPeapEapMsChapV2PwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapTls(Boolean peapAllowPeapEapTls) {
            if (peapAllowPeapEapTls == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapTls");
            }
            this.peapAllowPeapEapTls = peapAllowPeapEapTls;
            return this;
        }
        @CustomType.Setter
        public Builder peapAllowPeapEapTlsAuthOfExpiredCerts(Boolean peapAllowPeapEapTlsAuthOfExpiredCerts) {
            if (peapAllowPeapEapTlsAuthOfExpiredCerts == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapAllowPeapEapTlsAuthOfExpiredCerts");
            }
            this.peapAllowPeapEapTlsAuthOfExpiredCerts = peapAllowPeapEapTlsAuthOfExpiredCerts;
            return this;
        }
        @CustomType.Setter
        public Builder peapPeapV0(Boolean peapPeapV0) {
            if (peapPeapV0 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "peapPeapV0");
            }
            this.peapPeapV0 = peapPeapV0;
            return this;
        }
        @CustomType.Setter
        public Builder preferredEapProtocol(String preferredEapProtocol) {
            if (preferredEapProtocol == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "preferredEapProtocol");
            }
            this.preferredEapProtocol = preferredEapProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder processHostLookup(Boolean processHostLookup) {
            if (processHostLookup == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "processHostLookup");
            }
            this.processHostLookup = processHostLookup;
            return this;
        }
        @CustomType.Setter
        public Builder requireCryptobinding(Boolean requireCryptobinding) {
            if (requireCryptobinding == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "requireCryptobinding");
            }
            this.requireCryptobinding = requireCryptobinding;
            return this;
        }
        @CustomType.Setter
        public Builder requireMessageAuth(Boolean requireMessageAuth) {
            if (requireMessageAuth == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "requireMessageAuth");
            }
            this.requireMessageAuth = requireMessageAuth;
            return this;
        }
        @CustomType.Setter
        public Builder teapDowngradeMsk(Boolean teapDowngradeMsk) {
            if (teapDowngradeMsk == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapDowngradeMsk");
            }
            this.teapDowngradeMsk = teapDowngradeMsk;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapAcceptClientCertDuringTunnelEst(Boolean teapEapAcceptClientCertDuringTunnelEst) {
            if (teapEapAcceptClientCertDuringTunnelEst == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapAcceptClientCertDuringTunnelEst");
            }
            this.teapEapAcceptClientCertDuringTunnelEst = teapEapAcceptClientCertDuringTunnelEst;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapChaining(Boolean teapEapChaining) {
            if (teapEapChaining == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapChaining");
            }
            this.teapEapChaining = teapEapChaining;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapMsChapV2(Boolean teapEapMsChapV2) {
            if (teapEapMsChapV2 == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapMsChapV2");
            }
            this.teapEapMsChapV2 = teapEapMsChapV2;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapMsChapV2PwdChange(Boolean teapEapMsChapV2PwdChange) {
            if (teapEapMsChapV2PwdChange == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapMsChapV2PwdChange");
            }
            this.teapEapMsChapV2PwdChange = teapEapMsChapV2PwdChange;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapMsChapV2PwdChangeRetries(Integer teapEapMsChapV2PwdChangeRetries) {
            if (teapEapMsChapV2PwdChangeRetries == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapMsChapV2PwdChangeRetries");
            }
            this.teapEapMsChapV2PwdChangeRetries = teapEapMsChapV2PwdChangeRetries;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapTls(Boolean teapEapTls) {
            if (teapEapTls == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapTls");
            }
            this.teapEapTls = teapEapTls;
            return this;
        }
        @CustomType.Setter
        public Builder teapEapTlsAuthOfExpiredCerts(Boolean teapEapTlsAuthOfExpiredCerts) {
            if (teapEapTlsAuthOfExpiredCerts == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapEapTlsAuthOfExpiredCerts");
            }
            this.teapEapTlsAuthOfExpiredCerts = teapEapTlsAuthOfExpiredCerts;
            return this;
        }
        @CustomType.Setter
        public Builder teapRequestBasicPwdAuth(Boolean teapRequestBasicPwdAuth) {
            if (teapRequestBasicPwdAuth == null) {
              throw new MissingRequiredPropertyException("GetAllowedProtocolsResult", "teapRequestBasicPwdAuth");
            }
            this.teapRequestBasicPwdAuth = teapRequestBasicPwdAuth;
            return this;
        }
        public GetAllowedProtocolsResult build() {
            final var _resultValue = new GetAllowedProtocolsResult();
            _resultValue.allow5g = allow5g;
            _resultValue.allowChap = allowChap;
            _resultValue.allowEapFast = allowEapFast;
            _resultValue.allowEapMd5 = allowEapMd5;
            _resultValue.allowEapTls = allowEapTls;
            _resultValue.allowEapTtls = allowEapTtls;
            _resultValue.allowLeap = allowLeap;
            _resultValue.allowMsChapV1 = allowMsChapV1;
            _resultValue.allowMsChapV2 = allowMsChapV2;
            _resultValue.allowPapAscii = allowPapAscii;
            _resultValue.allowPeap = allowPeap;
            _resultValue.allowPreferredEapProtocol = allowPreferredEapProtocol;
            _resultValue.allowTeap = allowTeap;
            _resultValue.allowWeakCiphersForEap = allowWeakCiphersForEap;
            _resultValue.description = description;
            _resultValue.eapFastAcceptClientCert = eapFastAcceptClientCert;
            _resultValue.eapFastAllowMachineAuthentication = eapFastAllowMachineAuthentication;
            _resultValue.eapFastEapGtc = eapFastEapGtc;
            _resultValue.eapFastEapGtcPwdChange = eapFastEapGtcPwdChange;
            _resultValue.eapFastEapGtcPwdChangeRetries = eapFastEapGtcPwdChangeRetries;
            _resultValue.eapFastEapMsChapV2 = eapFastEapMsChapV2;
            _resultValue.eapFastEapMsChapV2PwdChange = eapFastEapMsChapV2PwdChange;
            _resultValue.eapFastEapMsChapV2PwdChangeRetries = eapFastEapMsChapV2PwdChangeRetries;
            _resultValue.eapFastEapTls = eapFastEapTls;
            _resultValue.eapFastEapTlsAuthOfExpiredCerts = eapFastEapTlsAuthOfExpiredCerts;
            _resultValue.eapFastEnableEapChaining = eapFastEnableEapChaining;
            _resultValue.eapFastPacsAllowAnonymousProvisioning = eapFastPacsAllowAnonymousProvisioning;
            _resultValue.eapFastPacsAllowAuthenticatedProvisioning = eapFastPacsAllowAuthenticatedProvisioning;
            _resultValue.eapFastPacsAllowClientCert = eapFastPacsAllowClientCert;
            _resultValue.eapFastPacsAllowMachineAuthentication = eapFastPacsAllowMachineAuthentication;
            _resultValue.eapFastPacsAuthorizationPacTtl = eapFastPacsAuthorizationPacTtl;
            _resultValue.eapFastPacsAuthorizationPacTtlUnit = eapFastPacsAuthorizationPacTtlUnit;
            _resultValue.eapFastPacsMachinePacTtl = eapFastPacsMachinePacTtl;
            _resultValue.eapFastPacsMachinePacTtlUnit = eapFastPacsMachinePacTtlUnit;
            _resultValue.eapFastPacsServerReturns = eapFastPacsServerReturns;
            _resultValue.eapFastPacsStatelessSessionResume = eapFastPacsStatelessSessionResume;
            _resultValue.eapFastPacsTunnelPacTtl = eapFastPacsTunnelPacTtl;
            _resultValue.eapFastPacsTunnelPacTtlUnit = eapFastPacsTunnelPacTtlUnit;
            _resultValue.eapFastPacsUseProactivePacUpdatePercentage = eapFastPacsUseProactivePacUpdatePercentage;
            _resultValue.eapFastUsePacs = eapFastUsePacs;
            _resultValue.eapTlsAllowAuthOfExpiredCerts = eapTlsAllowAuthOfExpiredCerts;
            _resultValue.eapTlsEnableStatelessSessionResume = eapTlsEnableStatelessSessionResume;
            _resultValue.eapTlsLBit = eapTlsLBit;
            _resultValue.eapTlsSessionTicketPercentage = eapTlsSessionTicketPercentage;
            _resultValue.eapTlsSessionTicketTtl = eapTlsSessionTicketTtl;
            _resultValue.eapTlsSessionTicketTtlUnit = eapTlsSessionTicketTtlUnit;
            _resultValue.eapTtlsChap = eapTtlsChap;
            _resultValue.eapTtlsEapMd5 = eapTtlsEapMd5;
            _resultValue.eapTtlsEapMsChapV2 = eapTtlsEapMsChapV2;
            _resultValue.eapTtlsEapMsChapV2PwdChange = eapTtlsEapMsChapV2PwdChange;
            _resultValue.eapTtlsEapMsChapV2PwdChangeRetries = eapTtlsEapMsChapV2PwdChangeRetries;
            _resultValue.eapTtlsMsChapV1 = eapTtlsMsChapV1;
            _resultValue.eapTtlsMsChapV2 = eapTtlsMsChapV2;
            _resultValue.eapTtlsPapAscii = eapTtlsPapAscii;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.peapAllowPeapEapGtc = peapAllowPeapEapGtc;
            _resultValue.peapAllowPeapEapGtcPwdChange = peapAllowPeapEapGtcPwdChange;
            _resultValue.peapAllowPeapEapGtcPwdChangeRetries = peapAllowPeapEapGtcPwdChangeRetries;
            _resultValue.peapAllowPeapEapMsChapV2 = peapAllowPeapEapMsChapV2;
            _resultValue.peapAllowPeapEapMsChapV2PwdChange = peapAllowPeapEapMsChapV2PwdChange;
            _resultValue.peapAllowPeapEapMsChapV2PwdChangeRetries = peapAllowPeapEapMsChapV2PwdChangeRetries;
            _resultValue.peapAllowPeapEapTls = peapAllowPeapEapTls;
            _resultValue.peapAllowPeapEapTlsAuthOfExpiredCerts = peapAllowPeapEapTlsAuthOfExpiredCerts;
            _resultValue.peapPeapV0 = peapPeapV0;
            _resultValue.preferredEapProtocol = preferredEapProtocol;
            _resultValue.processHostLookup = processHostLookup;
            _resultValue.requireCryptobinding = requireCryptobinding;
            _resultValue.requireMessageAuth = requireMessageAuth;
            _resultValue.teapDowngradeMsk = teapDowngradeMsk;
            _resultValue.teapEapAcceptClientCertDuringTunnelEst = teapEapAcceptClientCertDuringTunnelEst;
            _resultValue.teapEapChaining = teapEapChaining;
            _resultValue.teapEapMsChapV2 = teapEapMsChapV2;
            _resultValue.teapEapMsChapV2PwdChange = teapEapMsChapV2PwdChange;
            _resultValue.teapEapMsChapV2PwdChangeRetries = teapEapMsChapV2PwdChangeRetries;
            _resultValue.teapEapTls = teapEapTls;
            _resultValue.teapEapTlsAuthOfExpiredCerts = teapEapTlsAuthOfExpiredCerts;
            _resultValue.teapRequestBasicPwdAuth = teapRequestBasicPwdAuth;
            return _resultValue;
        }
    }
}
