// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectoryjoin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type string `pulumi:"type"`
}

// PointAttributeInput is an input type that accepts PointAttributeArgs and PointAttributeOutput values.
// You can construct a concrete instance of `PointAttributeInput` via:
//
//	PointAttributeArgs{...}
type PointAttributeInput interface {
	pulumi.Input

	ToPointAttributeOutput() PointAttributeOutput
	ToPointAttributeOutputWithContext(context.Context) PointAttributeOutput
}

type PointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type pulumi.StringInput `pulumi:"type"`
}

func (PointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PointAttribute)(nil)).Elem()
}

func (i PointAttributeArgs) ToPointAttributeOutput() PointAttributeOutput {
	return i.ToPointAttributeOutputWithContext(context.Background())
}

func (i PointAttributeArgs) ToPointAttributeOutputWithContext(ctx context.Context) PointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointAttributeOutput)
}

// PointAttributeArrayInput is an input type that accepts PointAttributeArray and PointAttributeArrayOutput values.
// You can construct a concrete instance of `PointAttributeArrayInput` via:
//
//	PointAttributeArray{ PointAttributeArgs{...} }
type PointAttributeArrayInput interface {
	pulumi.Input

	ToPointAttributeArrayOutput() PointAttributeArrayOutput
	ToPointAttributeArrayOutputWithContext(context.Context) PointAttributeArrayOutput
}

type PointAttributeArray []PointAttributeInput

func (PointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointAttribute)(nil)).Elem()
}

func (i PointAttributeArray) ToPointAttributeArrayOutput() PointAttributeArrayOutput {
	return i.ToPointAttributeArrayOutputWithContext(context.Background())
}

func (i PointAttributeArray) ToPointAttributeArrayOutputWithContext(ctx context.Context) PointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointAttributeArrayOutput)
}

type PointAttributeOutput struct{ *pulumi.OutputState }

func (PointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PointAttribute)(nil)).Elem()
}

func (o PointAttributeOutput) ToPointAttributeOutput() PointAttributeOutput {
	return o
}

func (o PointAttributeOutput) ToPointAttributeOutputWithContext(ctx context.Context) PointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o PointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v PointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o PointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v PointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o PointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
func (o PointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type PointAttributeArrayOutput struct{ *pulumi.OutputState }

func (PointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointAttribute)(nil)).Elem()
}

func (o PointAttributeArrayOutput) ToPointAttributeArrayOutput() PointAttributeArrayOutput {
	return o
}

func (o PointAttributeArrayOutput) ToPointAttributeArrayOutputWithContext(ctx context.Context) PointAttributeArrayOutput {
	return o
}

func (o PointAttributeArrayOutput) Index(i pulumi.IntInput) PointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PointAttribute {
		return vs[0].([]PointAttribute)[vs[1].(int)]
	}).(PointAttributeOutput)
}

type PointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// PointGroupInput is an input type that accepts PointGroupArgs and PointGroupOutput values.
// You can construct a concrete instance of `PointGroupInput` via:
//
//	PointGroupArgs{...}
type PointGroupInput interface {
	pulumi.Input

	ToPointGroupOutput() PointGroupOutput
	ToPointGroupOutputWithContext(context.Context) PointGroupOutput
}

type PointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PointGroup)(nil)).Elem()
}

func (i PointGroupArgs) ToPointGroupOutput() PointGroupOutput {
	return i.ToPointGroupOutputWithContext(context.Background())
}

func (i PointGroupArgs) ToPointGroupOutputWithContext(ctx context.Context) PointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointGroupOutput)
}

// PointGroupArrayInput is an input type that accepts PointGroupArray and PointGroupArrayOutput values.
// You can construct a concrete instance of `PointGroupArrayInput` via:
//
//	PointGroupArray{ PointGroupArgs{...} }
type PointGroupArrayInput interface {
	pulumi.Input

	ToPointGroupArrayOutput() PointGroupArrayOutput
	ToPointGroupArrayOutputWithContext(context.Context) PointGroupArrayOutput
}

type PointGroupArray []PointGroupInput

func (PointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointGroup)(nil)).Elem()
}

func (i PointGroupArray) ToPointGroupArrayOutput() PointGroupArrayOutput {
	return i.ToPointGroupArrayOutputWithContext(context.Background())
}

func (i PointGroupArray) ToPointGroupArrayOutputWithContext(ctx context.Context) PointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointGroupArrayOutput)
}

type PointGroupOutput struct{ *pulumi.OutputState }

func (PointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PointGroup)(nil)).Elem()
}

func (o PointGroupOutput) ToPointGroupOutput() PointGroupOutput {
	return o
}

func (o PointGroupOutput) ToPointGroupOutputWithContext(ctx context.Context) PointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o PointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o PointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v PointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o PointGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PointGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PointGroupArrayOutput struct{ *pulumi.OutputState }

func (PointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointGroup)(nil)).Elem()
}

func (o PointGroupArrayOutput) ToPointGroupArrayOutput() PointGroupArrayOutput {
	return o
}

func (o PointGroupArrayOutput) ToPointGroupArrayOutputWithContext(ctx context.Context) PointGroupArrayOutput {
	return o
}

func (o PointGroupArrayOutput) Index(i pulumi.IntInput) PointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PointGroup {
		return vs[0].([]PointGroup)[vs[1].(int)]
	}).(PointGroupOutput)
}

type PointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// PointRewriteRuleInput is an input type that accepts PointRewriteRuleArgs and PointRewriteRuleOutput values.
// You can construct a concrete instance of `PointRewriteRuleInput` via:
//
//	PointRewriteRuleArgs{...}
type PointRewriteRuleInput interface {
	pulumi.Input

	ToPointRewriteRuleOutput() PointRewriteRuleOutput
	ToPointRewriteRuleOutputWithContext(context.Context) PointRewriteRuleOutput
}

type PointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (PointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PointRewriteRule)(nil)).Elem()
}

func (i PointRewriteRuleArgs) ToPointRewriteRuleOutput() PointRewriteRuleOutput {
	return i.ToPointRewriteRuleOutputWithContext(context.Background())
}

func (i PointRewriteRuleArgs) ToPointRewriteRuleOutputWithContext(ctx context.Context) PointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointRewriteRuleOutput)
}

// PointRewriteRuleArrayInput is an input type that accepts PointRewriteRuleArray and PointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `PointRewriteRuleArrayInput` via:
//
//	PointRewriteRuleArray{ PointRewriteRuleArgs{...} }
type PointRewriteRuleArrayInput interface {
	pulumi.Input

	ToPointRewriteRuleArrayOutput() PointRewriteRuleArrayOutput
	ToPointRewriteRuleArrayOutputWithContext(context.Context) PointRewriteRuleArrayOutput
}

type PointRewriteRuleArray []PointRewriteRuleInput

func (PointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointRewriteRule)(nil)).Elem()
}

func (i PointRewriteRuleArray) ToPointRewriteRuleArrayOutput() PointRewriteRuleArrayOutput {
	return i.ToPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i PointRewriteRuleArray) ToPointRewriteRuleArrayOutputWithContext(ctx context.Context) PointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PointRewriteRuleArrayOutput)
}

type PointRewriteRuleOutput struct{ *pulumi.OutputState }

func (PointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PointRewriteRule)(nil)).Elem()
}

func (o PointRewriteRuleOutput) ToPointRewriteRuleOutput() PointRewriteRuleOutput {
	return o
}

func (o PointRewriteRuleOutput) ToPointRewriteRuleOutputWithContext(ctx context.Context) PointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o PointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v PointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o PointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v PointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o PointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v PointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type PointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (PointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PointRewriteRule)(nil)).Elem()
}

func (o PointRewriteRuleArrayOutput) ToPointRewriteRuleArrayOutput() PointRewriteRuleArrayOutput {
	return o
}

func (o PointRewriteRuleArrayOutput) ToPointRewriteRuleArrayOutputWithContext(ctx context.Context) PointRewriteRuleArrayOutput {
	return o
}

func (o PointRewriteRuleArrayOutput) Index(i pulumi.IntInput) PointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PointRewriteRule {
		return vs[0].([]PointRewriteRule)[vs[1].(int)]
	}).(PointRewriteRuleOutput)
}

type GetPointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	Type string `pulumi:"type"`
}

// GetPointAttributeInput is an input type that accepts GetPointAttributeArgs and GetPointAttributeOutput values.
// You can construct a concrete instance of `GetPointAttributeInput` via:
//
//	GetPointAttributeArgs{...}
type GetPointAttributeInput interface {
	pulumi.Input

	ToGetPointAttributeOutput() GetPointAttributeOutput
	ToGetPointAttributeOutputWithContext(context.Context) GetPointAttributeOutput
}

type GetPointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointAttribute)(nil)).Elem()
}

func (i GetPointAttributeArgs) ToGetPointAttributeOutput() GetPointAttributeOutput {
	return i.ToGetPointAttributeOutputWithContext(context.Background())
}

func (i GetPointAttributeArgs) ToGetPointAttributeOutputWithContext(ctx context.Context) GetPointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointAttributeOutput)
}

// GetPointAttributeArrayInput is an input type that accepts GetPointAttributeArray and GetPointAttributeArrayOutput values.
// You can construct a concrete instance of `GetPointAttributeArrayInput` via:
//
//	GetPointAttributeArray{ GetPointAttributeArgs{...} }
type GetPointAttributeArrayInput interface {
	pulumi.Input

	ToGetPointAttributeArrayOutput() GetPointAttributeArrayOutput
	ToGetPointAttributeArrayOutputWithContext(context.Context) GetPointAttributeArrayOutput
}

type GetPointAttributeArray []GetPointAttributeInput

func (GetPointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointAttribute)(nil)).Elem()
}

func (i GetPointAttributeArray) ToGetPointAttributeArrayOutput() GetPointAttributeArrayOutput {
	return i.ToGetPointAttributeArrayOutputWithContext(context.Background())
}

func (i GetPointAttributeArray) ToGetPointAttributeArrayOutputWithContext(ctx context.Context) GetPointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointAttributeArrayOutput)
}

type GetPointAttributeOutput struct{ *pulumi.OutputState }

func (GetPointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointAttribute)(nil)).Elem()
}

func (o GetPointAttributeOutput) ToGetPointAttributeOutput() GetPointAttributeOutput {
	return o
}

func (o GetPointAttributeOutput) ToGetPointAttributeOutputWithContext(ctx context.Context) GetPointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o GetPointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o GetPointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o GetPointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
func (o GetPointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type GetPointAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetPointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointAttribute)(nil)).Elem()
}

func (o GetPointAttributeArrayOutput) ToGetPointAttributeArrayOutput() GetPointAttributeArrayOutput {
	return o
}

func (o GetPointAttributeArrayOutput) ToGetPointAttributeArrayOutputWithContext(ctx context.Context) GetPointAttributeArrayOutput {
	return o
}

func (o GetPointAttributeArrayOutput) Index(i pulumi.IntInput) GetPointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPointAttribute {
		return vs[0].([]GetPointAttribute)[vs[1].(int)]
	}).(GetPointAttributeOutput)
}

type GetPointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string `pulumi:"sid"`
	Type string `pulumi:"type"`
}

// GetPointGroupInput is an input type that accepts GetPointGroupArgs and GetPointGroupOutput values.
// You can construct a concrete instance of `GetPointGroupInput` via:
//
//	GetPointGroupArgs{...}
type GetPointGroupInput interface {
	pulumi.Input

	ToGetPointGroupOutput() GetPointGroupOutput
	ToGetPointGroupOutputWithContext(context.Context) GetPointGroupOutput
}

type GetPointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput `pulumi:"sid"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointGroup)(nil)).Elem()
}

func (i GetPointGroupArgs) ToGetPointGroupOutput() GetPointGroupOutput {
	return i.ToGetPointGroupOutputWithContext(context.Background())
}

func (i GetPointGroupArgs) ToGetPointGroupOutputWithContext(ctx context.Context) GetPointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointGroupOutput)
}

// GetPointGroupArrayInput is an input type that accepts GetPointGroupArray and GetPointGroupArrayOutput values.
// You can construct a concrete instance of `GetPointGroupArrayInput` via:
//
//	GetPointGroupArray{ GetPointGroupArgs{...} }
type GetPointGroupArrayInput interface {
	pulumi.Input

	ToGetPointGroupArrayOutput() GetPointGroupArrayOutput
	ToGetPointGroupArrayOutputWithContext(context.Context) GetPointGroupArrayOutput
}

type GetPointGroupArray []GetPointGroupInput

func (GetPointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointGroup)(nil)).Elem()
}

func (i GetPointGroupArray) ToGetPointGroupArrayOutput() GetPointGroupArrayOutput {
	return i.ToGetPointGroupArrayOutputWithContext(context.Background())
}

func (i GetPointGroupArray) ToGetPointGroupArrayOutputWithContext(ctx context.Context) GetPointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointGroupArrayOutput)
}

type GetPointGroupOutput struct{ *pulumi.OutputState }

func (GetPointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointGroup)(nil)).Elem()
}

func (o GetPointGroupOutput) ToGetPointGroupOutput() GetPointGroupOutput {
	return o
}

func (o GetPointGroupOutput) ToGetPointGroupOutputWithContext(ctx context.Context) GetPointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o GetPointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o GetPointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o GetPointGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetPointGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointGroup)(nil)).Elem()
}

func (o GetPointGroupArrayOutput) ToGetPointGroupArrayOutput() GetPointGroupArrayOutput {
	return o
}

func (o GetPointGroupArrayOutput) ToGetPointGroupArrayOutputWithContext(ctx context.Context) GetPointGroupArrayOutput {
	return o
}

func (o GetPointGroupArrayOutput) Index(i pulumi.IntInput) GetPointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPointGroup {
		return vs[0].([]GetPointGroup)[vs[1].(int)]
	}).(GetPointGroupOutput)
}

type GetPointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// GetPointRewriteRuleInput is an input type that accepts GetPointRewriteRuleArgs and GetPointRewriteRuleOutput values.
// You can construct a concrete instance of `GetPointRewriteRuleInput` via:
//
//	GetPointRewriteRuleArgs{...}
type GetPointRewriteRuleInput interface {
	pulumi.Input

	ToGetPointRewriteRuleOutput() GetPointRewriteRuleOutput
	ToGetPointRewriteRuleOutputWithContext(context.Context) GetPointRewriteRuleOutput
}

type GetPointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (GetPointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointRewriteRule)(nil)).Elem()
}

func (i GetPointRewriteRuleArgs) ToGetPointRewriteRuleOutput() GetPointRewriteRuleOutput {
	return i.ToGetPointRewriteRuleOutputWithContext(context.Background())
}

func (i GetPointRewriteRuleArgs) ToGetPointRewriteRuleOutputWithContext(ctx context.Context) GetPointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointRewriteRuleOutput)
}

// GetPointRewriteRuleArrayInput is an input type that accepts GetPointRewriteRuleArray and GetPointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `GetPointRewriteRuleArrayInput` via:
//
//	GetPointRewriteRuleArray{ GetPointRewriteRuleArgs{...} }
type GetPointRewriteRuleArrayInput interface {
	pulumi.Input

	ToGetPointRewriteRuleArrayOutput() GetPointRewriteRuleArrayOutput
	ToGetPointRewriteRuleArrayOutputWithContext(context.Context) GetPointRewriteRuleArrayOutput
}

type GetPointRewriteRuleArray []GetPointRewriteRuleInput

func (GetPointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointRewriteRule)(nil)).Elem()
}

func (i GetPointRewriteRuleArray) ToGetPointRewriteRuleArrayOutput() GetPointRewriteRuleArrayOutput {
	return i.ToGetPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i GetPointRewriteRuleArray) ToGetPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetPointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPointRewriteRuleArrayOutput)
}

type GetPointRewriteRuleOutput struct{ *pulumi.OutputState }

func (GetPointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPointRewriteRule)(nil)).Elem()
}

func (o GetPointRewriteRuleOutput) ToGetPointRewriteRuleOutput() GetPointRewriteRuleOutput {
	return o
}

func (o GetPointRewriteRuleOutput) ToGetPointRewriteRuleOutputWithContext(ctx context.Context) GetPointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o GetPointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o GetPointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o GetPointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type GetPointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPointRewriteRule)(nil)).Elem()
}

func (o GetPointRewriteRuleArrayOutput) ToGetPointRewriteRuleArrayOutput() GetPointRewriteRuleArrayOutput {
	return o
}

func (o GetPointRewriteRuleArrayOutput) ToGetPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetPointRewriteRuleArrayOutput {
	return o
}

func (o GetPointRewriteRuleArrayOutput) Index(i pulumi.IntInput) GetPointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPointRewriteRule {
		return vs[0].([]GetPointRewriteRule)[vs[1].(int)]
	}).(GetPointRewriteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PointAttributeInput)(nil)).Elem(), PointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PointAttributeArrayInput)(nil)).Elem(), PointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PointGroupInput)(nil)).Elem(), PointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PointGroupArrayInput)(nil)).Elem(), PointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PointRewriteRuleInput)(nil)).Elem(), PointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PointRewriteRuleArrayInput)(nil)).Elem(), PointRewriteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointAttributeInput)(nil)).Elem(), GetPointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointAttributeArrayInput)(nil)).Elem(), GetPointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointGroupInput)(nil)).Elem(), GetPointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointGroupArrayInput)(nil)).Elem(), GetPointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointRewriteRuleInput)(nil)).Elem(), GetPointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPointRewriteRuleArrayInput)(nil)).Elem(), GetPointRewriteRuleArray{})
	pulumi.RegisterOutputType(PointAttributeOutput{})
	pulumi.RegisterOutputType(PointAttributeArrayOutput{})
	pulumi.RegisterOutputType(PointGroupOutput{})
	pulumi.RegisterOutputType(PointGroupArrayOutput{})
	pulumi.RegisterOutputType(PointRewriteRuleOutput{})
	pulumi.RegisterOutputType(PointRewriteRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPointAttributeOutput{})
	pulumi.RegisterOutputType(GetPointAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetPointGroupOutput{})
	pulumi.RegisterOutputType(GetPointGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPointRewriteRuleOutput{})
	pulumi.RegisterOutputType(GetPointRewriteRuleArrayOutput{})
}
