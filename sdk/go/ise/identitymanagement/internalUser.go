// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitymanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Internal User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/identitymanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identitymanagement.NewInternalUser(ctx, "example", &identitymanagement.InternalUserArgs{
//				Name:                 pulumi.String("UserTF"),
//				Password:             pulumi.String("Cisco123"),
//				ChangePassword:       pulumi.Bool(true),
//				Email:                pulumi.String("aaa@cisco.com"),
//				AccountNameAlias:     pulumi.String("User 1"),
//				EnablePassword:       pulumi.String("Cisco123"),
//				Enabled:              pulumi.Bool(true),
//				PasswordNeverExpires: pulumi.Bool(false),
//				FirstName:            pulumi.String("John"),
//				LastName:             pulumi.String("Doe"),
//				PasswordIdStore:      pulumi.String("Internal Users"),
//				Description:          pulumi.String("My first Terraform user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import ise:identitymanagement/internalUser:InternalUser example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type InternalUser struct {
	pulumi.CustomResourceState

	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias pulumi.StringPtrOutput `pulumi:"accountNameAlias"`
	// Requires the user to change the password
	//   - Default value: `true`
	ChangePassword pulumi.BoolOutput `pulumi:"changePassword"`
	// Key value map
	CustomAttributes pulumi.StringPtrOutput `pulumi:"customAttributes"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Email address
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrOutput `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// First name of the internal user
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrOutput `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// The name of the internal user
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the internal user
	Password pulumi.StringOutput `pulumi:"password"`
	// The ID store where the internal user's password is kept
	//   - Default value: `Internal Users`
	PasswordIdStore pulumi.StringOutput `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	//   - Default value: `false`
	PasswordNeverExpires pulumi.BoolOutput `pulumi:"passwordNeverExpires"`
}

// NewInternalUser registers a new resource with the given unique name, arguments, and options.
func NewInternalUser(ctx *pulumi.Context,
	name string, args *InternalUserArgs, opts ...pulumi.ResourceOption) (*InternalUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternalUser
	err := ctx.RegisterResource("ise:identitymanagement/internalUser:InternalUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternalUser gets an existing InternalUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternalUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternalUserState, opts ...pulumi.ResourceOption) (*InternalUser, error) {
	var resource InternalUser
	err := ctx.ReadResource("ise:identitymanagement/internalUser:InternalUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternalUser resources.
type internalUserState struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias *string `pulumi:"accountNameAlias"`
	// Requires the user to change the password
	//   - Default value: `true`
	ChangePassword *bool `pulumi:"changePassword"`
	// Key value map
	CustomAttributes *string `pulumi:"customAttributes"`
	// Description
	Description *string `pulumi:"description"`
	// Email address
	Email *string `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword *string `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled *bool `pulumi:"enabled"`
	// First name of the internal user
	FirstName *string `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups *string `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName *string `pulumi:"lastName"`
	// The name of the internal user
	Name *string `pulumi:"name"`
	// The password of the internal user
	Password *string `pulumi:"password"`
	// The ID store where the internal user's password is kept
	//   - Default value: `Internal Users`
	PasswordIdStore *string `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	//   - Default value: `false`
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
}

type InternalUserState struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias pulumi.StringPtrInput
	// Requires the user to change the password
	//   - Default value: `true`
	ChangePassword pulumi.BoolPtrInput
	// Key value map
	CustomAttributes pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Email address
	Email pulumi.StringPtrInput
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrInput
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrInput
	// First name of the internal user
	FirstName pulumi.StringPtrInput
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrInput
	// Last name of the internal user
	LastName pulumi.StringPtrInput
	// The name of the internal user
	Name pulumi.StringPtrInput
	// The password of the internal user
	Password pulumi.StringPtrInput
	// The ID store where the internal user's password is kept
	//   - Default value: `Internal Users`
	PasswordIdStore pulumi.StringPtrInput
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	//   - Default value: `false`
	PasswordNeverExpires pulumi.BoolPtrInput
}

func (InternalUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*internalUserState)(nil)).Elem()
}

type internalUserArgs struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias *string `pulumi:"accountNameAlias"`
	// Requires the user to change the password
	//   - Default value: `true`
	ChangePassword *bool `pulumi:"changePassword"`
	// Key value map
	CustomAttributes *string `pulumi:"customAttributes"`
	// Description
	Description *string `pulumi:"description"`
	// Email address
	Email *string `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword *string `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled *bool `pulumi:"enabled"`
	// First name of the internal user
	FirstName *string `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups *string `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName *string `pulumi:"lastName"`
	// The name of the internal user
	Name *string `pulumi:"name"`
	// The password of the internal user
	Password string `pulumi:"password"`
	// The ID store where the internal user's password is kept
	//   - Default value: `Internal Users`
	PasswordIdStore *string `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	//   - Default value: `false`
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
}

// The set of arguments for constructing a InternalUser resource.
type InternalUserArgs struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias pulumi.StringPtrInput
	// Requires the user to change the password
	//   - Default value: `true`
	ChangePassword pulumi.BoolPtrInput
	// Key value map
	CustomAttributes pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Email address
	Email pulumi.StringPtrInput
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrInput
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrInput
	// First name of the internal user
	FirstName pulumi.StringPtrInput
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrInput
	// Last name of the internal user
	LastName pulumi.StringPtrInput
	// The name of the internal user
	Name pulumi.StringPtrInput
	// The password of the internal user
	Password pulumi.StringInput
	// The ID store where the internal user's password is kept
	//   - Default value: `Internal Users`
	PasswordIdStore pulumi.StringPtrInput
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	//   - Default value: `false`
	PasswordNeverExpires pulumi.BoolPtrInput
}

func (InternalUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internalUserArgs)(nil)).Elem()
}

type InternalUserInput interface {
	pulumi.Input

	ToInternalUserOutput() InternalUserOutput
	ToInternalUserOutputWithContext(ctx context.Context) InternalUserOutput
}

func (*InternalUser) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalUser)(nil)).Elem()
}

func (i *InternalUser) ToInternalUserOutput() InternalUserOutput {
	return i.ToInternalUserOutputWithContext(context.Background())
}

func (i *InternalUser) ToInternalUserOutputWithContext(ctx context.Context) InternalUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalUserOutput)
}

// InternalUserArrayInput is an input type that accepts InternalUserArray and InternalUserArrayOutput values.
// You can construct a concrete instance of `InternalUserArrayInput` via:
//
//	InternalUserArray{ InternalUserArgs{...} }
type InternalUserArrayInput interface {
	pulumi.Input

	ToInternalUserArrayOutput() InternalUserArrayOutput
	ToInternalUserArrayOutputWithContext(context.Context) InternalUserArrayOutput
}

type InternalUserArray []InternalUserInput

func (InternalUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalUser)(nil)).Elem()
}

func (i InternalUserArray) ToInternalUserArrayOutput() InternalUserArrayOutput {
	return i.ToInternalUserArrayOutputWithContext(context.Background())
}

func (i InternalUserArray) ToInternalUserArrayOutputWithContext(ctx context.Context) InternalUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalUserArrayOutput)
}

// InternalUserMapInput is an input type that accepts InternalUserMap and InternalUserMapOutput values.
// You can construct a concrete instance of `InternalUserMapInput` via:
//
//	InternalUserMap{ "key": InternalUserArgs{...} }
type InternalUserMapInput interface {
	pulumi.Input

	ToInternalUserMapOutput() InternalUserMapOutput
	ToInternalUserMapOutputWithContext(context.Context) InternalUserMapOutput
}

type InternalUserMap map[string]InternalUserInput

func (InternalUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalUser)(nil)).Elem()
}

func (i InternalUserMap) ToInternalUserMapOutput() InternalUserMapOutput {
	return i.ToInternalUserMapOutputWithContext(context.Background())
}

func (i InternalUserMap) ToInternalUserMapOutputWithContext(ctx context.Context) InternalUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalUserMapOutput)
}

type InternalUserOutput struct{ *pulumi.OutputState }

func (InternalUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalUser)(nil)).Elem()
}

func (o InternalUserOutput) ToInternalUserOutput() InternalUserOutput {
	return o
}

func (o InternalUserOutput) ToInternalUserOutputWithContext(ctx context.Context) InternalUserOutput {
	return o
}

// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
func (o InternalUserOutput) AccountNameAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.AccountNameAlias }).(pulumi.StringPtrOutput)
}

// Requires the user to change the password
//   - Default value: `true`
func (o InternalUserOutput) ChangePassword() pulumi.BoolOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.BoolOutput { return v.ChangePassword }).(pulumi.BoolOutput)
}

// Key value map
func (o InternalUserOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.CustomAttributes }).(pulumi.StringPtrOutput)
}

// Description
func (o InternalUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Email address
func (o InternalUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// This field is added in ISE 2.0 to support TACACS+
func (o InternalUserOutput) EnablePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.EnablePassword }).(pulumi.StringPtrOutput)
}

// Whether the user is enabled/disabled
func (o InternalUserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// First name of the internal user
func (o InternalUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Comma separated list of identity group IDs.
func (o InternalUserOutput) IdentityGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.IdentityGroups }).(pulumi.StringPtrOutput)
}

// Last name of the internal user
func (o InternalUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// The name of the internal user
func (o InternalUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the internal user
func (o InternalUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The ID store where the internal user's password is kept
//   - Default value: `Internal Users`
func (o InternalUserOutput) PasswordIdStore() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.StringOutput { return v.PasswordIdStore }).(pulumi.StringOutput)
}

// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
//   - Default value: `false`
func (o InternalUserOutput) PasswordNeverExpires() pulumi.BoolOutput {
	return o.ApplyT(func(v *InternalUser) pulumi.BoolOutput { return v.PasswordNeverExpires }).(pulumi.BoolOutput)
}

type InternalUserArrayOutput struct{ *pulumi.OutputState }

func (InternalUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalUser)(nil)).Elem()
}

func (o InternalUserArrayOutput) ToInternalUserArrayOutput() InternalUserArrayOutput {
	return o
}

func (o InternalUserArrayOutput) ToInternalUserArrayOutputWithContext(ctx context.Context) InternalUserArrayOutput {
	return o
}

func (o InternalUserArrayOutput) Index(i pulumi.IntInput) InternalUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternalUser {
		return vs[0].([]*InternalUser)[vs[1].(int)]
	}).(InternalUserOutput)
}

type InternalUserMapOutput struct{ *pulumi.OutputState }

func (InternalUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalUser)(nil)).Elem()
}

func (o InternalUserMapOutput) ToInternalUserMapOutput() InternalUserMapOutput {
	return o
}

func (o InternalUserMapOutput) ToInternalUserMapOutputWithContext(ctx context.Context) InternalUserMapOutput {
	return o
}

func (o InternalUserMapOutput) MapIndex(k pulumi.StringInput) InternalUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternalUser {
		return vs[0].(map[string]*InternalUser)[vs[1].(string)]
	}).(InternalUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternalUserInput)(nil)).Elem(), &InternalUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalUserArrayInput)(nil)).Elem(), InternalUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalUserMapInput)(nil)).Elem(), InternalUserMap{})
	pulumi.RegisterOutputType(InternalUserOutput{})
	pulumi.RegisterOutputType(InternalUserArrayOutput{})
	pulumi.RegisterOutputType(InternalUserMapOutput{})
}
