// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitymanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Identity Source Sequence.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/identitymanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identitymanagement.NewIdentitySourceSequence(ctx, "example", &identitymanagement.IdentitySourceSequenceArgs{
//				Name:                             pulumi.String("Sequence1"),
//				Description:                      pulumi.String("My identity source sequence"),
//				BreakOnStoreFail:                 pulumi.Bool(true),
//				CertificateAuthenticationProfile: pulumi.String("Preloaded_Certificate_Profile"),
//				IdentitySources: identitymanagement.IdentitySourceSequenceIdentitySourceArray{
//					&identitymanagement.IdentitySourceSequenceIdentitySourceArgs{
//						Name:  pulumi.String("Internal Users"),
//						Order: pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:identitymanagement/identitySourceSequence:IdentitySourceSequence example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type IdentitySourceSequence struct {
	pulumi.CustomResourceState

	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail pulumi.BoolOutput `pulumi:"breakOnStoreFail"`
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile pulumi.StringOutput `pulumi:"certificateAuthenticationProfile"`
	// Description
	Description     pulumi.StringPtrOutput                          `pulumi:"description"`
	IdentitySources IdentitySourceSequenceIdentitySourceArrayOutput `pulumi:"identitySources"`
	// The name of the identity source sequence
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIdentitySourceSequence registers a new resource with the given unique name, arguments, and options.
func NewIdentitySourceSequence(ctx *pulumi.Context,
	name string, args *IdentitySourceSequenceArgs, opts ...pulumi.ResourceOption) (*IdentitySourceSequence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BreakOnStoreFail == nil {
		return nil, errors.New("invalid value for required argument 'BreakOnStoreFail'")
	}
	if args.CertificateAuthenticationProfile == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthenticationProfile'")
	}
	if args.IdentitySources == nil {
		return nil, errors.New("invalid value for required argument 'IdentitySources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentitySourceSequence
	err := ctx.RegisterResource("ise:identitymanagement/identitySourceSequence:IdentitySourceSequence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentitySourceSequence gets an existing IdentitySourceSequence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentitySourceSequence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentitySourceSequenceState, opts ...pulumi.ResourceOption) (*IdentitySourceSequence, error) {
	var resource IdentitySourceSequence
	err := ctx.ReadResource("ise:identitymanagement/identitySourceSequence:IdentitySourceSequence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentitySourceSequence resources.
type identitySourceSequenceState struct {
	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail *bool `pulumi:"breakOnStoreFail"`
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile *string `pulumi:"certificateAuthenticationProfile"`
	// Description
	Description     *string                                `pulumi:"description"`
	IdentitySources []IdentitySourceSequenceIdentitySource `pulumi:"identitySources"`
	// The name of the identity source sequence
	Name *string `pulumi:"name"`
}

type IdentitySourceSequenceState struct {
	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail pulumi.BoolPtrInput
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile pulumi.StringPtrInput
	// Description
	Description     pulumi.StringPtrInput
	IdentitySources IdentitySourceSequenceIdentitySourceArrayInput
	// The name of the identity source sequence
	Name pulumi.StringPtrInput
}

func (IdentitySourceSequenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceSequenceState)(nil)).Elem()
}

type identitySourceSequenceArgs struct {
	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail bool `pulumi:"breakOnStoreFail"`
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile string `pulumi:"certificateAuthenticationProfile"`
	// Description
	Description     *string                                `pulumi:"description"`
	IdentitySources []IdentitySourceSequenceIdentitySource `pulumi:"identitySources"`
	// The name of the identity source sequence
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IdentitySourceSequence resource.
type IdentitySourceSequenceArgs struct {
	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail pulumi.BoolInput
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile pulumi.StringInput
	// Description
	Description     pulumi.StringPtrInput
	IdentitySources IdentitySourceSequenceIdentitySourceArrayInput
	// The name of the identity source sequence
	Name pulumi.StringPtrInput
}

func (IdentitySourceSequenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceSequenceArgs)(nil)).Elem()
}

type IdentitySourceSequenceInput interface {
	pulumi.Input

	ToIdentitySourceSequenceOutput() IdentitySourceSequenceOutput
	ToIdentitySourceSequenceOutputWithContext(ctx context.Context) IdentitySourceSequenceOutput
}

func (*IdentitySourceSequence) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySourceSequence)(nil)).Elem()
}

func (i *IdentitySourceSequence) ToIdentitySourceSequenceOutput() IdentitySourceSequenceOutput {
	return i.ToIdentitySourceSequenceOutputWithContext(context.Background())
}

func (i *IdentitySourceSequence) ToIdentitySourceSequenceOutputWithContext(ctx context.Context) IdentitySourceSequenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceSequenceOutput)
}

// IdentitySourceSequenceArrayInput is an input type that accepts IdentitySourceSequenceArray and IdentitySourceSequenceArrayOutput values.
// You can construct a concrete instance of `IdentitySourceSequenceArrayInput` via:
//
//	IdentitySourceSequenceArray{ IdentitySourceSequenceArgs{...} }
type IdentitySourceSequenceArrayInput interface {
	pulumi.Input

	ToIdentitySourceSequenceArrayOutput() IdentitySourceSequenceArrayOutput
	ToIdentitySourceSequenceArrayOutputWithContext(context.Context) IdentitySourceSequenceArrayOutput
}

type IdentitySourceSequenceArray []IdentitySourceSequenceInput

func (IdentitySourceSequenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySourceSequence)(nil)).Elem()
}

func (i IdentitySourceSequenceArray) ToIdentitySourceSequenceArrayOutput() IdentitySourceSequenceArrayOutput {
	return i.ToIdentitySourceSequenceArrayOutputWithContext(context.Background())
}

func (i IdentitySourceSequenceArray) ToIdentitySourceSequenceArrayOutputWithContext(ctx context.Context) IdentitySourceSequenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceSequenceArrayOutput)
}

// IdentitySourceSequenceMapInput is an input type that accepts IdentitySourceSequenceMap and IdentitySourceSequenceMapOutput values.
// You can construct a concrete instance of `IdentitySourceSequenceMapInput` via:
//
//	IdentitySourceSequenceMap{ "key": IdentitySourceSequenceArgs{...} }
type IdentitySourceSequenceMapInput interface {
	pulumi.Input

	ToIdentitySourceSequenceMapOutput() IdentitySourceSequenceMapOutput
	ToIdentitySourceSequenceMapOutputWithContext(context.Context) IdentitySourceSequenceMapOutput
}

type IdentitySourceSequenceMap map[string]IdentitySourceSequenceInput

func (IdentitySourceSequenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySourceSequence)(nil)).Elem()
}

func (i IdentitySourceSequenceMap) ToIdentitySourceSequenceMapOutput() IdentitySourceSequenceMapOutput {
	return i.ToIdentitySourceSequenceMapOutputWithContext(context.Background())
}

func (i IdentitySourceSequenceMap) ToIdentitySourceSequenceMapOutputWithContext(ctx context.Context) IdentitySourceSequenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceSequenceMapOutput)
}

type IdentitySourceSequenceOutput struct{ *pulumi.OutputState }

func (IdentitySourceSequenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySourceSequence)(nil)).Elem()
}

func (o IdentitySourceSequenceOutput) ToIdentitySourceSequenceOutput() IdentitySourceSequenceOutput {
	return o
}

func (o IdentitySourceSequenceOutput) ToIdentitySourceSequenceOutputWithContext(ctx context.Context) IdentitySourceSequenceOutput {
	return o
}

// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
func (o IdentitySourceSequenceOutput) BreakOnStoreFail() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdentitySourceSequence) pulumi.BoolOutput { return v.BreakOnStoreFail }).(pulumi.BoolOutput)
}

// Certificate Authentication Profile, empty if doesn't exist
func (o IdentitySourceSequenceOutput) CertificateAuthenticationProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySourceSequence) pulumi.StringOutput { return v.CertificateAuthenticationProfile }).(pulumi.StringOutput)
}

// Description
func (o IdentitySourceSequenceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentitySourceSequence) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdentitySourceSequenceOutput) IdentitySources() IdentitySourceSequenceIdentitySourceArrayOutput {
	return o.ApplyT(func(v *IdentitySourceSequence) IdentitySourceSequenceIdentitySourceArrayOutput {
		return v.IdentitySources
	}).(IdentitySourceSequenceIdentitySourceArrayOutput)
}

// The name of the identity source sequence
func (o IdentitySourceSequenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySourceSequence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IdentitySourceSequenceArrayOutput struct{ *pulumi.OutputState }

func (IdentitySourceSequenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySourceSequence)(nil)).Elem()
}

func (o IdentitySourceSequenceArrayOutput) ToIdentitySourceSequenceArrayOutput() IdentitySourceSequenceArrayOutput {
	return o
}

func (o IdentitySourceSequenceArrayOutput) ToIdentitySourceSequenceArrayOutputWithContext(ctx context.Context) IdentitySourceSequenceArrayOutput {
	return o
}

func (o IdentitySourceSequenceArrayOutput) Index(i pulumi.IntInput) IdentitySourceSequenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentitySourceSequence {
		return vs[0].([]*IdentitySourceSequence)[vs[1].(int)]
	}).(IdentitySourceSequenceOutput)
}

type IdentitySourceSequenceMapOutput struct{ *pulumi.OutputState }

func (IdentitySourceSequenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySourceSequence)(nil)).Elem()
}

func (o IdentitySourceSequenceMapOutput) ToIdentitySourceSequenceMapOutput() IdentitySourceSequenceMapOutput {
	return o
}

func (o IdentitySourceSequenceMapOutput) ToIdentitySourceSequenceMapOutputWithContext(ctx context.Context) IdentitySourceSequenceMapOutput {
	return o
}

func (o IdentitySourceSequenceMapOutput) MapIndex(k pulumi.StringInput) IdentitySourceSequenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentitySourceSequence {
		return vs[0].(map[string]*IdentitySourceSequence)[vs[1].(string)]
	}).(IdentitySourceSequenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceSequenceInput)(nil)).Elem(), &IdentitySourceSequence{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceSequenceArrayInput)(nil)).Elem(), IdentitySourceSequenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceSequenceMapInput)(nil)).Elem(), IdentitySourceSequenceMap{})
	pulumi.RegisterOutputType(IdentitySourceSequenceOutput{})
	pulumi.RegisterOutputType(IdentitySourceSequenceArrayOutput{})
	pulumi.RegisterOutputType(IdentitySourceSequenceMapOutput{})
}
