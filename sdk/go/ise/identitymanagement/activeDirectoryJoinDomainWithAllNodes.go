// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitymanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Active Directory Join Domain with All Nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/identitymanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identitymanagement.NewActiveDirectoryJoinDomainWithAllNodes(ctx, "example", &identitymanagement.ActiveDirectoryJoinDomainWithAllNodesArgs{
//				JoinPointId: pulumi.String("73808580-b6e6-11ee-8960-de6d7692bc40"),
//				AdditionalDatas: identitymanagement.ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray{
//					&identitymanagement.ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs{
//						Name:  pulumi.String("username"),
//						Value: pulumi.String("administrator"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ActiveDirectoryJoinDomainWithAllNodes struct {
	pulumi.CustomResourceState

	AdditionalDatas ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId pulumi.StringOutput `pulumi:"joinPointId"`
}

// NewActiveDirectoryJoinDomainWithAllNodes registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectoryJoinDomainWithAllNodes(ctx *pulumi.Context,
	name string, args *ActiveDirectoryJoinDomainWithAllNodesArgs, opts ...pulumi.ResourceOption) (*ActiveDirectoryJoinDomainWithAllNodes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdditionalDatas == nil {
		return nil, errors.New("invalid value for required argument 'AdditionalDatas'")
	}
	if args.JoinPointId == nil {
		return nil, errors.New("invalid value for required argument 'JoinPointId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActiveDirectoryJoinDomainWithAllNodes
	err := ctx.RegisterResource("ise:identitymanagement/activeDirectoryJoinDomainWithAllNodes:ActiveDirectoryJoinDomainWithAllNodes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveDirectoryJoinDomainWithAllNodes gets an existing ActiveDirectoryJoinDomainWithAllNodes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectoryJoinDomainWithAllNodes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveDirectoryJoinDomainWithAllNodesState, opts ...pulumi.ResourceOption) (*ActiveDirectoryJoinDomainWithAllNodes, error) {
	var resource ActiveDirectoryJoinDomainWithAllNodes
	err := ctx.ReadResource("ise:identitymanagement/activeDirectoryJoinDomainWithAllNodes:ActiveDirectoryJoinDomainWithAllNodes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveDirectoryJoinDomainWithAllNodes resources.
type activeDirectoryJoinDomainWithAllNodesState struct {
	AdditionalDatas []ActiveDirectoryJoinDomainWithAllNodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId *string `pulumi:"joinPointId"`
}

type ActiveDirectoryJoinDomainWithAllNodesState struct {
	AdditionalDatas ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringPtrInput
}

func (ActiveDirectoryJoinDomainWithAllNodesState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryJoinDomainWithAllNodesState)(nil)).Elem()
}

type activeDirectoryJoinDomainWithAllNodesArgs struct {
	AdditionalDatas []ActiveDirectoryJoinDomainWithAllNodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId string `pulumi:"joinPointId"`
}

// The set of arguments for constructing a ActiveDirectoryJoinDomainWithAllNodes resource.
type ActiveDirectoryJoinDomainWithAllNodesArgs struct {
	AdditionalDatas ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringInput
}

func (ActiveDirectoryJoinDomainWithAllNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryJoinDomainWithAllNodesArgs)(nil)).Elem()
}

type ActiveDirectoryJoinDomainWithAllNodesInput interface {
	pulumi.Input

	ToActiveDirectoryJoinDomainWithAllNodesOutput() ActiveDirectoryJoinDomainWithAllNodesOutput
	ToActiveDirectoryJoinDomainWithAllNodesOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesOutput
}

func (*ActiveDirectoryJoinDomainWithAllNodes) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (i *ActiveDirectoryJoinDomainWithAllNodes) ToActiveDirectoryJoinDomainWithAllNodesOutput() ActiveDirectoryJoinDomainWithAllNodesOutput {
	return i.ToActiveDirectoryJoinDomainWithAllNodesOutputWithContext(context.Background())
}

func (i *ActiveDirectoryJoinDomainWithAllNodes) ToActiveDirectoryJoinDomainWithAllNodesOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinDomainWithAllNodesOutput)
}

// ActiveDirectoryJoinDomainWithAllNodesArrayInput is an input type that accepts ActiveDirectoryJoinDomainWithAllNodesArray and ActiveDirectoryJoinDomainWithAllNodesArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinDomainWithAllNodesArrayInput` via:
//
//	ActiveDirectoryJoinDomainWithAllNodesArray{ ActiveDirectoryJoinDomainWithAllNodesArgs{...} }
type ActiveDirectoryJoinDomainWithAllNodesArrayInput interface {
	pulumi.Input

	ToActiveDirectoryJoinDomainWithAllNodesArrayOutput() ActiveDirectoryJoinDomainWithAllNodesArrayOutput
	ToActiveDirectoryJoinDomainWithAllNodesArrayOutputWithContext(context.Context) ActiveDirectoryJoinDomainWithAllNodesArrayOutput
}

type ActiveDirectoryJoinDomainWithAllNodesArray []ActiveDirectoryJoinDomainWithAllNodesInput

func (ActiveDirectoryJoinDomainWithAllNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (i ActiveDirectoryJoinDomainWithAllNodesArray) ToActiveDirectoryJoinDomainWithAllNodesArrayOutput() ActiveDirectoryJoinDomainWithAllNodesArrayOutput {
	return i.ToActiveDirectoryJoinDomainWithAllNodesArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinDomainWithAllNodesArray) ToActiveDirectoryJoinDomainWithAllNodesArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinDomainWithAllNodesArrayOutput)
}

// ActiveDirectoryJoinDomainWithAllNodesMapInput is an input type that accepts ActiveDirectoryJoinDomainWithAllNodesMap and ActiveDirectoryJoinDomainWithAllNodesMapOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinDomainWithAllNodesMapInput` via:
//
//	ActiveDirectoryJoinDomainWithAllNodesMap{ "key": ActiveDirectoryJoinDomainWithAllNodesArgs{...} }
type ActiveDirectoryJoinDomainWithAllNodesMapInput interface {
	pulumi.Input

	ToActiveDirectoryJoinDomainWithAllNodesMapOutput() ActiveDirectoryJoinDomainWithAllNodesMapOutput
	ToActiveDirectoryJoinDomainWithAllNodesMapOutputWithContext(context.Context) ActiveDirectoryJoinDomainWithAllNodesMapOutput
}

type ActiveDirectoryJoinDomainWithAllNodesMap map[string]ActiveDirectoryJoinDomainWithAllNodesInput

func (ActiveDirectoryJoinDomainWithAllNodesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (i ActiveDirectoryJoinDomainWithAllNodesMap) ToActiveDirectoryJoinDomainWithAllNodesMapOutput() ActiveDirectoryJoinDomainWithAllNodesMapOutput {
	return i.ToActiveDirectoryJoinDomainWithAllNodesMapOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinDomainWithAllNodesMap) ToActiveDirectoryJoinDomainWithAllNodesMapOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinDomainWithAllNodesMapOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinDomainWithAllNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (o ActiveDirectoryJoinDomainWithAllNodesOutput) ToActiveDirectoryJoinDomainWithAllNodesOutput() ActiveDirectoryJoinDomainWithAllNodesOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesOutput) ToActiveDirectoryJoinDomainWithAllNodesOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesOutput) AdditionalDatas() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o.ApplyT(func(v *ActiveDirectoryJoinDomainWithAllNodes) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
		return v.AdditionalDatas
	}).(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput)
}

// Active Directory Join Point ID
func (o ActiveDirectoryJoinDomainWithAllNodesOutput) JoinPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryJoinDomainWithAllNodes) pulumi.StringOutput { return v.JoinPointId }).(pulumi.StringOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinDomainWithAllNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (o ActiveDirectoryJoinDomainWithAllNodesArrayOutput) ToActiveDirectoryJoinDomainWithAllNodesArrayOutput() ActiveDirectoryJoinDomainWithAllNodesArrayOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesArrayOutput) ToActiveDirectoryJoinDomainWithAllNodesArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesArrayOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryJoinDomainWithAllNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveDirectoryJoinDomainWithAllNodes {
		return vs[0].([]*ActiveDirectoryJoinDomainWithAllNodes)[vs[1].(int)]
	}).(ActiveDirectoryJoinDomainWithAllNodesOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesMapOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinDomainWithAllNodesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveDirectoryJoinDomainWithAllNodes)(nil)).Elem()
}

func (o ActiveDirectoryJoinDomainWithAllNodesMapOutput) ToActiveDirectoryJoinDomainWithAllNodesMapOutput() ActiveDirectoryJoinDomainWithAllNodesMapOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesMapOutput) ToActiveDirectoryJoinDomainWithAllNodesMapOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesMapOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesMapOutput) MapIndex(k pulumi.StringInput) ActiveDirectoryJoinDomainWithAllNodesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveDirectoryJoinDomainWithAllNodes {
		return vs[0].(map[string]*ActiveDirectoryJoinDomainWithAllNodes)[vs[1].(string)]
	}).(ActiveDirectoryJoinDomainWithAllNodesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesInput)(nil)).Elem(), &ActiveDirectoryJoinDomainWithAllNodes{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesArrayInput)(nil)).Elem(), ActiveDirectoryJoinDomainWithAllNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesMapInput)(nil)).Elem(), ActiveDirectoryJoinDomainWithAllNodesMap{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinDomainWithAllNodesOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinDomainWithAllNodesArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinDomainWithAllNodesMapOutput{})
}
