// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitymanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ActiveDirectoryAddGroupsGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// ActiveDirectoryAddGroupsGroupInput is an input type that accepts ActiveDirectoryAddGroupsGroupArgs and ActiveDirectoryAddGroupsGroupOutput values.
// You can construct a concrete instance of `ActiveDirectoryAddGroupsGroupInput` via:
//
//	ActiveDirectoryAddGroupsGroupArgs{...}
type ActiveDirectoryAddGroupsGroupInput interface {
	pulumi.Input

	ToActiveDirectoryAddGroupsGroupOutput() ActiveDirectoryAddGroupsGroupOutput
	ToActiveDirectoryAddGroupsGroupOutputWithContext(context.Context) ActiveDirectoryAddGroupsGroupOutput
}

type ActiveDirectoryAddGroupsGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ActiveDirectoryAddGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryAddGroupsGroup)(nil)).Elem()
}

func (i ActiveDirectoryAddGroupsGroupArgs) ToActiveDirectoryAddGroupsGroupOutput() ActiveDirectoryAddGroupsGroupOutput {
	return i.ToActiveDirectoryAddGroupsGroupOutputWithContext(context.Background())
}

func (i ActiveDirectoryAddGroupsGroupArgs) ToActiveDirectoryAddGroupsGroupOutputWithContext(ctx context.Context) ActiveDirectoryAddGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryAddGroupsGroupOutput)
}

// ActiveDirectoryAddGroupsGroupArrayInput is an input type that accepts ActiveDirectoryAddGroupsGroupArray and ActiveDirectoryAddGroupsGroupArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryAddGroupsGroupArrayInput` via:
//
//	ActiveDirectoryAddGroupsGroupArray{ ActiveDirectoryAddGroupsGroupArgs{...} }
type ActiveDirectoryAddGroupsGroupArrayInput interface {
	pulumi.Input

	ToActiveDirectoryAddGroupsGroupArrayOutput() ActiveDirectoryAddGroupsGroupArrayOutput
	ToActiveDirectoryAddGroupsGroupArrayOutputWithContext(context.Context) ActiveDirectoryAddGroupsGroupArrayOutput
}

type ActiveDirectoryAddGroupsGroupArray []ActiveDirectoryAddGroupsGroupInput

func (ActiveDirectoryAddGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryAddGroupsGroup)(nil)).Elem()
}

func (i ActiveDirectoryAddGroupsGroupArray) ToActiveDirectoryAddGroupsGroupArrayOutput() ActiveDirectoryAddGroupsGroupArrayOutput {
	return i.ToActiveDirectoryAddGroupsGroupArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryAddGroupsGroupArray) ToActiveDirectoryAddGroupsGroupArrayOutputWithContext(ctx context.Context) ActiveDirectoryAddGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryAddGroupsGroupArrayOutput)
}

type ActiveDirectoryAddGroupsGroupOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryAddGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryAddGroupsGroup)(nil)).Elem()
}

func (o ActiveDirectoryAddGroupsGroupOutput) ToActiveDirectoryAddGroupsGroupOutput() ActiveDirectoryAddGroupsGroupOutput {
	return o
}

func (o ActiveDirectoryAddGroupsGroupOutput) ToActiveDirectoryAddGroupsGroupOutputWithContext(ctx context.Context) ActiveDirectoryAddGroupsGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o ActiveDirectoryAddGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryAddGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o ActiveDirectoryAddGroupsGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryAddGroupsGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o ActiveDirectoryAddGroupsGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryAddGroupsGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryAddGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryAddGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryAddGroupsGroup)(nil)).Elem()
}

func (o ActiveDirectoryAddGroupsGroupArrayOutput) ToActiveDirectoryAddGroupsGroupArrayOutput() ActiveDirectoryAddGroupsGroupArrayOutput {
	return o
}

func (o ActiveDirectoryAddGroupsGroupArrayOutput) ToActiveDirectoryAddGroupsGroupArrayOutputWithContext(ctx context.Context) ActiveDirectoryAddGroupsGroupArrayOutput {
	return o
}

func (o ActiveDirectoryAddGroupsGroupArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryAddGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryAddGroupsGroup {
		return vs[0].([]ActiveDirectoryAddGroupsGroup)[vs[1].(int)]
	}).(ActiveDirectoryAddGroupsGroupOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesAdditionalData struct {
	// Additional attribute name
	Name string `pulumi:"name"`
	// Additional attribute value
	Value string `pulumi:"value"`
}

// ActiveDirectoryJoinDomainWithAllNodesAdditionalDataInput is an input type that accepts ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs and ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinDomainWithAllNodesAdditionalDataInput` via:
//
//	ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs{...}
type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataInput interface {
	pulumi.Input

	ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput
	ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutputWithContext(context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput
}

type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs struct {
	// Additional attribute name
	Name pulumi.StringInput `pulumi:"name"`
	// Additional attribute value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (i ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput {
	return i.ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput)
}

// ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput is an input type that accepts ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray and ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput` via:
//
//	ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray{ ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs{...} }
type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput interface {
	pulumi.Input

	ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput
	ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput
}

type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray []ActiveDirectoryJoinDomainWithAllNodesAdditionalDataInput

func (ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (i ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
	return i.ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput {
	return o
}

// Additional attribute name
func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinDomainWithAllNodesAdditionalData) string { return v.Name }).(pulumi.StringOutput)
}

// Additional attribute value
func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinDomainWithAllNodesAdditionalData) string { return v.Value }).(pulumi.StringOutput)
}

type ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput() ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput) ToActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o
}

func (o ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryJoinDomainWithAllNodesAdditionalData {
		return vs[0].([]ActiveDirectoryJoinDomainWithAllNodesAdditionalData)[vs[1].(int)]
	}).(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput)
}

type ActiveDirectoryJoinPointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type string `pulumi:"type"`
}

// ActiveDirectoryJoinPointAttributeInput is an input type that accepts ActiveDirectoryJoinPointAttributeArgs and ActiveDirectoryJoinPointAttributeOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointAttributeInput` via:
//
//	ActiveDirectoryJoinPointAttributeArgs{...}
type ActiveDirectoryJoinPointAttributeInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointAttributeOutput() ActiveDirectoryJoinPointAttributeOutput
	ToActiveDirectoryJoinPointAttributeOutputWithContext(context.Context) ActiveDirectoryJoinPointAttributeOutput
}

type ActiveDirectoryJoinPointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActiveDirectoryJoinPointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointAttributeArgs) ToActiveDirectoryJoinPointAttributeOutput() ActiveDirectoryJoinPointAttributeOutput {
	return i.ToActiveDirectoryJoinPointAttributeOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointAttributeArgs) ToActiveDirectoryJoinPointAttributeOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointAttributeOutput)
}

// ActiveDirectoryJoinPointAttributeArrayInput is an input type that accepts ActiveDirectoryJoinPointAttributeArray and ActiveDirectoryJoinPointAttributeArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointAttributeArrayInput` via:
//
//	ActiveDirectoryJoinPointAttributeArray{ ActiveDirectoryJoinPointAttributeArgs{...} }
type ActiveDirectoryJoinPointAttributeArrayInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointAttributeArrayOutput() ActiveDirectoryJoinPointAttributeArrayOutput
	ToActiveDirectoryJoinPointAttributeArrayOutputWithContext(context.Context) ActiveDirectoryJoinPointAttributeArrayOutput
}

type ActiveDirectoryJoinPointAttributeArray []ActiveDirectoryJoinPointAttributeInput

func (ActiveDirectoryJoinPointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointAttributeArray) ToActiveDirectoryJoinPointAttributeArrayOutput() ActiveDirectoryJoinPointAttributeArrayOutput {
	return i.ToActiveDirectoryJoinPointAttributeArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointAttributeArray) ToActiveDirectoryJoinPointAttributeArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointAttributeArrayOutput)
}

type ActiveDirectoryJoinPointAttributeOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointAttributeOutput) ToActiveDirectoryJoinPointAttributeOutput() ActiveDirectoryJoinPointAttributeOutput {
	return o
}

func (o ActiveDirectoryJoinPointAttributeOutput) ToActiveDirectoryJoinPointAttributeOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o ActiveDirectoryJoinPointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o ActiveDirectoryJoinPointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o ActiveDirectoryJoinPointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
func (o ActiveDirectoryJoinPointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type ActiveDirectoryJoinPointAttributeArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointAttributeArrayOutput) ToActiveDirectoryJoinPointAttributeArrayOutput() ActiveDirectoryJoinPointAttributeArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointAttributeArrayOutput) ToActiveDirectoryJoinPointAttributeArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointAttributeArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointAttributeArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryJoinPointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryJoinPointAttribute {
		return vs[0].([]ActiveDirectoryJoinPointAttribute)[vs[1].(int)]
	}).(ActiveDirectoryJoinPointAttributeOutput)
}

type ActiveDirectoryJoinPointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// ActiveDirectoryJoinPointGroupInput is an input type that accepts ActiveDirectoryJoinPointGroupArgs and ActiveDirectoryJoinPointGroupOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointGroupInput` via:
//
//	ActiveDirectoryJoinPointGroupArgs{...}
type ActiveDirectoryJoinPointGroupInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointGroupOutput() ActiveDirectoryJoinPointGroupOutput
	ToActiveDirectoryJoinPointGroupOutputWithContext(context.Context) ActiveDirectoryJoinPointGroupOutput
}

type ActiveDirectoryJoinPointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ActiveDirectoryJoinPointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointGroupArgs) ToActiveDirectoryJoinPointGroupOutput() ActiveDirectoryJoinPointGroupOutput {
	return i.ToActiveDirectoryJoinPointGroupOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointGroupArgs) ToActiveDirectoryJoinPointGroupOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointGroupOutput)
}

// ActiveDirectoryJoinPointGroupArrayInput is an input type that accepts ActiveDirectoryJoinPointGroupArray and ActiveDirectoryJoinPointGroupArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointGroupArrayInput` via:
//
//	ActiveDirectoryJoinPointGroupArray{ ActiveDirectoryJoinPointGroupArgs{...} }
type ActiveDirectoryJoinPointGroupArrayInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointGroupArrayOutput() ActiveDirectoryJoinPointGroupArrayOutput
	ToActiveDirectoryJoinPointGroupArrayOutputWithContext(context.Context) ActiveDirectoryJoinPointGroupArrayOutput
}

type ActiveDirectoryJoinPointGroupArray []ActiveDirectoryJoinPointGroupInput

func (ActiveDirectoryJoinPointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointGroupArray) ToActiveDirectoryJoinPointGroupArrayOutput() ActiveDirectoryJoinPointGroupArrayOutput {
	return i.ToActiveDirectoryJoinPointGroupArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointGroupArray) ToActiveDirectoryJoinPointGroupArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointGroupArrayOutput)
}

type ActiveDirectoryJoinPointGroupOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointGroupOutput) ToActiveDirectoryJoinPointGroupOutput() ActiveDirectoryJoinPointGroupOutput {
	return o
}

func (o ActiveDirectoryJoinPointGroupOutput) ToActiveDirectoryJoinPointGroupOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o ActiveDirectoryJoinPointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o ActiveDirectoryJoinPointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o ActiveDirectoryJoinPointGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryJoinPointGroupArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointGroupArrayOutput) ToActiveDirectoryJoinPointGroupArrayOutput() ActiveDirectoryJoinPointGroupArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointGroupArrayOutput) ToActiveDirectoryJoinPointGroupArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointGroupArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointGroupArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryJoinPointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryJoinPointGroup {
		return vs[0].([]ActiveDirectoryJoinPointGroup)[vs[1].(int)]
	}).(ActiveDirectoryJoinPointGroupOutput)
}

type ActiveDirectoryJoinPointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// ActiveDirectoryJoinPointRewriteRuleInput is an input type that accepts ActiveDirectoryJoinPointRewriteRuleArgs and ActiveDirectoryJoinPointRewriteRuleOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointRewriteRuleInput` via:
//
//	ActiveDirectoryJoinPointRewriteRuleArgs{...}
type ActiveDirectoryJoinPointRewriteRuleInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointRewriteRuleOutput() ActiveDirectoryJoinPointRewriteRuleOutput
	ToActiveDirectoryJoinPointRewriteRuleOutputWithContext(context.Context) ActiveDirectoryJoinPointRewriteRuleOutput
}

type ActiveDirectoryJoinPointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (ActiveDirectoryJoinPointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointRewriteRuleArgs) ToActiveDirectoryJoinPointRewriteRuleOutput() ActiveDirectoryJoinPointRewriteRuleOutput {
	return i.ToActiveDirectoryJoinPointRewriteRuleOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointRewriteRuleArgs) ToActiveDirectoryJoinPointRewriteRuleOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointRewriteRuleOutput)
}

// ActiveDirectoryJoinPointRewriteRuleArrayInput is an input type that accepts ActiveDirectoryJoinPointRewriteRuleArray and ActiveDirectoryJoinPointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryJoinPointRewriteRuleArrayInput` via:
//
//	ActiveDirectoryJoinPointRewriteRuleArray{ ActiveDirectoryJoinPointRewriteRuleArgs{...} }
type ActiveDirectoryJoinPointRewriteRuleArrayInput interface {
	pulumi.Input

	ToActiveDirectoryJoinPointRewriteRuleArrayOutput() ActiveDirectoryJoinPointRewriteRuleArrayOutput
	ToActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(context.Context) ActiveDirectoryJoinPointRewriteRuleArrayOutput
}

type ActiveDirectoryJoinPointRewriteRuleArray []ActiveDirectoryJoinPointRewriteRuleInput

func (ActiveDirectoryJoinPointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (i ActiveDirectoryJoinPointRewriteRuleArray) ToActiveDirectoryJoinPointRewriteRuleArrayOutput() ActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return i.ToActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryJoinPointRewriteRuleArray) ToActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryJoinPointRewriteRuleArrayOutput)
}

type ActiveDirectoryJoinPointRewriteRuleOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointRewriteRuleOutput) ToActiveDirectoryJoinPointRewriteRuleOutput() ActiveDirectoryJoinPointRewriteRuleOutput {
	return o
}

func (o ActiveDirectoryJoinPointRewriteRuleOutput) ToActiveDirectoryJoinPointRewriteRuleOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o ActiveDirectoryJoinPointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o ActiveDirectoryJoinPointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o ActiveDirectoryJoinPointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryJoinPointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type ActiveDirectoryJoinPointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryJoinPointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (o ActiveDirectoryJoinPointRewriteRuleArrayOutput) ToActiveDirectoryJoinPointRewriteRuleArrayOutput() ActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointRewriteRuleArrayOutput) ToActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) ActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return o
}

func (o ActiveDirectoryJoinPointRewriteRuleArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryJoinPointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryJoinPointRewriteRule {
		return vs[0].([]ActiveDirectoryJoinPointRewriteRule)[vs[1].(int)]
	}).(ActiveDirectoryJoinPointRewriteRuleOutput)
}

type IdentitySourceSequenceIdentitySource struct {
	// Name of the identity source
	Name string `pulumi:"name"`
	// Order of the identity source in the sequence
	Order int `pulumi:"order"`
}

// IdentitySourceSequenceIdentitySourceInput is an input type that accepts IdentitySourceSequenceIdentitySourceArgs and IdentitySourceSequenceIdentitySourceOutput values.
// You can construct a concrete instance of `IdentitySourceSequenceIdentitySourceInput` via:
//
//	IdentitySourceSequenceIdentitySourceArgs{...}
type IdentitySourceSequenceIdentitySourceInput interface {
	pulumi.Input

	ToIdentitySourceSequenceIdentitySourceOutput() IdentitySourceSequenceIdentitySourceOutput
	ToIdentitySourceSequenceIdentitySourceOutputWithContext(context.Context) IdentitySourceSequenceIdentitySourceOutput
}

type IdentitySourceSequenceIdentitySourceArgs struct {
	// Name of the identity source
	Name pulumi.StringInput `pulumi:"name"`
	// Order of the identity source in the sequence
	Order pulumi.IntInput `pulumi:"order"`
}

func (IdentitySourceSequenceIdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (i IdentitySourceSequenceIdentitySourceArgs) ToIdentitySourceSequenceIdentitySourceOutput() IdentitySourceSequenceIdentitySourceOutput {
	return i.ToIdentitySourceSequenceIdentitySourceOutputWithContext(context.Background())
}

func (i IdentitySourceSequenceIdentitySourceArgs) ToIdentitySourceSequenceIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceSequenceIdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceSequenceIdentitySourceOutput)
}

// IdentitySourceSequenceIdentitySourceArrayInput is an input type that accepts IdentitySourceSequenceIdentitySourceArray and IdentitySourceSequenceIdentitySourceArrayOutput values.
// You can construct a concrete instance of `IdentitySourceSequenceIdentitySourceArrayInput` via:
//
//	IdentitySourceSequenceIdentitySourceArray{ IdentitySourceSequenceIdentitySourceArgs{...} }
type IdentitySourceSequenceIdentitySourceArrayInput interface {
	pulumi.Input

	ToIdentitySourceSequenceIdentitySourceArrayOutput() IdentitySourceSequenceIdentitySourceArrayOutput
	ToIdentitySourceSequenceIdentitySourceArrayOutputWithContext(context.Context) IdentitySourceSequenceIdentitySourceArrayOutput
}

type IdentitySourceSequenceIdentitySourceArray []IdentitySourceSequenceIdentitySourceInput

func (IdentitySourceSequenceIdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (i IdentitySourceSequenceIdentitySourceArray) ToIdentitySourceSequenceIdentitySourceArrayOutput() IdentitySourceSequenceIdentitySourceArrayOutput {
	return i.ToIdentitySourceSequenceIdentitySourceArrayOutputWithContext(context.Background())
}

func (i IdentitySourceSequenceIdentitySourceArray) ToIdentitySourceSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) IdentitySourceSequenceIdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceSequenceIdentitySourceArrayOutput)
}

type IdentitySourceSequenceIdentitySourceOutput struct{ *pulumi.OutputState }

func (IdentitySourceSequenceIdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (o IdentitySourceSequenceIdentitySourceOutput) ToIdentitySourceSequenceIdentitySourceOutput() IdentitySourceSequenceIdentitySourceOutput {
	return o
}

func (o IdentitySourceSequenceIdentitySourceOutput) ToIdentitySourceSequenceIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceSequenceIdentitySourceOutput {
	return o
}

// Name of the identity source
func (o IdentitySourceSequenceIdentitySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IdentitySourceSequenceIdentitySource) string { return v.Name }).(pulumi.StringOutput)
}

// Order of the identity source in the sequence
func (o IdentitySourceSequenceIdentitySourceOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v IdentitySourceSequenceIdentitySource) int { return v.Order }).(pulumi.IntOutput)
}

type IdentitySourceSequenceIdentitySourceArrayOutput struct{ *pulumi.OutputState }

func (IdentitySourceSequenceIdentitySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (o IdentitySourceSequenceIdentitySourceArrayOutput) ToIdentitySourceSequenceIdentitySourceArrayOutput() IdentitySourceSequenceIdentitySourceArrayOutput {
	return o
}

func (o IdentitySourceSequenceIdentitySourceArrayOutput) ToIdentitySourceSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) IdentitySourceSequenceIdentitySourceArrayOutput {
	return o
}

func (o IdentitySourceSequenceIdentitySourceArrayOutput) Index(i pulumi.IntInput) IdentitySourceSequenceIdentitySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentitySourceSequenceIdentitySource {
		return vs[0].([]IdentitySourceSequenceIdentitySource)[vs[1].(int)]
	}).(IdentitySourceSequenceIdentitySourceOutput)
}

type GetActiveDirectoryGroupsByDomainGroup struct {
	// Group name
	Name string `pulumi:"name"`
	// Group SID
	Sid string `pulumi:"sid"`
	// Group type
	Type string `pulumi:"type"`
}

// GetActiveDirectoryGroupsByDomainGroupInput is an input type that accepts GetActiveDirectoryGroupsByDomainGroupArgs and GetActiveDirectoryGroupsByDomainGroupOutput values.
// You can construct a concrete instance of `GetActiveDirectoryGroupsByDomainGroupInput` via:
//
//	GetActiveDirectoryGroupsByDomainGroupArgs{...}
type GetActiveDirectoryGroupsByDomainGroupInput interface {
	pulumi.Input

	ToGetActiveDirectoryGroupsByDomainGroupOutput() GetActiveDirectoryGroupsByDomainGroupOutput
	ToGetActiveDirectoryGroupsByDomainGroupOutputWithContext(context.Context) GetActiveDirectoryGroupsByDomainGroupOutput
}

type GetActiveDirectoryGroupsByDomainGroupArgs struct {
	// Group name
	Name pulumi.StringInput `pulumi:"name"`
	// Group SID
	Sid pulumi.StringInput `pulumi:"sid"`
	// Group type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetActiveDirectoryGroupsByDomainGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryGroupsByDomainGroup)(nil)).Elem()
}

func (i GetActiveDirectoryGroupsByDomainGroupArgs) ToGetActiveDirectoryGroupsByDomainGroupOutput() GetActiveDirectoryGroupsByDomainGroupOutput {
	return i.ToGetActiveDirectoryGroupsByDomainGroupOutputWithContext(context.Background())
}

func (i GetActiveDirectoryGroupsByDomainGroupArgs) ToGetActiveDirectoryGroupsByDomainGroupOutputWithContext(ctx context.Context) GetActiveDirectoryGroupsByDomainGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryGroupsByDomainGroupOutput)
}

// GetActiveDirectoryGroupsByDomainGroupArrayInput is an input type that accepts GetActiveDirectoryGroupsByDomainGroupArray and GetActiveDirectoryGroupsByDomainGroupArrayOutput values.
// You can construct a concrete instance of `GetActiveDirectoryGroupsByDomainGroupArrayInput` via:
//
//	GetActiveDirectoryGroupsByDomainGroupArray{ GetActiveDirectoryGroupsByDomainGroupArgs{...} }
type GetActiveDirectoryGroupsByDomainGroupArrayInput interface {
	pulumi.Input

	ToGetActiveDirectoryGroupsByDomainGroupArrayOutput() GetActiveDirectoryGroupsByDomainGroupArrayOutput
	ToGetActiveDirectoryGroupsByDomainGroupArrayOutputWithContext(context.Context) GetActiveDirectoryGroupsByDomainGroupArrayOutput
}

type GetActiveDirectoryGroupsByDomainGroupArray []GetActiveDirectoryGroupsByDomainGroupInput

func (GetActiveDirectoryGroupsByDomainGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryGroupsByDomainGroup)(nil)).Elem()
}

func (i GetActiveDirectoryGroupsByDomainGroupArray) ToGetActiveDirectoryGroupsByDomainGroupArrayOutput() GetActiveDirectoryGroupsByDomainGroupArrayOutput {
	return i.ToGetActiveDirectoryGroupsByDomainGroupArrayOutputWithContext(context.Background())
}

func (i GetActiveDirectoryGroupsByDomainGroupArray) ToGetActiveDirectoryGroupsByDomainGroupArrayOutputWithContext(ctx context.Context) GetActiveDirectoryGroupsByDomainGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryGroupsByDomainGroupArrayOutput)
}

type GetActiveDirectoryGroupsByDomainGroupOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryGroupsByDomainGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryGroupsByDomainGroup)(nil)).Elem()
}

func (o GetActiveDirectoryGroupsByDomainGroupOutput) ToGetActiveDirectoryGroupsByDomainGroupOutput() GetActiveDirectoryGroupsByDomainGroupOutput {
	return o
}

func (o GetActiveDirectoryGroupsByDomainGroupOutput) ToGetActiveDirectoryGroupsByDomainGroupOutputWithContext(ctx context.Context) GetActiveDirectoryGroupsByDomainGroupOutput {
	return o
}

// Group name
func (o GetActiveDirectoryGroupsByDomainGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryGroupsByDomainGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Group SID
func (o GetActiveDirectoryGroupsByDomainGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryGroupsByDomainGroup) string { return v.Sid }).(pulumi.StringOutput)
}

// Group type
func (o GetActiveDirectoryGroupsByDomainGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryGroupsByDomainGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetActiveDirectoryGroupsByDomainGroupArrayOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryGroupsByDomainGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryGroupsByDomainGroup)(nil)).Elem()
}

func (o GetActiveDirectoryGroupsByDomainGroupArrayOutput) ToGetActiveDirectoryGroupsByDomainGroupArrayOutput() GetActiveDirectoryGroupsByDomainGroupArrayOutput {
	return o
}

func (o GetActiveDirectoryGroupsByDomainGroupArrayOutput) ToGetActiveDirectoryGroupsByDomainGroupArrayOutputWithContext(ctx context.Context) GetActiveDirectoryGroupsByDomainGroupArrayOutput {
	return o
}

func (o GetActiveDirectoryGroupsByDomainGroupArrayOutput) Index(i pulumi.IntInput) GetActiveDirectoryGroupsByDomainGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActiveDirectoryGroupsByDomainGroup {
		return vs[0].([]GetActiveDirectoryGroupsByDomainGroup)[vs[1].(int)]
	}).(GetActiveDirectoryGroupsByDomainGroupOutput)
}

type GetActiveDirectoryJoinPointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	Type string `pulumi:"type"`
}

// GetActiveDirectoryJoinPointAttributeInput is an input type that accepts GetActiveDirectoryJoinPointAttributeArgs and GetActiveDirectoryJoinPointAttributeOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointAttributeInput` via:
//
//	GetActiveDirectoryJoinPointAttributeArgs{...}
type GetActiveDirectoryJoinPointAttributeInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointAttributeOutput() GetActiveDirectoryJoinPointAttributeOutput
	ToGetActiveDirectoryJoinPointAttributeOutputWithContext(context.Context) GetActiveDirectoryJoinPointAttributeOutput
}

type GetActiveDirectoryJoinPointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetActiveDirectoryJoinPointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointAttributeArgs) ToGetActiveDirectoryJoinPointAttributeOutput() GetActiveDirectoryJoinPointAttributeOutput {
	return i.ToGetActiveDirectoryJoinPointAttributeOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointAttributeArgs) ToGetActiveDirectoryJoinPointAttributeOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointAttributeOutput)
}

// GetActiveDirectoryJoinPointAttributeArrayInput is an input type that accepts GetActiveDirectoryJoinPointAttributeArray and GetActiveDirectoryJoinPointAttributeArrayOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointAttributeArrayInput` via:
//
//	GetActiveDirectoryJoinPointAttributeArray{ GetActiveDirectoryJoinPointAttributeArgs{...} }
type GetActiveDirectoryJoinPointAttributeArrayInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointAttributeArrayOutput() GetActiveDirectoryJoinPointAttributeArrayOutput
	ToGetActiveDirectoryJoinPointAttributeArrayOutputWithContext(context.Context) GetActiveDirectoryJoinPointAttributeArrayOutput
}

type GetActiveDirectoryJoinPointAttributeArray []GetActiveDirectoryJoinPointAttributeInput

func (GetActiveDirectoryJoinPointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointAttributeArray) ToGetActiveDirectoryJoinPointAttributeArrayOutput() GetActiveDirectoryJoinPointAttributeArrayOutput {
	return i.ToGetActiveDirectoryJoinPointAttributeArrayOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointAttributeArray) ToGetActiveDirectoryJoinPointAttributeArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointAttributeArrayOutput)
}

type GetActiveDirectoryJoinPointAttributeOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointAttributeOutput) ToGetActiveDirectoryJoinPointAttributeOutput() GetActiveDirectoryJoinPointAttributeOutput {
	return o
}

func (o GetActiveDirectoryJoinPointAttributeOutput) ToGetActiveDirectoryJoinPointAttributeOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o GetActiveDirectoryJoinPointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o GetActiveDirectoryJoinPointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o GetActiveDirectoryJoinPointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
func (o GetActiveDirectoryJoinPointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type GetActiveDirectoryJoinPointAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointAttribute)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointAttributeArrayOutput) ToGetActiveDirectoryJoinPointAttributeArrayOutput() GetActiveDirectoryJoinPointAttributeArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointAttributeArrayOutput) ToGetActiveDirectoryJoinPointAttributeArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointAttributeArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointAttributeArrayOutput) Index(i pulumi.IntInput) GetActiveDirectoryJoinPointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActiveDirectoryJoinPointAttribute {
		return vs[0].([]GetActiveDirectoryJoinPointAttribute)[vs[1].(int)]
	}).(GetActiveDirectoryJoinPointAttributeOutput)
}

type GetActiveDirectoryJoinPointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string `pulumi:"sid"`
	Type string `pulumi:"type"`
}

// GetActiveDirectoryJoinPointGroupInput is an input type that accepts GetActiveDirectoryJoinPointGroupArgs and GetActiveDirectoryJoinPointGroupOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointGroupInput` via:
//
//	GetActiveDirectoryJoinPointGroupArgs{...}
type GetActiveDirectoryJoinPointGroupInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointGroupOutput() GetActiveDirectoryJoinPointGroupOutput
	ToGetActiveDirectoryJoinPointGroupOutputWithContext(context.Context) GetActiveDirectoryJoinPointGroupOutput
}

type GetActiveDirectoryJoinPointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput `pulumi:"sid"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetActiveDirectoryJoinPointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointGroupArgs) ToGetActiveDirectoryJoinPointGroupOutput() GetActiveDirectoryJoinPointGroupOutput {
	return i.ToGetActiveDirectoryJoinPointGroupOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointGroupArgs) ToGetActiveDirectoryJoinPointGroupOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointGroupOutput)
}

// GetActiveDirectoryJoinPointGroupArrayInput is an input type that accepts GetActiveDirectoryJoinPointGroupArray and GetActiveDirectoryJoinPointGroupArrayOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointGroupArrayInput` via:
//
//	GetActiveDirectoryJoinPointGroupArray{ GetActiveDirectoryJoinPointGroupArgs{...} }
type GetActiveDirectoryJoinPointGroupArrayInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointGroupArrayOutput() GetActiveDirectoryJoinPointGroupArrayOutput
	ToGetActiveDirectoryJoinPointGroupArrayOutputWithContext(context.Context) GetActiveDirectoryJoinPointGroupArrayOutput
}

type GetActiveDirectoryJoinPointGroupArray []GetActiveDirectoryJoinPointGroupInput

func (GetActiveDirectoryJoinPointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointGroupArray) ToGetActiveDirectoryJoinPointGroupArrayOutput() GetActiveDirectoryJoinPointGroupArrayOutput {
	return i.ToGetActiveDirectoryJoinPointGroupArrayOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointGroupArray) ToGetActiveDirectoryJoinPointGroupArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointGroupArrayOutput)
}

type GetActiveDirectoryJoinPointGroupOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointGroupOutput) ToGetActiveDirectoryJoinPointGroupOutput() GetActiveDirectoryJoinPointGroupOutput {
	return o
}

func (o GetActiveDirectoryJoinPointGroupOutput) ToGetActiveDirectoryJoinPointGroupOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o GetActiveDirectoryJoinPointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o GetActiveDirectoryJoinPointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o GetActiveDirectoryJoinPointGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetActiveDirectoryJoinPointGroupArrayOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointGroup)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointGroupArrayOutput) ToGetActiveDirectoryJoinPointGroupArrayOutput() GetActiveDirectoryJoinPointGroupArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointGroupArrayOutput) ToGetActiveDirectoryJoinPointGroupArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointGroupArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointGroupArrayOutput) Index(i pulumi.IntInput) GetActiveDirectoryJoinPointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActiveDirectoryJoinPointGroup {
		return vs[0].([]GetActiveDirectoryJoinPointGroup)[vs[1].(int)]
	}).(GetActiveDirectoryJoinPointGroupOutput)
}

type GetActiveDirectoryJoinPointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// GetActiveDirectoryJoinPointRewriteRuleInput is an input type that accepts GetActiveDirectoryJoinPointRewriteRuleArgs and GetActiveDirectoryJoinPointRewriteRuleOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointRewriteRuleInput` via:
//
//	GetActiveDirectoryJoinPointRewriteRuleArgs{...}
type GetActiveDirectoryJoinPointRewriteRuleInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointRewriteRuleOutput() GetActiveDirectoryJoinPointRewriteRuleOutput
	ToGetActiveDirectoryJoinPointRewriteRuleOutputWithContext(context.Context) GetActiveDirectoryJoinPointRewriteRuleOutput
}

type GetActiveDirectoryJoinPointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (GetActiveDirectoryJoinPointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointRewriteRuleArgs) ToGetActiveDirectoryJoinPointRewriteRuleOutput() GetActiveDirectoryJoinPointRewriteRuleOutput {
	return i.ToGetActiveDirectoryJoinPointRewriteRuleOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointRewriteRuleArgs) ToGetActiveDirectoryJoinPointRewriteRuleOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointRewriteRuleOutput)
}

// GetActiveDirectoryJoinPointRewriteRuleArrayInput is an input type that accepts GetActiveDirectoryJoinPointRewriteRuleArray and GetActiveDirectoryJoinPointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `GetActiveDirectoryJoinPointRewriteRuleArrayInput` via:
//
//	GetActiveDirectoryJoinPointRewriteRuleArray{ GetActiveDirectoryJoinPointRewriteRuleArgs{...} }
type GetActiveDirectoryJoinPointRewriteRuleArrayInput interface {
	pulumi.Input

	ToGetActiveDirectoryJoinPointRewriteRuleArrayOutput() GetActiveDirectoryJoinPointRewriteRuleArrayOutput
	ToGetActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(context.Context) GetActiveDirectoryJoinPointRewriteRuleArrayOutput
}

type GetActiveDirectoryJoinPointRewriteRuleArray []GetActiveDirectoryJoinPointRewriteRuleInput

func (GetActiveDirectoryJoinPointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (i GetActiveDirectoryJoinPointRewriteRuleArray) ToGetActiveDirectoryJoinPointRewriteRuleArrayOutput() GetActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return i.ToGetActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i GetActiveDirectoryJoinPointRewriteRuleArray) ToGetActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActiveDirectoryJoinPointRewriteRuleArrayOutput)
}

type GetActiveDirectoryJoinPointRewriteRuleOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointRewriteRuleOutput) ToGetActiveDirectoryJoinPointRewriteRuleOutput() GetActiveDirectoryJoinPointRewriteRuleOutput {
	return o
}

func (o GetActiveDirectoryJoinPointRewriteRuleOutput) ToGetActiveDirectoryJoinPointRewriteRuleOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o GetActiveDirectoryJoinPointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o GetActiveDirectoryJoinPointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o GetActiveDirectoryJoinPointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveDirectoryJoinPointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type GetActiveDirectoryJoinPointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (GetActiveDirectoryJoinPointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActiveDirectoryJoinPointRewriteRule)(nil)).Elem()
}

func (o GetActiveDirectoryJoinPointRewriteRuleArrayOutput) ToGetActiveDirectoryJoinPointRewriteRuleArrayOutput() GetActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointRewriteRuleArrayOutput) ToGetActiveDirectoryJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetActiveDirectoryJoinPointRewriteRuleArrayOutput {
	return o
}

func (o GetActiveDirectoryJoinPointRewriteRuleArrayOutput) Index(i pulumi.IntInput) GetActiveDirectoryJoinPointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActiveDirectoryJoinPointRewriteRule {
		return vs[0].([]GetActiveDirectoryJoinPointRewriteRule)[vs[1].(int)]
	}).(GetActiveDirectoryJoinPointRewriteRuleOutput)
}

type GetIdentitySourceSequenceIdentitySource struct {
	// Name of the identity source
	Name string `pulumi:"name"`
	// Order of the identity source in the sequence
	Order int `pulumi:"order"`
}

// GetIdentitySourceSequenceIdentitySourceInput is an input type that accepts GetIdentitySourceSequenceIdentitySourceArgs and GetIdentitySourceSequenceIdentitySourceOutput values.
// You can construct a concrete instance of `GetIdentitySourceSequenceIdentitySourceInput` via:
//
//	GetIdentitySourceSequenceIdentitySourceArgs{...}
type GetIdentitySourceSequenceIdentitySourceInput interface {
	pulumi.Input

	ToGetIdentitySourceSequenceIdentitySourceOutput() GetIdentitySourceSequenceIdentitySourceOutput
	ToGetIdentitySourceSequenceIdentitySourceOutputWithContext(context.Context) GetIdentitySourceSequenceIdentitySourceOutput
}

type GetIdentitySourceSequenceIdentitySourceArgs struct {
	// Name of the identity source
	Name pulumi.StringInput `pulumi:"name"`
	// Order of the identity source in the sequence
	Order pulumi.IntInput `pulumi:"order"`
}

func (GetIdentitySourceSequenceIdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (i GetIdentitySourceSequenceIdentitySourceArgs) ToGetIdentitySourceSequenceIdentitySourceOutput() GetIdentitySourceSequenceIdentitySourceOutput {
	return i.ToGetIdentitySourceSequenceIdentitySourceOutputWithContext(context.Background())
}

func (i GetIdentitySourceSequenceIdentitySourceArgs) ToGetIdentitySourceSequenceIdentitySourceOutputWithContext(ctx context.Context) GetIdentitySourceSequenceIdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentitySourceSequenceIdentitySourceOutput)
}

// GetIdentitySourceSequenceIdentitySourceArrayInput is an input type that accepts GetIdentitySourceSequenceIdentitySourceArray and GetIdentitySourceSequenceIdentitySourceArrayOutput values.
// You can construct a concrete instance of `GetIdentitySourceSequenceIdentitySourceArrayInput` via:
//
//	GetIdentitySourceSequenceIdentitySourceArray{ GetIdentitySourceSequenceIdentitySourceArgs{...} }
type GetIdentitySourceSequenceIdentitySourceArrayInput interface {
	pulumi.Input

	ToGetIdentitySourceSequenceIdentitySourceArrayOutput() GetIdentitySourceSequenceIdentitySourceArrayOutput
	ToGetIdentitySourceSequenceIdentitySourceArrayOutputWithContext(context.Context) GetIdentitySourceSequenceIdentitySourceArrayOutput
}

type GetIdentitySourceSequenceIdentitySourceArray []GetIdentitySourceSequenceIdentitySourceInput

func (GetIdentitySourceSequenceIdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (i GetIdentitySourceSequenceIdentitySourceArray) ToGetIdentitySourceSequenceIdentitySourceArrayOutput() GetIdentitySourceSequenceIdentitySourceArrayOutput {
	return i.ToGetIdentitySourceSequenceIdentitySourceArrayOutputWithContext(context.Background())
}

func (i GetIdentitySourceSequenceIdentitySourceArray) ToGetIdentitySourceSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) GetIdentitySourceSequenceIdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentitySourceSequenceIdentitySourceArrayOutput)
}

type GetIdentitySourceSequenceIdentitySourceOutput struct{ *pulumi.OutputState }

func (GetIdentitySourceSequenceIdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (o GetIdentitySourceSequenceIdentitySourceOutput) ToGetIdentitySourceSequenceIdentitySourceOutput() GetIdentitySourceSequenceIdentitySourceOutput {
	return o
}

func (o GetIdentitySourceSequenceIdentitySourceOutput) ToGetIdentitySourceSequenceIdentitySourceOutputWithContext(ctx context.Context) GetIdentitySourceSequenceIdentitySourceOutput {
	return o
}

// Name of the identity source
func (o GetIdentitySourceSequenceIdentitySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdentitySourceSequenceIdentitySource) string { return v.Name }).(pulumi.StringOutput)
}

// Order of the identity source in the sequence
func (o GetIdentitySourceSequenceIdentitySourceOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v GetIdentitySourceSequenceIdentitySource) int { return v.Order }).(pulumi.IntOutput)
}

type GetIdentitySourceSequenceIdentitySourceArrayOutput struct{ *pulumi.OutputState }

func (GetIdentitySourceSequenceIdentitySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentitySourceSequenceIdentitySource)(nil)).Elem()
}

func (o GetIdentitySourceSequenceIdentitySourceArrayOutput) ToGetIdentitySourceSequenceIdentitySourceArrayOutput() GetIdentitySourceSequenceIdentitySourceArrayOutput {
	return o
}

func (o GetIdentitySourceSequenceIdentitySourceArrayOutput) ToGetIdentitySourceSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) GetIdentitySourceSequenceIdentitySourceArrayOutput {
	return o
}

func (o GetIdentitySourceSequenceIdentitySourceArrayOutput) Index(i pulumi.IntInput) GetIdentitySourceSequenceIdentitySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdentitySourceSequenceIdentitySource {
		return vs[0].([]GetIdentitySourceSequenceIdentitySource)[vs[1].(int)]
	}).(GetIdentitySourceSequenceIdentitySourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryAddGroupsGroupInput)(nil)).Elem(), ActiveDirectoryAddGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryAddGroupsGroupArrayInput)(nil)).Elem(), ActiveDirectoryAddGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesAdditionalDataInput)(nil)).Elem(), ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayInput)(nil)).Elem(), ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointAttributeInput)(nil)).Elem(), ActiveDirectoryJoinPointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointAttributeArrayInput)(nil)).Elem(), ActiveDirectoryJoinPointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointGroupInput)(nil)).Elem(), ActiveDirectoryJoinPointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointGroupArrayInput)(nil)).Elem(), ActiveDirectoryJoinPointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointRewriteRuleInput)(nil)).Elem(), ActiveDirectoryJoinPointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryJoinPointRewriteRuleArrayInput)(nil)).Elem(), ActiveDirectoryJoinPointRewriteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceSequenceIdentitySourceInput)(nil)).Elem(), IdentitySourceSequenceIdentitySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceSequenceIdentitySourceArrayInput)(nil)).Elem(), IdentitySourceSequenceIdentitySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryGroupsByDomainGroupInput)(nil)).Elem(), GetActiveDirectoryGroupsByDomainGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryGroupsByDomainGroupArrayInput)(nil)).Elem(), GetActiveDirectoryGroupsByDomainGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointAttributeInput)(nil)).Elem(), GetActiveDirectoryJoinPointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointAttributeArrayInput)(nil)).Elem(), GetActiveDirectoryJoinPointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointGroupInput)(nil)).Elem(), GetActiveDirectoryJoinPointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointGroupArrayInput)(nil)).Elem(), GetActiveDirectoryJoinPointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointRewriteRuleInput)(nil)).Elem(), GetActiveDirectoryJoinPointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActiveDirectoryJoinPointRewriteRuleArrayInput)(nil)).Elem(), GetActiveDirectoryJoinPointRewriteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentitySourceSequenceIdentitySourceInput)(nil)).Elem(), GetIdentitySourceSequenceIdentitySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentitySourceSequenceIdentitySourceArrayInput)(nil)).Elem(), GetIdentitySourceSequenceIdentitySourceArray{})
	pulumi.RegisterOutputType(ActiveDirectoryAddGroupsGroupOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryAddGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinDomainWithAllNodesAdditionalDataArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointAttributeOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointAttributeArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointGroupOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointGroupArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointRewriteRuleOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryJoinPointRewriteRuleArrayOutput{})
	pulumi.RegisterOutputType(IdentitySourceSequenceIdentitySourceOutput{})
	pulumi.RegisterOutputType(IdentitySourceSequenceIdentitySourceArrayOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryGroupsByDomainGroupOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryGroupsByDomainGroupArrayOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointAttributeOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointGroupOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointGroupArrayOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointRewriteRuleOutput{})
	pulumi.RegisterOutputType(GetActiveDirectoryJoinPointRewriteRuleArrayOutput{})
	pulumi.RegisterOutputType(GetIdentitySourceSequenceIdentitySourceOutput{})
	pulumi.RegisterOutputType(GetIdentitySourceSequenceIdentitySourceArrayOutput{})
}
