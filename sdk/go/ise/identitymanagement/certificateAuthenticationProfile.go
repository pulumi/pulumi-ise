// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitymanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Certificate Authentication Profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/identitymanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identitymanagement.NewCertificateAuthenticationProfile(ctx, "example", &identitymanagement.CertificateAuthenticationProfileArgs{
//				Name:                      pulumi.String("CertProf1"),
//				Description:               pulumi.String("My cert profile"),
//				AllowedAsUserName:         pulumi.Bool(false),
//				ExternalIdentityStoreName: pulumi.String("[not applicable]"),
//				CertificateAttributeName:  pulumi.String("SUBJECT_COMMON_NAME"),
//				MatchMode:                 pulumi.String("NEVER"),
//				UsernameFrom:              pulumi.String("CERTIFICATE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type CertificateAuthenticationProfile struct {
	pulumi.CustomResourceState

	// Allow as username
	//   - Default value: `false`
	AllowedAsUserName pulumi.BoolOutput `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
	//   - Default value: `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringOutput `pulumi:"certificateAttributeName"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	//   - Default value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringOutput `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
	//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
	//   - Default value: `NEVER`
	MatchMode pulumi.StringOutput `pulumi:"matchMode"`
	// The name of the certificate profile
	Name pulumi.StringOutput `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	//   - Choices: `CERTIFICATE`, `UPN`
	//   - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringOutput `pulumi:"usernameFrom"`
}

// NewCertificateAuthenticationProfile registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthenticationProfile(ctx *pulumi.Context,
	name string, args *CertificateAuthenticationProfileArgs, opts ...pulumi.ResourceOption) (*CertificateAuthenticationProfile, error) {
	if args == nil {
		args = &CertificateAuthenticationProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateAuthenticationProfile
	err := ctx.RegisterResource("ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthenticationProfile gets an existing CertificateAuthenticationProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthenticationProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthenticationProfileState, opts ...pulumi.ResourceOption) (*CertificateAuthenticationProfile, error) {
	var resource CertificateAuthenticationProfile
	err := ctx.ReadResource("ise:identitymanagement/certificateAuthenticationProfile:CertificateAuthenticationProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthenticationProfile resources.
type certificateAuthenticationProfileState struct {
	// Allow as username
	//   - Default value: `false`
	AllowedAsUserName *bool `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
	//   - Default value: `SUBJECT_COMMON_NAME`
	CertificateAttributeName *string `pulumi:"certificateAttributeName"`
	// Description
	Description *string `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	//   - Default value: `[not applicable]`
	ExternalIdentityStoreName *string `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
	//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
	//   - Default value: `NEVER`
	MatchMode *string `pulumi:"matchMode"`
	// The name of the certificate profile
	Name *string `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	//   - Choices: `CERTIFICATE`, `UPN`
	//   - Default value: `CERTIFICATE`
	UsernameFrom *string `pulumi:"usernameFrom"`
}

type CertificateAuthenticationProfileState struct {
	// Allow as username
	//   - Default value: `false`
	AllowedAsUserName pulumi.BoolPtrInput
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
	//   - Default value: `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	//   - Default value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringPtrInput
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
	//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
	//   - Default value: `NEVER`
	MatchMode pulumi.StringPtrInput
	// The name of the certificate profile
	Name pulumi.StringPtrInput
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	//   - Choices: `CERTIFICATE`, `UPN`
	//   - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringPtrInput
}

func (CertificateAuthenticationProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthenticationProfileState)(nil)).Elem()
}

type certificateAuthenticationProfileArgs struct {
	// Allow as username
	//   - Default value: `false`
	AllowedAsUserName *bool `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
	//   - Default value: `SUBJECT_COMMON_NAME`
	CertificateAttributeName *string `pulumi:"certificateAttributeName"`
	// Description
	Description *string `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	//   - Default value: `[not applicable]`
	ExternalIdentityStoreName *string `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
	//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
	//   - Default value: `NEVER`
	MatchMode *string `pulumi:"matchMode"`
	// The name of the certificate profile
	Name *string `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	//   - Choices: `CERTIFICATE`, `UPN`
	//   - Default value: `CERTIFICATE`
	UsernameFrom *string `pulumi:"usernameFrom"`
}

// The set of arguments for constructing a CertificateAuthenticationProfile resource.
type CertificateAuthenticationProfileArgs struct {
	// Allow as username
	//   - Default value: `false`
	AllowedAsUserName pulumi.BoolPtrInput
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
	//   - Default value: `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	//   - Default value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringPtrInput
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
	//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
	//   - Default value: `NEVER`
	MatchMode pulumi.StringPtrInput
	// The name of the certificate profile
	Name pulumi.StringPtrInput
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	//   - Choices: `CERTIFICATE`, `UPN`
	//   - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringPtrInput
}

func (CertificateAuthenticationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthenticationProfileArgs)(nil)).Elem()
}

type CertificateAuthenticationProfileInput interface {
	pulumi.Input

	ToCertificateAuthenticationProfileOutput() CertificateAuthenticationProfileOutput
	ToCertificateAuthenticationProfileOutputWithContext(ctx context.Context) CertificateAuthenticationProfileOutput
}

func (*CertificateAuthenticationProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthenticationProfile)(nil)).Elem()
}

func (i *CertificateAuthenticationProfile) ToCertificateAuthenticationProfileOutput() CertificateAuthenticationProfileOutput {
	return i.ToCertificateAuthenticationProfileOutputWithContext(context.Background())
}

func (i *CertificateAuthenticationProfile) ToCertificateAuthenticationProfileOutputWithContext(ctx context.Context) CertificateAuthenticationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthenticationProfileOutput)
}

// CertificateAuthenticationProfileArrayInput is an input type that accepts CertificateAuthenticationProfileArray and CertificateAuthenticationProfileArrayOutput values.
// You can construct a concrete instance of `CertificateAuthenticationProfileArrayInput` via:
//
//	CertificateAuthenticationProfileArray{ CertificateAuthenticationProfileArgs{...} }
type CertificateAuthenticationProfileArrayInput interface {
	pulumi.Input

	ToCertificateAuthenticationProfileArrayOutput() CertificateAuthenticationProfileArrayOutput
	ToCertificateAuthenticationProfileArrayOutputWithContext(context.Context) CertificateAuthenticationProfileArrayOutput
}

type CertificateAuthenticationProfileArray []CertificateAuthenticationProfileInput

func (CertificateAuthenticationProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthenticationProfile)(nil)).Elem()
}

func (i CertificateAuthenticationProfileArray) ToCertificateAuthenticationProfileArrayOutput() CertificateAuthenticationProfileArrayOutput {
	return i.ToCertificateAuthenticationProfileArrayOutputWithContext(context.Background())
}

func (i CertificateAuthenticationProfileArray) ToCertificateAuthenticationProfileArrayOutputWithContext(ctx context.Context) CertificateAuthenticationProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthenticationProfileArrayOutput)
}

// CertificateAuthenticationProfileMapInput is an input type that accepts CertificateAuthenticationProfileMap and CertificateAuthenticationProfileMapOutput values.
// You can construct a concrete instance of `CertificateAuthenticationProfileMapInput` via:
//
//	CertificateAuthenticationProfileMap{ "key": CertificateAuthenticationProfileArgs{...} }
type CertificateAuthenticationProfileMapInput interface {
	pulumi.Input

	ToCertificateAuthenticationProfileMapOutput() CertificateAuthenticationProfileMapOutput
	ToCertificateAuthenticationProfileMapOutputWithContext(context.Context) CertificateAuthenticationProfileMapOutput
}

type CertificateAuthenticationProfileMap map[string]CertificateAuthenticationProfileInput

func (CertificateAuthenticationProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthenticationProfile)(nil)).Elem()
}

func (i CertificateAuthenticationProfileMap) ToCertificateAuthenticationProfileMapOutput() CertificateAuthenticationProfileMapOutput {
	return i.ToCertificateAuthenticationProfileMapOutputWithContext(context.Background())
}

func (i CertificateAuthenticationProfileMap) ToCertificateAuthenticationProfileMapOutputWithContext(ctx context.Context) CertificateAuthenticationProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthenticationProfileMapOutput)
}

type CertificateAuthenticationProfileOutput struct{ *pulumi.OutputState }

func (CertificateAuthenticationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthenticationProfile)(nil)).Elem()
}

func (o CertificateAuthenticationProfileOutput) ToCertificateAuthenticationProfileOutput() CertificateAuthenticationProfileOutput {
	return o
}

func (o CertificateAuthenticationProfileOutput) ToCertificateAuthenticationProfileOutputWithContext(ctx context.Context) CertificateAuthenticationProfileOutput {
	return o
}

// Allow as username
//   - Default value: `false`
func (o CertificateAuthenticationProfileOutput) AllowedAsUserName() pulumi.BoolOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.BoolOutput { return v.AllowedAsUserName }).(pulumi.BoolOutput)
}

// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
//   - Choices: `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`, `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS`
//   - Default value: `SUBJECT_COMMON_NAME`
func (o CertificateAuthenticationProfileOutput) CertificateAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringOutput { return v.CertificateAttributeName }).(pulumi.StringOutput)
}

// Description
func (o CertificateAuthenticationProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
//   - Default value: `[not applicable]`
func (o CertificateAuthenticationProfileOutput) ExternalIdentityStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringOutput { return v.ExternalIdentityStoreName }).(pulumi.StringOutput)
}

// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON
//   - Choices: `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON`
//   - Default value: `NEVER`
func (o CertificateAuthenticationProfileOutput) MatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringOutput { return v.MatchMode }).(pulumi.StringOutput)
}

// The name of the certificate profile
func (o CertificateAuthenticationProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
//   - Choices: `CERTIFICATE`, `UPN`
//   - Default value: `CERTIFICATE`
func (o CertificateAuthenticationProfileOutput) UsernameFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateAuthenticationProfile) pulumi.StringOutput { return v.UsernameFrom }).(pulumi.StringOutput)
}

type CertificateAuthenticationProfileArrayOutput struct{ *pulumi.OutputState }

func (CertificateAuthenticationProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateAuthenticationProfile)(nil)).Elem()
}

func (o CertificateAuthenticationProfileArrayOutput) ToCertificateAuthenticationProfileArrayOutput() CertificateAuthenticationProfileArrayOutput {
	return o
}

func (o CertificateAuthenticationProfileArrayOutput) ToCertificateAuthenticationProfileArrayOutputWithContext(ctx context.Context) CertificateAuthenticationProfileArrayOutput {
	return o
}

func (o CertificateAuthenticationProfileArrayOutput) Index(i pulumi.IntInput) CertificateAuthenticationProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateAuthenticationProfile {
		return vs[0].([]*CertificateAuthenticationProfile)[vs[1].(int)]
	}).(CertificateAuthenticationProfileOutput)
}

type CertificateAuthenticationProfileMapOutput struct{ *pulumi.OutputState }

func (CertificateAuthenticationProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateAuthenticationProfile)(nil)).Elem()
}

func (o CertificateAuthenticationProfileMapOutput) ToCertificateAuthenticationProfileMapOutput() CertificateAuthenticationProfileMapOutput {
	return o
}

func (o CertificateAuthenticationProfileMapOutput) ToCertificateAuthenticationProfileMapOutputWithContext(ctx context.Context) CertificateAuthenticationProfileMapOutput {
	return o
}

func (o CertificateAuthenticationProfileMapOutput) MapIndex(k pulumi.StringInput) CertificateAuthenticationProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateAuthenticationProfile {
		return vs[0].(map[string]*CertificateAuthenticationProfile)[vs[1].(string)]
	}).(CertificateAuthenticationProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthenticationProfileInput)(nil)).Elem(), &CertificateAuthenticationProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthenticationProfileArrayInput)(nil)).Elem(), CertificateAuthenticationProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthenticationProfileMapInput)(nil)).Elem(), CertificateAuthenticationProfileMap{})
	pulumi.RegisterOutputType(CertificateAuthenticationProfileOutput{})
	pulumi.RegisterOutputType(CertificateAuthenticationProfileArrayOutput{})
	pulumi.RegisterOutputType(CertificateAuthenticationProfileMapOutput{})
}
