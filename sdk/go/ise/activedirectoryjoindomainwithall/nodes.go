// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectoryjoindomainwithall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Active Directory Join Domain with All Nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/ActiveDirectoryJoinDomainWithAll"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ActiveDirectoryJoinDomainWithAll.NewNodes(ctx, "example", &ActiveDirectoryJoinDomainWithAll.NodesArgs{
//				JoinPointId: pulumi.String("73808580-b6e6-11ee-8960-de6d7692bc40"),
//				AdditionalDatas: activedirectoryjoindomainwithall.NodesAdditionalDataArray{
//					&activedirectoryjoindomainwithall.NodesAdditionalDataArgs{
//						Name:  pulumi.String("username"),
//						Value: pulumi.String("administrator"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Nodes struct {
	pulumi.CustomResourceState

	AdditionalDatas NodesAdditionalDataArrayOutput `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId pulumi.StringOutput `pulumi:"joinPointId"`
}

// NewNodes registers a new resource with the given unique name, arguments, and options.
func NewNodes(ctx *pulumi.Context,
	name string, args *NodesArgs, opts ...pulumi.ResourceOption) (*Nodes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdditionalDatas == nil {
		return nil, errors.New("invalid value for required argument 'AdditionalDatas'")
	}
	if args.JoinPointId == nil {
		return nil, errors.New("invalid value for required argument 'JoinPointId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nodes
	err := ctx.RegisterResource("ise:ActiveDirectoryJoinDomainWithAll/nodes:Nodes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodes gets an existing Nodes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodesState, opts ...pulumi.ResourceOption) (*Nodes, error) {
	var resource Nodes
	err := ctx.ReadResource("ise:ActiveDirectoryJoinDomainWithAll/nodes:Nodes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nodes resources.
type nodesState struct {
	AdditionalDatas []NodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId *string `pulumi:"joinPointId"`
}

type NodesState struct {
	AdditionalDatas NodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringPtrInput
}

func (NodesState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodesState)(nil)).Elem()
}

type nodesArgs struct {
	AdditionalDatas []NodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId string `pulumi:"joinPointId"`
}

// The set of arguments for constructing a Nodes resource.
type NodesArgs struct {
	AdditionalDatas NodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringInput
}

func (NodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodesArgs)(nil)).Elem()
}

type NodesInput interface {
	pulumi.Input

	ToNodesOutput() NodesOutput
	ToNodesOutputWithContext(ctx context.Context) NodesOutput
}

func (*Nodes) ElementType() reflect.Type {
	return reflect.TypeOf((**Nodes)(nil)).Elem()
}

func (i *Nodes) ToNodesOutput() NodesOutput {
	return i.ToNodesOutputWithContext(context.Background())
}

func (i *Nodes) ToNodesOutputWithContext(ctx context.Context) NodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodesOutput)
}

// NodesArrayInput is an input type that accepts NodesArray and NodesArrayOutput values.
// You can construct a concrete instance of `NodesArrayInput` via:
//
//	NodesArray{ NodesArgs{...} }
type NodesArrayInput interface {
	pulumi.Input

	ToNodesArrayOutput() NodesArrayOutput
	ToNodesArrayOutputWithContext(context.Context) NodesArrayOutput
}

type NodesArray []NodesInput

func (NodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nodes)(nil)).Elem()
}

func (i NodesArray) ToNodesArrayOutput() NodesArrayOutput {
	return i.ToNodesArrayOutputWithContext(context.Background())
}

func (i NodesArray) ToNodesArrayOutputWithContext(ctx context.Context) NodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodesArrayOutput)
}

// NodesMapInput is an input type that accepts NodesMap and NodesMapOutput values.
// You can construct a concrete instance of `NodesMapInput` via:
//
//	NodesMap{ "key": NodesArgs{...} }
type NodesMapInput interface {
	pulumi.Input

	ToNodesMapOutput() NodesMapOutput
	ToNodesMapOutputWithContext(context.Context) NodesMapOutput
}

type NodesMap map[string]NodesInput

func (NodesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nodes)(nil)).Elem()
}

func (i NodesMap) ToNodesMapOutput() NodesMapOutput {
	return i.ToNodesMapOutputWithContext(context.Background())
}

func (i NodesMap) ToNodesMapOutputWithContext(ctx context.Context) NodesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodesMapOutput)
}

type NodesOutput struct{ *pulumi.OutputState }

func (NodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nodes)(nil)).Elem()
}

func (o NodesOutput) ToNodesOutput() NodesOutput {
	return o
}

func (o NodesOutput) ToNodesOutputWithContext(ctx context.Context) NodesOutput {
	return o
}

func (o NodesOutput) AdditionalDatas() NodesAdditionalDataArrayOutput {
	return o.ApplyT(func(v *Nodes) NodesAdditionalDataArrayOutput { return v.AdditionalDatas }).(NodesAdditionalDataArrayOutput)
}

// Active Directory Join Point ID
func (o NodesOutput) JoinPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nodes) pulumi.StringOutput { return v.JoinPointId }).(pulumi.StringOutput)
}

type NodesArrayOutput struct{ *pulumi.OutputState }

func (NodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nodes)(nil)).Elem()
}

func (o NodesArrayOutput) ToNodesArrayOutput() NodesArrayOutput {
	return o
}

func (o NodesArrayOutput) ToNodesArrayOutputWithContext(ctx context.Context) NodesArrayOutput {
	return o
}

func (o NodesArrayOutput) Index(i pulumi.IntInput) NodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nodes {
		return vs[0].([]*Nodes)[vs[1].(int)]
	}).(NodesOutput)
}

type NodesMapOutput struct{ *pulumi.OutputState }

func (NodesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nodes)(nil)).Elem()
}

func (o NodesMapOutput) ToNodesMapOutput() NodesMapOutput {
	return o
}

func (o NodesMapOutput) ToNodesMapOutputWithContext(ctx context.Context) NodesMapOutput {
	return o
}

func (o NodesMapOutput) MapIndex(k pulumi.StringInput) NodesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nodes {
		return vs[0].(map[string]*Nodes)[vs[1].(string)]
	}).(NodesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodesInput)(nil)).Elem(), &Nodes{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodesArrayInput)(nil)).Elem(), NodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodesMapInput)(nil)).Elem(), NodesMap{})
	pulumi.RegisterOutputType(NodesOutput{})
	pulumi.RegisterOutputType(NodesArrayOutput{})
	pulumi.RegisterOutputType(NodesMapOutput{})
}
