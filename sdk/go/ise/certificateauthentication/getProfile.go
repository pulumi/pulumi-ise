// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthentication

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Certificate Authentication Profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/CertificateAuthentication"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CertificateAuthentication.GetProfile(ctx, &certificateauthentication.GetProfileArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProfile(ctx *pulumi.Context, args *LookupProfileArgs, opts ...pulumi.InvokeOption) (*LookupProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProfileResult
	err := ctx.Invoke("ise:CertificateAuthentication/getProfile:getProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProfile.
type LookupProfileArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the certificate profile
	Name *string `pulumi:"name"`
}

// A collection of values returned by getProfile.
type LookupProfileResult struct {
	// Allow as username
	AllowedAsUserName bool `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
	CertificateAttributeName string `pulumi:"certificateAttributeName"`
	// Description
	Description string `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
	ExternalIdentityStoreName string `pulumi:"externalIdentityStoreName"`
	// The id of the object
	Id string `pulumi:"id"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE*IDENTITY*AMBIGUITY, BINARY_COMPARISON
	MatchMode string `pulumi:"matchMode"`
	// The name of the certificate profile
	Name string `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
	UsernameFrom string `pulumi:"usernameFrom"`
}

func LookupProfileOutput(ctx *pulumi.Context, args LookupProfileOutputArgs, opts ...pulumi.InvokeOption) LookupProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProfileResult, error) {
			args := v.(LookupProfileArgs)
			r, err := LookupProfile(ctx, &args, opts...)
			var s LookupProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProfileResultOutput)
}

// A collection of arguments for invoking getProfile.
type LookupProfileOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the certificate profile
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProfileArgs)(nil)).Elem()
}

// A collection of values returned by getProfile.
type LookupProfileResultOutput struct{ *pulumi.OutputState }

func (LookupProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProfileResult)(nil)).Elem()
}

func (o LookupProfileResultOutput) ToLookupProfileResultOutput() LookupProfileResultOutput {
	return o
}

func (o LookupProfileResultOutput) ToLookupProfileResultOutputWithContext(ctx context.Context) LookupProfileResultOutput {
	return o
}

// Allow as username
func (o LookupProfileResultOutput) AllowedAsUserName() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProfileResult) bool { return v.AllowedAsUserName }).(pulumi.BoolOutput)
}

// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `usernameFrom`.
func (o LookupProfileResultOutput) CertificateAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.CertificateAttributeName }).(pulumi.StringOutput)
}

// Description
func (o LookupProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen
func (o LookupProfileResultOutput) ExternalIdentityStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.ExternalIdentityStoreName }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE*IDENTITY*AMBIGUITY, BINARY_COMPARISON
func (o LookupProfileResultOutput) MatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.MatchMode }).(pulumi.StringOutput)
}

// The name of the certificate profile
func (o LookupProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)
func (o LookupProfileResultOutput) UsernameFrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.UsernameFrom }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProfileResultOutput{})
}
