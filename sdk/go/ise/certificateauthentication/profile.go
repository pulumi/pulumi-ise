// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthentication

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Certificate Authentication Profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/CertificateAuthentication"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CertificateAuthentication.NewProfile(ctx, "example", &CertificateAuthentication.ProfileArgs{
//				Name:                      pulumi.String("CertProf1"),
//				Description:               pulumi.String("My cert profile"),
//				AllowedAsUserName:         pulumi.Bool(false),
//				ExternalIdentityStoreName: pulumi.String("[not applicable]"),
//				CertificateAttributeName:  pulumi.String("SUBJECT_COMMON_NAME"),
//				MatchMode:                 pulumi.String("NEVER"),
//				UsernameFrom:              pulumi.String("CERTIFICATE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:CertificateAuthentication/profile:Profile example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Profile struct {
	pulumi.CustomResourceState

	// Allow as username - Default value: `false`
	AllowedAsUserName pulumi.BoolOutput `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
	// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
	// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
	// `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringOutput `pulumi:"certificateAttributeName"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
	// value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringOutput `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
	// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
	MatchMode pulumi.StringOutput `pulumi:"matchMode"`
	// The name of the certificate profile
	Name pulumi.StringOutput `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
	// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
	// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringOutput `pulumi:"usernameFrom"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		args = &ProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("ise:CertificateAuthentication/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("ise:CertificateAuthentication/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// Allow as username - Default value: `false`
	AllowedAsUserName *bool `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
	// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
	// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
	// `SUBJECT_COMMON_NAME`
	CertificateAttributeName *string `pulumi:"certificateAttributeName"`
	// Description
	Description *string `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
	// value: `[not applicable]`
	ExternalIdentityStoreName *string `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
	// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
	MatchMode *string `pulumi:"matchMode"`
	// The name of the certificate profile
	Name *string `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
	// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
	// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
	UsernameFrom *string `pulumi:"usernameFrom"`
}

type ProfileState struct {
	// Allow as username - Default value: `false`
	AllowedAsUserName pulumi.BoolPtrInput
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
	// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
	// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
	// `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
	// value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringPtrInput
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
	// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
	MatchMode pulumi.StringPtrInput
	// The name of the certificate profile
	Name pulumi.StringPtrInput
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
	// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
	// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringPtrInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// Allow as username - Default value: `false`
	AllowedAsUserName *bool `pulumi:"allowedAsUserName"`
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
	// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
	// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
	// `SUBJECT_COMMON_NAME`
	CertificateAttributeName *string `pulumi:"certificateAttributeName"`
	// Description
	Description *string `pulumi:"description"`
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
	// value: `[not applicable]`
	ExternalIdentityStoreName *string `pulumi:"externalIdentityStoreName"`
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
	// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
	MatchMode *string `pulumi:"matchMode"`
	// The name of the certificate profile
	Name *string `pulumi:"name"`
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
	// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
	// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
	UsernameFrom *string `pulumi:"usernameFrom"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// Allow as username - Default value: `false`
	AllowedAsUserName pulumi.BoolPtrInput
	// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
	// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
	// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
	// `SUBJECT_COMMON_NAME`
	CertificateAttributeName pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
	// value: `[not applicable]`
	ExternalIdentityStoreName pulumi.StringPtrInput
	// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
	// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
	MatchMode pulumi.StringPtrInput
	// The name of the certificate profile
	Name pulumi.StringPtrInput
	// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
	// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
	// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
	UsernameFrom pulumi.StringPtrInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// Allow as username - Default value: `false`
func (o ProfileOutput) AllowedAsUserName() pulumi.BoolOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolOutput { return v.AllowedAsUserName }).(pulumi.BoolOutput)
}

// Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:
// `SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,
// `SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:
// `SUBJECT_COMMON_NAME`
func (o ProfileOutput) CertificateAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.CertificateAttributeName }).(pulumi.StringOutput)
}

// Description
func (o ProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default
// value: `[not applicable]`
func (o ProfileOutput) ExternalIdentityStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ExternalIdentityStoreName }).(pulumi.StringOutput)
}

// Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:
// `NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`
func (o ProfileOutput) MatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.MatchMode }).(pulumi.StringOutput)
}

// The name of the certificate profile
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific
// attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the
// Certificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`
func (o ProfileOutput) UsernameFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.UsernameFrom }).(pulumi.StringOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
