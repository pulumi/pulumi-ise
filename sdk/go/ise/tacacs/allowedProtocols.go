// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tacacs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/tacacs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tacacs.NewAllowedProtocols(ctx, "example", &tacacs.AllowedProtocolsArgs{
//				Name:          pulumi.String("Protocols1"),
//				Description:   pulumi.String("My allowed TACACS protocols"),
//				AllowPapAscii: pulumi.Bool(true),
//				AllowChap:     pulumi.Bool(true),
//				AllowMsChapV1: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:tacacs/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AllowedProtocols struct {
	pulumi.CustomResourceState

	// Allow CHAP
	AllowChap pulumi.BoolOutput `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolOutput `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolOutput `pulumi:"allowPapAscii"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the allowed protocols
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAllowedProtocols registers a new resource with the given unique name, arguments, and options.
func NewAllowedProtocols(ctx *pulumi.Context,
	name string, args *AllowedProtocolsArgs, opts ...pulumi.ResourceOption) (*AllowedProtocols, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowChap == nil {
		return nil, errors.New("invalid value for required argument 'AllowChap'")
	}
	if args.AllowMsChapV1 == nil {
		return nil, errors.New("invalid value for required argument 'AllowMsChapV1'")
	}
	if args.AllowPapAscii == nil {
		return nil, errors.New("invalid value for required argument 'AllowPapAscii'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AllowedProtocols
	err := ctx.RegisterResource("ise:tacacs/allowedProtocols:AllowedProtocols", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAllowedProtocols gets an existing AllowedProtocols resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAllowedProtocols(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AllowedProtocolsState, opts ...pulumi.ResourceOption) (*AllowedProtocols, error) {
	var resource AllowedProtocols
	err := ctx.ReadResource("ise:tacacs/allowedProtocols:AllowedProtocols", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AllowedProtocols resources.
type allowedProtocolsState struct {
	// Allow CHAP
	AllowChap *bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 *bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii *bool `pulumi:"allowPapAscii"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

type AllowedProtocolsState struct {
	// Allow CHAP
	AllowChap pulumi.BoolPtrInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolPtrInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolPtrInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
}

func (AllowedProtocolsState) ElementType() reflect.Type {
	return reflect.TypeOf((*allowedProtocolsState)(nil)).Elem()
}

type allowedProtocolsArgs struct {
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AllowedProtocols resource.
type AllowedProtocolsArgs struct {
	// Allow CHAP
	AllowChap pulumi.BoolInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
}

func (AllowedProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*allowedProtocolsArgs)(nil)).Elem()
}

type AllowedProtocolsInput interface {
	pulumi.Input

	ToAllowedProtocolsOutput() AllowedProtocolsOutput
	ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput
}

func (*AllowedProtocols) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedProtocols)(nil)).Elem()
}

func (i *AllowedProtocols) ToAllowedProtocolsOutput() AllowedProtocolsOutput {
	return i.ToAllowedProtocolsOutputWithContext(context.Background())
}

func (i *AllowedProtocols) ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsOutput)
}

// AllowedProtocolsArrayInput is an input type that accepts AllowedProtocolsArray and AllowedProtocolsArrayOutput values.
// You can construct a concrete instance of `AllowedProtocolsArrayInput` via:
//
//	AllowedProtocolsArray{ AllowedProtocolsArgs{...} }
type AllowedProtocolsArrayInput interface {
	pulumi.Input

	ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput
	ToAllowedProtocolsArrayOutputWithContext(context.Context) AllowedProtocolsArrayOutput
}

type AllowedProtocolsArray []AllowedProtocolsInput

func (AllowedProtocolsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowedProtocols)(nil)).Elem()
}

func (i AllowedProtocolsArray) ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput {
	return i.ToAllowedProtocolsArrayOutputWithContext(context.Background())
}

func (i AllowedProtocolsArray) ToAllowedProtocolsArrayOutputWithContext(ctx context.Context) AllowedProtocolsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsArrayOutput)
}

// AllowedProtocolsMapInput is an input type that accepts AllowedProtocolsMap and AllowedProtocolsMapOutput values.
// You can construct a concrete instance of `AllowedProtocolsMapInput` via:
//
//	AllowedProtocolsMap{ "key": AllowedProtocolsArgs{...} }
type AllowedProtocolsMapInput interface {
	pulumi.Input

	ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput
	ToAllowedProtocolsMapOutputWithContext(context.Context) AllowedProtocolsMapOutput
}

type AllowedProtocolsMap map[string]AllowedProtocolsInput

func (AllowedProtocolsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowedProtocols)(nil)).Elem()
}

func (i AllowedProtocolsMap) ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput {
	return i.ToAllowedProtocolsMapOutputWithContext(context.Background())
}

func (i AllowedProtocolsMap) ToAllowedProtocolsMapOutputWithContext(ctx context.Context) AllowedProtocolsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsMapOutput)
}

type AllowedProtocolsOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsOutput) ToAllowedProtocolsOutput() AllowedProtocolsOutput {
	return o
}

func (o AllowedProtocolsOutput) ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput {
	return o
}

// Allow CHAP
func (o AllowedProtocolsOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o AllowedProtocolsOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o AllowedProtocolsOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Description
func (o AllowedProtocolsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the allowed protocols
func (o AllowedProtocolsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AllowedProtocolsArrayOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsArrayOutput) ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput {
	return o
}

func (o AllowedProtocolsArrayOutput) ToAllowedProtocolsArrayOutputWithContext(ctx context.Context) AllowedProtocolsArrayOutput {
	return o
}

func (o AllowedProtocolsArrayOutput) Index(i pulumi.IntInput) AllowedProtocolsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AllowedProtocols {
		return vs[0].([]*AllowedProtocols)[vs[1].(int)]
	}).(AllowedProtocolsOutput)
}

type AllowedProtocolsMapOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsMapOutput) ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput {
	return o
}

func (o AllowedProtocolsMapOutput) ToAllowedProtocolsMapOutputWithContext(ctx context.Context) AllowedProtocolsMapOutput {
	return o
}

func (o AllowedProtocolsMapOutput) MapIndex(k pulumi.StringInput) AllowedProtocolsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AllowedProtocols {
		return vs[0].(map[string]*AllowedProtocols)[vs[1].(string)]
	}).(AllowedProtocolsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsInput)(nil)).Elem(), &AllowedProtocols{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsArrayInput)(nil)).Elem(), AllowedProtocolsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsMapInput)(nil)).Elem(), AllowedProtocolsMap{})
	pulumi.RegisterOutputType(AllowedProtocolsOutput{})
	pulumi.RegisterOutputType(AllowedProtocolsArrayOutput{})
	pulumi.RegisterOutputType(AllowedProtocolsMapOutput{})
}
