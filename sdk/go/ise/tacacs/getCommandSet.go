// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tacacs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the TACACS Command Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/tacacs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tacacs.LookupCommandSet(ctx, &tacacs.LookupCommandSetArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCommandSet(ctx *pulumi.Context, args *LookupCommandSetArgs, opts ...pulumi.InvokeOption) (*LookupCommandSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCommandSetResult
	err := ctx.Invoke("ise:tacacs/getCommandSet:getCommandSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCommandSet.
type LookupCommandSetArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCommandSet.
type LookupCommandSetResult struct {
	Commands []GetCommandSetCommand `pulumi:"commands"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the TACACS command set
	Name string `pulumi:"name"`
	// Permit unmatched commands
	PermitUnmatched bool `pulumi:"permitUnmatched"`
}

func LookupCommandSetOutput(ctx *pulumi.Context, args LookupCommandSetOutputArgs, opts ...pulumi.InvokeOption) LookupCommandSetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCommandSetResult, error) {
			args := v.(LookupCommandSetArgs)
			r, err := LookupCommandSet(ctx, &args, opts...)
			var s LookupCommandSetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCommandSetResultOutput)
}

// A collection of arguments for invoking getCommandSet.
type LookupCommandSetOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the TACACS command set
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCommandSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommandSetArgs)(nil)).Elem()
}

// A collection of values returned by getCommandSet.
type LookupCommandSetResultOutput struct{ *pulumi.OutputState }

func (LookupCommandSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommandSetResult)(nil)).Elem()
}

func (o LookupCommandSetResultOutput) ToLookupCommandSetResultOutput() LookupCommandSetResultOutput {
	return o
}

func (o LookupCommandSetResultOutput) ToLookupCommandSetResultOutputWithContext(ctx context.Context) LookupCommandSetResultOutput {
	return o
}

func (o LookupCommandSetResultOutput) Commands() GetCommandSetCommandArrayOutput {
	return o.ApplyT(func(v LookupCommandSetResult) []GetCommandSetCommand { return v.Commands }).(GetCommandSetCommandArrayOutput)
}

// Description
func (o LookupCommandSetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommandSetResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupCommandSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommandSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the TACACS command set
func (o LookupCommandSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommandSetResult) string { return v.Name }).(pulumi.StringOutput)
}

// Permit unmatched commands
func (o LookupCommandSetResultOutput) PermitUnmatched() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCommandSetResult) bool { return v.PermitUnmatched }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCommandSetResultOutput{})
}
