// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tacacs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS Command Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/tacacs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tacacs.NewCommandSet(ctx, "example", &tacacs.CommandSetArgs{
//				Name:            pulumi.String("CommandSet1"),
//				Description:     pulumi.String("My TACACS command set"),
//				PermitUnmatched: pulumi.Bool(true),
//				Commands: tacacs.CommandSetCommandArray{
//					&tacacs.CommandSetCommandArgs{
//						Grant:     pulumi.String("PERMIT"),
//						Command:   pulumi.String("show"),
//						Arguments: pulumi.String(""),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:tacacs/commandSet:CommandSet example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type CommandSet struct {
	pulumi.CustomResourceState

	Commands CommandSetCommandArrayOutput `pulumi:"commands"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the TACACS command set
	Name pulumi.StringOutput `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolOutput `pulumi:"permitUnmatched"`
}

// NewCommandSet registers a new resource with the given unique name, arguments, and options.
func NewCommandSet(ctx *pulumi.Context,
	name string, args *CommandSetArgs, opts ...pulumi.ResourceOption) (*CommandSet, error) {
	if args == nil {
		args = &CommandSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CommandSet
	err := ctx.RegisterResource("ise:tacacs/commandSet:CommandSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommandSet gets an existing CommandSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommandSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandSetState, opts ...pulumi.ResourceOption) (*CommandSet, error) {
	var resource CommandSet
	err := ctx.ReadResource("ise:tacacs/commandSet:CommandSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CommandSet resources.
type commandSetState struct {
	Commands []CommandSetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

type CommandSetState struct {
	Commands CommandSetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (CommandSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandSetState)(nil)).Elem()
}

type commandSetArgs struct {
	Commands []CommandSetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

// The set of arguments for constructing a CommandSet resource.
type CommandSetArgs struct {
	Commands CommandSetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (CommandSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandSetArgs)(nil)).Elem()
}

type CommandSetInput interface {
	pulumi.Input

	ToCommandSetOutput() CommandSetOutput
	ToCommandSetOutputWithContext(ctx context.Context) CommandSetOutput
}

func (*CommandSet) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandSet)(nil)).Elem()
}

func (i *CommandSet) ToCommandSetOutput() CommandSetOutput {
	return i.ToCommandSetOutputWithContext(context.Background())
}

func (i *CommandSet) ToCommandSetOutputWithContext(ctx context.Context) CommandSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandSetOutput)
}

// CommandSetArrayInput is an input type that accepts CommandSetArray and CommandSetArrayOutput values.
// You can construct a concrete instance of `CommandSetArrayInput` via:
//
//	CommandSetArray{ CommandSetArgs{...} }
type CommandSetArrayInput interface {
	pulumi.Input

	ToCommandSetArrayOutput() CommandSetArrayOutput
	ToCommandSetArrayOutputWithContext(context.Context) CommandSetArrayOutput
}

type CommandSetArray []CommandSetInput

func (CommandSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommandSet)(nil)).Elem()
}

func (i CommandSetArray) ToCommandSetArrayOutput() CommandSetArrayOutput {
	return i.ToCommandSetArrayOutputWithContext(context.Background())
}

func (i CommandSetArray) ToCommandSetArrayOutputWithContext(ctx context.Context) CommandSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandSetArrayOutput)
}

// CommandSetMapInput is an input type that accepts CommandSetMap and CommandSetMapOutput values.
// You can construct a concrete instance of `CommandSetMapInput` via:
//
//	CommandSetMap{ "key": CommandSetArgs{...} }
type CommandSetMapInput interface {
	pulumi.Input

	ToCommandSetMapOutput() CommandSetMapOutput
	ToCommandSetMapOutputWithContext(context.Context) CommandSetMapOutput
}

type CommandSetMap map[string]CommandSetInput

func (CommandSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommandSet)(nil)).Elem()
}

func (i CommandSetMap) ToCommandSetMapOutput() CommandSetMapOutput {
	return i.ToCommandSetMapOutputWithContext(context.Background())
}

func (i CommandSetMap) ToCommandSetMapOutputWithContext(ctx context.Context) CommandSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandSetMapOutput)
}

type CommandSetOutput struct{ *pulumi.OutputState }

func (CommandSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandSet)(nil)).Elem()
}

func (o CommandSetOutput) ToCommandSetOutput() CommandSetOutput {
	return o
}

func (o CommandSetOutput) ToCommandSetOutputWithContext(ctx context.Context) CommandSetOutput {
	return o
}

func (o CommandSetOutput) Commands() CommandSetCommandArrayOutput {
	return o.ApplyT(func(v *CommandSet) CommandSetCommandArrayOutput { return v.Commands }).(CommandSetCommandArrayOutput)
}

// Description
func (o CommandSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the TACACS command set
func (o CommandSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CommandSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Permit unmatched commands - Default value: `false`
func (o CommandSetOutput) PermitUnmatched() pulumi.BoolOutput {
	return o.ApplyT(func(v *CommandSet) pulumi.BoolOutput { return v.PermitUnmatched }).(pulumi.BoolOutput)
}

type CommandSetArrayOutput struct{ *pulumi.OutputState }

func (CommandSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommandSet)(nil)).Elem()
}

func (o CommandSetArrayOutput) ToCommandSetArrayOutput() CommandSetArrayOutput {
	return o
}

func (o CommandSetArrayOutput) ToCommandSetArrayOutputWithContext(ctx context.Context) CommandSetArrayOutput {
	return o
}

func (o CommandSetArrayOutput) Index(i pulumi.IntInput) CommandSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CommandSet {
		return vs[0].([]*CommandSet)[vs[1].(int)]
	}).(CommandSetOutput)
}

type CommandSetMapOutput struct{ *pulumi.OutputState }

func (CommandSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommandSet)(nil)).Elem()
}

func (o CommandSetMapOutput) ToCommandSetMapOutput() CommandSetMapOutput {
	return o
}

func (o CommandSetMapOutput) ToCommandSetMapOutputWithContext(ctx context.Context) CommandSetMapOutput {
	return o
}

func (o CommandSetMapOutput) MapIndex(k pulumi.StringInput) CommandSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CommandSet {
		return vs[0].(map[string]*CommandSet)[vs[1].(string)]
	}).(CommandSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandSetInput)(nil)).Elem(), &CommandSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandSetArrayInput)(nil)).Elem(), CommandSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandSetMapInput)(nil)).Elem(), CommandSetMap{})
	pulumi.RegisterOutputType(CommandSetOutput{})
	pulumi.RegisterOutputType(CommandSetArrayOutput{})
	pulumi.RegisterOutputType(CommandSetMapOutput{})
}
