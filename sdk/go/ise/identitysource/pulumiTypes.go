// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitysource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SequenceIdentitySource struct {
	// Name of the identity source
	Name string `pulumi:"name"`
	// Order of the identity source in the sequence
	Order int `pulumi:"order"`
}

// SequenceIdentitySourceInput is an input type that accepts SequenceIdentitySourceArgs and SequenceIdentitySourceOutput values.
// You can construct a concrete instance of `SequenceIdentitySourceInput` via:
//
//	SequenceIdentitySourceArgs{...}
type SequenceIdentitySourceInput interface {
	pulumi.Input

	ToSequenceIdentitySourceOutput() SequenceIdentitySourceOutput
	ToSequenceIdentitySourceOutputWithContext(context.Context) SequenceIdentitySourceOutput
}

type SequenceIdentitySourceArgs struct {
	// Name of the identity source
	Name pulumi.StringInput `pulumi:"name"`
	// Order of the identity source in the sequence
	Order pulumi.IntInput `pulumi:"order"`
}

func (SequenceIdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceIdentitySource)(nil)).Elem()
}

func (i SequenceIdentitySourceArgs) ToSequenceIdentitySourceOutput() SequenceIdentitySourceOutput {
	return i.ToSequenceIdentitySourceOutputWithContext(context.Background())
}

func (i SequenceIdentitySourceArgs) ToSequenceIdentitySourceOutputWithContext(ctx context.Context) SequenceIdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceIdentitySourceOutput)
}

// SequenceIdentitySourceArrayInput is an input type that accepts SequenceIdentitySourceArray and SequenceIdentitySourceArrayOutput values.
// You can construct a concrete instance of `SequenceIdentitySourceArrayInput` via:
//
//	SequenceIdentitySourceArray{ SequenceIdentitySourceArgs{...} }
type SequenceIdentitySourceArrayInput interface {
	pulumi.Input

	ToSequenceIdentitySourceArrayOutput() SequenceIdentitySourceArrayOutput
	ToSequenceIdentitySourceArrayOutputWithContext(context.Context) SequenceIdentitySourceArrayOutput
}

type SequenceIdentitySourceArray []SequenceIdentitySourceInput

func (SequenceIdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SequenceIdentitySource)(nil)).Elem()
}

func (i SequenceIdentitySourceArray) ToSequenceIdentitySourceArrayOutput() SequenceIdentitySourceArrayOutput {
	return i.ToSequenceIdentitySourceArrayOutputWithContext(context.Background())
}

func (i SequenceIdentitySourceArray) ToSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) SequenceIdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceIdentitySourceArrayOutput)
}

type SequenceIdentitySourceOutput struct{ *pulumi.OutputState }

func (SequenceIdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceIdentitySource)(nil)).Elem()
}

func (o SequenceIdentitySourceOutput) ToSequenceIdentitySourceOutput() SequenceIdentitySourceOutput {
	return o
}

func (o SequenceIdentitySourceOutput) ToSequenceIdentitySourceOutputWithContext(ctx context.Context) SequenceIdentitySourceOutput {
	return o
}

// Name of the identity source
func (o SequenceIdentitySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SequenceIdentitySource) string { return v.Name }).(pulumi.StringOutput)
}

// Order of the identity source in the sequence
func (o SequenceIdentitySourceOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v SequenceIdentitySource) int { return v.Order }).(pulumi.IntOutput)
}

type SequenceIdentitySourceArrayOutput struct{ *pulumi.OutputState }

func (SequenceIdentitySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SequenceIdentitySource)(nil)).Elem()
}

func (o SequenceIdentitySourceArrayOutput) ToSequenceIdentitySourceArrayOutput() SequenceIdentitySourceArrayOutput {
	return o
}

func (o SequenceIdentitySourceArrayOutput) ToSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) SequenceIdentitySourceArrayOutput {
	return o
}

func (o SequenceIdentitySourceArrayOutput) Index(i pulumi.IntInput) SequenceIdentitySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SequenceIdentitySource {
		return vs[0].([]SequenceIdentitySource)[vs[1].(int)]
	}).(SequenceIdentitySourceOutput)
}

type GetSequenceIdentitySource struct {
	// Name of the identity source
	Name string `pulumi:"name"`
	// Order of the identity source in the sequence
	Order int `pulumi:"order"`
}

// GetSequenceIdentitySourceInput is an input type that accepts GetSequenceIdentitySourceArgs and GetSequenceIdentitySourceOutput values.
// You can construct a concrete instance of `GetSequenceIdentitySourceInput` via:
//
//	GetSequenceIdentitySourceArgs{...}
type GetSequenceIdentitySourceInput interface {
	pulumi.Input

	ToGetSequenceIdentitySourceOutput() GetSequenceIdentitySourceOutput
	ToGetSequenceIdentitySourceOutputWithContext(context.Context) GetSequenceIdentitySourceOutput
}

type GetSequenceIdentitySourceArgs struct {
	// Name of the identity source
	Name pulumi.StringInput `pulumi:"name"`
	// Order of the identity source in the sequence
	Order pulumi.IntInput `pulumi:"order"`
}

func (GetSequenceIdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequenceIdentitySource)(nil)).Elem()
}

func (i GetSequenceIdentitySourceArgs) ToGetSequenceIdentitySourceOutput() GetSequenceIdentitySourceOutput {
	return i.ToGetSequenceIdentitySourceOutputWithContext(context.Background())
}

func (i GetSequenceIdentitySourceArgs) ToGetSequenceIdentitySourceOutputWithContext(ctx context.Context) GetSequenceIdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequenceIdentitySourceOutput)
}

// GetSequenceIdentitySourceArrayInput is an input type that accepts GetSequenceIdentitySourceArray and GetSequenceIdentitySourceArrayOutput values.
// You can construct a concrete instance of `GetSequenceIdentitySourceArrayInput` via:
//
//	GetSequenceIdentitySourceArray{ GetSequenceIdentitySourceArgs{...} }
type GetSequenceIdentitySourceArrayInput interface {
	pulumi.Input

	ToGetSequenceIdentitySourceArrayOutput() GetSequenceIdentitySourceArrayOutput
	ToGetSequenceIdentitySourceArrayOutputWithContext(context.Context) GetSequenceIdentitySourceArrayOutput
}

type GetSequenceIdentitySourceArray []GetSequenceIdentitySourceInput

func (GetSequenceIdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequenceIdentitySource)(nil)).Elem()
}

func (i GetSequenceIdentitySourceArray) ToGetSequenceIdentitySourceArrayOutput() GetSequenceIdentitySourceArrayOutput {
	return i.ToGetSequenceIdentitySourceArrayOutputWithContext(context.Background())
}

func (i GetSequenceIdentitySourceArray) ToGetSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) GetSequenceIdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequenceIdentitySourceArrayOutput)
}

type GetSequenceIdentitySourceOutput struct{ *pulumi.OutputState }

func (GetSequenceIdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequenceIdentitySource)(nil)).Elem()
}

func (o GetSequenceIdentitySourceOutput) ToGetSequenceIdentitySourceOutput() GetSequenceIdentitySourceOutput {
	return o
}

func (o GetSequenceIdentitySourceOutput) ToGetSequenceIdentitySourceOutputWithContext(ctx context.Context) GetSequenceIdentitySourceOutput {
	return o
}

// Name of the identity source
func (o GetSequenceIdentitySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequenceIdentitySource) string { return v.Name }).(pulumi.StringOutput)
}

// Order of the identity source in the sequence
func (o GetSequenceIdentitySourceOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v GetSequenceIdentitySource) int { return v.Order }).(pulumi.IntOutput)
}

type GetSequenceIdentitySourceArrayOutput struct{ *pulumi.OutputState }

func (GetSequenceIdentitySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequenceIdentitySource)(nil)).Elem()
}

func (o GetSequenceIdentitySourceArrayOutput) ToGetSequenceIdentitySourceArrayOutput() GetSequenceIdentitySourceArrayOutput {
	return o
}

func (o GetSequenceIdentitySourceArrayOutput) ToGetSequenceIdentitySourceArrayOutputWithContext(ctx context.Context) GetSequenceIdentitySourceArrayOutput {
	return o
}

func (o GetSequenceIdentitySourceArrayOutput) Index(i pulumi.IntInput) GetSequenceIdentitySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSequenceIdentitySource {
		return vs[0].([]GetSequenceIdentitySource)[vs[1].(int)]
	}).(GetSequenceIdentitySourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceIdentitySourceInput)(nil)).Elem(), SequenceIdentitySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceIdentitySourceArrayInput)(nil)).Elem(), SequenceIdentitySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequenceIdentitySourceInput)(nil)).Elem(), GetSequenceIdentitySourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequenceIdentitySourceArrayInput)(nil)).Elem(), GetSequenceIdentitySourceArray{})
	pulumi.RegisterOutputType(SequenceIdentitySourceOutput{})
	pulumi.RegisterOutputType(SequenceIdentitySourceArrayOutput{})
	pulumi.RegisterOutputType(GetSequenceIdentitySourceOutput{})
	pulumi.RegisterOutputType(GetSequenceIdentitySourceArrayOutput{})
}
