// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitysource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Identity Source Sequence.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/IdentitySource"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := IdentitySource.GetSequence(ctx, &identitysource.GetSequenceArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSequence(ctx *pulumi.Context, args *LookupSequenceArgs, opts ...pulumi.InvokeOption) (*LookupSequenceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSequenceResult
	err := ctx.Invoke("ise:IdentitySource/getSequence:getSequence", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSequence.
type LookupSequenceArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the identity source sequence
	Name *string `pulumi:"name"`
}

// A collection of values returned by getSequence.
type LookupSequenceResult struct {
	// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
	BreakOnStoreFail bool `pulumi:"breakOnStoreFail"`
	// Certificate Authentication Profile, empty if doesn't exist
	CertificateAuthenticationProfile string `pulumi:"certificateAuthenticationProfile"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id              string                      `pulumi:"id"`
	IdentitySources []GetSequenceIdentitySource `pulumi:"identitySources"`
	// The name of the identity source sequence
	Name string `pulumi:"name"`
}

func LookupSequenceOutput(ctx *pulumi.Context, args LookupSequenceOutputArgs, opts ...pulumi.InvokeOption) LookupSequenceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSequenceResult, error) {
			args := v.(LookupSequenceArgs)
			r, err := LookupSequence(ctx, &args, opts...)
			var s LookupSequenceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSequenceResultOutput)
}

// A collection of arguments for invoking getSequence.
type LookupSequenceOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the identity source sequence
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupSequenceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSequenceArgs)(nil)).Elem()
}

// A collection of values returned by getSequence.
type LookupSequenceResultOutput struct{ *pulumi.OutputState }

func (LookupSequenceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSequenceResult)(nil)).Elem()
}

func (o LookupSequenceResultOutput) ToLookupSequenceResultOutput() LookupSequenceResultOutput {
	return o
}

func (o LookupSequenceResultOutput) ToLookupSequenceResultOutputWithContext(ctx context.Context) LookupSequenceResultOutput {
	return o
}

// Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication
func (o LookupSequenceResultOutput) BreakOnStoreFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSequenceResult) bool { return v.BreakOnStoreFail }).(pulumi.BoolOutput)
}

// Certificate Authentication Profile, empty if doesn't exist
func (o LookupSequenceResultOutput) CertificateAuthenticationProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSequenceResult) string { return v.CertificateAuthenticationProfile }).(pulumi.StringOutput)
}

// Description
func (o LookupSequenceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSequenceResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupSequenceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSequenceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSequenceResultOutput) IdentitySources() GetSequenceIdentitySourceArrayOutput {
	return o.ApplyT(func(v LookupSequenceResult) []GetSequenceIdentitySource { return v.IdentitySources }).(GetSequenceIdentitySourceArrayOutput)
}

// The name of the identity source sequence
func (o LookupSequenceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSequenceResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSequenceResultOutput{})
}
