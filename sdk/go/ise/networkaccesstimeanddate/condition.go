// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccesstimeanddate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Access Time And Date Condition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessTimeAndDate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := NetworkAccessTimeAndDate.NewCondition(ctx, "example", &NetworkAccessTimeAndDate.ConditionArgs{
//				Name:        pulumi.String("Cond1"),
//				Description: pulumi.String("My description"),
//				IsNegate:    pulumi.Bool(false),
//				WeekDays: pulumi.StringArray{
//					pulumi.String("Monday"),
//				},
//				WeekDaysExceptions: pulumi.StringArray{
//					pulumi.String("Tuesday"),
//				},
//				StartDate:          pulumi.String("2022-05-06"),
//				EndDate:            pulumi.String("2022-05-10"),
//				ExceptionStartDate: pulumi.String("2022-06-06"),
//				ExceptionEndDate:   pulumi.String("2022-06-10"),
//				StartTime:          pulumi.String("08:00"),
//				EndTime:            pulumi.String("15:00"),
//				ExceptionStartTime: pulumi.String("20:00"),
//				ExceptionEndTime:   pulumi.String("22:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:NetworkAccessTimeAndDate/condition:Condition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Condition struct {
	pulumi.CustomResourceState

	// Condition description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// End date
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// End time
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// Exception end date
	ExceptionEndDate pulumi.StringPtrOutput `pulumi:"exceptionEndDate"`
	// Exception end time
	ExceptionEndTime pulumi.StringPtrOutput `pulumi:"exceptionEndTime"`
	// Exception start date
	ExceptionStartDate pulumi.StringPtrOutput `pulumi:"exceptionStartDate"`
	// Exception start time
	ExceptionStartTime pulumi.StringPtrOutput `pulumi:"exceptionStartTime"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrOutput `pulumi:"isNegate"`
	// Condition name
	Name pulumi.StringOutput `pulumi:"name"`
	// Start date
	StartDate pulumi.StringPtrOutput `pulumi:"startDate"`
	// Start time
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays pulumi.StringArrayOutput `pulumi:"weekDays"`
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions pulumi.StringArrayOutput `pulumi:"weekDaysExceptions"`
}

// NewCondition registers a new resource with the given unique name, arguments, and options.
func NewCondition(ctx *pulumi.Context,
	name string, args *ConditionArgs, opts ...pulumi.ResourceOption) (*Condition, error) {
	if args == nil {
		args = &ConditionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Condition
	err := ctx.RegisterResource("ise:NetworkAccessTimeAndDate/condition:Condition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCondition gets an existing Condition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConditionState, opts ...pulumi.ResourceOption) (*Condition, error) {
	var resource Condition
	err := ctx.ReadResource("ise:NetworkAccessTimeAndDate/condition:Condition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Condition resources.
type conditionState struct {
	// Condition description
	Description *string `pulumi:"description"`
	// End date
	EndDate *string `pulumi:"endDate"`
	// End time
	EndTime *string `pulumi:"endTime"`
	// Exception end date
	ExceptionEndDate *string `pulumi:"exceptionEndDate"`
	// Exception end time
	ExceptionEndTime *string `pulumi:"exceptionEndTime"`
	// Exception start date
	ExceptionStartDate *string `pulumi:"exceptionStartDate"`
	// Exception start time
	ExceptionStartTime *string `pulumi:"exceptionStartTime"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Condition name
	Name *string `pulumi:"name"`
	// Start date
	StartDate *string `pulumi:"startDate"`
	// Start time
	StartTime *string `pulumi:"startTime"`
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays []string `pulumi:"weekDays"`
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions []string `pulumi:"weekDaysExceptions"`
}

type ConditionState struct {
	// Condition description
	Description pulumi.StringPtrInput
	// End date
	EndDate pulumi.StringPtrInput
	// End time
	EndTime pulumi.StringPtrInput
	// Exception end date
	ExceptionEndDate pulumi.StringPtrInput
	// Exception end time
	ExceptionEndTime pulumi.StringPtrInput
	// Exception start date
	ExceptionStartDate pulumi.StringPtrInput
	// Exception start time
	ExceptionStartTime pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput
	// Condition name
	Name pulumi.StringPtrInput
	// Start date
	StartDate pulumi.StringPtrInput
	// Start time
	StartTime pulumi.StringPtrInput
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays pulumi.StringArrayInput
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions pulumi.StringArrayInput
}

func (ConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionState)(nil)).Elem()
}

type conditionArgs struct {
	// Condition description
	Description *string `pulumi:"description"`
	// End date
	EndDate *string `pulumi:"endDate"`
	// End time
	EndTime *string `pulumi:"endTime"`
	// Exception end date
	ExceptionEndDate *string `pulumi:"exceptionEndDate"`
	// Exception end time
	ExceptionEndTime *string `pulumi:"exceptionEndTime"`
	// Exception start date
	ExceptionStartDate *string `pulumi:"exceptionStartDate"`
	// Exception start time
	ExceptionStartTime *string `pulumi:"exceptionStartTime"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Condition name
	Name *string `pulumi:"name"`
	// Start date
	StartDate *string `pulumi:"startDate"`
	// Start time
	StartTime *string `pulumi:"startTime"`
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays []string `pulumi:"weekDays"`
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions []string `pulumi:"weekDaysExceptions"`
}

// The set of arguments for constructing a Condition resource.
type ConditionArgs struct {
	// Condition description
	Description pulumi.StringPtrInput
	// End date
	EndDate pulumi.StringPtrInput
	// End time
	EndTime pulumi.StringPtrInput
	// Exception end date
	ExceptionEndDate pulumi.StringPtrInput
	// Exception end time
	ExceptionEndTime pulumi.StringPtrInput
	// Exception start date
	ExceptionStartDate pulumi.StringPtrInput
	// Exception start time
	ExceptionStartTime pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput
	// Condition name
	Name pulumi.StringPtrInput
	// Start date
	StartDate pulumi.StringPtrInput
	// Start time
	StartTime pulumi.StringPtrInput
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays pulumi.StringArrayInput
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions pulumi.StringArrayInput
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionArgs)(nil)).Elem()
}

type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(ctx context.Context) ConditionOutput
}

func (*Condition) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *Condition) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i *Condition) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//	ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// ConditionMapInput is an input type that accepts ConditionMap and ConditionMapOutput values.
// You can construct a concrete instance of `ConditionMapInput` via:
//
//	ConditionMap{ "key": ConditionArgs{...} }
type ConditionMapInput interface {
	pulumi.Input

	ToConditionMapOutput() ConditionMapOutput
	ToConditionMapOutputWithContext(context.Context) ConditionMapOutput
}

type ConditionMap map[string]ConditionInput

func (ConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Condition)(nil)).Elem()
}

func (i ConditionMap) ToConditionMapOutput() ConditionMapOutput {
	return i.ToConditionMapOutputWithContext(context.Background())
}

func (i ConditionMap) ToConditionMapOutputWithContext(ctx context.Context) ConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionMapOutput)
}

type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// Condition description
func (o ConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// End date
func (o ConditionOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End time
func (o ConditionOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Exception end date
func (o ConditionOutput) ExceptionEndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.ExceptionEndDate }).(pulumi.StringPtrOutput)
}

// Exception end time
func (o ConditionOutput) ExceptionEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.ExceptionEndTime }).(pulumi.StringPtrOutput)
}

// Exception start date
func (o ConditionOutput) ExceptionStartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.ExceptionStartDate }).(pulumi.StringPtrOutput)
}

// Exception start time
func (o ConditionOutput) ExceptionStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.ExceptionStartTime }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o ConditionOutput) IsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.BoolPtrOutput { return v.IsNegate }).(pulumi.BoolPtrOutput)
}

// Condition name
func (o ConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Start date
func (o ConditionOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time
func (o ConditionOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
func (o ConditionOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringArrayOutput { return v.WeekDays }).(pulumi.StringArrayOutput)
}

// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
func (o ConditionOutput) WeekDaysExceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) pulumi.StringArrayOutput { return v.WeekDaysExceptions }).(pulumi.StringArrayOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Condition {
		return vs[0].([]*Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

type ConditionMapOutput struct{ *pulumi.OutputState }

func (ConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Condition)(nil)).Elem()
}

func (o ConditionMapOutput) ToConditionMapOutput() ConditionMapOutput {
	return o
}

func (o ConditionMapOutput) ToConditionMapOutputWithContext(ctx context.Context) ConditionMapOutput {
	return o
}

func (o ConditionMapOutput) MapIndex(k pulumi.StringInput) ConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Condition {
		return vs[0].(map[string]*Condition)[vs[1].(string)]
	}).(ConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionInput)(nil)).Elem(), &Condition{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionArrayInput)(nil)).Elem(), ConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionMapInput)(nil)).Elem(), ConditionMap{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionMapOutput{})
}
