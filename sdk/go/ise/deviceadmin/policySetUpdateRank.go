// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used to update rank field in device admin policy set. It serves as a workaround for the ISE API/Backend limitation which restricts rank assignments to a strictly incremental sequence. By utilizing this resource and deviceAdminPolicySet resource, you can bypass the APIs limitation. Creation of this resource is performing PUT operation (Update) and it only tracks rank field. When this resource is destroyed, no action is performed on ISE and resource is just removed from state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.NewPolicySetUpdateRank(ctx, "example", &deviceadmin.PolicySetUpdateRankArgs{
//				PolicySetId: pulumi.String("d82952cb-b901-4b09-b363-5ebf39bdbaf9"),
//				Rank:        pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PolicySetUpdateRank struct {
	pulumi.CustomResourceState

	// Policy set ID
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntOutput `pulumi:"rank"`
}

// NewPolicySetUpdateRank registers a new resource with the given unique name, arguments, and options.
func NewPolicySetUpdateRank(ctx *pulumi.Context,
	name string, args *PolicySetUpdateRankArgs, opts ...pulumi.ResourceOption) (*PolicySetUpdateRank, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicySetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetId'")
	}
	if args.Rank == nil {
		return nil, errors.New("invalid value for required argument 'Rank'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicySetUpdateRank
	err := ctx.RegisterResource("ise:deviceadmin/policySetUpdateRank:PolicySetUpdateRank", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicySetUpdateRank gets an existing PolicySetUpdateRank resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicySetUpdateRank(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicySetUpdateRankState, opts ...pulumi.ResourceOption) (*PolicySetUpdateRank, error) {
	var resource PolicySetUpdateRank
	err := ctx.ReadResource("ise:deviceadmin/policySetUpdateRank:PolicySetUpdateRank", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicySetUpdateRank resources.
type policySetUpdateRankState struct {
	// Policy set ID
	PolicySetId *string `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
}

type PolicySetUpdateRankState struct {
	// Policy set ID
	PolicySetId pulumi.StringPtrInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
}

func (PolicySetUpdateRankState) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetUpdateRankState)(nil)).Elem()
}

type policySetUpdateRankArgs struct {
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank int `pulumi:"rank"`
}

// The set of arguments for constructing a PolicySetUpdateRank resource.
type PolicySetUpdateRankArgs struct {
	// Policy set ID
	PolicySetId pulumi.StringInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntInput
}

func (PolicySetUpdateRankArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetUpdateRankArgs)(nil)).Elem()
}

type PolicySetUpdateRankInput interface {
	pulumi.Input

	ToPolicySetUpdateRankOutput() PolicySetUpdateRankOutput
	ToPolicySetUpdateRankOutputWithContext(ctx context.Context) PolicySetUpdateRankOutput
}

func (*PolicySetUpdateRank) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetUpdateRank)(nil)).Elem()
}

func (i *PolicySetUpdateRank) ToPolicySetUpdateRankOutput() PolicySetUpdateRankOutput {
	return i.ToPolicySetUpdateRankOutputWithContext(context.Background())
}

func (i *PolicySetUpdateRank) ToPolicySetUpdateRankOutputWithContext(ctx context.Context) PolicySetUpdateRankOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetUpdateRankOutput)
}

// PolicySetUpdateRankArrayInput is an input type that accepts PolicySetUpdateRankArray and PolicySetUpdateRankArrayOutput values.
// You can construct a concrete instance of `PolicySetUpdateRankArrayInput` via:
//
//	PolicySetUpdateRankArray{ PolicySetUpdateRankArgs{...} }
type PolicySetUpdateRankArrayInput interface {
	pulumi.Input

	ToPolicySetUpdateRankArrayOutput() PolicySetUpdateRankArrayOutput
	ToPolicySetUpdateRankArrayOutputWithContext(context.Context) PolicySetUpdateRankArrayOutput
}

type PolicySetUpdateRankArray []PolicySetUpdateRankInput

func (PolicySetUpdateRankArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySetUpdateRank)(nil)).Elem()
}

func (i PolicySetUpdateRankArray) ToPolicySetUpdateRankArrayOutput() PolicySetUpdateRankArrayOutput {
	return i.ToPolicySetUpdateRankArrayOutputWithContext(context.Background())
}

func (i PolicySetUpdateRankArray) ToPolicySetUpdateRankArrayOutputWithContext(ctx context.Context) PolicySetUpdateRankArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetUpdateRankArrayOutput)
}

// PolicySetUpdateRankMapInput is an input type that accepts PolicySetUpdateRankMap and PolicySetUpdateRankMapOutput values.
// You can construct a concrete instance of `PolicySetUpdateRankMapInput` via:
//
//	PolicySetUpdateRankMap{ "key": PolicySetUpdateRankArgs{...} }
type PolicySetUpdateRankMapInput interface {
	pulumi.Input

	ToPolicySetUpdateRankMapOutput() PolicySetUpdateRankMapOutput
	ToPolicySetUpdateRankMapOutputWithContext(context.Context) PolicySetUpdateRankMapOutput
}

type PolicySetUpdateRankMap map[string]PolicySetUpdateRankInput

func (PolicySetUpdateRankMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySetUpdateRank)(nil)).Elem()
}

func (i PolicySetUpdateRankMap) ToPolicySetUpdateRankMapOutput() PolicySetUpdateRankMapOutput {
	return i.ToPolicySetUpdateRankMapOutputWithContext(context.Background())
}

func (i PolicySetUpdateRankMap) ToPolicySetUpdateRankMapOutputWithContext(ctx context.Context) PolicySetUpdateRankMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetUpdateRankMapOutput)
}

type PolicySetUpdateRankOutput struct{ *pulumi.OutputState }

func (PolicySetUpdateRankOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetUpdateRank)(nil)).Elem()
}

func (o PolicySetUpdateRankOutput) ToPolicySetUpdateRankOutput() PolicySetUpdateRankOutput {
	return o
}

func (o PolicySetUpdateRankOutput) ToPolicySetUpdateRankOutputWithContext(ctx context.Context) PolicySetUpdateRankOutput {
	return o
}

// Policy set ID
func (o PolicySetUpdateRankOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySetUpdateRank) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o PolicySetUpdateRankOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicySetUpdateRank) pulumi.IntOutput { return v.Rank }).(pulumi.IntOutput)
}

type PolicySetUpdateRankArrayOutput struct{ *pulumi.OutputState }

func (PolicySetUpdateRankArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySetUpdateRank)(nil)).Elem()
}

func (o PolicySetUpdateRankArrayOutput) ToPolicySetUpdateRankArrayOutput() PolicySetUpdateRankArrayOutput {
	return o
}

func (o PolicySetUpdateRankArrayOutput) ToPolicySetUpdateRankArrayOutputWithContext(ctx context.Context) PolicySetUpdateRankArrayOutput {
	return o
}

func (o PolicySetUpdateRankArrayOutput) Index(i pulumi.IntInput) PolicySetUpdateRankOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicySetUpdateRank {
		return vs[0].([]*PolicySetUpdateRank)[vs[1].(int)]
	}).(PolicySetUpdateRankOutput)
}

type PolicySetUpdateRankMapOutput struct{ *pulumi.OutputState }

func (PolicySetUpdateRankMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySetUpdateRank)(nil)).Elem()
}

func (o PolicySetUpdateRankMapOutput) ToPolicySetUpdateRankMapOutput() PolicySetUpdateRankMapOutput {
	return o
}

func (o PolicySetUpdateRankMapOutput) ToPolicySetUpdateRankMapOutputWithContext(ctx context.Context) PolicySetUpdateRankMapOutput {
	return o
}

func (o PolicySetUpdateRankMapOutput) MapIndex(k pulumi.StringInput) PolicySetUpdateRankOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicySetUpdateRank {
		return vs[0].(map[string]*PolicySetUpdateRank)[vs[1].(string)]
	}).(PolicySetUpdateRankOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetUpdateRankInput)(nil)).Elem(), &PolicySetUpdateRank{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetUpdateRankArrayInput)(nil)).Elem(), PolicySetUpdateRankArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySetUpdateRankMapInput)(nil)).Elem(), PolicySetUpdateRankMap{})
	pulumi.RegisterOutputType(PolicySetUpdateRankOutput{})
	pulumi.RegisterOutputType(PolicySetUpdateRankArrayOutput{})
	pulumi.RegisterOutputType(PolicySetUpdateRankMapOutput{})
}
