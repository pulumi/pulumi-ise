// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS Profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.NewTacacsProfile(ctx, "example", &deviceadmin.TacacsProfileArgs{
//				Name:        pulumi.String("Profile1"),
//				Description: pulumi.String("My TACACS profile"),
//				SessionAttributes: deviceadmin.TacacsProfileSessionAttributeArray{
//					&deviceadmin.TacacsProfileSessionAttributeArgs{
//						Type:  pulumi.String("MANDATORY"),
//						Name:  pulumi.String("attr1"),
//						Value: pulumi.String("value"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:deviceadmin/tacacsProfile:TacacsProfile example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type TacacsProfile struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the TACACS profile
	Name              pulumi.StringOutput                      `pulumi:"name"`
	SessionAttributes TacacsProfileSessionAttributeArrayOutput `pulumi:"sessionAttributes"`
}

// NewTacacsProfile registers a new resource with the given unique name, arguments, and options.
func NewTacacsProfile(ctx *pulumi.Context,
	name string, args *TacacsProfileArgs, opts ...pulumi.ResourceOption) (*TacacsProfile, error) {
	if args == nil {
		args = &TacacsProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TacacsProfile
	err := ctx.RegisterResource("ise:deviceadmin/tacacsProfile:TacacsProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTacacsProfile gets an existing TacacsProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTacacsProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TacacsProfileState, opts ...pulumi.ResourceOption) (*TacacsProfile, error) {
	var resource TacacsProfile
	err := ctx.ReadResource("ise:deviceadmin/tacacsProfile:TacacsProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TacacsProfile resources.
type tacacsProfileState struct {
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS profile
	Name              *string                         `pulumi:"name"`
	SessionAttributes []TacacsProfileSessionAttribute `pulumi:"sessionAttributes"`
}

type TacacsProfileState struct {
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS profile
	Name              pulumi.StringPtrInput
	SessionAttributes TacacsProfileSessionAttributeArrayInput
}

func (TacacsProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsProfileState)(nil)).Elem()
}

type tacacsProfileArgs struct {
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS profile
	Name              *string                         `pulumi:"name"`
	SessionAttributes []TacacsProfileSessionAttribute `pulumi:"sessionAttributes"`
}

// The set of arguments for constructing a TacacsProfile resource.
type TacacsProfileArgs struct {
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS profile
	Name              pulumi.StringPtrInput
	SessionAttributes TacacsProfileSessionAttributeArrayInput
}

func (TacacsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsProfileArgs)(nil)).Elem()
}

type TacacsProfileInput interface {
	pulumi.Input

	ToTacacsProfileOutput() TacacsProfileOutput
	ToTacacsProfileOutputWithContext(ctx context.Context) TacacsProfileOutput
}

func (*TacacsProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsProfile)(nil)).Elem()
}

func (i *TacacsProfile) ToTacacsProfileOutput() TacacsProfileOutput {
	return i.ToTacacsProfileOutputWithContext(context.Background())
}

func (i *TacacsProfile) ToTacacsProfileOutputWithContext(ctx context.Context) TacacsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsProfileOutput)
}

// TacacsProfileArrayInput is an input type that accepts TacacsProfileArray and TacacsProfileArrayOutput values.
// You can construct a concrete instance of `TacacsProfileArrayInput` via:
//
//	TacacsProfileArray{ TacacsProfileArgs{...} }
type TacacsProfileArrayInput interface {
	pulumi.Input

	ToTacacsProfileArrayOutput() TacacsProfileArrayOutput
	ToTacacsProfileArrayOutputWithContext(context.Context) TacacsProfileArrayOutput
}

type TacacsProfileArray []TacacsProfileInput

func (TacacsProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsProfile)(nil)).Elem()
}

func (i TacacsProfileArray) ToTacacsProfileArrayOutput() TacacsProfileArrayOutput {
	return i.ToTacacsProfileArrayOutputWithContext(context.Background())
}

func (i TacacsProfileArray) ToTacacsProfileArrayOutputWithContext(ctx context.Context) TacacsProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsProfileArrayOutput)
}

// TacacsProfileMapInput is an input type that accepts TacacsProfileMap and TacacsProfileMapOutput values.
// You can construct a concrete instance of `TacacsProfileMapInput` via:
//
//	TacacsProfileMap{ "key": TacacsProfileArgs{...} }
type TacacsProfileMapInput interface {
	pulumi.Input

	ToTacacsProfileMapOutput() TacacsProfileMapOutput
	ToTacacsProfileMapOutputWithContext(context.Context) TacacsProfileMapOutput
}

type TacacsProfileMap map[string]TacacsProfileInput

func (TacacsProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsProfile)(nil)).Elem()
}

func (i TacacsProfileMap) ToTacacsProfileMapOutput() TacacsProfileMapOutput {
	return i.ToTacacsProfileMapOutputWithContext(context.Background())
}

func (i TacacsProfileMap) ToTacacsProfileMapOutputWithContext(ctx context.Context) TacacsProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsProfileMapOutput)
}

type TacacsProfileOutput struct{ *pulumi.OutputState }

func (TacacsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsProfile)(nil)).Elem()
}

func (o TacacsProfileOutput) ToTacacsProfileOutput() TacacsProfileOutput {
	return o
}

func (o TacacsProfileOutput) ToTacacsProfileOutputWithContext(ctx context.Context) TacacsProfileOutput {
	return o
}

// Description
func (o TacacsProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the TACACS profile
func (o TacacsProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TacacsProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TacacsProfileOutput) SessionAttributes() TacacsProfileSessionAttributeArrayOutput {
	return o.ApplyT(func(v *TacacsProfile) TacacsProfileSessionAttributeArrayOutput { return v.SessionAttributes }).(TacacsProfileSessionAttributeArrayOutput)
}

type TacacsProfileArrayOutput struct{ *pulumi.OutputState }

func (TacacsProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsProfile)(nil)).Elem()
}

func (o TacacsProfileArrayOutput) ToTacacsProfileArrayOutput() TacacsProfileArrayOutput {
	return o
}

func (o TacacsProfileArrayOutput) ToTacacsProfileArrayOutputWithContext(ctx context.Context) TacacsProfileArrayOutput {
	return o
}

func (o TacacsProfileArrayOutput) Index(i pulumi.IntInput) TacacsProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TacacsProfile {
		return vs[0].([]*TacacsProfile)[vs[1].(int)]
	}).(TacacsProfileOutput)
}

type TacacsProfileMapOutput struct{ *pulumi.OutputState }

func (TacacsProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsProfile)(nil)).Elem()
}

func (o TacacsProfileMapOutput) ToTacacsProfileMapOutput() TacacsProfileMapOutput {
	return o
}

func (o TacacsProfileMapOutput) ToTacacsProfileMapOutputWithContext(ctx context.Context) TacacsProfileMapOutput {
	return o
}

func (o TacacsProfileMapOutput) MapIndex(k pulumi.StringInput) TacacsProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TacacsProfile {
		return vs[0].(map[string]*TacacsProfile)[vs[1].(string)]
	}).(TacacsProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsProfileInput)(nil)).Elem(), &TacacsProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsProfileArrayInput)(nil)).Elem(), TacacsProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsProfileMapInput)(nil)).Elem(), TacacsProfileMap{})
	pulumi.RegisterOutputType(TacacsProfileOutput{})
	pulumi.RegisterOutputType(TacacsProfileArrayOutput{})
	pulumi.RegisterOutputType(TacacsProfileMapOutput{})
}
