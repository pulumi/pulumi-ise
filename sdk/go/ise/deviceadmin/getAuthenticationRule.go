// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Device Admin Authentication Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceAdmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceAdmin.GetAuthenticationRule(ctx, &deviceadmin.GetAuthenticationRuleArgs{
//				Id:          pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//				PolicySetId: "d82952cb-b901-4b09-b363-5ebf39bdbaf9",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuthenticationRule(ctx *pulumi.Context, args *LookupAuthenticationRuleArgs, opts ...pulumi.InvokeOption) (*LookupAuthenticationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthenticationRuleResult
	err := ctx.Invoke("ise:deviceAdmin/getAuthenticationRule:getAuthenticationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthenticationRule.
type LookupAuthenticationRuleArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
}

// A collection of values returned by getAuthenticationRule.
type LookupAuthenticationRuleResult struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []GetAuthenticationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate bool `pulumi:"conditionIsNegate"`
	// Equality operator
	ConditionOperator string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default bool `pulumi:"default"`
	// The id of the object
	Id string `pulumi:"id"`
	// Identity source name from the identity stores
	IdentitySourceName string `pulumi:"identitySourceName"`
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on
	IfAuthFail string `pulumi:"ifAuthFail"`
	// Action to perform when ISE is unable to access the identity database
	IfProcessFail string `pulumi:"ifProcessFail"`
	// Action to perform when user is not found in any of identity stores
	IfUserNotFound string `pulumi:"ifUserNotFound"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank int `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched.
	State string `pulumi:"state"`
}

func LookupAuthenticationRuleOutput(ctx *pulumi.Context, args LookupAuthenticationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupAuthenticationRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthenticationRuleResult, error) {
			args := v.(LookupAuthenticationRuleArgs)
			r, err := LookupAuthenticationRule(ctx, &args, opts...)
			var s LookupAuthenticationRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuthenticationRuleResultOutput)
}

// A collection of arguments for invoking getAuthenticationRule.
type LookupAuthenticationRuleOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringInput `pulumi:"policySetId"`
}

func (LookupAuthenticationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticationRuleArgs)(nil)).Elem()
}

// A collection of values returned by getAuthenticationRule.
type LookupAuthenticationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupAuthenticationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticationRuleResult)(nil)).Elem()
}

func (o LookupAuthenticationRuleResultOutput) ToLookupAuthenticationRuleResultOutput() LookupAuthenticationRuleResultOutput {
	return o
}

func (o LookupAuthenticationRuleResultOutput) ToLookupAuthenticationRuleResultOutputWithContext(ctx context.Context) LookupAuthenticationRuleResultOutput {
	return o
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o LookupAuthenticationRuleResultOutput) Childrens() GetAuthenticationRuleChildrenArrayOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) []GetAuthenticationRuleChildren { return v.Childrens }).(GetAuthenticationRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o LookupAuthenticationRuleResultOutput) ConditionAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionAttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o LookupAuthenticationRuleResultOutput) ConditionAttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionAttributeValue }).(pulumi.StringOutput)
}

// Dictionary name
func (o LookupAuthenticationRuleResultOutput) ConditionDictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionDictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o LookupAuthenticationRuleResultOutput) ConditionDictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionDictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o LookupAuthenticationRuleResultOutput) ConditionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionId }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o LookupAuthenticationRuleResultOutput) ConditionIsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) bool { return v.ConditionIsNegate }).(pulumi.BoolOutput)
}

// Equality operator
func (o LookupAuthenticationRuleResultOutput) ConditionOperator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionOperator }).(pulumi.StringOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o LookupAuthenticationRuleResultOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Indicates if this rule is the default one
func (o LookupAuthenticationRuleResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// The id of the object
func (o LookupAuthenticationRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identity source name from the identity stores
func (o LookupAuthenticationRuleResultOutput) IdentitySourceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.IdentitySourceName }).(pulumi.StringOutput)
}

// Action to perform when authentication fails such as Bad credentials, disabled user and so on
func (o LookupAuthenticationRuleResultOutput) IfAuthFail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.IfAuthFail }).(pulumi.StringOutput)
}

// Action to perform when ISE is unable to access the identity database
func (o LookupAuthenticationRuleResultOutput) IfProcessFail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.IfProcessFail }).(pulumi.StringOutput)
}

// Action to perform when user is not found in any of identity stores
func (o LookupAuthenticationRuleResultOutput) IfUserNotFound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.IfUserNotFound }).(pulumi.StringOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o LookupAuthenticationRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o LookupAuthenticationRuleResultOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.PolicySetId }).(pulumi.StringOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o LookupAuthenticationRuleResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) int { return v.Rank }).(pulumi.IntOutput)
}

// The state that the rule is in. A disabled rule cannot be matched.
func (o LookupAuthenticationRuleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticationRuleResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthenticationRuleResultOutput{})
}
