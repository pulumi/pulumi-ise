// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the TACACS Command Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.LookupTacacsCommandSet(ctx, &deviceadmin.LookupTacacsCommandSetArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTacacsCommandSet(ctx *pulumi.Context, args *LookupTacacsCommandSetArgs, opts ...pulumi.InvokeOption) (*LookupTacacsCommandSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTacacsCommandSetResult
	err := ctx.Invoke("ise:deviceadmin/getTacacsCommandSet:getTacacsCommandSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTacacsCommandSet.
type LookupTacacsCommandSetArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
}

// A collection of values returned by getTacacsCommandSet.
type LookupTacacsCommandSetResult struct {
	Commands []GetTacacsCommandSetCommand `pulumi:"commands"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the TACACS command set
	Name string `pulumi:"name"`
	// Permit unmatched commands
	PermitUnmatched bool `pulumi:"permitUnmatched"`
}

func LookupTacacsCommandSetOutput(ctx *pulumi.Context, args LookupTacacsCommandSetOutputArgs, opts ...pulumi.InvokeOption) LookupTacacsCommandSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTacacsCommandSetResultOutput, error) {
			args := v.(LookupTacacsCommandSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ise:deviceadmin/getTacacsCommandSet:getTacacsCommandSet", args, LookupTacacsCommandSetResultOutput{}, options).(LookupTacacsCommandSetResultOutput), nil
		}).(LookupTacacsCommandSetResultOutput)
}

// A collection of arguments for invoking getTacacsCommandSet.
type LookupTacacsCommandSetOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the TACACS command set
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupTacacsCommandSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTacacsCommandSetArgs)(nil)).Elem()
}

// A collection of values returned by getTacacsCommandSet.
type LookupTacacsCommandSetResultOutput struct{ *pulumi.OutputState }

func (LookupTacacsCommandSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTacacsCommandSetResult)(nil)).Elem()
}

func (o LookupTacacsCommandSetResultOutput) ToLookupTacacsCommandSetResultOutput() LookupTacacsCommandSetResultOutput {
	return o
}

func (o LookupTacacsCommandSetResultOutput) ToLookupTacacsCommandSetResultOutputWithContext(ctx context.Context) LookupTacacsCommandSetResultOutput {
	return o
}

func (o LookupTacacsCommandSetResultOutput) Commands() GetTacacsCommandSetCommandArrayOutput {
	return o.ApplyT(func(v LookupTacacsCommandSetResult) []GetTacacsCommandSetCommand { return v.Commands }).(GetTacacsCommandSetCommandArrayOutput)
}

// Description
func (o LookupTacacsCommandSetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsCommandSetResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupTacacsCommandSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsCommandSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the TACACS command set
func (o LookupTacacsCommandSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsCommandSetResult) string { return v.Name }).(pulumi.StringOutput)
}

// Permit unmatched commands
func (o LookupTacacsCommandSetResultOutput) PermitUnmatched() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTacacsCommandSetResult) bool { return v.PermitUnmatched }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTacacsCommandSetResultOutput{})
}
