// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read a TACACS allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.LookupAllowedProtocolsTacacs(ctx, &deviceadmin.LookupAllowedProtocolsTacacsArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAllowedProtocolsTacacs(ctx *pulumi.Context, args *LookupAllowedProtocolsTacacsArgs, opts ...pulumi.InvokeOption) (*LookupAllowedProtocolsTacacsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAllowedProtocolsTacacsResult
	err := ctx.Invoke("ise:deviceadmin/getAllowedProtocolsTacacs:getAllowedProtocolsTacacs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAllowedProtocolsTacacs.
type LookupAllowedProtocolsTacacsArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAllowedProtocolsTacacs.
type LookupAllowedProtocolsTacacsResult struct {
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the allowed protocols
	Name string `pulumi:"name"`
}

func LookupAllowedProtocolsTacacsOutput(ctx *pulumi.Context, args LookupAllowedProtocolsTacacsOutputArgs, opts ...pulumi.InvokeOption) LookupAllowedProtocolsTacacsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAllowedProtocolsTacacsResultOutput, error) {
			args := v.(LookupAllowedProtocolsTacacsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ise:deviceadmin/getAllowedProtocolsTacacs:getAllowedProtocolsTacacs", args, LookupAllowedProtocolsTacacsResultOutput{}, options).(LookupAllowedProtocolsTacacsResultOutput), nil
		}).(LookupAllowedProtocolsTacacsResultOutput)
}

// A collection of arguments for invoking getAllowedProtocolsTacacs.
type LookupAllowedProtocolsTacacsOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the allowed protocols
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAllowedProtocolsTacacsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAllowedProtocolsTacacsArgs)(nil)).Elem()
}

// A collection of values returned by getAllowedProtocolsTacacs.
type LookupAllowedProtocolsTacacsResultOutput struct{ *pulumi.OutputState }

func (LookupAllowedProtocolsTacacsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAllowedProtocolsTacacsResult)(nil)).Elem()
}

func (o LookupAllowedProtocolsTacacsResultOutput) ToLookupAllowedProtocolsTacacsResultOutput() LookupAllowedProtocolsTacacsResultOutput {
	return o
}

func (o LookupAllowedProtocolsTacacsResultOutput) ToLookupAllowedProtocolsTacacsResultOutputWithContext(ctx context.Context) LookupAllowedProtocolsTacacsResultOutput {
	return o
}

// Allow CHAP
func (o LookupAllowedProtocolsTacacsResultOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) bool { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o LookupAllowedProtocolsTacacsResultOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) bool { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o LookupAllowedProtocolsTacacsResultOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) bool { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Description
func (o LookupAllowedProtocolsTacacsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupAllowedProtocolsTacacsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the allowed protocols
func (o LookupAllowedProtocolsTacacsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAllowedProtocolsTacacsResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAllowedProtocolsTacacsResultOutput{})
}
