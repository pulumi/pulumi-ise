// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS Command Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.NewTacacsCommandSet(ctx, "example", &deviceadmin.TacacsCommandSetArgs{
//				Name:            pulumi.String("CommandSet1"),
//				Description:     pulumi.String("My TACACS command set"),
//				PermitUnmatched: pulumi.Bool(true),
//				Commands: deviceadmin.TacacsCommandSetCommandArray{
//					&deviceadmin.TacacsCommandSetCommandArgs{
//						Grant:     pulumi.String("PERMIT"),
//						Command:   pulumi.String("show"),
//						Arguments: pulumi.String(""),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:deviceadmin/tacacsCommandSet:TacacsCommandSet example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type TacacsCommandSet struct {
	pulumi.CustomResourceState

	Commands TacacsCommandSetCommandArrayOutput `pulumi:"commands"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the TACACS command set
	Name pulumi.StringOutput `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolOutput `pulumi:"permitUnmatched"`
}

// NewTacacsCommandSet registers a new resource with the given unique name, arguments, and options.
func NewTacacsCommandSet(ctx *pulumi.Context,
	name string, args *TacacsCommandSetArgs, opts ...pulumi.ResourceOption) (*TacacsCommandSet, error) {
	if args == nil {
		args = &TacacsCommandSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TacacsCommandSet
	err := ctx.RegisterResource("ise:deviceadmin/tacacsCommandSet:TacacsCommandSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTacacsCommandSet gets an existing TacacsCommandSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTacacsCommandSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TacacsCommandSetState, opts ...pulumi.ResourceOption) (*TacacsCommandSet, error) {
	var resource TacacsCommandSet
	err := ctx.ReadResource("ise:deviceadmin/tacacsCommandSet:TacacsCommandSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TacacsCommandSet resources.
type tacacsCommandSetState struct {
	Commands []TacacsCommandSetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

type TacacsCommandSetState struct {
	Commands TacacsCommandSetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (TacacsCommandSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsCommandSetState)(nil)).Elem()
}

type tacacsCommandSetArgs struct {
	Commands []TacacsCommandSetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

// The set of arguments for constructing a TacacsCommandSet resource.
type TacacsCommandSetArgs struct {
	Commands TacacsCommandSetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (TacacsCommandSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsCommandSetArgs)(nil)).Elem()
}

type TacacsCommandSetInput interface {
	pulumi.Input

	ToTacacsCommandSetOutput() TacacsCommandSetOutput
	ToTacacsCommandSetOutputWithContext(ctx context.Context) TacacsCommandSetOutput
}

func (*TacacsCommandSet) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsCommandSet)(nil)).Elem()
}

func (i *TacacsCommandSet) ToTacacsCommandSetOutput() TacacsCommandSetOutput {
	return i.ToTacacsCommandSetOutputWithContext(context.Background())
}

func (i *TacacsCommandSet) ToTacacsCommandSetOutputWithContext(ctx context.Context) TacacsCommandSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsCommandSetOutput)
}

// TacacsCommandSetArrayInput is an input type that accepts TacacsCommandSetArray and TacacsCommandSetArrayOutput values.
// You can construct a concrete instance of `TacacsCommandSetArrayInput` via:
//
//	TacacsCommandSetArray{ TacacsCommandSetArgs{...} }
type TacacsCommandSetArrayInput interface {
	pulumi.Input

	ToTacacsCommandSetArrayOutput() TacacsCommandSetArrayOutput
	ToTacacsCommandSetArrayOutputWithContext(context.Context) TacacsCommandSetArrayOutput
}

type TacacsCommandSetArray []TacacsCommandSetInput

func (TacacsCommandSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsCommandSet)(nil)).Elem()
}

func (i TacacsCommandSetArray) ToTacacsCommandSetArrayOutput() TacacsCommandSetArrayOutput {
	return i.ToTacacsCommandSetArrayOutputWithContext(context.Background())
}

func (i TacacsCommandSetArray) ToTacacsCommandSetArrayOutputWithContext(ctx context.Context) TacacsCommandSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsCommandSetArrayOutput)
}

// TacacsCommandSetMapInput is an input type that accepts TacacsCommandSetMap and TacacsCommandSetMapOutput values.
// You can construct a concrete instance of `TacacsCommandSetMapInput` via:
//
//	TacacsCommandSetMap{ "key": TacacsCommandSetArgs{...} }
type TacacsCommandSetMapInput interface {
	pulumi.Input

	ToTacacsCommandSetMapOutput() TacacsCommandSetMapOutput
	ToTacacsCommandSetMapOutputWithContext(context.Context) TacacsCommandSetMapOutput
}

type TacacsCommandSetMap map[string]TacacsCommandSetInput

func (TacacsCommandSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsCommandSet)(nil)).Elem()
}

func (i TacacsCommandSetMap) ToTacacsCommandSetMapOutput() TacacsCommandSetMapOutput {
	return i.ToTacacsCommandSetMapOutputWithContext(context.Background())
}

func (i TacacsCommandSetMap) ToTacacsCommandSetMapOutputWithContext(ctx context.Context) TacacsCommandSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsCommandSetMapOutput)
}

type TacacsCommandSetOutput struct{ *pulumi.OutputState }

func (TacacsCommandSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsCommandSet)(nil)).Elem()
}

func (o TacacsCommandSetOutput) ToTacacsCommandSetOutput() TacacsCommandSetOutput {
	return o
}

func (o TacacsCommandSetOutput) ToTacacsCommandSetOutputWithContext(ctx context.Context) TacacsCommandSetOutput {
	return o
}

func (o TacacsCommandSetOutput) Commands() TacacsCommandSetCommandArrayOutput {
	return o.ApplyT(func(v *TacacsCommandSet) TacacsCommandSetCommandArrayOutput { return v.Commands }).(TacacsCommandSetCommandArrayOutput)
}

// Description
func (o TacacsCommandSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsCommandSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the TACACS command set
func (o TacacsCommandSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TacacsCommandSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Permit unmatched commands - Default value: `false`
func (o TacacsCommandSetOutput) PermitUnmatched() pulumi.BoolOutput {
	return o.ApplyT(func(v *TacacsCommandSet) pulumi.BoolOutput { return v.PermitUnmatched }).(pulumi.BoolOutput)
}

type TacacsCommandSetArrayOutput struct{ *pulumi.OutputState }

func (TacacsCommandSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsCommandSet)(nil)).Elem()
}

func (o TacacsCommandSetArrayOutput) ToTacacsCommandSetArrayOutput() TacacsCommandSetArrayOutput {
	return o
}

func (o TacacsCommandSetArrayOutput) ToTacacsCommandSetArrayOutputWithContext(ctx context.Context) TacacsCommandSetArrayOutput {
	return o
}

func (o TacacsCommandSetArrayOutput) Index(i pulumi.IntInput) TacacsCommandSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TacacsCommandSet {
		return vs[0].([]*TacacsCommandSet)[vs[1].(int)]
	}).(TacacsCommandSetOutput)
}

type TacacsCommandSetMapOutput struct{ *pulumi.OutputState }

func (TacacsCommandSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsCommandSet)(nil)).Elem()
}

func (o TacacsCommandSetMapOutput) ToTacacsCommandSetMapOutput() TacacsCommandSetMapOutput {
	return o
}

func (o TacacsCommandSetMapOutput) ToTacacsCommandSetMapOutputWithContext(ctx context.Context) TacacsCommandSetMapOutput {
	return o
}

func (o TacacsCommandSetMapOutput) MapIndex(k pulumi.StringInput) TacacsCommandSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TacacsCommandSet {
		return vs[0].(map[string]*TacacsCommandSet)[vs[1].(string)]
	}).(TacacsCommandSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsCommandSetInput)(nil)).Elem(), &TacacsCommandSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsCommandSetArrayInput)(nil)).Elem(), TacacsCommandSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsCommandSetMapInput)(nil)).Elem(), TacacsCommandSetMap{})
	pulumi.RegisterOutputType(TacacsCommandSetOutput{})
	pulumi.RegisterOutputType(TacacsCommandSetArrayOutput{})
	pulumi.RegisterOutputType(TacacsCommandSetMapOutput{})
}
