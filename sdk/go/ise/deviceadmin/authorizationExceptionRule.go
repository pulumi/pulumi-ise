// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadmin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Device Admin Authorization Exception Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/deviceadmin"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deviceadmin.NewAuthorizationExceptionRule(ctx, "example", &deviceadmin.AuthorizationExceptionRuleArgs{
//				PolicySetId:             pulumi.String("d82952cb-b901-4b09-b363-5ebf39bdbaf9"),
//				Name:                    pulumi.String("Rule1"),
//				Default:                 pulumi.Bool(false),
//				Rank:                    pulumi.Int(0),
//				State:                   pulumi.String("enabled"),
//				ConditionType:           pulumi.String("ConditionAttributes"),
//				ConditionIsNegate:       pulumi.Bool(false),
//				ConditionAttributeName:  pulumi.String("Location"),
//				ConditionAttributeValue: pulumi.String("All Locations"),
//				ConditionDictionaryName: pulumi.String("DEVICE"),
//				ConditionOperator:       pulumi.String("equals"),
//				CommandSets: pulumi.StringArray{
//					pulumi.String("DenyAllCommands"),
//				},
//				Profile: pulumi.String("Default Shell Profile"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import ise:deviceadmin/authorizationExceptionRule:AuthorizationExceptionRule example "76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AuthorizationExceptionRule struct {
	pulumi.CustomResourceState

	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationExceptionRuleChildrenArrayOutput `pulumi:"childrens"`
	// Command sets enforce the specified list of commands that can be executed by a device administrator
	CommandSets pulumi.StringArrayOutput `pulumi:"commandSets"`
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrOutput `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrOutput `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrOutput `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrOutput `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId pulumi.StringPtrOutput `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrOutput `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
	ConditionOperator pulumi.StringPtrOutput `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrOutput `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
	// Device admin profiles control the initial login session of the device administrator
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewAuthorizationExceptionRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationExceptionRule(ctx *pulumi.Context,
	name string, args *AuthorizationExceptionRuleArgs, opts ...pulumi.ResourceOption) (*AuthorizationExceptionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicySetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationExceptionRule
	err := ctx.RegisterResource("ise:deviceadmin/authorizationExceptionRule:AuthorizationExceptionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationExceptionRule gets an existing AuthorizationExceptionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationExceptionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationExceptionRuleState, opts ...pulumi.ResourceOption) (*AuthorizationExceptionRule, error) {
	var resource AuthorizationExceptionRule
	err := ctx.ReadResource("ise:deviceadmin/authorizationExceptionRule:AuthorizationExceptionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationExceptionRule resources.
type authorizationExceptionRuleState struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AuthorizationExceptionRuleChildren `pulumi:"childrens"`
	// Command sets enforce the specified list of commands that can be executed by a device administrator
	CommandSets []string `pulumi:"commandSets"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId *string `pulumi:"policySetId"`
	// Device admin profiles control the initial login session of the device administrator
	Profile *string `pulumi:"profile"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

type AuthorizationExceptionRuleState struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationExceptionRuleChildrenArrayInput
	// Command sets enforce the specified list of commands that can be executed by a device administrator
	CommandSets pulumi.StringArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringPtrInput
	// Device admin profiles control the initial login session of the device administrator
	Profile pulumi.StringPtrInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AuthorizationExceptionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationExceptionRuleState)(nil)).Elem()
}

type authorizationExceptionRuleArgs struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AuthorizationExceptionRuleChildren `pulumi:"childrens"`
	// Command sets enforce the specified list of commands that can be executed by a device administrator
	CommandSets []string `pulumi:"commandSets"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// Device admin profiles control the initial login session of the device administrator
	Profile *string `pulumi:"profile"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a AuthorizationExceptionRule resource.
type AuthorizationExceptionRuleArgs struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationExceptionRuleChildrenArrayInput
	// Command sets enforce the specified list of commands that can be executed by a device administrator
	CommandSets pulumi.StringArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringInput
	// Device admin profiles control the initial login session of the device administrator
	Profile pulumi.StringPtrInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AuthorizationExceptionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationExceptionRuleArgs)(nil)).Elem()
}

type AuthorizationExceptionRuleInput interface {
	pulumi.Input

	ToAuthorizationExceptionRuleOutput() AuthorizationExceptionRuleOutput
	ToAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AuthorizationExceptionRuleOutput
}

func (*AuthorizationExceptionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationExceptionRule)(nil)).Elem()
}

func (i *AuthorizationExceptionRule) ToAuthorizationExceptionRuleOutput() AuthorizationExceptionRuleOutput {
	return i.ToAuthorizationExceptionRuleOutputWithContext(context.Background())
}

func (i *AuthorizationExceptionRule) ToAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AuthorizationExceptionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationExceptionRuleOutput)
}

// AuthorizationExceptionRuleArrayInput is an input type that accepts AuthorizationExceptionRuleArray and AuthorizationExceptionRuleArrayOutput values.
// You can construct a concrete instance of `AuthorizationExceptionRuleArrayInput` via:
//
//	AuthorizationExceptionRuleArray{ AuthorizationExceptionRuleArgs{...} }
type AuthorizationExceptionRuleArrayInput interface {
	pulumi.Input

	ToAuthorizationExceptionRuleArrayOutput() AuthorizationExceptionRuleArrayOutput
	ToAuthorizationExceptionRuleArrayOutputWithContext(context.Context) AuthorizationExceptionRuleArrayOutput
}

type AuthorizationExceptionRuleArray []AuthorizationExceptionRuleInput

func (AuthorizationExceptionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationExceptionRule)(nil)).Elem()
}

func (i AuthorizationExceptionRuleArray) ToAuthorizationExceptionRuleArrayOutput() AuthorizationExceptionRuleArrayOutput {
	return i.ToAuthorizationExceptionRuleArrayOutputWithContext(context.Background())
}

func (i AuthorizationExceptionRuleArray) ToAuthorizationExceptionRuleArrayOutputWithContext(ctx context.Context) AuthorizationExceptionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationExceptionRuleArrayOutput)
}

// AuthorizationExceptionRuleMapInput is an input type that accepts AuthorizationExceptionRuleMap and AuthorizationExceptionRuleMapOutput values.
// You can construct a concrete instance of `AuthorizationExceptionRuleMapInput` via:
//
//	AuthorizationExceptionRuleMap{ "key": AuthorizationExceptionRuleArgs{...} }
type AuthorizationExceptionRuleMapInput interface {
	pulumi.Input

	ToAuthorizationExceptionRuleMapOutput() AuthorizationExceptionRuleMapOutput
	ToAuthorizationExceptionRuleMapOutputWithContext(context.Context) AuthorizationExceptionRuleMapOutput
}

type AuthorizationExceptionRuleMap map[string]AuthorizationExceptionRuleInput

func (AuthorizationExceptionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationExceptionRule)(nil)).Elem()
}

func (i AuthorizationExceptionRuleMap) ToAuthorizationExceptionRuleMapOutput() AuthorizationExceptionRuleMapOutput {
	return i.ToAuthorizationExceptionRuleMapOutputWithContext(context.Background())
}

func (i AuthorizationExceptionRuleMap) ToAuthorizationExceptionRuleMapOutputWithContext(ctx context.Context) AuthorizationExceptionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationExceptionRuleMapOutput)
}

type AuthorizationExceptionRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationExceptionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationExceptionRule)(nil)).Elem()
}

func (o AuthorizationExceptionRuleOutput) ToAuthorizationExceptionRuleOutput() AuthorizationExceptionRuleOutput {
	return o
}

func (o AuthorizationExceptionRuleOutput) ToAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AuthorizationExceptionRuleOutput {
	return o
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o AuthorizationExceptionRuleOutput) Childrens() AuthorizationExceptionRuleChildrenArrayOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) AuthorizationExceptionRuleChildrenArrayOutput { return v.Childrens }).(AuthorizationExceptionRuleChildrenArrayOutput)
}

// Command sets enforce the specified list of commands that can be executed by a device administrator
func (o AuthorizationExceptionRuleOutput) CommandSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringArrayOutput { return v.CommandSets }).(pulumi.StringArrayOutput)
}

// Dictionary attribute name
func (o AuthorizationExceptionRuleOutput) ConditionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionAttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o AuthorizationExceptionRuleOutput) ConditionAttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionAttributeValue }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o AuthorizationExceptionRuleOutput) ConditionDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionDictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o AuthorizationExceptionRuleOutput) ConditionDictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionDictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o AuthorizationExceptionRuleOutput) ConditionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionId }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o AuthorizationExceptionRuleOutput) ConditionIsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.BoolPtrOutput { return v.ConditionIsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`, `macContains`, `macEndsWith`, `macEquals`, `macIn`, `macNotContains`, `macNotEndsWith`, `macNotEquals`, `macNotIn`, `macNotStartsWith`, `macStartsWith`
func (o AuthorizationExceptionRuleOutput) ConditionOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionOperator }).(pulumi.StringPtrOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
func (o AuthorizationExceptionRuleOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionType }).(pulumi.StringPtrOutput)
}

// Indicates if this rule is the default one
func (o AuthorizationExceptionRuleOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o AuthorizationExceptionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o AuthorizationExceptionRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

// Device admin profiles control the initial login session of the device administrator
func (o AuthorizationExceptionRuleOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.Profile }).(pulumi.StringPtrOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o AuthorizationExceptionRuleOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// The state that the rule is in. A disabled rule cannot be matched.
//   - Choices: `disabled`, `enabled`, `monitor`
func (o AuthorizationExceptionRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationExceptionRule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type AuthorizationExceptionRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationExceptionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationExceptionRule)(nil)).Elem()
}

func (o AuthorizationExceptionRuleArrayOutput) ToAuthorizationExceptionRuleArrayOutput() AuthorizationExceptionRuleArrayOutput {
	return o
}

func (o AuthorizationExceptionRuleArrayOutput) ToAuthorizationExceptionRuleArrayOutputWithContext(ctx context.Context) AuthorizationExceptionRuleArrayOutput {
	return o
}

func (o AuthorizationExceptionRuleArrayOutput) Index(i pulumi.IntInput) AuthorizationExceptionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationExceptionRule {
		return vs[0].([]*AuthorizationExceptionRule)[vs[1].(int)]
	}).(AuthorizationExceptionRuleOutput)
}

type AuthorizationExceptionRuleMapOutput struct{ *pulumi.OutputState }

func (AuthorizationExceptionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationExceptionRule)(nil)).Elem()
}

func (o AuthorizationExceptionRuleMapOutput) ToAuthorizationExceptionRuleMapOutput() AuthorizationExceptionRuleMapOutput {
	return o
}

func (o AuthorizationExceptionRuleMapOutput) ToAuthorizationExceptionRuleMapOutputWithContext(ctx context.Context) AuthorizationExceptionRuleMapOutput {
	return o
}

func (o AuthorizationExceptionRuleMapOutput) MapIndex(k pulumi.StringInput) AuthorizationExceptionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationExceptionRule {
		return vs[0].(map[string]*AuthorizationExceptionRule)[vs[1].(string)]
	}).(AuthorizationExceptionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationExceptionRuleInput)(nil)).Elem(), &AuthorizationExceptionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationExceptionRuleArrayInput)(nil)).Elem(), AuthorizationExceptionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationExceptionRuleMapInput)(nil)).Elem(), AuthorizationExceptionRuleMap{})
	pulumi.RegisterOutputType(AuthorizationExceptionRuleOutput{})
	pulumi.RegisterOutputType(AuthorizationExceptionRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationExceptionRuleMapOutput{})
}
