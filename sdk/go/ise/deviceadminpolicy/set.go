// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceadminpolicy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Device Admin Policy Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminPolicy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DeviceAdminPolicy.NewSet(ctx, "example", &DeviceAdminPolicy.SetArgs{
//				Name:                    pulumi.String("PolicySet1"),
//				Description:             pulumi.String("My description"),
//				IsProxy:                 pulumi.Bool(false),
//				Rank:                    pulumi.Int(0),
//				ServiceName:             pulumi.String("Default Device Admin"),
//				State:                   pulumi.String("enabled"),
//				ConditionType:           pulumi.String("ConditionAttributes"),
//				ConditionIsNegate:       pulumi.Bool(false),
//				ConditionAttributeName:  pulumi.String("Location"),
//				ConditionAttributeValue: pulumi.String("All Locations"),
//				ConditionDictionaryName: pulumi.String("DEVICE"),
//				ConditionOperator:       pulumi.String("equals"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:DeviceAdminPolicy/set:Set example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Set struct {
	pulumi.CustomResourceState

	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens SetChildrenArrayOutput `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrOutput `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrOutput `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrOutput `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrOutput `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId pulumi.StringPtrOutput `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrOutput `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrOutput `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrOutput `pulumi:"conditionType"`
	// Indicates if this policy set is the default one
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// The description of the policy set
	Description pulumi.StringOutput `pulumi:"description"`
	// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
	IsProxy pulumi.BoolPtrOutput `pulumi:"isProxy"`
	// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringOutput `pulumi:"name"`
	// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
	Rank pulumi.IntOutput `pulumi:"rank"`
	// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
	// `monitor`
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewSet registers a new resource with the given unique name, arguments, and options.
func NewSet(ctx *pulumi.Context,
	name string, args *SetArgs, opts ...pulumi.ResourceOption) (*Set, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Set
	err := ctx.RegisterResource("ise:DeviceAdminPolicy/set:Set", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSet gets an existing Set resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SetState, opts ...pulumi.ResourceOption) (*Set, error) {
	var resource Set
	err := ctx.ReadResource("ise:DeviceAdminPolicy/set:Set", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Set resources.
type setState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []SetChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this policy set is the default one
	Default *bool `pulumi:"default"`
	// The description of the policy set
	Description *string `pulumi:"description"`
	// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
	IsProxy *bool `pulumi:"isProxy"`
	// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
	ServiceName *string `pulumi:"serviceName"`
	// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
	// `monitor`
	State *string `pulumi:"state"`
}

type SetState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens SetChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this policy set is the default one
	Default pulumi.BoolPtrInput
	// The description of the policy set
	Description pulumi.StringPtrInput
	// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
	IsProxy pulumi.BoolPtrInput
	// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
	ServiceName pulumi.StringPtrInput
	// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
	// `monitor`
	State pulumi.StringPtrInput
}

func (SetState) ElementType() reflect.Type {
	return reflect.TypeOf((*setState)(nil)).Elem()
}

type setArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []SetChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this policy set is the default one
	Default *bool `pulumi:"default"`
	// The description of the policy set
	Description *string `pulumi:"description"`
	// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
	IsProxy *bool `pulumi:"isProxy"`
	// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
	ServiceName string `pulumi:"serviceName"`
	// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
	// `monitor`
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Set resource.
type SetArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens SetChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this policy set is the default one
	Default pulumi.BoolPtrInput
	// The description of the policy set
	Description pulumi.StringPtrInput
	// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
	IsProxy pulumi.BoolPtrInput
	// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
	ServiceName pulumi.StringInput
	// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
	// `monitor`
	State pulumi.StringPtrInput
}

func (SetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*setArgs)(nil)).Elem()
}

type SetInput interface {
	pulumi.Input

	ToSetOutput() SetOutput
	ToSetOutputWithContext(ctx context.Context) SetOutput
}

func (*Set) ElementType() reflect.Type {
	return reflect.TypeOf((**Set)(nil)).Elem()
}

func (i *Set) ToSetOutput() SetOutput {
	return i.ToSetOutputWithContext(context.Background())
}

func (i *Set) ToSetOutputWithContext(ctx context.Context) SetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetOutput)
}

// SetArrayInput is an input type that accepts SetArray and SetArrayOutput values.
// You can construct a concrete instance of `SetArrayInput` via:
//
//	SetArray{ SetArgs{...} }
type SetArrayInput interface {
	pulumi.Input

	ToSetArrayOutput() SetArrayOutput
	ToSetArrayOutputWithContext(context.Context) SetArrayOutput
}

type SetArray []SetInput

func (SetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Set)(nil)).Elem()
}

func (i SetArray) ToSetArrayOutput() SetArrayOutput {
	return i.ToSetArrayOutputWithContext(context.Background())
}

func (i SetArray) ToSetArrayOutputWithContext(ctx context.Context) SetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetArrayOutput)
}

// SetMapInput is an input type that accepts SetMap and SetMapOutput values.
// You can construct a concrete instance of `SetMapInput` via:
//
//	SetMap{ "key": SetArgs{...} }
type SetMapInput interface {
	pulumi.Input

	ToSetMapOutput() SetMapOutput
	ToSetMapOutputWithContext(context.Context) SetMapOutput
}

type SetMap map[string]SetInput

func (SetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Set)(nil)).Elem()
}

func (i SetMap) ToSetMapOutput() SetMapOutput {
	return i.ToSetMapOutputWithContext(context.Background())
}

func (i SetMap) ToSetMapOutputWithContext(ctx context.Context) SetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetMapOutput)
}

type SetOutput struct{ *pulumi.OutputState }

func (SetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Set)(nil)).Elem()
}

func (o SetOutput) ToSetOutput() SetOutput {
	return o
}

func (o SetOutput) ToSetOutputWithContext(ctx context.Context) SetOutput {
	return o
}

// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o SetOutput) Childrens() SetChildrenArrayOutput {
	return o.ApplyT(func(v *Set) SetChildrenArrayOutput { return v.Childrens }).(SetChildrenArrayOutput)
}

// Dictionary attribute name
func (o SetOutput) ConditionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionAttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o SetOutput) ConditionAttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionAttributeValue }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o SetOutput) ConditionDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionDictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o SetOutput) ConditionDictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionDictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o SetOutput) ConditionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionId }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o SetOutput) ConditionIsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.BoolPtrOutput { return v.ConditionIsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o SetOutput) ConditionOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionOperator }).(pulumi.StringPtrOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
// `ConditionOrBlock`, `ConditionReference`
func (o SetOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.ConditionType }).(pulumi.StringPtrOutput)
}

// Indicates if this policy set is the default one
func (o SetOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// The description of the policy set
func (o SetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Set) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
func (o SetOutput) IsProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.BoolPtrOutput { return v.IsProxy }).(pulumi.BoolPtrOutput)
}

// Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o SetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Set) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rank (priority) in relation to other policy sets. Lower rank is higher priority.
func (o SetOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v *Set) pulumi.IntOutput { return v.Rank }).(pulumi.IntOutput)
}

// Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
func (o SetOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Set) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,
// `monitor`
func (o SetOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type SetArrayOutput struct{ *pulumi.OutputState }

func (SetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Set)(nil)).Elem()
}

func (o SetArrayOutput) ToSetArrayOutput() SetArrayOutput {
	return o
}

func (o SetArrayOutput) ToSetArrayOutputWithContext(ctx context.Context) SetArrayOutput {
	return o
}

func (o SetArrayOutput) Index(i pulumi.IntInput) SetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Set {
		return vs[0].([]*Set)[vs[1].(int)]
	}).(SetOutput)
}

type SetMapOutput struct{ *pulumi.OutputState }

func (SetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Set)(nil)).Elem()
}

func (o SetMapOutput) ToSetMapOutput() SetMapOutput {
	return o
}

func (o SetMapOutput) ToSetMapOutputWithContext(ctx context.Context) SetMapOutput {
	return o
}

func (o SetMapOutput) MapIndex(k pulumi.StringInput) SetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Set {
		return vs[0].(map[string]*Set)[vs[1].(string)]
	}).(SetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SetInput)(nil)).Elem(), &Set{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetArrayInput)(nil)).Elem(), SetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetMapInput)(nil)).Elem(), SetMap{})
	pulumi.RegisterOutputType(SetOutput{})
	pulumi.RegisterOutputType(SetArrayOutput{})
	pulumi.RegisterOutputType(SetMapOutput{})
}
