// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trustseciptosgt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TrustSec IP to SGT Mapping.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecIpToSgt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := TrustsecIpToSgt.NewMapping(ctx, "example", &TrustsecIpToSgt.MappingArgs{
//				Name:       pulumi.String("10.0.0.1/32"),
//				DeployType: pulumi.String("ALL"),
//				HostIp:     pulumi.String("10.0.0.1/32"),
//				Sgt:        pulumi.String("93e1bf00-8c01-11e6-996c-525400b48521"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:TrustsecIpToSgt/mapping:Mapping example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Mapping struct {
	pulumi.CustomResourceState

	// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
	DeployTo pulumi.StringPtrOutput `pulumi:"deployTo"`
	// Deploy Type - Choices: `ALL`, `ND`, `NDG`
	DeployType pulumi.StringPtrOutput `pulumi:"deployType"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Mandatory if `host_name` is empty
	HostIp pulumi.StringPtrOutput `pulumi:"hostIp"`
	// Mandatory if `host_ip` is empty
	HostName pulumi.StringPtrOutput `pulumi:"hostName"`
	// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
	MappingGroup pulumi.StringPtrOutput `pulumi:"mappingGroup"`
	// The name of the IP to SGT mapping
	Name pulumi.StringOutput `pulumi:"name"`
	// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
	Sgt pulumi.StringPtrOutput `pulumi:"sgt"`
}

// NewMapping registers a new resource with the given unique name, arguments, and options.
func NewMapping(ctx *pulumi.Context,
	name string, args *MappingArgs, opts ...pulumi.ResourceOption) (*Mapping, error) {
	if args == nil {
		args = &MappingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mapping
	err := ctx.RegisterResource("ise:TrustsecIpToSgt/mapping:Mapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMapping gets an existing Mapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MappingState, opts ...pulumi.ResourceOption) (*Mapping, error) {
	var resource Mapping
	err := ctx.ReadResource("ise:TrustsecIpToSgt/mapping:Mapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mapping resources.
type mappingState struct {
	// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
	DeployTo *string `pulumi:"deployTo"`
	// Deploy Type - Choices: `ALL`, `ND`, `NDG`
	DeployType *string `pulumi:"deployType"`
	// Description
	Description *string `pulumi:"description"`
	// Mandatory if `host_name` is empty
	HostIp *string `pulumi:"hostIp"`
	// Mandatory if `host_ip` is empty
	HostName *string `pulumi:"hostName"`
	// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
	MappingGroup *string `pulumi:"mappingGroup"`
	// The name of the IP to SGT mapping
	Name *string `pulumi:"name"`
	// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
	Sgt *string `pulumi:"sgt"`
}

type MappingState struct {
	// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
	DeployTo pulumi.StringPtrInput
	// Deploy Type - Choices: `ALL`, `ND`, `NDG`
	DeployType pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Mandatory if `host_name` is empty
	HostIp pulumi.StringPtrInput
	// Mandatory if `host_ip` is empty
	HostName pulumi.StringPtrInput
	// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
	MappingGroup pulumi.StringPtrInput
	// The name of the IP to SGT mapping
	Name pulumi.StringPtrInput
	// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
	Sgt pulumi.StringPtrInput
}

func (MappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingState)(nil)).Elem()
}

type mappingArgs struct {
	// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
	DeployTo *string `pulumi:"deployTo"`
	// Deploy Type - Choices: `ALL`, `ND`, `NDG`
	DeployType *string `pulumi:"deployType"`
	// Description
	Description *string `pulumi:"description"`
	// Mandatory if `host_name` is empty
	HostIp *string `pulumi:"hostIp"`
	// Mandatory if `host_ip` is empty
	HostName *string `pulumi:"hostName"`
	// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
	MappingGroup *string `pulumi:"mappingGroup"`
	// The name of the IP to SGT mapping
	Name *string `pulumi:"name"`
	// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
	Sgt *string `pulumi:"sgt"`
}

// The set of arguments for constructing a Mapping resource.
type MappingArgs struct {
	// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
	DeployTo pulumi.StringPtrInput
	// Deploy Type - Choices: `ALL`, `ND`, `NDG`
	DeployType pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Mandatory if `host_name` is empty
	HostIp pulumi.StringPtrInput
	// Mandatory if `host_ip` is empty
	HostName pulumi.StringPtrInput
	// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
	MappingGroup pulumi.StringPtrInput
	// The name of the IP to SGT mapping
	Name pulumi.StringPtrInput
	// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
	Sgt pulumi.StringPtrInput
}

func (MappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingArgs)(nil)).Elem()
}

type MappingInput interface {
	pulumi.Input

	ToMappingOutput() MappingOutput
	ToMappingOutputWithContext(ctx context.Context) MappingOutput
}

func (*Mapping) ElementType() reflect.Type {
	return reflect.TypeOf((**Mapping)(nil)).Elem()
}

func (i *Mapping) ToMappingOutput() MappingOutput {
	return i.ToMappingOutputWithContext(context.Background())
}

func (i *Mapping) ToMappingOutputWithContext(ctx context.Context) MappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingOutput)
}

// MappingArrayInput is an input type that accepts MappingArray and MappingArrayOutput values.
// You can construct a concrete instance of `MappingArrayInput` via:
//
//	MappingArray{ MappingArgs{...} }
type MappingArrayInput interface {
	pulumi.Input

	ToMappingArrayOutput() MappingArrayOutput
	ToMappingArrayOutputWithContext(context.Context) MappingArrayOutput
}

type MappingArray []MappingInput

func (MappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mapping)(nil)).Elem()
}

func (i MappingArray) ToMappingArrayOutput() MappingArrayOutput {
	return i.ToMappingArrayOutputWithContext(context.Background())
}

func (i MappingArray) ToMappingArrayOutputWithContext(ctx context.Context) MappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingArrayOutput)
}

// MappingMapInput is an input type that accepts MappingMap and MappingMapOutput values.
// You can construct a concrete instance of `MappingMapInput` via:
//
//	MappingMap{ "key": MappingArgs{...} }
type MappingMapInput interface {
	pulumi.Input

	ToMappingMapOutput() MappingMapOutput
	ToMappingMapOutputWithContext(context.Context) MappingMapOutput
}

type MappingMap map[string]MappingInput

func (MappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mapping)(nil)).Elem()
}

func (i MappingMap) ToMappingMapOutput() MappingMapOutput {
	return i.ToMappingMapOutputWithContext(context.Background())
}

func (i MappingMap) ToMappingMapOutputWithContext(ctx context.Context) MappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingMapOutput)
}

type MappingOutput struct{ *pulumi.OutputState }

func (MappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mapping)(nil)).Elem()
}

func (o MappingOutput) ToMappingOutput() MappingOutput {
	return o
}

func (o MappingOutput) ToMappingOutputWithContext(ctx context.Context) MappingOutput {
	return o
}

// Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`
func (o MappingOutput) DeployTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.DeployTo }).(pulumi.StringPtrOutput)
}

// Deploy Type - Choices: `ALL`, `ND`, `NDG`
func (o MappingOutput) DeployType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.DeployType }).(pulumi.StringPtrOutput)
}

// Description
func (o MappingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Mandatory if `host_name` is empty
func (o MappingOutput) HostIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.HostIp }).(pulumi.StringPtrOutput)
}

// Mandatory if `host_ip` is empty
func (o MappingOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

// IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set
func (o MappingOutput) MappingGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.MappingGroup }).(pulumi.StringPtrOutput)
}

// The name of the IP to SGT mapping
func (o MappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Trustsec Security Group ID. Mandatory unless `mapping_group` is set
func (o MappingOutput) Sgt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mapping) pulumi.StringPtrOutput { return v.Sgt }).(pulumi.StringPtrOutput)
}

type MappingArrayOutput struct{ *pulumi.OutputState }

func (MappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mapping)(nil)).Elem()
}

func (o MappingArrayOutput) ToMappingArrayOutput() MappingArrayOutput {
	return o
}

func (o MappingArrayOutput) ToMappingArrayOutputWithContext(ctx context.Context) MappingArrayOutput {
	return o
}

func (o MappingArrayOutput) Index(i pulumi.IntInput) MappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mapping {
		return vs[0].([]*Mapping)[vs[1].(int)]
	}).(MappingOutput)
}

type MappingMapOutput struct{ *pulumi.OutputState }

func (MappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mapping)(nil)).Elem()
}

func (o MappingMapOutput) ToMappingMapOutput() MappingMapOutput {
	return o
}

func (o MappingMapOutput) ToMappingMapOutputWithContext(ctx context.Context) MappingMapOutput {
	return o
}

func (o MappingMapOutput) MapIndex(k pulumi.StringInput) MappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mapping {
		return vs[0].(map[string]*Mapping)[vs[1].(string)]
	}).(MappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MappingInput)(nil)).Elem(), &Mapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*MappingArrayInput)(nil)).Elem(), MappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MappingMapInput)(nil)).Elem(), MappingMap{})
	pulumi.RegisterOutputType(MappingOutput{})
	pulumi.RegisterOutputType(MappingArrayOutput{})
	pulumi.RegisterOutputType(MappingMapOutput{})
}
