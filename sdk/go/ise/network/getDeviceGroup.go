// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Device Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.LookupDeviceGroup(ctx, &network.LookupDeviceGroupArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDeviceGroup(ctx *pulumi.Context, args *LookupDeviceGroupArgs, opts ...pulumi.InvokeOption) (*LookupDeviceGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeviceGroupResult
	err := ctx.Invoke("ise:network/getDeviceGroup:getDeviceGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeviceGroup.
type LookupDeviceGroupArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDeviceGroup.
type LookupDeviceGroupResult struct {
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
	Name string `pulumi:"name"`
	// The name of the root device group.
	RootGroup string `pulumi:"rootGroup"`
}

func LookupDeviceGroupOutput(ctx *pulumi.Context, args LookupDeviceGroupOutputArgs, opts ...pulumi.InvokeOption) LookupDeviceGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDeviceGroupResultOutput, error) {
			args := v.(LookupDeviceGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ise:network/getDeviceGroup:getDeviceGroup", args, LookupDeviceGroupResultOutput{}, options).(LookupDeviceGroupResultOutput), nil
		}).(LookupDeviceGroupResultOutput)
}

// A collection of arguments for invoking getDeviceGroup.
type LookupDeviceGroupOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupDeviceGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceGroupArgs)(nil)).Elem()
}

// A collection of values returned by getDeviceGroup.
type LookupDeviceGroupResultOutput struct{ *pulumi.OutputState }

func (LookupDeviceGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceGroupResult)(nil)).Elem()
}

func (o LookupDeviceGroupResultOutput) ToLookupDeviceGroupResultOutput() LookupDeviceGroupResultOutput {
	return o
}

func (o LookupDeviceGroupResultOutput) ToLookupDeviceGroupResultOutputWithContext(ctx context.Context) LookupDeviceGroupResultOutput {
	return o
}

// Description
func (o LookupDeviceGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupDeviceGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.
func (o LookupDeviceGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the root device group.
func (o LookupDeviceGroupResultOutput) RootGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceGroupResult) string { return v.RootGroup }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeviceGroupResultOutput{})
}
