// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewDevice(ctx, "example", &network.DeviceArgs{
//				Name:                              pulumi.String("Device1"),
//				Description:                       pulumi.String("My device"),
//				AuthenticationEnableKeyWrap:       pulumi.Bool(true),
//				AuthenticationEncryptionKey:       pulumi.String("cisco123cisco123"),
//				AuthenticationEncryptionKeyFormat: pulumi.String("ASCII"),
//				AuthenticationMessageAuthenticatorCodeKey: pulumi.String("cisco123cisco1235678"),
//				AuthenticationNetworkProtocol:             pulumi.String("RADIUS"),
//				AuthenticationRadiusSharedSecret:          pulumi.String("cisco123"),
//				AuthenticationEnableMultiSecret:           pulumi.Bool(true),
//				AuthenticationSecondRadiusSharedSecret:    pulumi.String("cisco12345"),
//				AuthenticationDtlsRequired:                pulumi.Bool(true),
//				CoaPort:                                   pulumi.Int(12345),
//				DtlsDnsName:                               pulumi.String("cisco.com"),
//				Ips: network.DeviceIpArray{
//					&network.DeviceIpArgs{
//						Ipaddress: pulumi.String("2.3.4.5"),
//						Mask:      pulumi.String("32"),
//					},
//				},
//				ModelName:                                    pulumi.String("Unknown"),
//				SoftwareVersion:                              pulumi.String("Unknown"),
//				ProfileName:                                  pulumi.String("Cisco"),
//				SnmpLinkTrapQuery:                            pulumi.Bool(true),
//				SnmpMacTrapQuery:                             pulumi.Bool(true),
//				SnmpPollingInterval:                          pulumi.Int(1200),
//				SnmpRoCommunity:                              pulumi.String("rocom"),
//				SnmpVersion:                                  pulumi.String("TWO_C"),
//				TacacsConnectModeOptions:                     pulumi.String("OFF"),
//				TacacsSharedSecret:                           pulumi.String("cisco123"),
//				TrustsecDeviceId:                             pulumi.String("device123"),
//				TrustsecDevicePassword:                       pulumi.String("cisco123"),
//				TrustsecRestApiUsername:                      pulumi.String("user123"),
//				TrustsecRestApiPassword:                      pulumi.String("Cisco123"),
//				TrustsecEnableModePassword:                   pulumi.String("cisco123"),
//				TrustsecExecModePassword:                     pulumi.String("cisco123"),
//				TrustsecExecModeUsername:                     pulumi.String("user456"),
//				TrustsecIncludeWhenDeployingSgtUpdates:       pulumi.Bool(true),
//				TrustsecDownloadEnvironmentDataEveryXSeconds: pulumi.Int(1000),
//				TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds: pulumi.Int(1000),
//				TrustsecDownloadSgaclListsEveryXSeconds:              pulumi.Int(1000),
//				TrustsecOtherSgaDevicesToTrustThisDevice:             pulumi.Bool(true),
//				TrustsecReAuthenticationEveryXSeconds:                pulumi.Int(1000),
//				TrustsecSendConfigurationToDevice:                    pulumi.Bool(true),
//				TrustsecSendConfigurationToDeviceUsing:               pulumi.String("ENABLE_USING_COA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import ise:network/device:Device example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Device struct {
	pulumi.CustomResourceState

	// Enforce use of DTLS
	AuthenticationDtlsRequired pulumi.BoolPtrOutput `pulumi:"authenticationDtlsRequired"`
	// Enable key wrap
	AuthenticationEnableKeyWrap pulumi.BoolPtrOutput `pulumi:"authenticationEnableKeyWrap"`
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret pulumi.BoolPtrOutput `pulumi:"authenticationEnableMultiSecret"`
	// Encryption key
	AuthenticationEncryptionKey pulumi.StringPtrOutput `pulumi:"authenticationEncryptionKey"`
	// Key input format
	//   - Choices: `ASCII`, `HEXADECIMAL`
	AuthenticationEncryptionKeyFormat pulumi.StringPtrOutput `pulumi:"authenticationEncryptionKeyFormat"`
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey pulumi.StringPtrOutput `pulumi:"authenticationMessageAuthenticatorCodeKey"`
	// Network protocol
	//   - Choices: `RADIUS`, `TACACS_PLUS`
	AuthenticationNetworkProtocol pulumi.StringPtrOutput `pulumi:"authenticationNetworkProtocol"`
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret pulumi.StringPtrOutput `pulumi:"authenticationRadiusSharedSecret"`
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret pulumi.StringPtrOutput `pulumi:"authenticationSecondRadiusSharedSecret"`
	// CoA port
	//   - Default value: `1700`
	CoaPort pulumi.IntOutput `pulumi:"coaPort"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName pulumi.StringPtrOutput `pulumi:"dtlsDnsName"`
	// List of IP subnets
	Ips DeviceIpArrayOutput `pulumi:"ips"`
	// Model name
	ModelName pulumi.StringPtrOutput `pulumi:"modelName"`
	// The name of the network device
	Name pulumi.StringOutput `pulumi:"name"`
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups pulumi.StringArrayOutput `pulumi:"networkDeviceGroups"`
	// Profile name
	//   - Default value: `Cisco`
	ProfileName pulumi.StringOutput `pulumi:"profileName"`
	// SNMP link Trap Query
	SnmpLinkTrapQuery pulumi.BoolPtrOutput `pulumi:"snmpLinkTrapQuery"`
	// SNMP MAC Trap Query
	SnmpMacTrapQuery pulumi.BoolPtrOutput `pulumi:"snmpMacTrapQuery"`
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode pulumi.StringPtrOutput `pulumi:"snmpOriginatingPolicyServiceNode"`
	// SNMP Polling Interval in seconds
	//   - Range: `600`-`86400`
	SnmpPollingInterval pulumi.IntPtrOutput `pulumi:"snmpPollingInterval"`
	// SNMP RO Community
	SnmpRoCommunity pulumi.StringPtrOutput `pulumi:"snmpRoCommunity"`
	// SNMP version
	//   - Choices: `ONE`, `TWO_C`, `THREE`
	SnmpVersion pulumi.StringPtrOutput `pulumi:"snmpVersion"`
	// Software version
	SoftwareVersion pulumi.StringPtrOutput `pulumi:"softwareVersion"`
	// Connect mode options
	//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
	TacacsConnectModeOptions pulumi.StringPtrOutput `pulumi:"tacacsConnectModeOptions"`
	// Shared secret
	TacacsSharedSecret pulumi.StringPtrOutput `pulumi:"tacacsSharedSecret"`
	// CoA source host
	TrustsecCoaSourceHost pulumi.StringPtrOutput `pulumi:"trustsecCoaSourceHost"`
	// TrustSec device ID
	TrustsecDeviceId pulumi.StringPtrOutput `pulumi:"trustsecDeviceId"`
	// TrustSec device password
	TrustsecDevicePassword pulumi.StringPtrOutput `pulumi:"trustsecDevicePassword"`
	// Download environment data every X seconds
	TrustsecDownloadEnvironmentDataEveryXSeconds pulumi.IntPtrOutput `pulumi:"trustsecDownloadEnvironmentDataEveryXSeconds"`
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds pulumi.IntPtrOutput `pulumi:"trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"`
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds pulumi.IntPtrOutput `pulumi:"trustsecDownloadSgaclListsEveryXSeconds"`
	// Enable mode password
	TrustsecEnableModePassword pulumi.StringPtrOutput `pulumi:"trustsecEnableModePassword"`
	// EXEC mode password
	TrustsecExecModePassword pulumi.StringPtrOutput `pulumi:"trustsecExecModePassword"`
	// EXEC mode username
	TrustsecExecModeUsername pulumi.StringPtrOutput `pulumi:"trustsecExecModeUsername"`
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates pulumi.BoolPtrOutput `pulumi:"trustsecIncludeWhenDeployingSgtUpdates"`
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice pulumi.BoolPtrOutput `pulumi:"trustsecOtherSgaDevicesToTrustThisDevice"`
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds pulumi.IntPtrOutput `pulumi:"trustsecReAuthenticationEveryXSeconds"`
	// REST API password
	TrustsecRestApiPassword pulumi.StringPtrOutput `pulumi:"trustsecRestApiPassword"`
	// REST API username
	TrustsecRestApiUsername pulumi.StringPtrOutput `pulumi:"trustsecRestApiUsername"`
	// Send configuration to device
	TrustsecSendConfigurationToDevice pulumi.BoolPtrOutput `pulumi:"trustsecSendConfigurationToDevice"`
	// Send configuration to device using
	//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
	TrustsecSendConfigurationToDeviceUsing pulumi.StringPtrOutput `pulumi:"trustsecSendConfigurationToDeviceUsing"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ips == nil {
		return nil, errors.New("invalid value for required argument 'Ips'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("ise:network/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("ise:network/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// Enforce use of DTLS
	AuthenticationDtlsRequired *bool `pulumi:"authenticationDtlsRequired"`
	// Enable key wrap
	AuthenticationEnableKeyWrap *bool `pulumi:"authenticationEnableKeyWrap"`
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret *bool `pulumi:"authenticationEnableMultiSecret"`
	// Encryption key
	AuthenticationEncryptionKey *string `pulumi:"authenticationEncryptionKey"`
	// Key input format
	//   - Choices: `ASCII`, `HEXADECIMAL`
	AuthenticationEncryptionKeyFormat *string `pulumi:"authenticationEncryptionKeyFormat"`
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey *string `pulumi:"authenticationMessageAuthenticatorCodeKey"`
	// Network protocol
	//   - Choices: `RADIUS`, `TACACS_PLUS`
	AuthenticationNetworkProtocol *string `pulumi:"authenticationNetworkProtocol"`
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret *string `pulumi:"authenticationRadiusSharedSecret"`
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret *string `pulumi:"authenticationSecondRadiusSharedSecret"`
	// CoA port
	//   - Default value: `1700`
	CoaPort *int `pulumi:"coaPort"`
	// Description
	Description *string `pulumi:"description"`
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName *string `pulumi:"dtlsDnsName"`
	// List of IP subnets
	Ips []DeviceIp `pulumi:"ips"`
	// Model name
	ModelName *string `pulumi:"modelName"`
	// The name of the network device
	Name *string `pulumi:"name"`
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups []string `pulumi:"networkDeviceGroups"`
	// Profile name
	//   - Default value: `Cisco`
	ProfileName *string `pulumi:"profileName"`
	// SNMP link Trap Query
	SnmpLinkTrapQuery *bool `pulumi:"snmpLinkTrapQuery"`
	// SNMP MAC Trap Query
	SnmpMacTrapQuery *bool `pulumi:"snmpMacTrapQuery"`
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode *string `pulumi:"snmpOriginatingPolicyServiceNode"`
	// SNMP Polling Interval in seconds
	//   - Range: `600`-`86400`
	SnmpPollingInterval *int `pulumi:"snmpPollingInterval"`
	// SNMP RO Community
	SnmpRoCommunity *string `pulumi:"snmpRoCommunity"`
	// SNMP version
	//   - Choices: `ONE`, `TWO_C`, `THREE`
	SnmpVersion *string `pulumi:"snmpVersion"`
	// Software version
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Connect mode options
	//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
	TacacsConnectModeOptions *string `pulumi:"tacacsConnectModeOptions"`
	// Shared secret
	TacacsSharedSecret *string `pulumi:"tacacsSharedSecret"`
	// CoA source host
	TrustsecCoaSourceHost *string `pulumi:"trustsecCoaSourceHost"`
	// TrustSec device ID
	TrustsecDeviceId *string `pulumi:"trustsecDeviceId"`
	// TrustSec device password
	TrustsecDevicePassword *string `pulumi:"trustsecDevicePassword"`
	// Download environment data every X seconds
	TrustsecDownloadEnvironmentDataEveryXSeconds *int `pulumi:"trustsecDownloadEnvironmentDataEveryXSeconds"`
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds *int `pulumi:"trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"`
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds *int `pulumi:"trustsecDownloadSgaclListsEveryXSeconds"`
	// Enable mode password
	TrustsecEnableModePassword *string `pulumi:"trustsecEnableModePassword"`
	// EXEC mode password
	TrustsecExecModePassword *string `pulumi:"trustsecExecModePassword"`
	// EXEC mode username
	TrustsecExecModeUsername *string `pulumi:"trustsecExecModeUsername"`
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates *bool `pulumi:"trustsecIncludeWhenDeployingSgtUpdates"`
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice *bool `pulumi:"trustsecOtherSgaDevicesToTrustThisDevice"`
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds *int `pulumi:"trustsecReAuthenticationEveryXSeconds"`
	// REST API password
	TrustsecRestApiPassword *string `pulumi:"trustsecRestApiPassword"`
	// REST API username
	TrustsecRestApiUsername *string `pulumi:"trustsecRestApiUsername"`
	// Send configuration to device
	TrustsecSendConfigurationToDevice *bool `pulumi:"trustsecSendConfigurationToDevice"`
	// Send configuration to device using
	//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
	TrustsecSendConfigurationToDeviceUsing *string `pulumi:"trustsecSendConfigurationToDeviceUsing"`
}

type DeviceState struct {
	// Enforce use of DTLS
	AuthenticationDtlsRequired pulumi.BoolPtrInput
	// Enable key wrap
	AuthenticationEnableKeyWrap pulumi.BoolPtrInput
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret pulumi.BoolPtrInput
	// Encryption key
	AuthenticationEncryptionKey pulumi.StringPtrInput
	// Key input format
	//   - Choices: `ASCII`, `HEXADECIMAL`
	AuthenticationEncryptionKeyFormat pulumi.StringPtrInput
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey pulumi.StringPtrInput
	// Network protocol
	//   - Choices: `RADIUS`, `TACACS_PLUS`
	AuthenticationNetworkProtocol pulumi.StringPtrInput
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret pulumi.StringPtrInput
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret pulumi.StringPtrInput
	// CoA port
	//   - Default value: `1700`
	CoaPort pulumi.IntPtrInput
	// Description
	Description pulumi.StringPtrInput
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName pulumi.StringPtrInput
	// List of IP subnets
	Ips DeviceIpArrayInput
	// Model name
	ModelName pulumi.StringPtrInput
	// The name of the network device
	Name pulumi.StringPtrInput
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups pulumi.StringArrayInput
	// Profile name
	//   - Default value: `Cisco`
	ProfileName pulumi.StringPtrInput
	// SNMP link Trap Query
	SnmpLinkTrapQuery pulumi.BoolPtrInput
	// SNMP MAC Trap Query
	SnmpMacTrapQuery pulumi.BoolPtrInput
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode pulumi.StringPtrInput
	// SNMP Polling Interval in seconds
	//   - Range: `600`-`86400`
	SnmpPollingInterval pulumi.IntPtrInput
	// SNMP RO Community
	SnmpRoCommunity pulumi.StringPtrInput
	// SNMP version
	//   - Choices: `ONE`, `TWO_C`, `THREE`
	SnmpVersion pulumi.StringPtrInput
	// Software version
	SoftwareVersion pulumi.StringPtrInput
	// Connect mode options
	//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
	TacacsConnectModeOptions pulumi.StringPtrInput
	// Shared secret
	TacacsSharedSecret pulumi.StringPtrInput
	// CoA source host
	TrustsecCoaSourceHost pulumi.StringPtrInput
	// TrustSec device ID
	TrustsecDeviceId pulumi.StringPtrInput
	// TrustSec device password
	TrustsecDevicePassword pulumi.StringPtrInput
	// Download environment data every X seconds
	TrustsecDownloadEnvironmentDataEveryXSeconds pulumi.IntPtrInput
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds pulumi.IntPtrInput
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds pulumi.IntPtrInput
	// Enable mode password
	TrustsecEnableModePassword pulumi.StringPtrInput
	// EXEC mode password
	TrustsecExecModePassword pulumi.StringPtrInput
	// EXEC mode username
	TrustsecExecModeUsername pulumi.StringPtrInput
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates pulumi.BoolPtrInput
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice pulumi.BoolPtrInput
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds pulumi.IntPtrInput
	// REST API password
	TrustsecRestApiPassword pulumi.StringPtrInput
	// REST API username
	TrustsecRestApiUsername pulumi.StringPtrInput
	// Send configuration to device
	TrustsecSendConfigurationToDevice pulumi.BoolPtrInput
	// Send configuration to device using
	//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
	TrustsecSendConfigurationToDeviceUsing pulumi.StringPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// Enforce use of DTLS
	AuthenticationDtlsRequired *bool `pulumi:"authenticationDtlsRequired"`
	// Enable key wrap
	AuthenticationEnableKeyWrap *bool `pulumi:"authenticationEnableKeyWrap"`
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret *bool `pulumi:"authenticationEnableMultiSecret"`
	// Encryption key
	AuthenticationEncryptionKey *string `pulumi:"authenticationEncryptionKey"`
	// Key input format
	//   - Choices: `ASCII`, `HEXADECIMAL`
	AuthenticationEncryptionKeyFormat *string `pulumi:"authenticationEncryptionKeyFormat"`
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey *string `pulumi:"authenticationMessageAuthenticatorCodeKey"`
	// Network protocol
	//   - Choices: `RADIUS`, `TACACS_PLUS`
	AuthenticationNetworkProtocol *string `pulumi:"authenticationNetworkProtocol"`
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret *string `pulumi:"authenticationRadiusSharedSecret"`
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret *string `pulumi:"authenticationSecondRadiusSharedSecret"`
	// CoA port
	//   - Default value: `1700`
	CoaPort *int `pulumi:"coaPort"`
	// Description
	Description *string `pulumi:"description"`
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName *string `pulumi:"dtlsDnsName"`
	// List of IP subnets
	Ips []DeviceIp `pulumi:"ips"`
	// Model name
	ModelName *string `pulumi:"modelName"`
	// The name of the network device
	Name *string `pulumi:"name"`
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups []string `pulumi:"networkDeviceGroups"`
	// Profile name
	//   - Default value: `Cisco`
	ProfileName *string `pulumi:"profileName"`
	// SNMP link Trap Query
	SnmpLinkTrapQuery *bool `pulumi:"snmpLinkTrapQuery"`
	// SNMP MAC Trap Query
	SnmpMacTrapQuery *bool `pulumi:"snmpMacTrapQuery"`
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode *string `pulumi:"snmpOriginatingPolicyServiceNode"`
	// SNMP Polling Interval in seconds
	//   - Range: `600`-`86400`
	SnmpPollingInterval *int `pulumi:"snmpPollingInterval"`
	// SNMP RO Community
	SnmpRoCommunity *string `pulumi:"snmpRoCommunity"`
	// SNMP version
	//   - Choices: `ONE`, `TWO_C`, `THREE`
	SnmpVersion *string `pulumi:"snmpVersion"`
	// Software version
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Connect mode options
	//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
	TacacsConnectModeOptions *string `pulumi:"tacacsConnectModeOptions"`
	// Shared secret
	TacacsSharedSecret *string `pulumi:"tacacsSharedSecret"`
	// CoA source host
	TrustsecCoaSourceHost *string `pulumi:"trustsecCoaSourceHost"`
	// TrustSec device ID
	TrustsecDeviceId *string `pulumi:"trustsecDeviceId"`
	// TrustSec device password
	TrustsecDevicePassword *string `pulumi:"trustsecDevicePassword"`
	// Download environment data every X seconds
	TrustsecDownloadEnvironmentDataEveryXSeconds *int `pulumi:"trustsecDownloadEnvironmentDataEveryXSeconds"`
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds *int `pulumi:"trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"`
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds *int `pulumi:"trustsecDownloadSgaclListsEveryXSeconds"`
	// Enable mode password
	TrustsecEnableModePassword *string `pulumi:"trustsecEnableModePassword"`
	// EXEC mode password
	TrustsecExecModePassword *string `pulumi:"trustsecExecModePassword"`
	// EXEC mode username
	TrustsecExecModeUsername *string `pulumi:"trustsecExecModeUsername"`
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates *bool `pulumi:"trustsecIncludeWhenDeployingSgtUpdates"`
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice *bool `pulumi:"trustsecOtherSgaDevicesToTrustThisDevice"`
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds *int `pulumi:"trustsecReAuthenticationEveryXSeconds"`
	// REST API password
	TrustsecRestApiPassword *string `pulumi:"trustsecRestApiPassword"`
	// REST API username
	TrustsecRestApiUsername *string `pulumi:"trustsecRestApiUsername"`
	// Send configuration to device
	TrustsecSendConfigurationToDevice *bool `pulumi:"trustsecSendConfigurationToDevice"`
	// Send configuration to device using
	//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
	TrustsecSendConfigurationToDeviceUsing *string `pulumi:"trustsecSendConfigurationToDeviceUsing"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// Enforce use of DTLS
	AuthenticationDtlsRequired pulumi.BoolPtrInput
	// Enable key wrap
	AuthenticationEnableKeyWrap pulumi.BoolPtrInput
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret pulumi.BoolPtrInput
	// Encryption key
	AuthenticationEncryptionKey pulumi.StringPtrInput
	// Key input format
	//   - Choices: `ASCII`, `HEXADECIMAL`
	AuthenticationEncryptionKeyFormat pulumi.StringPtrInput
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey pulumi.StringPtrInput
	// Network protocol
	//   - Choices: `RADIUS`, `TACACS_PLUS`
	AuthenticationNetworkProtocol pulumi.StringPtrInput
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret pulumi.StringPtrInput
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret pulumi.StringPtrInput
	// CoA port
	//   - Default value: `1700`
	CoaPort pulumi.IntPtrInput
	// Description
	Description pulumi.StringPtrInput
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName pulumi.StringPtrInput
	// List of IP subnets
	Ips DeviceIpArrayInput
	// Model name
	ModelName pulumi.StringPtrInput
	// The name of the network device
	Name pulumi.StringPtrInput
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups pulumi.StringArrayInput
	// Profile name
	//   - Default value: `Cisco`
	ProfileName pulumi.StringPtrInput
	// SNMP link Trap Query
	SnmpLinkTrapQuery pulumi.BoolPtrInput
	// SNMP MAC Trap Query
	SnmpMacTrapQuery pulumi.BoolPtrInput
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode pulumi.StringPtrInput
	// SNMP Polling Interval in seconds
	//   - Range: `600`-`86400`
	SnmpPollingInterval pulumi.IntPtrInput
	// SNMP RO Community
	SnmpRoCommunity pulumi.StringPtrInput
	// SNMP version
	//   - Choices: `ONE`, `TWO_C`, `THREE`
	SnmpVersion pulumi.StringPtrInput
	// Software version
	SoftwareVersion pulumi.StringPtrInput
	// Connect mode options
	//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
	TacacsConnectModeOptions pulumi.StringPtrInput
	// Shared secret
	TacacsSharedSecret pulumi.StringPtrInput
	// CoA source host
	TrustsecCoaSourceHost pulumi.StringPtrInput
	// TrustSec device ID
	TrustsecDeviceId pulumi.StringPtrInput
	// TrustSec device password
	TrustsecDevicePassword pulumi.StringPtrInput
	// Download environment data every X seconds
	TrustsecDownloadEnvironmentDataEveryXSeconds pulumi.IntPtrInput
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds pulumi.IntPtrInput
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds pulumi.IntPtrInput
	// Enable mode password
	TrustsecEnableModePassword pulumi.StringPtrInput
	// EXEC mode password
	TrustsecExecModePassword pulumi.StringPtrInput
	// EXEC mode username
	TrustsecExecModeUsername pulumi.StringPtrInput
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates pulumi.BoolPtrInput
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice pulumi.BoolPtrInput
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds pulumi.IntPtrInput
	// REST API password
	TrustsecRestApiPassword pulumi.StringPtrInput
	// REST API username
	TrustsecRestApiUsername pulumi.StringPtrInput
	// Send configuration to device
	TrustsecSendConfigurationToDevice pulumi.BoolPtrInput
	// Send configuration to device using
	//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
	TrustsecSendConfigurationToDeviceUsing pulumi.StringPtrInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

// Enforce use of DTLS
func (o DeviceOutput) AuthenticationDtlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.AuthenticationDtlsRequired }).(pulumi.BoolPtrOutput)
}

// Enable key wrap
func (o DeviceOutput) AuthenticationEnableKeyWrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.AuthenticationEnableKeyWrap }).(pulumi.BoolPtrOutput)
}

// Enable multiple RADIUS shared secrets
func (o DeviceOutput) AuthenticationEnableMultiSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.AuthenticationEnableMultiSecret }).(pulumi.BoolPtrOutput)
}

// Encryption key
func (o DeviceOutput) AuthenticationEncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationEncryptionKey }).(pulumi.StringPtrOutput)
}

// Key input format
//   - Choices: `ASCII`, `HEXADECIMAL`
func (o DeviceOutput) AuthenticationEncryptionKeyFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationEncryptionKeyFormat }).(pulumi.StringPtrOutput)
}

// Message authenticator code key
func (o DeviceOutput) AuthenticationMessageAuthenticatorCodeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationMessageAuthenticatorCodeKey }).(pulumi.StringPtrOutput)
}

// Network protocol
//   - Choices: `RADIUS`, `TACACS_PLUS`
func (o DeviceOutput) AuthenticationNetworkProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationNetworkProtocol }).(pulumi.StringPtrOutput)
}

// RADIUS shared secret
func (o DeviceOutput) AuthenticationRadiusSharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationRadiusSharedSecret }).(pulumi.StringPtrOutput)
}

// Second RADIUS shared secret
func (o DeviceOutput) AuthenticationSecondRadiusSharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AuthenticationSecondRadiusSharedSecret }).(pulumi.StringPtrOutput)
}

// CoA port
//   - Default value: `1700`
func (o DeviceOutput) CoaPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.CoaPort }).(pulumi.IntOutput)
}

// Description
func (o DeviceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
func (o DeviceOutput) DtlsDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.DtlsDnsName }).(pulumi.StringPtrOutput)
}

// List of IP subnets
func (o DeviceOutput) Ips() DeviceIpArrayOutput {
	return o.ApplyT(func(v *Device) DeviceIpArrayOutput { return v.Ips }).(DeviceIpArrayOutput)
}

// Model name
func (o DeviceOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.ModelName }).(pulumi.StringPtrOutput)
}

// The name of the network device
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
func (o DeviceOutput) NetworkDeviceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.NetworkDeviceGroups }).(pulumi.StringArrayOutput)
}

// Profile name
//   - Default value: `Cisco`
func (o DeviceOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ProfileName }).(pulumi.StringOutput)
}

// SNMP link Trap Query
func (o DeviceOutput) SnmpLinkTrapQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.SnmpLinkTrapQuery }).(pulumi.BoolPtrOutput)
}

// SNMP MAC Trap Query
func (o DeviceOutput) SnmpMacTrapQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.SnmpMacTrapQuery }).(pulumi.BoolPtrOutput)
}

// Originating Policy Services Node
func (o DeviceOutput) SnmpOriginatingPolicyServiceNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.SnmpOriginatingPolicyServiceNode }).(pulumi.StringPtrOutput)
}

// SNMP Polling Interval in seconds
//   - Range: `600`-`86400`
func (o DeviceOutput) SnmpPollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.SnmpPollingInterval }).(pulumi.IntPtrOutput)
}

// SNMP RO Community
func (o DeviceOutput) SnmpRoCommunity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.SnmpRoCommunity }).(pulumi.StringPtrOutput)
}

// SNMP version
//   - Choices: `ONE`, `TWO_C`, `THREE`
func (o DeviceOutput) SnmpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.SnmpVersion }).(pulumi.StringPtrOutput)
}

// Software version
func (o DeviceOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.SoftwareVersion }).(pulumi.StringPtrOutput)
}

// Connect mode options
//   - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`
func (o DeviceOutput) TacacsConnectModeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TacacsConnectModeOptions }).(pulumi.StringPtrOutput)
}

// Shared secret
func (o DeviceOutput) TacacsSharedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TacacsSharedSecret }).(pulumi.StringPtrOutput)
}

// CoA source host
func (o DeviceOutput) TrustsecCoaSourceHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecCoaSourceHost }).(pulumi.StringPtrOutput)
}

// TrustSec device ID
func (o DeviceOutput) TrustsecDeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecDeviceId }).(pulumi.StringPtrOutput)
}

// TrustSec device password
func (o DeviceOutput) TrustsecDevicePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecDevicePassword }).(pulumi.StringPtrOutput)
}

// Download environment data every X seconds
func (o DeviceOutput) TrustsecDownloadEnvironmentDataEveryXSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TrustsecDownloadEnvironmentDataEveryXSeconds }).(pulumi.IntPtrOutput)
}

// Download peer authorization policy every X seconds
func (o DeviceOutput) TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds }).(pulumi.IntPtrOutput)
}

// Download SGACL lists every X seconds
func (o DeviceOutput) TrustsecDownloadSgaclListsEveryXSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TrustsecDownloadSgaclListsEveryXSeconds }).(pulumi.IntPtrOutput)
}

// Enable mode password
func (o DeviceOutput) TrustsecEnableModePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecEnableModePassword }).(pulumi.StringPtrOutput)
}

// EXEC mode password
func (o DeviceOutput) TrustsecExecModePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecExecModePassword }).(pulumi.StringPtrOutput)
}

// EXEC mode username
func (o DeviceOutput) TrustsecExecModeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecExecModeUsername }).(pulumi.StringPtrOutput)
}

// Include this device when deploying Security Group Tag Mapping Updates
func (o DeviceOutput) TrustsecIncludeWhenDeployingSgtUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.TrustsecIncludeWhenDeployingSgtUpdates }).(pulumi.BoolPtrOutput)
}

// Other TrustSec devices to trust this device
func (o DeviceOutput) TrustsecOtherSgaDevicesToTrustThisDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.TrustsecOtherSgaDevicesToTrustThisDevice }).(pulumi.BoolPtrOutput)
}

// Re-authenticate every X seconds
func (o DeviceOutput) TrustsecReAuthenticationEveryXSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TrustsecReAuthenticationEveryXSeconds }).(pulumi.IntPtrOutput)
}

// REST API password
func (o DeviceOutput) TrustsecRestApiPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecRestApiPassword }).(pulumi.StringPtrOutput)
}

// REST API username
func (o DeviceOutput) TrustsecRestApiUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecRestApiUsername }).(pulumi.StringPtrOutput)
}

// Send configuration to device
func (o DeviceOutput) TrustsecSendConfigurationToDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.TrustsecSendConfigurationToDevice }).(pulumi.BoolPtrOutput)
}

// Send configuration to device using
//   - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`
func (o DeviceOutput) TrustsecSendConfigurationToDeviceUsing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.TrustsecSendConfigurationToDeviceUsing }).(pulumi.StringPtrOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
