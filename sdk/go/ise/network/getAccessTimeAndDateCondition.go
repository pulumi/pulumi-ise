// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Access Time And Date Condition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.LookupAccessTimeAndDateCondition(ctx, &network.LookupAccessTimeAndDateConditionArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessTimeAndDateCondition(ctx *pulumi.Context, args *LookupAccessTimeAndDateConditionArgs, opts ...pulumi.InvokeOption) (*LookupAccessTimeAndDateConditionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessTimeAndDateConditionResult
	err := ctx.Invoke("ise:network/getAccessTimeAndDateCondition:getAccessTimeAndDateCondition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessTimeAndDateCondition.
type LookupAccessTimeAndDateConditionArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// Condition name
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAccessTimeAndDateCondition.
type LookupAccessTimeAndDateConditionResult struct {
	// Condition description
	Description string `pulumi:"description"`
	// End date
	EndDate string `pulumi:"endDate"`
	// End time
	EndTime string `pulumi:"endTime"`
	// Exception end date
	ExceptionEndDate string `pulumi:"exceptionEndDate"`
	// Exception end time
	ExceptionEndTime string `pulumi:"exceptionEndTime"`
	// Exception start date
	ExceptionStartDate string `pulumi:"exceptionStartDate"`
	// Exception start time
	ExceptionStartTime string `pulumi:"exceptionStartTime"`
	// The id of the object
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Condition name
	Name string `pulumi:"name"`
	// Start date
	StartDate string `pulumi:"startDate"`
	// Start time
	StartTime string `pulumi:"startTime"`
	// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
	WeekDays []string `pulumi:"weekDays"`
	// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
	WeekDaysExceptions []string `pulumi:"weekDaysExceptions"`
}

func LookupAccessTimeAndDateConditionOutput(ctx *pulumi.Context, args LookupAccessTimeAndDateConditionOutputArgs, opts ...pulumi.InvokeOption) LookupAccessTimeAndDateConditionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessTimeAndDateConditionResult, error) {
			args := v.(LookupAccessTimeAndDateConditionArgs)
			r, err := LookupAccessTimeAndDateCondition(ctx, &args, opts...)
			var s LookupAccessTimeAndDateConditionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessTimeAndDateConditionResultOutput)
}

// A collection of arguments for invoking getAccessTimeAndDateCondition.
type LookupAccessTimeAndDateConditionOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Condition name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAccessTimeAndDateConditionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessTimeAndDateConditionArgs)(nil)).Elem()
}

// A collection of values returned by getAccessTimeAndDateCondition.
type LookupAccessTimeAndDateConditionResultOutput struct{ *pulumi.OutputState }

func (LookupAccessTimeAndDateConditionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessTimeAndDateConditionResult)(nil)).Elem()
}

func (o LookupAccessTimeAndDateConditionResultOutput) ToLookupAccessTimeAndDateConditionResultOutput() LookupAccessTimeAndDateConditionResultOutput {
	return o
}

func (o LookupAccessTimeAndDateConditionResultOutput) ToLookupAccessTimeAndDateConditionResultOutputWithContext(ctx context.Context) LookupAccessTimeAndDateConditionResultOutput {
	return o
}

// Condition description
func (o LookupAccessTimeAndDateConditionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.Description }).(pulumi.StringOutput)
}

// End date
func (o LookupAccessTimeAndDateConditionResultOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.EndDate }).(pulumi.StringOutput)
}

// End time
func (o LookupAccessTimeAndDateConditionResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// Exception end date
func (o LookupAccessTimeAndDateConditionResultOutput) ExceptionEndDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.ExceptionEndDate }).(pulumi.StringOutput)
}

// Exception end time
func (o LookupAccessTimeAndDateConditionResultOutput) ExceptionEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.ExceptionEndTime }).(pulumi.StringOutput)
}

// Exception start date
func (o LookupAccessTimeAndDateConditionResultOutput) ExceptionStartDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.ExceptionStartDate }).(pulumi.StringOutput)
}

// Exception start time
func (o LookupAccessTimeAndDateConditionResultOutput) ExceptionStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.ExceptionStartTime }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupAccessTimeAndDateConditionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o LookupAccessTimeAndDateConditionResultOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Condition name
func (o LookupAccessTimeAndDateConditionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Start date
func (o LookupAccessTimeAndDateConditionResultOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.StartDate }).(pulumi.StringOutput)
}

// Start time
func (o LookupAccessTimeAndDateConditionResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
func (o LookupAccessTimeAndDateConditionResultOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

// Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
func (o LookupAccessTimeAndDateConditionResultOutput) WeekDaysExceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessTimeAndDateConditionResult) []string { return v.WeekDaysExceptions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessTimeAndDateConditionResultOutput{})
}
