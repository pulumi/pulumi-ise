// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Access Authorization Global Exception Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.LookupAccessAuthorizationGlobalExceptionRule(ctx, &network.LookupAccessAuthorizationGlobalExceptionRuleArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessAuthorizationGlobalExceptionRule(ctx *pulumi.Context, args *LookupAccessAuthorizationGlobalExceptionRuleArgs, opts ...pulumi.InvokeOption) (*LookupAccessAuthorizationGlobalExceptionRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessAuthorizationGlobalExceptionRuleResult
	err := ctx.Invoke("ise:network/getAccessAuthorizationGlobalExceptionRule:getAccessAuthorizationGlobalExceptionRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessAuthorizationGlobalExceptionRule.
type LookupAccessAuthorizationGlobalExceptionRuleArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAccessAuthorizationGlobalExceptionRule.
type LookupAccessAuthorizationGlobalExceptionRuleResult struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []GetAccessAuthorizationGlobalExceptionRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate bool `pulumi:"conditionIsNegate"`
	// Equality operator
	ConditionOperator string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default bool `pulumi:"default"`
	// The id of the object
	Id string `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name string `pulumi:"name"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched.
	State string `pulumi:"state"`
}

func LookupAccessAuthorizationGlobalExceptionRuleOutput(ctx *pulumi.Context, args LookupAccessAuthorizationGlobalExceptionRuleOutputArgs, opts ...pulumi.InvokeOption) LookupAccessAuthorizationGlobalExceptionRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessAuthorizationGlobalExceptionRuleResult, error) {
			args := v.(LookupAccessAuthorizationGlobalExceptionRuleArgs)
			r, err := LookupAccessAuthorizationGlobalExceptionRule(ctx, &args, opts...)
			var s LookupAccessAuthorizationGlobalExceptionRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessAuthorizationGlobalExceptionRuleResultOutput)
}

// A collection of arguments for invoking getAccessAuthorizationGlobalExceptionRule.
type LookupAccessAuthorizationGlobalExceptionRuleOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAccessAuthorizationGlobalExceptionRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessAuthorizationGlobalExceptionRuleArgs)(nil)).Elem()
}

// A collection of values returned by getAccessAuthorizationGlobalExceptionRule.
type LookupAccessAuthorizationGlobalExceptionRuleResultOutput struct{ *pulumi.OutputState }

func (LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessAuthorizationGlobalExceptionRuleResult)(nil)).Elem()
}

func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ToLookupAccessAuthorizationGlobalExceptionRuleResultOutput() LookupAccessAuthorizationGlobalExceptionRuleResultOutput {
	return o
}

func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ToLookupAccessAuthorizationGlobalExceptionRuleResultOutputWithContext(ctx context.Context) LookupAccessAuthorizationGlobalExceptionRuleResultOutput {
	return o
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Childrens() GetAccessAuthorizationGlobalExceptionRuleChildrenArrayOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) []GetAccessAuthorizationGlobalExceptionRuleChildren {
		return v.Childrens
	}).(GetAccessAuthorizationGlobalExceptionRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionAttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionAttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionAttributeValue }).(pulumi.StringOutput)
}

// Dictionary name
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionDictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionDictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionDictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionDictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionId }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionIsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) bool { return v.ConditionIsNegate }).(pulumi.BoolOutput)
}

// Equality operator
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionOperator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionOperator }).(pulumi.StringOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Indicates if this rule is the default one
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// The id of the object
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The authorization profile(s)
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) int { return v.Rank }).(pulumi.IntOutput)
}

// Security group used in authorization policies
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

// The state that the rule is in. A disabled rule cannot be matched.
func (o LookupAccessAuthorizationGlobalExceptionRuleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationGlobalExceptionRuleResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessAuthorizationGlobalExceptionRuleResultOutput{})
}
