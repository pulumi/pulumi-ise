// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Access Authorization Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.LookupAccessAuthorizationRule(ctx, &network.LookupAccessAuthorizationRuleArgs{
//				Id:          pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//				PolicySetId: "d82952cb-b901-4b09-b363-5ebf39bdbaf9",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessAuthorizationRule(ctx *pulumi.Context, args *LookupAccessAuthorizationRuleArgs, opts ...pulumi.InvokeOption) (*LookupAccessAuthorizationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessAuthorizationRuleResult
	err := ctx.Invoke("ise:network/getAccessAuthorizationRule:getAccessAuthorizationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessAuthorizationRule.
type LookupAccessAuthorizationRuleArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
}

// A collection of values returned by getAccessAuthorizationRule.
type LookupAccessAuthorizationRuleResult struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []GetAccessAuthorizationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate bool `pulumi:"conditionIsNegate"`
	// Equality operator
	ConditionOperator string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default bool `pulumi:"default"`
	// The id of the object
	Id string `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched.
	State string `pulumi:"state"`
}

func LookupAccessAuthorizationRuleOutput(ctx *pulumi.Context, args LookupAccessAuthorizationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupAccessAuthorizationRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessAuthorizationRuleResult, error) {
			args := v.(LookupAccessAuthorizationRuleArgs)
			r, err := LookupAccessAuthorizationRule(ctx, &args, opts...)
			var s LookupAccessAuthorizationRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessAuthorizationRuleResultOutput)
}

// A collection of arguments for invoking getAccessAuthorizationRule.
type LookupAccessAuthorizationRuleOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringInput `pulumi:"policySetId"`
}

func (LookupAccessAuthorizationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessAuthorizationRuleArgs)(nil)).Elem()
}

// A collection of values returned by getAccessAuthorizationRule.
type LookupAccessAuthorizationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupAccessAuthorizationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessAuthorizationRuleResult)(nil)).Elem()
}

func (o LookupAccessAuthorizationRuleResultOutput) ToLookupAccessAuthorizationRuleResultOutput() LookupAccessAuthorizationRuleResultOutput {
	return o
}

func (o LookupAccessAuthorizationRuleResultOutput) ToLookupAccessAuthorizationRuleResultOutputWithContext(ctx context.Context) LookupAccessAuthorizationRuleResultOutput {
	return o
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o LookupAccessAuthorizationRuleResultOutput) Childrens() GetAccessAuthorizationRuleChildrenArrayOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) []GetAccessAuthorizationRuleChildren { return v.Childrens }).(GetAccessAuthorizationRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o LookupAccessAuthorizationRuleResultOutput) ConditionAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionAttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o LookupAccessAuthorizationRuleResultOutput) ConditionAttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionAttributeValue }).(pulumi.StringOutput)
}

// Dictionary name
func (o LookupAccessAuthorizationRuleResultOutput) ConditionDictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionDictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o LookupAccessAuthorizationRuleResultOutput) ConditionDictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionDictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o LookupAccessAuthorizationRuleResultOutput) ConditionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionId }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o LookupAccessAuthorizationRuleResultOutput) ConditionIsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) bool { return v.ConditionIsNegate }).(pulumi.BoolOutput)
}

// Equality operator
func (o LookupAccessAuthorizationRuleResultOutput) ConditionOperator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionOperator }).(pulumi.StringOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o LookupAccessAuthorizationRuleResultOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Indicates if this rule is the default one
func (o LookupAccessAuthorizationRuleResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// The id of the object
func (o LookupAccessAuthorizationRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o LookupAccessAuthorizationRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o LookupAccessAuthorizationRuleResultOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.PolicySetId }).(pulumi.StringOutput)
}

// The authorization profile(s)
func (o LookupAccessAuthorizationRuleResultOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o LookupAccessAuthorizationRuleResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) int { return v.Rank }).(pulumi.IntOutput)
}

// Security group used in authorization policies
func (o LookupAccessAuthorizationRuleResultOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

// The state that the rule is in. A disabled rule cannot be matched.
func (o LookupAccessAuthorizationRuleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessAuthorizationRuleResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessAuthorizationRuleResultOutput{})
}
