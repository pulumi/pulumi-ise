// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Access Authorization Exception Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewAccessAuthorizationExceptionRule(ctx, "example", &network.AccessAuthorizationExceptionRuleArgs{
//				PolicySetId:             pulumi.String("d82952cb-b901-4b09-b363-5ebf39bdbaf9"),
//				Name:                    pulumi.String("Rule1"),
//				Default:                 pulumi.Bool(false),
//				Rank:                    pulumi.Int(0),
//				State:                   pulumi.String("enabled"),
//				ConditionType:           pulumi.String("ConditionAttributes"),
//				ConditionIsNegate:       pulumi.Bool(false),
//				ConditionAttributeName:  pulumi.String("Location"),
//				ConditionAttributeValue: pulumi.String("All Locations"),
//				ConditionDictionaryName: pulumi.String("DEVICE"),
//				ConditionOperator:       pulumi.String("equals"),
//				Profiles: pulumi.StringArray{
//					pulumi.String("PermitAccess"),
//				},
//				SecurityGroup: pulumi.String("BYOD"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:network/accessAuthorizationExceptionRule:AccessAuthorizationExceptionRule example "76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AccessAuthorizationExceptionRule struct {
	pulumi.CustomResourceState

	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthorizationExceptionRuleChildrenArrayOutput `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrOutput `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrOutput `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrOutput `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrOutput `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId pulumi.StringPtrOutput `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrOutput `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrOutput `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrOutput `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles pulumi.StringArrayOutput `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrOutput `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewAccessAuthorizationExceptionRule registers a new resource with the given unique name, arguments, and options.
func NewAccessAuthorizationExceptionRule(ctx *pulumi.Context,
	name string, args *AccessAuthorizationExceptionRuleArgs, opts ...pulumi.ResourceOption) (*AccessAuthorizationExceptionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicySetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessAuthorizationExceptionRule
	err := ctx.RegisterResource("ise:network/accessAuthorizationExceptionRule:AccessAuthorizationExceptionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessAuthorizationExceptionRule gets an existing AccessAuthorizationExceptionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessAuthorizationExceptionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessAuthorizationExceptionRuleState, opts ...pulumi.ResourceOption) (*AccessAuthorizationExceptionRule, error) {
	var resource AccessAuthorizationExceptionRule
	err := ctx.ReadResource("ise:network/accessAuthorizationExceptionRule:AccessAuthorizationExceptionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessAuthorizationExceptionRule resources.
type accessAuthorizationExceptionRuleState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AccessAuthorizationExceptionRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId *string `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup *string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

type AccessAuthorizationExceptionRuleState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthorizationExceptionRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringPtrInput
	// The authorization profile(s)
	Profiles pulumi.StringArrayInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrInput
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AccessAuthorizationExceptionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessAuthorizationExceptionRuleState)(nil)).Elem()
}

type accessAuthorizationExceptionRuleArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AccessAuthorizationExceptionRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup *string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a AccessAuthorizationExceptionRule resource.
type AccessAuthorizationExceptionRuleArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthorizationExceptionRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringInput
	// The authorization profile(s)
	Profiles pulumi.StringArrayInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrInput
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AccessAuthorizationExceptionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessAuthorizationExceptionRuleArgs)(nil)).Elem()
}

type AccessAuthorizationExceptionRuleInput interface {
	pulumi.Input

	ToAccessAuthorizationExceptionRuleOutput() AccessAuthorizationExceptionRuleOutput
	ToAccessAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleOutput
}

func (*AccessAuthorizationExceptionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (i *AccessAuthorizationExceptionRule) ToAccessAuthorizationExceptionRuleOutput() AccessAuthorizationExceptionRuleOutput {
	return i.ToAccessAuthorizationExceptionRuleOutputWithContext(context.Background())
}

func (i *AccessAuthorizationExceptionRule) ToAccessAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthorizationExceptionRuleOutput)
}

// AccessAuthorizationExceptionRuleArrayInput is an input type that accepts AccessAuthorizationExceptionRuleArray and AccessAuthorizationExceptionRuleArrayOutput values.
// You can construct a concrete instance of `AccessAuthorizationExceptionRuleArrayInput` via:
//
//	AccessAuthorizationExceptionRuleArray{ AccessAuthorizationExceptionRuleArgs{...} }
type AccessAuthorizationExceptionRuleArrayInput interface {
	pulumi.Input

	ToAccessAuthorizationExceptionRuleArrayOutput() AccessAuthorizationExceptionRuleArrayOutput
	ToAccessAuthorizationExceptionRuleArrayOutputWithContext(context.Context) AccessAuthorizationExceptionRuleArrayOutput
}

type AccessAuthorizationExceptionRuleArray []AccessAuthorizationExceptionRuleInput

func (AccessAuthorizationExceptionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (i AccessAuthorizationExceptionRuleArray) ToAccessAuthorizationExceptionRuleArrayOutput() AccessAuthorizationExceptionRuleArrayOutput {
	return i.ToAccessAuthorizationExceptionRuleArrayOutputWithContext(context.Background())
}

func (i AccessAuthorizationExceptionRuleArray) ToAccessAuthorizationExceptionRuleArrayOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthorizationExceptionRuleArrayOutput)
}

// AccessAuthorizationExceptionRuleMapInput is an input type that accepts AccessAuthorizationExceptionRuleMap and AccessAuthorizationExceptionRuleMapOutput values.
// You can construct a concrete instance of `AccessAuthorizationExceptionRuleMapInput` via:
//
//	AccessAuthorizationExceptionRuleMap{ "key": AccessAuthorizationExceptionRuleArgs{...} }
type AccessAuthorizationExceptionRuleMapInput interface {
	pulumi.Input

	ToAccessAuthorizationExceptionRuleMapOutput() AccessAuthorizationExceptionRuleMapOutput
	ToAccessAuthorizationExceptionRuleMapOutputWithContext(context.Context) AccessAuthorizationExceptionRuleMapOutput
}

type AccessAuthorizationExceptionRuleMap map[string]AccessAuthorizationExceptionRuleInput

func (AccessAuthorizationExceptionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (i AccessAuthorizationExceptionRuleMap) ToAccessAuthorizationExceptionRuleMapOutput() AccessAuthorizationExceptionRuleMapOutput {
	return i.ToAccessAuthorizationExceptionRuleMapOutputWithContext(context.Background())
}

func (i AccessAuthorizationExceptionRuleMap) ToAccessAuthorizationExceptionRuleMapOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthorizationExceptionRuleMapOutput)
}

type AccessAuthorizationExceptionRuleOutput struct{ *pulumi.OutputState }

func (AccessAuthorizationExceptionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (o AccessAuthorizationExceptionRuleOutput) ToAccessAuthorizationExceptionRuleOutput() AccessAuthorizationExceptionRuleOutput {
	return o
}

func (o AccessAuthorizationExceptionRuleOutput) ToAccessAuthorizationExceptionRuleOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleOutput {
	return o
}

// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o AccessAuthorizationExceptionRuleOutput) Childrens() AccessAuthorizationExceptionRuleChildrenArrayOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) AccessAuthorizationExceptionRuleChildrenArrayOutput {
		return v.Childrens
	}).(AccessAuthorizationExceptionRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o AccessAuthorizationExceptionRuleOutput) ConditionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionAttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o AccessAuthorizationExceptionRuleOutput) ConditionAttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionAttributeValue }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o AccessAuthorizationExceptionRuleOutput) ConditionDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionDictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o AccessAuthorizationExceptionRuleOutput) ConditionDictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionDictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o AccessAuthorizationExceptionRuleOutput) ConditionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionId }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o AccessAuthorizationExceptionRuleOutput) ConditionIsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.BoolPtrOutput { return v.ConditionIsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o AccessAuthorizationExceptionRuleOutput) ConditionOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionOperator }).(pulumi.StringPtrOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
// `ConditionOrBlock`, `ConditionReference`
func (o AccessAuthorizationExceptionRuleOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.ConditionType }).(pulumi.StringPtrOutput)
}

// Indicates if this rule is the default one
func (o AccessAuthorizationExceptionRuleOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o AccessAuthorizationExceptionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o AccessAuthorizationExceptionRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

// The authorization profile(s)
func (o AccessAuthorizationExceptionRuleOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringArrayOutput { return v.Profiles }).(pulumi.StringArrayOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o AccessAuthorizationExceptionRuleOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// Security group used in authorization policies
func (o AccessAuthorizationExceptionRuleOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
func (o AccessAuthorizationExceptionRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthorizationExceptionRule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type AccessAuthorizationExceptionRuleArrayOutput struct{ *pulumi.OutputState }

func (AccessAuthorizationExceptionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (o AccessAuthorizationExceptionRuleArrayOutput) ToAccessAuthorizationExceptionRuleArrayOutput() AccessAuthorizationExceptionRuleArrayOutput {
	return o
}

func (o AccessAuthorizationExceptionRuleArrayOutput) ToAccessAuthorizationExceptionRuleArrayOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleArrayOutput {
	return o
}

func (o AccessAuthorizationExceptionRuleArrayOutput) Index(i pulumi.IntInput) AccessAuthorizationExceptionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessAuthorizationExceptionRule {
		return vs[0].([]*AccessAuthorizationExceptionRule)[vs[1].(int)]
	}).(AccessAuthorizationExceptionRuleOutput)
}

type AccessAuthorizationExceptionRuleMapOutput struct{ *pulumi.OutputState }

func (AccessAuthorizationExceptionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessAuthorizationExceptionRule)(nil)).Elem()
}

func (o AccessAuthorizationExceptionRuleMapOutput) ToAccessAuthorizationExceptionRuleMapOutput() AccessAuthorizationExceptionRuleMapOutput {
	return o
}

func (o AccessAuthorizationExceptionRuleMapOutput) ToAccessAuthorizationExceptionRuleMapOutputWithContext(ctx context.Context) AccessAuthorizationExceptionRuleMapOutput {
	return o
}

func (o AccessAuthorizationExceptionRuleMapOutput) MapIndex(k pulumi.StringInput) AccessAuthorizationExceptionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessAuthorizationExceptionRule {
		return vs[0].(map[string]*AccessAuthorizationExceptionRule)[vs[1].(string)]
	}).(AccessAuthorizationExceptionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthorizationExceptionRuleInput)(nil)).Elem(), &AccessAuthorizationExceptionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthorizationExceptionRuleArrayInput)(nil)).Elem(), AccessAuthorizationExceptionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthorizationExceptionRuleMapInput)(nil)).Elem(), AccessAuthorizationExceptionRuleMap{})
	pulumi.RegisterOutputType(AccessAuthorizationExceptionRuleOutput{})
	pulumi.RegisterOutputType(AccessAuthorizationExceptionRuleArrayOutput{})
	pulumi.RegisterOutputType(AccessAuthorizationExceptionRuleMapOutput{})
}
