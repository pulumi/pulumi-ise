// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Access Dictionary.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewAccessDictionary(ctx, "example", &network.AccessDictionaryArgs{
//				Name:               pulumi.String("Dict1"),
//				Description:        pulumi.String("My description"),
//				Version:            pulumi.String("1.1"),
//				DictionaryAttrType: pulumi.String("ENTITY_ATTR"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:network/accessDictionary:AccessDictionary example "Dict1"
// ```
type AccessDictionary struct {
	pulumi.CustomResourceState

	// The description of the dictionary
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
	DictionaryAttrType pulumi.StringOutput `pulumi:"dictionaryAttrType"`
	// The dictionary name
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the dictionary
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAccessDictionary registers a new resource with the given unique name, arguments, and options.
func NewAccessDictionary(ctx *pulumi.Context,
	name string, args *AccessDictionaryArgs, opts ...pulumi.ResourceOption) (*AccessDictionary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DictionaryAttrType == nil {
		return nil, errors.New("invalid value for required argument 'DictionaryAttrType'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessDictionary
	err := ctx.RegisterResource("ise:network/accessDictionary:AccessDictionary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessDictionary gets an existing AccessDictionary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessDictionary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessDictionaryState, opts ...pulumi.ResourceOption) (*AccessDictionary, error) {
	var resource AccessDictionary
	err := ctx.ReadResource("ise:network/accessDictionary:AccessDictionary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessDictionary resources.
type accessDictionaryState struct {
	// The description of the dictionary
	Description *string `pulumi:"description"`
	// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
	DictionaryAttrType *string `pulumi:"dictionaryAttrType"`
	// The dictionary name
	Name *string `pulumi:"name"`
	// The version of the dictionary
	Version *string `pulumi:"version"`
}

type AccessDictionaryState struct {
	// The description of the dictionary
	Description pulumi.StringPtrInput
	// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
	DictionaryAttrType pulumi.StringPtrInput
	// The dictionary name
	Name pulumi.StringPtrInput
	// The version of the dictionary
	Version pulumi.StringPtrInput
}

func (AccessDictionaryState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessDictionaryState)(nil)).Elem()
}

type accessDictionaryArgs struct {
	// The description of the dictionary
	Description *string `pulumi:"description"`
	// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
	DictionaryAttrType string `pulumi:"dictionaryAttrType"`
	// The dictionary name
	Name *string `pulumi:"name"`
	// The version of the dictionary
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a AccessDictionary resource.
type AccessDictionaryArgs struct {
	// The description of the dictionary
	Description pulumi.StringPtrInput
	// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
	DictionaryAttrType pulumi.StringInput
	// The dictionary name
	Name pulumi.StringPtrInput
	// The version of the dictionary
	Version pulumi.StringInput
}

func (AccessDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessDictionaryArgs)(nil)).Elem()
}

type AccessDictionaryInput interface {
	pulumi.Input

	ToAccessDictionaryOutput() AccessDictionaryOutput
	ToAccessDictionaryOutputWithContext(ctx context.Context) AccessDictionaryOutput
}

func (*AccessDictionary) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessDictionary)(nil)).Elem()
}

func (i *AccessDictionary) ToAccessDictionaryOutput() AccessDictionaryOutput {
	return i.ToAccessDictionaryOutputWithContext(context.Background())
}

func (i *AccessDictionary) ToAccessDictionaryOutputWithContext(ctx context.Context) AccessDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessDictionaryOutput)
}

// AccessDictionaryArrayInput is an input type that accepts AccessDictionaryArray and AccessDictionaryArrayOutput values.
// You can construct a concrete instance of `AccessDictionaryArrayInput` via:
//
//	AccessDictionaryArray{ AccessDictionaryArgs{...} }
type AccessDictionaryArrayInput interface {
	pulumi.Input

	ToAccessDictionaryArrayOutput() AccessDictionaryArrayOutput
	ToAccessDictionaryArrayOutputWithContext(context.Context) AccessDictionaryArrayOutput
}

type AccessDictionaryArray []AccessDictionaryInput

func (AccessDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessDictionary)(nil)).Elem()
}

func (i AccessDictionaryArray) ToAccessDictionaryArrayOutput() AccessDictionaryArrayOutput {
	return i.ToAccessDictionaryArrayOutputWithContext(context.Background())
}

func (i AccessDictionaryArray) ToAccessDictionaryArrayOutputWithContext(ctx context.Context) AccessDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessDictionaryArrayOutput)
}

// AccessDictionaryMapInput is an input type that accepts AccessDictionaryMap and AccessDictionaryMapOutput values.
// You can construct a concrete instance of `AccessDictionaryMapInput` via:
//
//	AccessDictionaryMap{ "key": AccessDictionaryArgs{...} }
type AccessDictionaryMapInput interface {
	pulumi.Input

	ToAccessDictionaryMapOutput() AccessDictionaryMapOutput
	ToAccessDictionaryMapOutputWithContext(context.Context) AccessDictionaryMapOutput
}

type AccessDictionaryMap map[string]AccessDictionaryInput

func (AccessDictionaryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessDictionary)(nil)).Elem()
}

func (i AccessDictionaryMap) ToAccessDictionaryMapOutput() AccessDictionaryMapOutput {
	return i.ToAccessDictionaryMapOutputWithContext(context.Background())
}

func (i AccessDictionaryMap) ToAccessDictionaryMapOutputWithContext(ctx context.Context) AccessDictionaryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessDictionaryMapOutput)
}

type AccessDictionaryOutput struct{ *pulumi.OutputState }

func (AccessDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessDictionary)(nil)).Elem()
}

func (o AccessDictionaryOutput) ToAccessDictionaryOutput() AccessDictionaryOutput {
	return o
}

func (o AccessDictionaryOutput) ToAccessDictionaryOutputWithContext(ctx context.Context) AccessDictionaryOutput {
	return o
}

// The description of the dictionary
func (o AccessDictionaryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessDictionary) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`
func (o AccessDictionaryOutput) DictionaryAttrType() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessDictionary) pulumi.StringOutput { return v.DictionaryAttrType }).(pulumi.StringOutput)
}

// The dictionary name
func (o AccessDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessDictionary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the dictionary
func (o AccessDictionaryOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessDictionary) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AccessDictionaryArrayOutput struct{ *pulumi.OutputState }

func (AccessDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessDictionary)(nil)).Elem()
}

func (o AccessDictionaryArrayOutput) ToAccessDictionaryArrayOutput() AccessDictionaryArrayOutput {
	return o
}

func (o AccessDictionaryArrayOutput) ToAccessDictionaryArrayOutputWithContext(ctx context.Context) AccessDictionaryArrayOutput {
	return o
}

func (o AccessDictionaryArrayOutput) Index(i pulumi.IntInput) AccessDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessDictionary {
		return vs[0].([]*AccessDictionary)[vs[1].(int)]
	}).(AccessDictionaryOutput)
}

type AccessDictionaryMapOutput struct{ *pulumi.OutputState }

func (AccessDictionaryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessDictionary)(nil)).Elem()
}

func (o AccessDictionaryMapOutput) ToAccessDictionaryMapOutput() AccessDictionaryMapOutput {
	return o
}

func (o AccessDictionaryMapOutput) ToAccessDictionaryMapOutputWithContext(ctx context.Context) AccessDictionaryMapOutput {
	return o
}

func (o AccessDictionaryMapOutput) MapIndex(k pulumi.StringInput) AccessDictionaryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessDictionary {
		return vs[0].(map[string]*AccessDictionary)[vs[1].(string)]
	}).(AccessDictionaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessDictionaryInput)(nil)).Elem(), &AccessDictionary{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessDictionaryArrayInput)(nil)).Elem(), AccessDictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessDictionaryMapInput)(nil)).Elem(), AccessDictionaryMap{})
	pulumi.RegisterOutputType(AccessDictionaryOutput{})
	pulumi.RegisterOutputType(AccessDictionaryArrayOutput{})
	pulumi.RegisterOutputType(AccessDictionaryMapOutput{})
}
