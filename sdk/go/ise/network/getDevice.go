// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/Network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Network.GetDevice(ctx, &network.GetDeviceArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDevice(ctx *pulumi.Context, args *LookupDeviceArgs, opts ...pulumi.InvokeOption) (*LookupDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeviceResult
	err := ctx.Invoke("ise:Network/getDevice:getDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevice.
type LookupDeviceArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the network device
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDevice.
type LookupDeviceResult struct {
	// Enforce use of DTLS
	AuthenticationDtlsRequired bool `pulumi:"authenticationDtlsRequired"`
	// Enable key wrap
	AuthenticationEnableKeyWrap bool `pulumi:"authenticationEnableKeyWrap"`
	// Enable multiple RADIUS shared secrets
	AuthenticationEnableMultiSecret bool `pulumi:"authenticationEnableMultiSecret"`
	// Encryption key
	AuthenticationEncryptionKey string `pulumi:"authenticationEncryptionKey"`
	// Key input format
	AuthenticationEncryptionKeyFormat string `pulumi:"authenticationEncryptionKeyFormat"`
	// Message authenticator code key
	AuthenticationMessageAuthenticatorCodeKey string `pulumi:"authenticationMessageAuthenticatorCodeKey"`
	// Network protocol
	AuthenticationNetworkProtocol string `pulumi:"authenticationNetworkProtocol"`
	// RADIUS shared secret
	AuthenticationRadiusSharedSecret string `pulumi:"authenticationRadiusSharedSecret"`
	// Second RADIUS shared secret
	AuthenticationSecondRadiusSharedSecret string `pulumi:"authenticationSecondRadiusSharedSecret"`
	// CoA port
	CoaPort int `pulumi:"coaPort"`
	// Description
	Description string `pulumi:"description"`
	// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
	DtlsDnsName string `pulumi:"dtlsDnsName"`
	// The id of the object
	Id string `pulumi:"id"`
	// List of IP subnets
	Ips []GetDeviceIp `pulumi:"ips"`
	// Model name
	ModelName string `pulumi:"modelName"`
	// The name of the network device
	Name string `pulumi:"name"`
	// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
	NetworkDeviceGroups []string `pulumi:"networkDeviceGroups"`
	// Profile name
	ProfileName string `pulumi:"profileName"`
	// SNMP link Trap Query
	SnmpLinkTrapQuery bool `pulumi:"snmpLinkTrapQuery"`
	// SNMP MAC Trap Query
	SnmpMacTrapQuery bool `pulumi:"snmpMacTrapQuery"`
	// Originating Policy Services Node
	SnmpOriginatingPolicyServiceNode string `pulumi:"snmpOriginatingPolicyServiceNode"`
	// SNMP Polling Interval in seconds
	SnmpPollingInterval int `pulumi:"snmpPollingInterval"`
	// SNMP RO Community
	SnmpRoCommunity string `pulumi:"snmpRoCommunity"`
	// SNMP version
	SnmpVersion string `pulumi:"snmpVersion"`
	// Software version
	SoftwareVersion string `pulumi:"softwareVersion"`
	// Connect mode options
	TacacsConnectModeOptions string `pulumi:"tacacsConnectModeOptions"`
	// Shared secret
	TacacsSharedSecret string `pulumi:"tacacsSharedSecret"`
	// CoA source host
	TrustsecCoaSourceHost string `pulumi:"trustsecCoaSourceHost"`
	// TrustSec device ID
	TrustsecDeviceId string `pulumi:"trustsecDeviceId"`
	// TrustSec device password
	TrustsecDevicePassword string `pulumi:"trustsecDevicePassword"`
	// Download environment data every X seconds
	TrustsecDownloadEnviromentDataEveryXSeconds int `pulumi:"trustsecDownloadEnviromentDataEveryXSeconds"`
	// Download peer authorization policy every X seconds
	TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds int `pulumi:"trustsecDownloadPeerAuthorizationPolicyEveryXSeconds"`
	// Download SGACL lists every X seconds
	TrustsecDownloadSgaclListsEveryXSeconds int `pulumi:"trustsecDownloadSgaclListsEveryXSeconds"`
	// Enable mode password
	TrustsecEnableModePassword string `pulumi:"trustsecEnableModePassword"`
	// EXEC mode password
	TrustsecExecModePassword string `pulumi:"trustsecExecModePassword"`
	// EXEC mode username
	TrustsecExecModeUsername string `pulumi:"trustsecExecModeUsername"`
	// Include this device when deploying Security Group Tag Mapping Updates
	TrustsecIncludeWhenDeployingSgtUpdates bool `pulumi:"trustsecIncludeWhenDeployingSgtUpdates"`
	// Other TrustSec devices to trust this device
	TrustsecOtherSgaDevicesToTrustThisDevice bool `pulumi:"trustsecOtherSgaDevicesToTrustThisDevice"`
	// Re-authenticate every X seconds
	TrustsecReAuthenticationEveryXSeconds int `pulumi:"trustsecReAuthenticationEveryXSeconds"`
	// REST API password
	TrustsecRestApiPassword string `pulumi:"trustsecRestApiPassword"`
	// REST API username
	TrustsecRestApiUsername string `pulumi:"trustsecRestApiUsername"`
	// Send configuration to device
	TrustsecSendConfigurationToDevice bool `pulumi:"trustsecSendConfigurationToDevice"`
	// Send configuration to device using
	TrustsecSendConfigurationToDeviceUsing string `pulumi:"trustsecSendConfigurationToDeviceUsing"`
}

func LookupDeviceOutput(ctx *pulumi.Context, args LookupDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDeviceResult, error) {
			args := v.(LookupDeviceArgs)
			r, err := LookupDevice(ctx, &args, opts...)
			var s LookupDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDeviceResultOutput)
}

// A collection of arguments for invoking getDevice.
type LookupDeviceOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the network device
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getDevice.
type LookupDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceResult)(nil)).Elem()
}

func (o LookupDeviceResultOutput) ToLookupDeviceResultOutput() LookupDeviceResultOutput {
	return o
}

func (o LookupDeviceResultOutput) ToLookupDeviceResultOutputWithContext(ctx context.Context) LookupDeviceResultOutput {
	return o
}

// Enforce use of DTLS
func (o LookupDeviceResultOutput) AuthenticationDtlsRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.AuthenticationDtlsRequired }).(pulumi.BoolOutput)
}

// Enable key wrap
func (o LookupDeviceResultOutput) AuthenticationEnableKeyWrap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.AuthenticationEnableKeyWrap }).(pulumi.BoolOutput)
}

// Enable multiple RADIUS shared secrets
func (o LookupDeviceResultOutput) AuthenticationEnableMultiSecret() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.AuthenticationEnableMultiSecret }).(pulumi.BoolOutput)
}

// Encryption key
func (o LookupDeviceResultOutput) AuthenticationEncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationEncryptionKey }).(pulumi.StringOutput)
}

// Key input format
func (o LookupDeviceResultOutput) AuthenticationEncryptionKeyFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationEncryptionKeyFormat }).(pulumi.StringOutput)
}

// Message authenticator code key
func (o LookupDeviceResultOutput) AuthenticationMessageAuthenticatorCodeKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationMessageAuthenticatorCodeKey }).(pulumi.StringOutput)
}

// Network protocol
func (o LookupDeviceResultOutput) AuthenticationNetworkProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationNetworkProtocol }).(pulumi.StringOutput)
}

// RADIUS shared secret
func (o LookupDeviceResultOutput) AuthenticationRadiusSharedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationRadiusSharedSecret }).(pulumi.StringOutput)
}

// Second RADIUS shared secret
func (o LookupDeviceResultOutput) AuthenticationSecondRadiusSharedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AuthenticationSecondRadiusSharedSecret }).(pulumi.StringOutput)
}

// CoA port
func (o LookupDeviceResultOutput) CoaPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.CoaPort }).(pulumi.IntOutput)
}

// Description
func (o LookupDeviceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Description }).(pulumi.StringOutput)
}

// This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate
func (o LookupDeviceResultOutput) DtlsDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.DtlsDnsName }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of IP subnets
func (o LookupDeviceResultOutput) Ips() GetDeviceIpArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []GetDeviceIp { return v.Ips }).(GetDeviceIpArrayOutput)
}

// Model name
func (o LookupDeviceResultOutput) ModelName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.ModelName }).(pulumi.StringOutput)
}

// The name of the network device
func (o LookupDeviceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of network device groups, e.g. `Device Type#All Device Types#ACCESS`
func (o LookupDeviceResultOutput) NetworkDeviceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []string { return v.NetworkDeviceGroups }).(pulumi.StringArrayOutput)
}

// Profile name
func (o LookupDeviceResultOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.ProfileName }).(pulumi.StringOutput)
}

// SNMP link Trap Query
func (o LookupDeviceResultOutput) SnmpLinkTrapQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.SnmpLinkTrapQuery }).(pulumi.BoolOutput)
}

// SNMP MAC Trap Query
func (o LookupDeviceResultOutput) SnmpMacTrapQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.SnmpMacTrapQuery }).(pulumi.BoolOutput)
}

// Originating Policy Services Node
func (o LookupDeviceResultOutput) SnmpOriginatingPolicyServiceNode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SnmpOriginatingPolicyServiceNode }).(pulumi.StringOutput)
}

// SNMP Polling Interval in seconds
func (o LookupDeviceResultOutput) SnmpPollingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.SnmpPollingInterval }).(pulumi.IntOutput)
}

// SNMP RO Community
func (o LookupDeviceResultOutput) SnmpRoCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SnmpRoCommunity }).(pulumi.StringOutput)
}

// SNMP version
func (o LookupDeviceResultOutput) SnmpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SnmpVersion }).(pulumi.StringOutput)
}

// Software version
func (o LookupDeviceResultOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// Connect mode options
func (o LookupDeviceResultOutput) TacacsConnectModeOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TacacsConnectModeOptions }).(pulumi.StringOutput)
}

// Shared secret
func (o LookupDeviceResultOutput) TacacsSharedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TacacsSharedSecret }).(pulumi.StringOutput)
}

// CoA source host
func (o LookupDeviceResultOutput) TrustsecCoaSourceHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecCoaSourceHost }).(pulumi.StringOutput)
}

// TrustSec device ID
func (o LookupDeviceResultOutput) TrustsecDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecDeviceId }).(pulumi.StringOutput)
}

// TrustSec device password
func (o LookupDeviceResultOutput) TrustsecDevicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecDevicePassword }).(pulumi.StringOutput)
}

// Download environment data every X seconds
func (o LookupDeviceResultOutput) TrustsecDownloadEnviromentDataEveryXSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.TrustsecDownloadEnviromentDataEveryXSeconds }).(pulumi.IntOutput)
}

// Download peer authorization policy every X seconds
func (o LookupDeviceResultOutput) TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds }).(pulumi.IntOutput)
}

// Download SGACL lists every X seconds
func (o LookupDeviceResultOutput) TrustsecDownloadSgaclListsEveryXSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.TrustsecDownloadSgaclListsEveryXSeconds }).(pulumi.IntOutput)
}

// Enable mode password
func (o LookupDeviceResultOutput) TrustsecEnableModePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecEnableModePassword }).(pulumi.StringOutput)
}

// EXEC mode password
func (o LookupDeviceResultOutput) TrustsecExecModePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecExecModePassword }).(pulumi.StringOutput)
}

// EXEC mode username
func (o LookupDeviceResultOutput) TrustsecExecModeUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecExecModeUsername }).(pulumi.StringOutput)
}

// Include this device when deploying Security Group Tag Mapping Updates
func (o LookupDeviceResultOutput) TrustsecIncludeWhenDeployingSgtUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.TrustsecIncludeWhenDeployingSgtUpdates }).(pulumi.BoolOutput)
}

// Other TrustSec devices to trust this device
func (o LookupDeviceResultOutput) TrustsecOtherSgaDevicesToTrustThisDevice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.TrustsecOtherSgaDevicesToTrustThisDevice }).(pulumi.BoolOutput)
}

// Re-authenticate every X seconds
func (o LookupDeviceResultOutput) TrustsecReAuthenticationEveryXSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.TrustsecReAuthenticationEveryXSeconds }).(pulumi.IntOutput)
}

// REST API password
func (o LookupDeviceResultOutput) TrustsecRestApiPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecRestApiPassword }).(pulumi.StringOutput)
}

// REST API username
func (o LookupDeviceResultOutput) TrustsecRestApiUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecRestApiUsername }).(pulumi.StringOutput)
}

// Send configuration to device
func (o LookupDeviceResultOutput) TrustsecSendConfigurationToDevice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.TrustsecSendConfigurationToDevice }).(pulumi.BoolOutput)
}

// Send configuration to device using
func (o LookupDeviceResultOutput) TrustsecSendConfigurationToDeviceUsing() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TrustsecSendConfigurationToDeviceUsing }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeviceResultOutput{})
}
