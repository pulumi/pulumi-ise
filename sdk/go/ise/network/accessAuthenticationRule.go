// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Access Authentication Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewAccessAuthenticationRule(ctx, "example", &network.AccessAuthenticationRuleArgs{
//				PolicySetId:             pulumi.String("d82952cb-b901-4b09-b363-5ebf39bdbaf9"),
//				Name:                    pulumi.String("Rule1"),
//				Default:                 pulumi.Bool(false),
//				Rank:                    pulumi.Int(0),
//				State:                   pulumi.String("enabled"),
//				ConditionType:           pulumi.String("ConditionAttributes"),
//				ConditionIsNegate:       pulumi.Bool(false),
//				ConditionAttributeName:  pulumi.String("Location"),
//				ConditionAttributeValue: pulumi.String("All Locations"),
//				ConditionDictionaryName: pulumi.String("DEVICE"),
//				ConditionOperator:       pulumi.String("equals"),
//				IdentitySourceName:      pulumi.String("Internal Endpoints"),
//				IfAuthFail:              pulumi.String("REJECT"),
//				IfProcessFail:           pulumi.String("DROP"),
//				IfUserNotFound:          pulumi.String("REJECT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:network/accessAuthenticationRule:AccessAuthenticationRule example "76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AccessAuthenticationRule struct {
	pulumi.CustomResourceState

	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthenticationRuleChildrenArrayOutput `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrOutput `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrOutput `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrOutput `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrOutput `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId pulumi.StringPtrOutput `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrOutput `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrOutput `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrOutput `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Identity source name from the identity stores
	IdentitySourceName pulumi.StringPtrOutput `pulumi:"identitySourceName"`
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
	// `DROP`, `CONTINUE`
	IfAuthFail pulumi.StringOutput `pulumi:"ifAuthFail"`
	// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfProcessFail pulumi.StringOutput `pulumi:"ifProcessFail"`
	// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfUserNotFound pulumi.StringOutput `pulumi:"ifUserNotFound"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewAccessAuthenticationRule registers a new resource with the given unique name, arguments, and options.
func NewAccessAuthenticationRule(ctx *pulumi.Context,
	name string, args *AccessAuthenticationRuleArgs, opts ...pulumi.ResourceOption) (*AccessAuthenticationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IfAuthFail == nil {
		return nil, errors.New("invalid value for required argument 'IfAuthFail'")
	}
	if args.IfProcessFail == nil {
		return nil, errors.New("invalid value for required argument 'IfProcessFail'")
	}
	if args.IfUserNotFound == nil {
		return nil, errors.New("invalid value for required argument 'IfUserNotFound'")
	}
	if args.PolicySetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessAuthenticationRule
	err := ctx.RegisterResource("ise:network/accessAuthenticationRule:AccessAuthenticationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessAuthenticationRule gets an existing AccessAuthenticationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessAuthenticationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessAuthenticationRuleState, opts ...pulumi.ResourceOption) (*AccessAuthenticationRule, error) {
	var resource AccessAuthenticationRule
	err := ctx.ReadResource("ise:network/accessAuthenticationRule:AccessAuthenticationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessAuthenticationRule resources.
type accessAuthenticationRuleState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AccessAuthenticationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Identity source name from the identity stores
	IdentitySourceName *string `pulumi:"identitySourceName"`
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
	// `DROP`, `CONTINUE`
	IfAuthFail *string `pulumi:"ifAuthFail"`
	// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfProcessFail *string `pulumi:"ifProcessFail"`
	// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfUserNotFound *string `pulumi:"ifUserNotFound"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId *string `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

type AccessAuthenticationRuleState struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthenticationRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Identity source name from the identity stores
	IdentitySourceName pulumi.StringPtrInput
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
	// `DROP`, `CONTINUE`
	IfAuthFail pulumi.StringPtrInput
	// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfProcessFail pulumi.StringPtrInput
	// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfUserNotFound pulumi.StringPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringPtrInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AccessAuthenticationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessAuthenticationRuleState)(nil)).Elem()
}

type accessAuthenticationRuleArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AccessAuthenticationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Identity source name from the identity stores
	IdentitySourceName *string `pulumi:"identitySourceName"`
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
	// `DROP`, `CONTINUE`
	IfAuthFail string `pulumi:"ifAuthFail"`
	// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfProcessFail string `pulumi:"ifProcessFail"`
	// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfUserNotFound string `pulumi:"ifUserNotFound"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a AccessAuthenticationRule resource.
type AccessAuthenticationRuleArgs struct {
	// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AccessAuthenticationRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
	// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
	// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
	// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
	// `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Identity source name from the identity stores
	IdentitySourceName pulumi.StringPtrInput
	// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
	// `DROP`, `CONTINUE`
	IfAuthFail pulumi.StringInput
	// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfProcessFail pulumi.StringInput
	// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
	IfUserNotFound pulumi.StringInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AccessAuthenticationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessAuthenticationRuleArgs)(nil)).Elem()
}

type AccessAuthenticationRuleInput interface {
	pulumi.Input

	ToAccessAuthenticationRuleOutput() AccessAuthenticationRuleOutput
	ToAccessAuthenticationRuleOutputWithContext(ctx context.Context) AccessAuthenticationRuleOutput
}

func (*AccessAuthenticationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessAuthenticationRule)(nil)).Elem()
}

func (i *AccessAuthenticationRule) ToAccessAuthenticationRuleOutput() AccessAuthenticationRuleOutput {
	return i.ToAccessAuthenticationRuleOutputWithContext(context.Background())
}

func (i *AccessAuthenticationRule) ToAccessAuthenticationRuleOutputWithContext(ctx context.Context) AccessAuthenticationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthenticationRuleOutput)
}

// AccessAuthenticationRuleArrayInput is an input type that accepts AccessAuthenticationRuleArray and AccessAuthenticationRuleArrayOutput values.
// You can construct a concrete instance of `AccessAuthenticationRuleArrayInput` via:
//
//	AccessAuthenticationRuleArray{ AccessAuthenticationRuleArgs{...} }
type AccessAuthenticationRuleArrayInput interface {
	pulumi.Input

	ToAccessAuthenticationRuleArrayOutput() AccessAuthenticationRuleArrayOutput
	ToAccessAuthenticationRuleArrayOutputWithContext(context.Context) AccessAuthenticationRuleArrayOutput
}

type AccessAuthenticationRuleArray []AccessAuthenticationRuleInput

func (AccessAuthenticationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessAuthenticationRule)(nil)).Elem()
}

func (i AccessAuthenticationRuleArray) ToAccessAuthenticationRuleArrayOutput() AccessAuthenticationRuleArrayOutput {
	return i.ToAccessAuthenticationRuleArrayOutputWithContext(context.Background())
}

func (i AccessAuthenticationRuleArray) ToAccessAuthenticationRuleArrayOutputWithContext(ctx context.Context) AccessAuthenticationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthenticationRuleArrayOutput)
}

// AccessAuthenticationRuleMapInput is an input type that accepts AccessAuthenticationRuleMap and AccessAuthenticationRuleMapOutput values.
// You can construct a concrete instance of `AccessAuthenticationRuleMapInput` via:
//
//	AccessAuthenticationRuleMap{ "key": AccessAuthenticationRuleArgs{...} }
type AccessAuthenticationRuleMapInput interface {
	pulumi.Input

	ToAccessAuthenticationRuleMapOutput() AccessAuthenticationRuleMapOutput
	ToAccessAuthenticationRuleMapOutputWithContext(context.Context) AccessAuthenticationRuleMapOutput
}

type AccessAuthenticationRuleMap map[string]AccessAuthenticationRuleInput

func (AccessAuthenticationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessAuthenticationRule)(nil)).Elem()
}

func (i AccessAuthenticationRuleMap) ToAccessAuthenticationRuleMapOutput() AccessAuthenticationRuleMapOutput {
	return i.ToAccessAuthenticationRuleMapOutputWithContext(context.Background())
}

func (i AccessAuthenticationRuleMap) ToAccessAuthenticationRuleMapOutputWithContext(ctx context.Context) AccessAuthenticationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessAuthenticationRuleMapOutput)
}

type AccessAuthenticationRuleOutput struct{ *pulumi.OutputState }

func (AccessAuthenticationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessAuthenticationRule)(nil)).Elem()
}

func (o AccessAuthenticationRuleOutput) ToAccessAuthenticationRuleOutput() AccessAuthenticationRuleOutput {
	return o
}

func (o AccessAuthenticationRuleOutput) ToAccessAuthenticationRuleOutputWithContext(ctx context.Context) AccessAuthenticationRuleOutput {
	return o
}

// List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o AccessAuthenticationRuleOutput) Childrens() AccessAuthenticationRuleChildrenArrayOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) AccessAuthenticationRuleChildrenArrayOutput { return v.Childrens }).(AccessAuthenticationRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o AccessAuthenticationRuleOutput) ConditionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionAttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o AccessAuthenticationRuleOutput) ConditionAttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionAttributeValue }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o AccessAuthenticationRuleOutput) ConditionDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionDictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o AccessAuthenticationRuleOutput) ConditionDictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionDictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o AccessAuthenticationRuleOutput) ConditionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionId }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o AccessAuthenticationRuleOutput) ConditionIsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.BoolPtrOutput { return v.ConditionIsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,
// `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,
// `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o AccessAuthenticationRuleOutput) ConditionOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionOperator }).(pulumi.StringPtrOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that
// additional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,
// `ConditionOrBlock`, `ConditionReference`
func (o AccessAuthenticationRuleOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.ConditionType }).(pulumi.StringPtrOutput)
}

// Indicates if this rule is the default one
func (o AccessAuthenticationRuleOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Identity source name from the identity stores
func (o AccessAuthenticationRuleOutput) IdentitySourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.IdentitySourceName }).(pulumi.StringPtrOutput)
}

// Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,
// `DROP`, `CONTINUE`
func (o AccessAuthenticationRuleOutput) IfAuthFail() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringOutput { return v.IfAuthFail }).(pulumi.StringOutput)
}

// Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`
func (o AccessAuthenticationRuleOutput) IfProcessFail() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringOutput { return v.IfProcessFail }).(pulumi.StringOutput)
}

// Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`
func (o AccessAuthenticationRuleOutput) IfUserNotFound() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringOutput { return v.IfUserNotFound }).(pulumi.StringOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o AccessAuthenticationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o AccessAuthenticationRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o AccessAuthenticationRuleOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`
func (o AccessAuthenticationRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessAuthenticationRule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type AccessAuthenticationRuleArrayOutput struct{ *pulumi.OutputState }

func (AccessAuthenticationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessAuthenticationRule)(nil)).Elem()
}

func (o AccessAuthenticationRuleArrayOutput) ToAccessAuthenticationRuleArrayOutput() AccessAuthenticationRuleArrayOutput {
	return o
}

func (o AccessAuthenticationRuleArrayOutput) ToAccessAuthenticationRuleArrayOutputWithContext(ctx context.Context) AccessAuthenticationRuleArrayOutput {
	return o
}

func (o AccessAuthenticationRuleArrayOutput) Index(i pulumi.IntInput) AccessAuthenticationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessAuthenticationRule {
		return vs[0].([]*AccessAuthenticationRule)[vs[1].(int)]
	}).(AccessAuthenticationRuleOutput)
}

type AccessAuthenticationRuleMapOutput struct{ *pulumi.OutputState }

func (AccessAuthenticationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessAuthenticationRule)(nil)).Elem()
}

func (o AccessAuthenticationRuleMapOutput) ToAccessAuthenticationRuleMapOutput() AccessAuthenticationRuleMapOutput {
	return o
}

func (o AccessAuthenticationRuleMapOutput) ToAccessAuthenticationRuleMapOutputWithContext(ctx context.Context) AccessAuthenticationRuleMapOutput {
	return o
}

func (o AccessAuthenticationRuleMapOutput) MapIndex(k pulumi.StringInput) AccessAuthenticationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessAuthenticationRule {
		return vs[0].(map[string]*AccessAuthenticationRule)[vs[1].(string)]
	}).(AccessAuthenticationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthenticationRuleInput)(nil)).Elem(), &AccessAuthenticationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthenticationRuleArrayInput)(nil)).Elem(), AccessAuthenticationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessAuthenticationRuleMapInput)(nil)).Elem(), AccessAuthenticationRuleMap{})
	pulumi.RegisterOutputType(AccessAuthenticationRuleOutput{})
	pulumi.RegisterOutputType(AccessAuthenticationRuleArrayOutput{})
	pulumi.RegisterOutputType(AccessAuthenticationRuleMapOutput{})
}
