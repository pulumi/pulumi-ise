// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DeviceIp struct {
	// It can be either single ip address or ip range address
	Ipaddress string `pulumi:"ipaddress"`
	// It can be either single ip address or ip range address
	IpaddressExclude *string `pulumi:"ipaddressExclude"`
	// Subnet mask length
	Mask *string `pulumi:"mask"`
}

// DeviceIpInput is an input type that accepts DeviceIpArgs and DeviceIpOutput values.
// You can construct a concrete instance of `DeviceIpInput` via:
//
//	DeviceIpArgs{...}
type DeviceIpInput interface {
	pulumi.Input

	ToDeviceIpOutput() DeviceIpOutput
	ToDeviceIpOutputWithContext(context.Context) DeviceIpOutput
}

type DeviceIpArgs struct {
	// It can be either single ip address or ip range address
	Ipaddress pulumi.StringInput `pulumi:"ipaddress"`
	// It can be either single ip address or ip range address
	IpaddressExclude pulumi.StringPtrInput `pulumi:"ipaddressExclude"`
	// Subnet mask length
	Mask pulumi.StringPtrInput `pulumi:"mask"`
}

func (DeviceIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceIp)(nil)).Elem()
}

func (i DeviceIpArgs) ToDeviceIpOutput() DeviceIpOutput {
	return i.ToDeviceIpOutputWithContext(context.Background())
}

func (i DeviceIpArgs) ToDeviceIpOutputWithContext(ctx context.Context) DeviceIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceIpOutput)
}

// DeviceIpArrayInput is an input type that accepts DeviceIpArray and DeviceIpArrayOutput values.
// You can construct a concrete instance of `DeviceIpArrayInput` via:
//
//	DeviceIpArray{ DeviceIpArgs{...} }
type DeviceIpArrayInput interface {
	pulumi.Input

	ToDeviceIpArrayOutput() DeviceIpArrayOutput
	ToDeviceIpArrayOutputWithContext(context.Context) DeviceIpArrayOutput
}

type DeviceIpArray []DeviceIpInput

func (DeviceIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceIp)(nil)).Elem()
}

func (i DeviceIpArray) ToDeviceIpArrayOutput() DeviceIpArrayOutput {
	return i.ToDeviceIpArrayOutputWithContext(context.Background())
}

func (i DeviceIpArray) ToDeviceIpArrayOutputWithContext(ctx context.Context) DeviceIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceIpArrayOutput)
}

type DeviceIpOutput struct{ *pulumi.OutputState }

func (DeviceIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceIp)(nil)).Elem()
}

func (o DeviceIpOutput) ToDeviceIpOutput() DeviceIpOutput {
	return o
}

func (o DeviceIpOutput) ToDeviceIpOutputWithContext(ctx context.Context) DeviceIpOutput {
	return o
}

// It can be either single ip address or ip range address
func (o DeviceIpOutput) Ipaddress() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceIp) string { return v.Ipaddress }).(pulumi.StringOutput)
}

// It can be either single ip address or ip range address
func (o DeviceIpOutput) IpaddressExclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceIp) *string { return v.IpaddressExclude }).(pulumi.StringPtrOutput)
}

// Subnet mask length
func (o DeviceIpOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceIp) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

type DeviceIpArrayOutput struct{ *pulumi.OutputState }

func (DeviceIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceIp)(nil)).Elem()
}

func (o DeviceIpArrayOutput) ToDeviceIpArrayOutput() DeviceIpArrayOutput {
	return o
}

func (o DeviceIpArrayOutput) ToDeviceIpArrayOutputWithContext(ctx context.Context) DeviceIpArrayOutput {
	return o
}

func (o DeviceIpArrayOutput) Index(i pulumi.IntInput) DeviceIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceIp {
		return vs[0].([]DeviceIp)[vs[1].(int)]
	}).(DeviceIpOutput)
}

type GetDeviceIp struct {
	// It can be either single ip address or ip range address
	Ipaddress string `pulumi:"ipaddress"`
	// It can be either single ip address or ip range address
	IpaddressExclude string `pulumi:"ipaddressExclude"`
	// Subnet mask length
	Mask string `pulumi:"mask"`
}

// GetDeviceIpInput is an input type that accepts GetDeviceIpArgs and GetDeviceIpOutput values.
// You can construct a concrete instance of `GetDeviceIpInput` via:
//
//	GetDeviceIpArgs{...}
type GetDeviceIpInput interface {
	pulumi.Input

	ToGetDeviceIpOutput() GetDeviceIpOutput
	ToGetDeviceIpOutputWithContext(context.Context) GetDeviceIpOutput
}

type GetDeviceIpArgs struct {
	// It can be either single ip address or ip range address
	Ipaddress pulumi.StringInput `pulumi:"ipaddress"`
	// It can be either single ip address or ip range address
	IpaddressExclude pulumi.StringInput `pulumi:"ipaddressExclude"`
	// Subnet mask length
	Mask pulumi.StringInput `pulumi:"mask"`
}

func (GetDeviceIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceIp)(nil)).Elem()
}

func (i GetDeviceIpArgs) ToGetDeviceIpOutput() GetDeviceIpOutput {
	return i.ToGetDeviceIpOutputWithContext(context.Background())
}

func (i GetDeviceIpArgs) ToGetDeviceIpOutputWithContext(ctx context.Context) GetDeviceIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceIpOutput)
}

// GetDeviceIpArrayInput is an input type that accepts GetDeviceIpArray and GetDeviceIpArrayOutput values.
// You can construct a concrete instance of `GetDeviceIpArrayInput` via:
//
//	GetDeviceIpArray{ GetDeviceIpArgs{...} }
type GetDeviceIpArrayInput interface {
	pulumi.Input

	ToGetDeviceIpArrayOutput() GetDeviceIpArrayOutput
	ToGetDeviceIpArrayOutputWithContext(context.Context) GetDeviceIpArrayOutput
}

type GetDeviceIpArray []GetDeviceIpInput

func (GetDeviceIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceIp)(nil)).Elem()
}

func (i GetDeviceIpArray) ToGetDeviceIpArrayOutput() GetDeviceIpArrayOutput {
	return i.ToGetDeviceIpArrayOutputWithContext(context.Background())
}

func (i GetDeviceIpArray) ToGetDeviceIpArrayOutputWithContext(ctx context.Context) GetDeviceIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceIpArrayOutput)
}

type GetDeviceIpOutput struct{ *pulumi.OutputState }

func (GetDeviceIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceIp)(nil)).Elem()
}

func (o GetDeviceIpOutput) ToGetDeviceIpOutput() GetDeviceIpOutput {
	return o
}

func (o GetDeviceIpOutput) ToGetDeviceIpOutputWithContext(ctx context.Context) GetDeviceIpOutput {
	return o
}

// It can be either single ip address or ip range address
func (o GetDeviceIpOutput) Ipaddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceIp) string { return v.Ipaddress }).(pulumi.StringOutput)
}

// It can be either single ip address or ip range address
func (o GetDeviceIpOutput) IpaddressExclude() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceIp) string { return v.IpaddressExclude }).(pulumi.StringOutput)
}

// Subnet mask length
func (o GetDeviceIpOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceIp) string { return v.Mask }).(pulumi.StringOutput)
}

type GetDeviceIpArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceIp)(nil)).Elem()
}

func (o GetDeviceIpArrayOutput) ToGetDeviceIpArrayOutput() GetDeviceIpArrayOutput {
	return o
}

func (o GetDeviceIpArrayOutput) ToGetDeviceIpArrayOutputWithContext(ctx context.Context) GetDeviceIpArrayOutput {
	return o
}

func (o GetDeviceIpArrayOutput) Index(i pulumi.IntInput) GetDeviceIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceIp {
		return vs[0].([]GetDeviceIp)[vs[1].(int)]
	}).(GetDeviceIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceIpInput)(nil)).Elem(), DeviceIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceIpArrayInput)(nil)).Elem(), DeviceIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceIpInput)(nil)).Elem(), GetDeviceIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceIpArrayInput)(nil)).Elem(), GetDeviceIpArray{})
	pulumi.RegisterOutputType(DeviceIpOutput{})
	pulumi.RegisterOutputType(DeviceIpArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceIpOutput{})
	pulumi.RegisterOutputType(GetDeviceIpArrayOutput{})
}
