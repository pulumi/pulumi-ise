// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trustsecsecuritygroup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the TrustSec Security Group ACL.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecSecurityGroup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := TrustsecSecurityGroup.GetAcl(ctx, &trustsecsecuritygroup.GetAclArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAcl(ctx *pulumi.Context, args *LookupAclArgs, opts ...pulumi.InvokeOption) (*LookupAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclResult
	err := ctx.Invoke("ise:TrustsecSecurityGroup/getAcl:getAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAcl.
type LookupAclArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the security group ACL
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAcl.
type LookupAclResult struct {
	// Content of ACL
	AclContent string `pulumi:"aclContent"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// IP Version
	IpVersion string `pulumi:"ipVersion"`
	// The name of the security group ACL
	Name string `pulumi:"name"`
	// Read-only
	ReadOnly bool `pulumi:"readOnly"`
}

func LookupAclOutput(ctx *pulumi.Context, args LookupAclOutputArgs, opts ...pulumi.InvokeOption) LookupAclResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclResult, error) {
			args := v.(LookupAclArgs)
			r, err := LookupAcl(ctx, &args, opts...)
			var s LookupAclResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclResultOutput)
}

// A collection of arguments for invoking getAcl.
type LookupAclOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the security group ACL
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclArgs)(nil)).Elem()
}

// A collection of values returned by getAcl.
type LookupAclResultOutput struct{ *pulumi.OutputState }

func (LookupAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclResult)(nil)).Elem()
}

func (o LookupAclResultOutput) ToLookupAclResultOutput() LookupAclResultOutput {
	return o
}

func (o LookupAclResultOutput) ToLookupAclResultOutputWithContext(ctx context.Context) LookupAclResultOutput {
	return o
}

// Content of ACL
func (o LookupAclResultOutput) AclContent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.AclContent }).(pulumi.StringOutput)
}

// Description
func (o LookupAclResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupAclResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Version
func (o LookupAclResultOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.IpVersion }).(pulumi.StringOutput)
}

// The name of the security group ACL
func (o LookupAclResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.Name }).(pulumi.StringOutput)
}

// Read-only
func (o LookupAclResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAclResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclResultOutput{})
}
