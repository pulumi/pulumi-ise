// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectoryadd

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GroupsGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// GroupsGroupInput is an input type that accepts GroupsGroupArgs and GroupsGroupOutput values.
// You can construct a concrete instance of `GroupsGroupInput` via:
//
//	GroupsGroupArgs{...}
type GroupsGroupInput interface {
	pulumi.Input

	ToGroupsGroupOutput() GroupsGroupOutput
	ToGroupsGroupOutputWithContext(context.Context) GroupsGroupOutput
}

type GroupsGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArgs) ToGroupsGroupOutput() GroupsGroupOutput {
	return i.ToGroupsGroupOutputWithContext(context.Background())
}

func (i GroupsGroupArgs) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupOutput)
}

// GroupsGroupArrayInput is an input type that accepts GroupsGroupArray and GroupsGroupArrayOutput values.
// You can construct a concrete instance of `GroupsGroupArrayInput` via:
//
//	GroupsGroupArray{ GroupsGroupArgs{...} }
type GroupsGroupArrayInput interface {
	pulumi.Input

	ToGroupsGroupArrayOutput() GroupsGroupArrayOutput
	ToGroupsGroupArrayOutputWithContext(context.Context) GroupsGroupArrayOutput
}

type GroupsGroupArray []GroupsGroupInput

func (GroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return i.ToGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupArrayOutput)
}

type GroupsGroupOutput struct{ *pulumi.OutputState }

func (GroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupOutput) ToGroupsGroupOutput() GroupsGroupOutput {
	return o
}

func (o GroupsGroupOutput) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o GroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o GroupsGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o GroupsGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupsGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) Index(i pulumi.IntInput) GroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsGroup {
		return vs[0].([]GroupsGroup)[vs[1].(int)]
	}).(GroupsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupInput)(nil)).Elem(), GroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupArrayInput)(nil)).Elem(), GroupsGroupArray{})
	pulumi.RegisterOutputType(GroupsGroupOutput{})
	pulumi.RegisterOutputType(GroupsGroupArrayOutput{})
}
