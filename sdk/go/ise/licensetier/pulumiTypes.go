// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensetier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type StateLicense struct {
	// License name
	//   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
	Name string `pulumi:"name"`
	// License status
	//   - Choices: `ENABLED`, `DISABLED`
	Status string `pulumi:"status"`
}

// StateLicenseInput is an input type that accepts StateLicenseArgs and StateLicenseOutput values.
// You can construct a concrete instance of `StateLicenseInput` via:
//
//	StateLicenseArgs{...}
type StateLicenseInput interface {
	pulumi.Input

	ToStateLicenseOutput() StateLicenseOutput
	ToStateLicenseOutputWithContext(context.Context) StateLicenseOutput
}

type StateLicenseArgs struct {
	// License name
	//   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
	Name pulumi.StringInput `pulumi:"name"`
	// License status
	//   - Choices: `ENABLED`, `DISABLED`
	Status pulumi.StringInput `pulumi:"status"`
}

func (StateLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateLicense)(nil)).Elem()
}

func (i StateLicenseArgs) ToStateLicenseOutput() StateLicenseOutput {
	return i.ToStateLicenseOutputWithContext(context.Background())
}

func (i StateLicenseArgs) ToStateLicenseOutputWithContext(ctx context.Context) StateLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateLicenseOutput)
}

// StateLicenseArrayInput is an input type that accepts StateLicenseArray and StateLicenseArrayOutput values.
// You can construct a concrete instance of `StateLicenseArrayInput` via:
//
//	StateLicenseArray{ StateLicenseArgs{...} }
type StateLicenseArrayInput interface {
	pulumi.Input

	ToStateLicenseArrayOutput() StateLicenseArrayOutput
	ToStateLicenseArrayOutputWithContext(context.Context) StateLicenseArrayOutput
}

type StateLicenseArray []StateLicenseInput

func (StateLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StateLicense)(nil)).Elem()
}

func (i StateLicenseArray) ToStateLicenseArrayOutput() StateLicenseArrayOutput {
	return i.ToStateLicenseArrayOutputWithContext(context.Background())
}

func (i StateLicenseArray) ToStateLicenseArrayOutputWithContext(ctx context.Context) StateLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateLicenseArrayOutput)
}

type StateLicenseOutput struct{ *pulumi.OutputState }

func (StateLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateLicense)(nil)).Elem()
}

func (o StateLicenseOutput) ToStateLicenseOutput() StateLicenseOutput {
	return o
}

func (o StateLicenseOutput) ToStateLicenseOutputWithContext(ctx context.Context) StateLicenseOutput {
	return o
}

// License name
//   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
func (o StateLicenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StateLicense) string { return v.Name }).(pulumi.StringOutput)
}

// License status
//   - Choices: `ENABLED`, `DISABLED`
func (o StateLicenseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v StateLicense) string { return v.Status }).(pulumi.StringOutput)
}

type StateLicenseArrayOutput struct{ *pulumi.OutputState }

func (StateLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StateLicense)(nil)).Elem()
}

func (o StateLicenseArrayOutput) ToStateLicenseArrayOutput() StateLicenseArrayOutput {
	return o
}

func (o StateLicenseArrayOutput) ToStateLicenseArrayOutputWithContext(ctx context.Context) StateLicenseArrayOutput {
	return o
}

func (o StateLicenseArrayOutput) Index(i pulumi.IntInput) StateLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StateLicense {
		return vs[0].([]StateLicense)[vs[1].(int)]
	}).(StateLicenseOutput)
}

type GetStateLicense struct {
	// License name
	Name string `pulumi:"name"`
	// License status
	Status string `pulumi:"status"`
}

// GetStateLicenseInput is an input type that accepts GetStateLicenseArgs and GetStateLicenseOutput values.
// You can construct a concrete instance of `GetStateLicenseInput` via:
//
//	GetStateLicenseArgs{...}
type GetStateLicenseInput interface {
	pulumi.Input

	ToGetStateLicenseOutput() GetStateLicenseOutput
	ToGetStateLicenseOutputWithContext(context.Context) GetStateLicenseOutput
}

type GetStateLicenseArgs struct {
	// License name
	Name pulumi.StringInput `pulumi:"name"`
	// License status
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetStateLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStateLicense)(nil)).Elem()
}

func (i GetStateLicenseArgs) ToGetStateLicenseOutput() GetStateLicenseOutput {
	return i.ToGetStateLicenseOutputWithContext(context.Background())
}

func (i GetStateLicenseArgs) ToGetStateLicenseOutputWithContext(ctx context.Context) GetStateLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStateLicenseOutput)
}

// GetStateLicenseArrayInput is an input type that accepts GetStateLicenseArray and GetStateLicenseArrayOutput values.
// You can construct a concrete instance of `GetStateLicenseArrayInput` via:
//
//	GetStateLicenseArray{ GetStateLicenseArgs{...} }
type GetStateLicenseArrayInput interface {
	pulumi.Input

	ToGetStateLicenseArrayOutput() GetStateLicenseArrayOutput
	ToGetStateLicenseArrayOutputWithContext(context.Context) GetStateLicenseArrayOutput
}

type GetStateLicenseArray []GetStateLicenseInput

func (GetStateLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStateLicense)(nil)).Elem()
}

func (i GetStateLicenseArray) ToGetStateLicenseArrayOutput() GetStateLicenseArrayOutput {
	return i.ToGetStateLicenseArrayOutputWithContext(context.Background())
}

func (i GetStateLicenseArray) ToGetStateLicenseArrayOutputWithContext(ctx context.Context) GetStateLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStateLicenseArrayOutput)
}

type GetStateLicenseOutput struct{ *pulumi.OutputState }

func (GetStateLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStateLicense)(nil)).Elem()
}

func (o GetStateLicenseOutput) ToGetStateLicenseOutput() GetStateLicenseOutput {
	return o
}

func (o GetStateLicenseOutput) ToGetStateLicenseOutputWithContext(ctx context.Context) GetStateLicenseOutput {
	return o
}

// License name
func (o GetStateLicenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStateLicense) string { return v.Name }).(pulumi.StringOutput)
}

// License status
func (o GetStateLicenseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetStateLicense) string { return v.Status }).(pulumi.StringOutput)
}

type GetStateLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetStateLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStateLicense)(nil)).Elem()
}

func (o GetStateLicenseArrayOutput) ToGetStateLicenseArrayOutput() GetStateLicenseArrayOutput {
	return o
}

func (o GetStateLicenseArrayOutput) ToGetStateLicenseArrayOutputWithContext(ctx context.Context) GetStateLicenseArrayOutput {
	return o
}

func (o GetStateLicenseArrayOutput) Index(i pulumi.IntInput) GetStateLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStateLicense {
		return vs[0].([]GetStateLicense)[vs[1].(int)]
	}).(GetStateLicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StateLicenseInput)(nil)).Elem(), StateLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateLicenseArrayInput)(nil)).Elem(), StateLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStateLicenseInput)(nil)).Elem(), GetStateLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStateLicenseArrayInput)(nil)).Elem(), GetStateLicenseArray{})
	pulumi.RegisterOutputType(StateLicenseOutput{})
	pulumi.RegisterOutputType(StateLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetStateLicenseOutput{})
	pulumi.RegisterOutputType(GetStateLicenseArrayOutput{})
}
