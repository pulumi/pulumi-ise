// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccesspolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SetChildren struct {
	// Dictionary attribute name
	AttributeName *string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue *string `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []SetChildrenChildren `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType string `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName *string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue *string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id *string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator *string `pulumi:"operator"`
}

// SetChildrenInput is an input type that accepts SetChildrenArgs and SetChildrenOutput values.
// You can construct a concrete instance of `SetChildrenInput` via:
//
//	SetChildrenArgs{...}
type SetChildrenInput interface {
	pulumi.Input

	ToSetChildrenOutput() SetChildrenOutput
	ToSetChildrenOutputWithContext(context.Context) SetChildrenOutput
}

type SetChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringPtrInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringPtrInput `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens SetChildrenChildrenArrayInput `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName pulumi.StringPtrInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringPtrInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput `pulumi:"isNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator pulumi.StringPtrInput `pulumi:"operator"`
}

func (SetChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetChildren)(nil)).Elem()
}

func (i SetChildrenArgs) ToSetChildrenOutput() SetChildrenOutput {
	return i.ToSetChildrenOutputWithContext(context.Background())
}

func (i SetChildrenArgs) ToSetChildrenOutputWithContext(ctx context.Context) SetChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetChildrenOutput)
}

// SetChildrenArrayInput is an input type that accepts SetChildrenArray and SetChildrenArrayOutput values.
// You can construct a concrete instance of `SetChildrenArrayInput` via:
//
//	SetChildrenArray{ SetChildrenArgs{...} }
type SetChildrenArrayInput interface {
	pulumi.Input

	ToSetChildrenArrayOutput() SetChildrenArrayOutput
	ToSetChildrenArrayOutputWithContext(context.Context) SetChildrenArrayOutput
}

type SetChildrenArray []SetChildrenInput

func (SetChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetChildren)(nil)).Elem()
}

func (i SetChildrenArray) ToSetChildrenArrayOutput() SetChildrenArrayOutput {
	return i.ToSetChildrenArrayOutputWithContext(context.Background())
}

func (i SetChildrenArray) ToSetChildrenArrayOutputWithContext(ctx context.Context) SetChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetChildrenArrayOutput)
}

type SetChildrenOutput struct{ *pulumi.OutputState }

func (SetChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetChildren)(nil)).Elem()
}

func (o SetChildrenOutput) ToSetChildrenOutput() SetChildrenOutput {
	return o
}

func (o SetChildrenOutput) ToSetChildrenOutputWithContext(ctx context.Context) SetChildrenOutput {
	return o
}

// Dictionary attribute name
func (o SetChildrenOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.AttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o SetChildrenOutput) AttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.AttributeValue }).(pulumi.StringPtrOutput)
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o SetChildrenOutput) Childrens() SetChildrenChildrenArrayOutput {
	return o.ApplyT(func(v SetChildren) []SetChildrenChildren { return v.Childrens }).(SetChildrenChildrenArrayOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
func (o SetChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v SetChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Dictionary name
func (o SetChildrenOutput) DictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.DictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o SetChildrenOutput) DictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.DictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o SetChildrenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o SetChildrenOutput) IsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetChildren) *bool { return v.IsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o SetChildrenOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildren) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

type SetChildrenArrayOutput struct{ *pulumi.OutputState }

func (SetChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetChildren)(nil)).Elem()
}

func (o SetChildrenArrayOutput) ToSetChildrenArrayOutput() SetChildrenArrayOutput {
	return o
}

func (o SetChildrenArrayOutput) ToSetChildrenArrayOutputWithContext(ctx context.Context) SetChildrenArrayOutput {
	return o
}

func (o SetChildrenArrayOutput) Index(i pulumi.IntInput) SetChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetChildren {
		return vs[0].([]SetChildren)[vs[1].(int)]
	}).(SetChildrenOutput)
}

type SetChildrenChildren struct {
	// Dictionary attribute name
	AttributeName *string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue *string `pulumi:"attributeValue"`
	// Condition type.
	//   - Choices: `ConditionAttributes`, `ConditionReference`
	ConditionType string `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName *string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue *string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id *string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator *string `pulumi:"operator"`
}

// SetChildrenChildrenInput is an input type that accepts SetChildrenChildrenArgs and SetChildrenChildrenOutput values.
// You can construct a concrete instance of `SetChildrenChildrenInput` via:
//
//	SetChildrenChildrenArgs{...}
type SetChildrenChildrenInput interface {
	pulumi.Input

	ToSetChildrenChildrenOutput() SetChildrenChildrenOutput
	ToSetChildrenChildrenOutputWithContext(context.Context) SetChildrenChildrenOutput
}

type SetChildrenChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringPtrInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringPtrInput `pulumi:"attributeValue"`
	// Condition type.
	//   - Choices: `ConditionAttributes`, `ConditionReference`
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName pulumi.StringPtrInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringPtrInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput `pulumi:"isNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator pulumi.StringPtrInput `pulumi:"operator"`
}

func (SetChildrenChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetChildrenChildren)(nil)).Elem()
}

func (i SetChildrenChildrenArgs) ToSetChildrenChildrenOutput() SetChildrenChildrenOutput {
	return i.ToSetChildrenChildrenOutputWithContext(context.Background())
}

func (i SetChildrenChildrenArgs) ToSetChildrenChildrenOutputWithContext(ctx context.Context) SetChildrenChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetChildrenChildrenOutput)
}

// SetChildrenChildrenArrayInput is an input type that accepts SetChildrenChildrenArray and SetChildrenChildrenArrayOutput values.
// You can construct a concrete instance of `SetChildrenChildrenArrayInput` via:
//
//	SetChildrenChildrenArray{ SetChildrenChildrenArgs{...} }
type SetChildrenChildrenArrayInput interface {
	pulumi.Input

	ToSetChildrenChildrenArrayOutput() SetChildrenChildrenArrayOutput
	ToSetChildrenChildrenArrayOutputWithContext(context.Context) SetChildrenChildrenArrayOutput
}

type SetChildrenChildrenArray []SetChildrenChildrenInput

func (SetChildrenChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetChildrenChildren)(nil)).Elem()
}

func (i SetChildrenChildrenArray) ToSetChildrenChildrenArrayOutput() SetChildrenChildrenArrayOutput {
	return i.ToSetChildrenChildrenArrayOutputWithContext(context.Background())
}

func (i SetChildrenChildrenArray) ToSetChildrenChildrenArrayOutputWithContext(ctx context.Context) SetChildrenChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetChildrenChildrenArrayOutput)
}

type SetChildrenChildrenOutput struct{ *pulumi.OutputState }

func (SetChildrenChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetChildrenChildren)(nil)).Elem()
}

func (o SetChildrenChildrenOutput) ToSetChildrenChildrenOutput() SetChildrenChildrenOutput {
	return o
}

func (o SetChildrenChildrenOutput) ToSetChildrenChildrenOutputWithContext(ctx context.Context) SetChildrenChildrenOutput {
	return o
}

// Dictionary attribute name
func (o SetChildrenChildrenOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.AttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o SetChildrenChildrenOutput) AttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.AttributeValue }).(pulumi.StringPtrOutput)
}

// Condition type.
//   - Choices: `ConditionAttributes`, `ConditionReference`
func (o SetChildrenChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v SetChildrenChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Dictionary name
func (o SetChildrenChildrenOutput) DictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.DictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o SetChildrenChildrenOutput) DictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.DictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o SetChildrenChildrenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o SetChildrenChildrenOutput) IsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *bool { return v.IsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o SetChildrenChildrenOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetChildrenChildren) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

type SetChildrenChildrenArrayOutput struct{ *pulumi.OutputState }

func (SetChildrenChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetChildrenChildren)(nil)).Elem()
}

func (o SetChildrenChildrenArrayOutput) ToSetChildrenChildrenArrayOutput() SetChildrenChildrenArrayOutput {
	return o
}

func (o SetChildrenChildrenArrayOutput) ToSetChildrenChildrenArrayOutputWithContext(ctx context.Context) SetChildrenChildrenArrayOutput {
	return o
}

func (o SetChildrenChildrenArrayOutput) Index(i pulumi.IntInput) SetChildrenChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetChildrenChildren {
		return vs[0].([]SetChildrenChildren)[vs[1].(int)]
	}).(SetChildrenChildrenOutput)
}

type GetSetChildren struct {
	// Dictionary attribute name
	AttributeName string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue string `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []GetSetChildrenChildren `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Equality operator
	Operator string `pulumi:"operator"`
}

// GetSetChildrenInput is an input type that accepts GetSetChildrenArgs and GetSetChildrenOutput values.
// You can construct a concrete instance of `GetSetChildrenInput` via:
//
//	GetSetChildrenArgs{...}
type GetSetChildrenInput interface {
	pulumi.Input

	ToGetSetChildrenOutput() GetSetChildrenOutput
	ToGetSetChildrenOutputWithContext(context.Context) GetSetChildrenOutput
}

type GetSetChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringInput `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens GetSetChildrenChildrenArrayInput `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName pulumi.StringInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolInput `pulumi:"isNegate"`
	// Equality operator
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (GetSetChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetChildren)(nil)).Elem()
}

func (i GetSetChildrenArgs) ToGetSetChildrenOutput() GetSetChildrenOutput {
	return i.ToGetSetChildrenOutputWithContext(context.Background())
}

func (i GetSetChildrenArgs) ToGetSetChildrenOutputWithContext(ctx context.Context) GetSetChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetChildrenOutput)
}

// GetSetChildrenArrayInput is an input type that accepts GetSetChildrenArray and GetSetChildrenArrayOutput values.
// You can construct a concrete instance of `GetSetChildrenArrayInput` via:
//
//	GetSetChildrenArray{ GetSetChildrenArgs{...} }
type GetSetChildrenArrayInput interface {
	pulumi.Input

	ToGetSetChildrenArrayOutput() GetSetChildrenArrayOutput
	ToGetSetChildrenArrayOutputWithContext(context.Context) GetSetChildrenArrayOutput
}

type GetSetChildrenArray []GetSetChildrenInput

func (GetSetChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetChildren)(nil)).Elem()
}

func (i GetSetChildrenArray) ToGetSetChildrenArrayOutput() GetSetChildrenArrayOutput {
	return i.ToGetSetChildrenArrayOutputWithContext(context.Background())
}

func (i GetSetChildrenArray) ToGetSetChildrenArrayOutputWithContext(ctx context.Context) GetSetChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetChildrenArrayOutput)
}

type GetSetChildrenOutput struct{ *pulumi.OutputState }

func (GetSetChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetChildren)(nil)).Elem()
}

func (o GetSetChildrenOutput) ToGetSetChildrenOutput() GetSetChildrenOutput {
	return o
}

func (o GetSetChildrenOutput) ToGetSetChildrenOutputWithContext(ctx context.Context) GetSetChildrenOutput {
	return o
}

// Dictionary attribute name
func (o GetSetChildrenOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o GetSetChildrenOutput) AttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.AttributeValue }).(pulumi.StringOutput)
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o GetSetChildrenOutput) Childrens() GetSetChildrenChildrenArrayOutput {
	return o.ApplyT(func(v GetSetChildren) []GetSetChildrenChildren { return v.Childrens }).(GetSetChildrenChildrenArrayOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o GetSetChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Dictionary name
func (o GetSetChildrenOutput) DictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.DictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o GetSetChildrenOutput) DictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.DictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o GetSetChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o GetSetChildrenOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSetChildren) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Equality operator
func (o GetSetChildrenOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildren) string { return v.Operator }).(pulumi.StringOutput)
}

type GetSetChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetSetChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetChildren)(nil)).Elem()
}

func (o GetSetChildrenArrayOutput) ToGetSetChildrenArrayOutput() GetSetChildrenArrayOutput {
	return o
}

func (o GetSetChildrenArrayOutput) ToGetSetChildrenArrayOutputWithContext(ctx context.Context) GetSetChildrenArrayOutput {
	return o
}

func (o GetSetChildrenArrayOutput) Index(i pulumi.IntInput) GetSetChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSetChildren {
		return vs[0].([]GetSetChildren)[vs[1].(int)]
	}).(GetSetChildrenOutput)
}

type GetSetChildrenChildren struct {
	// Dictionary attribute name
	AttributeName string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue string `pulumi:"attributeValue"`
	// Condition type.
	ConditionType string `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Equality operator
	Operator string `pulumi:"operator"`
}

// GetSetChildrenChildrenInput is an input type that accepts GetSetChildrenChildrenArgs and GetSetChildrenChildrenOutput values.
// You can construct a concrete instance of `GetSetChildrenChildrenInput` via:
//
//	GetSetChildrenChildrenArgs{...}
type GetSetChildrenChildrenInput interface {
	pulumi.Input

	ToGetSetChildrenChildrenOutput() GetSetChildrenChildrenOutput
	ToGetSetChildrenChildrenOutputWithContext(context.Context) GetSetChildrenChildrenOutput
}

type GetSetChildrenChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringInput `pulumi:"attributeValue"`
	// Condition type.
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Dictionary name
	DictionaryName pulumi.StringInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolInput `pulumi:"isNegate"`
	// Equality operator
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (GetSetChildrenChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetChildrenChildren)(nil)).Elem()
}

func (i GetSetChildrenChildrenArgs) ToGetSetChildrenChildrenOutput() GetSetChildrenChildrenOutput {
	return i.ToGetSetChildrenChildrenOutputWithContext(context.Background())
}

func (i GetSetChildrenChildrenArgs) ToGetSetChildrenChildrenOutputWithContext(ctx context.Context) GetSetChildrenChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetChildrenChildrenOutput)
}

// GetSetChildrenChildrenArrayInput is an input type that accepts GetSetChildrenChildrenArray and GetSetChildrenChildrenArrayOutput values.
// You can construct a concrete instance of `GetSetChildrenChildrenArrayInput` via:
//
//	GetSetChildrenChildrenArray{ GetSetChildrenChildrenArgs{...} }
type GetSetChildrenChildrenArrayInput interface {
	pulumi.Input

	ToGetSetChildrenChildrenArrayOutput() GetSetChildrenChildrenArrayOutput
	ToGetSetChildrenChildrenArrayOutputWithContext(context.Context) GetSetChildrenChildrenArrayOutput
}

type GetSetChildrenChildrenArray []GetSetChildrenChildrenInput

func (GetSetChildrenChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetChildrenChildren)(nil)).Elem()
}

func (i GetSetChildrenChildrenArray) ToGetSetChildrenChildrenArrayOutput() GetSetChildrenChildrenArrayOutput {
	return i.ToGetSetChildrenChildrenArrayOutputWithContext(context.Background())
}

func (i GetSetChildrenChildrenArray) ToGetSetChildrenChildrenArrayOutputWithContext(ctx context.Context) GetSetChildrenChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetChildrenChildrenArrayOutput)
}

type GetSetChildrenChildrenOutput struct{ *pulumi.OutputState }

func (GetSetChildrenChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetChildrenChildren)(nil)).Elem()
}

func (o GetSetChildrenChildrenOutput) ToGetSetChildrenChildrenOutput() GetSetChildrenChildrenOutput {
	return o
}

func (o GetSetChildrenChildrenOutput) ToGetSetChildrenChildrenOutputWithContext(ctx context.Context) GetSetChildrenChildrenOutput {
	return o
}

// Dictionary attribute name
func (o GetSetChildrenChildrenOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o GetSetChildrenChildrenOutput) AttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.AttributeValue }).(pulumi.StringOutput)
}

// Condition type.
func (o GetSetChildrenChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Dictionary name
func (o GetSetChildrenChildrenOutput) DictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.DictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o GetSetChildrenChildrenOutput) DictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.DictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o GetSetChildrenChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o GetSetChildrenChildrenOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Equality operator
func (o GetSetChildrenChildrenOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetChildrenChildren) string { return v.Operator }).(pulumi.StringOutput)
}

type GetSetChildrenChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetSetChildrenChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetChildrenChildren)(nil)).Elem()
}

func (o GetSetChildrenChildrenArrayOutput) ToGetSetChildrenChildrenArrayOutput() GetSetChildrenChildrenArrayOutput {
	return o
}

func (o GetSetChildrenChildrenArrayOutput) ToGetSetChildrenChildrenArrayOutputWithContext(ctx context.Context) GetSetChildrenChildrenArrayOutput {
	return o
}

func (o GetSetChildrenChildrenArrayOutput) Index(i pulumi.IntInput) GetSetChildrenChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSetChildrenChildren {
		return vs[0].([]GetSetChildrenChildren)[vs[1].(int)]
	}).(GetSetChildrenChildrenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SetChildrenInput)(nil)).Elem(), SetChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetChildrenArrayInput)(nil)).Elem(), SetChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetChildrenChildrenInput)(nil)).Elem(), SetChildrenChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetChildrenChildrenArrayInput)(nil)).Elem(), SetChildrenChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetChildrenInput)(nil)).Elem(), GetSetChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetChildrenArrayInput)(nil)).Elem(), GetSetChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetChildrenChildrenInput)(nil)).Elem(), GetSetChildrenChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetChildrenChildrenArrayInput)(nil)).Elem(), GetSetChildrenChildrenArray{})
	pulumi.RegisterOutputType(SetChildrenOutput{})
	pulumi.RegisterOutputType(SetChildrenArrayOutput{})
	pulumi.RegisterOutputType(SetChildrenChildrenOutput{})
	pulumi.RegisterOutputType(SetChildrenChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetSetChildrenOutput{})
	pulumi.RegisterOutputType(GetSetChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetSetChildrenChildrenOutput{})
	pulumi.RegisterOutputType(GetSetChildrenChildrenArrayOutput{})
}
