// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package internal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Internal User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/Internal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Internal.GetUser(ctx, &internal.GetUserArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("ise:Internal/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the internal user
	Name *string `pulumi:"name"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
	AccountNameAlias string `pulumi:"accountNameAlias"`
	// Requires the user to change the password
	ChangePassword bool `pulumi:"changePassword"`
	// Key value map
	CustomAttributes string `pulumi:"customAttributes"`
	// Description
	Description string `pulumi:"description"`
	// Email address
	Email string `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword string `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled bool `pulumi:"enabled"`
	// First name of the internal user
	FirstName string `pulumi:"firstName"`
	// The id of the object
	Id string `pulumi:"id"`
	// Comma separated list of identity group IDs.
	IdentityGroups string `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName string `pulumi:"lastName"`
	// The name of the internal user
	Name string `pulumi:"name"`
	// The password of the internal user
	Password string `pulumi:"password"`
	// The ID store where the internal user's password is kept
	PasswordIdStore string `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
	PasswordNeverExpires bool `pulumi:"passwordNeverExpires"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the internal user
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
func (o LookupUserResultOutput) AccountNameAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.AccountNameAlias }).(pulumi.StringOutput)
}

// Requires the user to change the password
func (o LookupUserResultOutput) ChangePassword() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.ChangePassword }).(pulumi.BoolOutput)
}

// Key value map
func (o LookupUserResultOutput) CustomAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.CustomAttributes }).(pulumi.StringOutput)
}

// Description
func (o LookupUserResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Description }).(pulumi.StringOutput)
}

// Email address
func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// This field is added in ISE 2.0 to support TACACS+
func (o LookupUserResultOutput) EnablePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.EnablePassword }).(pulumi.StringOutput)
}

// Whether the user is enabled/disabled
func (o LookupUserResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// First name of the internal user
func (o LookupUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Comma separated list of identity group IDs.
func (o LookupUserResultOutput) IdentityGroups() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.IdentityGroups }).(pulumi.StringOutput)
}

// Last name of the internal user
func (o LookupUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

// The name of the internal user
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The password of the internal user
func (o LookupUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Password }).(pulumi.StringOutput)
}

// The ID store where the internal user's password is kept
func (o LookupUserResultOutput) PasswordIdStore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PasswordIdStore }).(pulumi.StringOutput)
}

// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
func (o LookupUserResultOutput) PasswordNeverExpires() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.PasswordNeverExpires }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
