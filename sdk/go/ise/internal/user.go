// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package internal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Internal User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/Internal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Internal.NewUser(ctx, "example", &Internal.UserArgs{
//				Name:                 pulumi.String("UserTF"),
//				Password:             pulumi.String("Cisco123"),
//				ChangePassword:       pulumi.Bool(true),
//				Email:                pulumi.String("aaa@cisco.com"),
//				AccountNameAlias:     pulumi.String("User 1"),
//				EnablePassword:       pulumi.String("Cisco123"),
//				Enabled:              pulumi.Bool(true),
//				PasswordNeverExpires: pulumi.Bool(false),
//				FirstName:            pulumi.String("John"),
//				LastName:             pulumi.String("Doe"),
//				PasswordIdStore:      pulumi.String("Internal Users"),
//				Description:          pulumi.String("My first Terraform user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:Internal/user:User example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type User struct {
	pulumi.CustomResourceState

	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
	// from ISE 3.2.
	AccountNameAlias pulumi.StringPtrOutput `pulumi:"accountNameAlias"`
	// Requires the user to change the password - Default value: `true`
	ChangePassword pulumi.BoolOutput `pulumi:"changePassword"`
	// Key value map
	CustomAttributes pulumi.StringPtrOutput `pulumi:"customAttributes"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Email address
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrOutput `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// First name of the internal user
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrOutput `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// The name of the internal user
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the internal user
	Password pulumi.StringOutput `pulumi:"password"`
	// The ID store where the internal user's password is kept - Default value: `Internal Users`
	PasswordIdStore pulumi.StringOutput `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
	// field is only supported from ISE 3.2. - Default value: `false`
	PasswordNeverExpires pulumi.BoolOutput `pulumi:"passwordNeverExpires"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("ise:Internal/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("ise:Internal/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
	// from ISE 3.2.
	AccountNameAlias *string `pulumi:"accountNameAlias"`
	// Requires the user to change the password - Default value: `true`
	ChangePassword *bool `pulumi:"changePassword"`
	// Key value map
	CustomAttributes *string `pulumi:"customAttributes"`
	// Description
	Description *string `pulumi:"description"`
	// Email address
	Email *string `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword *string `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled *bool `pulumi:"enabled"`
	// First name of the internal user
	FirstName *string `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups *string `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName *string `pulumi:"lastName"`
	// The name of the internal user
	Name *string `pulumi:"name"`
	// The password of the internal user
	Password *string `pulumi:"password"`
	// The ID store where the internal user's password is kept - Default value: `Internal Users`
	PasswordIdStore *string `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
	// field is only supported from ISE 3.2. - Default value: `false`
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
}

type UserState struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
	// from ISE 3.2.
	AccountNameAlias pulumi.StringPtrInput
	// Requires the user to change the password - Default value: `true`
	ChangePassword pulumi.BoolPtrInput
	// Key value map
	CustomAttributes pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Email address
	Email pulumi.StringPtrInput
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrInput
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrInput
	// First name of the internal user
	FirstName pulumi.StringPtrInput
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrInput
	// Last name of the internal user
	LastName pulumi.StringPtrInput
	// The name of the internal user
	Name pulumi.StringPtrInput
	// The password of the internal user
	Password pulumi.StringPtrInput
	// The ID store where the internal user's password is kept - Default value: `Internal Users`
	PasswordIdStore pulumi.StringPtrInput
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
	// field is only supported from ISE 3.2. - Default value: `false`
	PasswordNeverExpires pulumi.BoolPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
	// from ISE 3.2.
	AccountNameAlias *string `pulumi:"accountNameAlias"`
	// Requires the user to change the password - Default value: `true`
	ChangePassword *bool `pulumi:"changePassword"`
	// Key value map
	CustomAttributes *string `pulumi:"customAttributes"`
	// Description
	Description *string `pulumi:"description"`
	// Email address
	Email *string `pulumi:"email"`
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword *string `pulumi:"enablePassword"`
	// Whether the user is enabled/disabled
	Enabled *bool `pulumi:"enabled"`
	// First name of the internal user
	FirstName *string `pulumi:"firstName"`
	// Comma separated list of identity group IDs.
	IdentityGroups *string `pulumi:"identityGroups"`
	// Last name of the internal user
	LastName *string `pulumi:"lastName"`
	// The name of the internal user
	Name *string `pulumi:"name"`
	// The password of the internal user
	Password string `pulumi:"password"`
	// The ID store where the internal user's password is kept - Default value: `Internal Users`
	PasswordIdStore *string `pulumi:"passwordIdStore"`
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
	// field is only supported from ISE 3.2. - Default value: `false`
	PasswordNeverExpires *bool `pulumi:"passwordNeverExpires"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
	// from ISE 3.2.
	AccountNameAlias pulumi.StringPtrInput
	// Requires the user to change the password - Default value: `true`
	ChangePassword pulumi.BoolPtrInput
	// Key value map
	CustomAttributes pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Email address
	Email pulumi.StringPtrInput
	// This field is added in ISE 2.0 to support TACACS+
	EnablePassword pulumi.StringPtrInput
	// Whether the user is enabled/disabled
	Enabled pulumi.BoolPtrInput
	// First name of the internal user
	FirstName pulumi.StringPtrInput
	// Comma separated list of identity group IDs.
	IdentityGroups pulumi.StringPtrInput
	// Last name of the internal user
	LastName pulumi.StringPtrInput
	// The name of the internal user
	Name pulumi.StringPtrInput
	// The password of the internal user
	Password pulumi.StringInput
	// The ID store where the internal user's password is kept - Default value: `Internal Users`
	PasswordIdStore pulumi.StringPtrInput
	// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
	// field is only supported from ISE 3.2. - Default value: `false`
	PasswordNeverExpires pulumi.BoolPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The Account Name Alias will be used to send email notifications about password expiration. This field is only supported
// from ISE 3.2.
func (o UserOutput) AccountNameAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.AccountNameAlias }).(pulumi.StringPtrOutput)
}

// Requires the user to change the password - Default value: `true`
func (o UserOutput) ChangePassword() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.ChangePassword }).(pulumi.BoolOutput)
}

// Key value map
func (o UserOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CustomAttributes }).(pulumi.StringPtrOutput)
}

// Description
func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Email address
func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// This field is added in ISE 2.0 to support TACACS+
func (o UserOutput) EnablePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.EnablePassword }).(pulumi.StringPtrOutput)
}

// Whether the user is enabled/disabled
func (o UserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// First name of the internal user
func (o UserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Comma separated list of identity group IDs.
func (o UserOutput) IdentityGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.IdentityGroups }).(pulumi.StringPtrOutput)
}

// Last name of the internal user
func (o UserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// The name of the internal user
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the internal user
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The ID store where the internal user's password is kept - Default value: `Internal Users`
func (o UserOutput) PasswordIdStore() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PasswordIdStore }).(pulumi.StringOutput)
}

// Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This
// field is only supported from ISE 3.2. - Default value: `false`
func (o UserOutput) PasswordNeverExpires() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.PasswordNeverExpires }).(pulumi.BoolOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
