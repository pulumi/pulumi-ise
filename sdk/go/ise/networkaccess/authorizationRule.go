// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccess

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Network Access Authorization Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/networkaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkaccess.NewAuthorizationRule(ctx, "example", &networkaccess.AuthorizationRuleArgs{
//				PolicySetId:             pulumi.String("d82952cb-b901-4b09-b363-5ebf39bdbaf9"),
//				Name:                    pulumi.String("Rule1"),
//				Default:                 pulumi.Bool(false),
//				Rank:                    pulumi.Int(0),
//				State:                   pulumi.String("enabled"),
//				ConditionType:           pulumi.String("ConditionAttributes"),
//				ConditionIsNegate:       pulumi.Bool(false),
//				ConditionAttributeName:  pulumi.String("Location"),
//				ConditionAttributeValue: pulumi.String("All Locations"),
//				ConditionDictionaryName: pulumi.String("DEVICE"),
//				ConditionOperator:       pulumi.String("equals"),
//				Profiles: pulumi.StringArray{
//					pulumi.String("PermitAccess"),
//				},
//				SecurityGroup: pulumi.String("BYOD"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import ise:networkaccess/authorizationRule:AuthorizationRule example "76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AuthorizationRule struct {
	pulumi.CustomResourceState

	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationRuleChildrenArrayOutput `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrOutput `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrOutput `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrOutput `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrOutput `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId pulumi.StringPtrOutput `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrOutput `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrOutput `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrOutput `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy set ID
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles pulumi.StringArrayOutput `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrOutput `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationRule(ctx *pulumi.Context,
	name string, args *AuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicySetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationRule
	err := ctx.RegisterResource("ise:networkaccess/authorizationRule:AuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationRule gets an existing AuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationRuleState, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	var resource AuthorizationRule
	err := ctx.ReadResource("ise:networkaccess/authorizationRule:AuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationRule resources.
type authorizationRuleState struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AuthorizationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId *string `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup *string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

type AuthorizationRuleState struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringPtrInput
	// The authorization profile(s)
	Profiles pulumi.StringArrayInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrInput
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationRuleState)(nil)).Elem()
}

type authorizationRuleArgs struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []AuthorizationRuleChildren `pulumi:"childrens"`
	// Dictionary attribute name
	ConditionAttributeName *string `pulumi:"conditionAttributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue *string `pulumi:"conditionAttributeValue"`
	// Dictionary name
	ConditionDictionaryName *string `pulumi:"conditionDictionaryName"`
	// Dictionary value
	ConditionDictionaryValue *string `pulumi:"conditionDictionaryValue"`
	// UUID for condition
	ConditionId *string `pulumi:"conditionId"`
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate *bool `pulumi:"conditionIsNegate"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator *string `pulumi:"conditionOperator"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType *string `pulumi:"conditionType"`
	// Indicates if this rule is the default one
	Default *bool `pulumi:"default"`
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name *string `pulumi:"name"`
	// Policy set ID
	PolicySetId string `pulumi:"policySetId"`
	// The authorization profile(s)
	Profiles []string `pulumi:"profiles"`
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank *int `pulumi:"rank"`
	// Security group used in authorization policies
	SecurityGroup *string `pulumi:"securityGroup"`
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a AuthorizationRule resource.
type AuthorizationRuleArgs struct {
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens AuthorizationRuleChildrenArrayInput
	// Dictionary attribute name
	ConditionAttributeName pulumi.StringPtrInput
	// Attribute value for condition. Value type is specified in dictionary object.
	ConditionAttributeValue pulumi.StringPtrInput
	// Dictionary name
	ConditionDictionaryName pulumi.StringPtrInput
	// Dictionary value
	ConditionDictionaryValue pulumi.StringPtrInput
	// UUID for condition
	ConditionId pulumi.StringPtrInput
	// Indicates whereas this condition is in negate mode
	ConditionIsNegate pulumi.BoolPtrInput
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	ConditionOperator pulumi.StringPtrInput
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringPtrInput
	// Indicates if this rule is the default one
	Default pulumi.BoolPtrInput
	// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
	Name pulumi.StringPtrInput
	// Policy set ID
	PolicySetId pulumi.StringInput
	// The authorization profile(s)
	Profiles pulumi.StringArrayInput
	// The rank (priority) in relation to other rules. Lower rank is higher priority.
	Rank pulumi.IntPtrInput
	// Security group used in authorization policies
	SecurityGroup pulumi.StringPtrInput
	// The state that the rule is in. A disabled rule cannot be matched.
	//   - Choices: `disabled`, `enabled`, `monitor`
	State pulumi.StringPtrInput
}

func (AuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationRuleArgs)(nil)).Elem()
}

type AuthorizationRuleInput interface {
	pulumi.Input

	ToAuthorizationRuleOutput() AuthorizationRuleOutput
	ToAuthorizationRuleOutputWithContext(ctx context.Context) AuthorizationRuleOutput
}

func (*AuthorizationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRule)(nil)).Elem()
}

func (i *AuthorizationRule) ToAuthorizationRuleOutput() AuthorizationRuleOutput {
	return i.ToAuthorizationRuleOutputWithContext(context.Background())
}

func (i *AuthorizationRule) ToAuthorizationRuleOutputWithContext(ctx context.Context) AuthorizationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleOutput)
}

// AuthorizationRuleArrayInput is an input type that accepts AuthorizationRuleArray and AuthorizationRuleArrayOutput values.
// You can construct a concrete instance of `AuthorizationRuleArrayInput` via:
//
//	AuthorizationRuleArray{ AuthorizationRuleArgs{...} }
type AuthorizationRuleArrayInput interface {
	pulumi.Input

	ToAuthorizationRuleArrayOutput() AuthorizationRuleArrayOutput
	ToAuthorizationRuleArrayOutputWithContext(context.Context) AuthorizationRuleArrayOutput
}

type AuthorizationRuleArray []AuthorizationRuleInput

func (AuthorizationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationRule)(nil)).Elem()
}

func (i AuthorizationRuleArray) ToAuthorizationRuleArrayOutput() AuthorizationRuleArrayOutput {
	return i.ToAuthorizationRuleArrayOutputWithContext(context.Background())
}

func (i AuthorizationRuleArray) ToAuthorizationRuleArrayOutputWithContext(ctx context.Context) AuthorizationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleArrayOutput)
}

// AuthorizationRuleMapInput is an input type that accepts AuthorizationRuleMap and AuthorizationRuleMapOutput values.
// You can construct a concrete instance of `AuthorizationRuleMapInput` via:
//
//	AuthorizationRuleMap{ "key": AuthorizationRuleArgs{...} }
type AuthorizationRuleMapInput interface {
	pulumi.Input

	ToAuthorizationRuleMapOutput() AuthorizationRuleMapOutput
	ToAuthorizationRuleMapOutputWithContext(context.Context) AuthorizationRuleMapOutput
}

type AuthorizationRuleMap map[string]AuthorizationRuleInput

func (AuthorizationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationRule)(nil)).Elem()
}

func (i AuthorizationRuleMap) ToAuthorizationRuleMapOutput() AuthorizationRuleMapOutput {
	return i.ToAuthorizationRuleMapOutputWithContext(context.Background())
}

func (i AuthorizationRuleMap) ToAuthorizationRuleMapOutputWithContext(ctx context.Context) AuthorizationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleMapOutput)
}

type AuthorizationRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRule)(nil)).Elem()
}

func (o AuthorizationRuleOutput) ToAuthorizationRuleOutput() AuthorizationRuleOutput {
	return o
}

func (o AuthorizationRuleOutput) ToAuthorizationRuleOutputWithContext(ctx context.Context) AuthorizationRuleOutput {
	return o
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o AuthorizationRuleOutput) Childrens() AuthorizationRuleChildrenArrayOutput {
	return o.ApplyT(func(v *AuthorizationRule) AuthorizationRuleChildrenArrayOutput { return v.Childrens }).(AuthorizationRuleChildrenArrayOutput)
}

// Dictionary attribute name
func (o AuthorizationRuleOutput) ConditionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionAttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o AuthorizationRuleOutput) ConditionAttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionAttributeValue }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o AuthorizationRuleOutput) ConditionDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionDictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o AuthorizationRuleOutput) ConditionDictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionDictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o AuthorizationRuleOutput) ConditionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionId }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o AuthorizationRuleOutput) ConditionIsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.BoolPtrOutput { return v.ConditionIsNegate }).(pulumi.BoolPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o AuthorizationRuleOutput) ConditionOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionOperator }).(pulumi.StringPtrOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
func (o AuthorizationRuleOutput) ConditionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.ConditionType }).(pulumi.StringPtrOutput)
}

// Indicates if this rule is the default one
func (o AuthorizationRuleOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
func (o AuthorizationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy set ID
func (o AuthorizationRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

// The authorization profile(s)
func (o AuthorizationRuleOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringArrayOutput { return v.Profiles }).(pulumi.StringArrayOutput)
}

// The rank (priority) in relation to other rules. Lower rank is higher priority.
func (o AuthorizationRuleOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// Security group used in authorization policies
func (o AuthorizationRuleOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

// The state that the rule is in. A disabled rule cannot be matched.
//   - Choices: `disabled`, `enabled`, `monitor`
func (o AuthorizationRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationRule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type AuthorizationRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationRule)(nil)).Elem()
}

func (o AuthorizationRuleArrayOutput) ToAuthorizationRuleArrayOutput() AuthorizationRuleArrayOutput {
	return o
}

func (o AuthorizationRuleArrayOutput) ToAuthorizationRuleArrayOutputWithContext(ctx context.Context) AuthorizationRuleArrayOutput {
	return o
}

func (o AuthorizationRuleArrayOutput) Index(i pulumi.IntInput) AuthorizationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationRule {
		return vs[0].([]*AuthorizationRule)[vs[1].(int)]
	}).(AuthorizationRuleOutput)
}

type AuthorizationRuleMapOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationRule)(nil)).Elem()
}

func (o AuthorizationRuleMapOutput) ToAuthorizationRuleMapOutput() AuthorizationRuleMapOutput {
	return o
}

func (o AuthorizationRuleMapOutput) ToAuthorizationRuleMapOutputWithContext(ctx context.Context) AuthorizationRuleMapOutput {
	return o
}

func (o AuthorizationRuleMapOutput) MapIndex(k pulumi.StringInput) AuthorizationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationRule {
		return vs[0].(map[string]*AuthorizationRule)[vs[1].(string)]
	}).(AuthorizationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationRuleInput)(nil)).Elem(), &AuthorizationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationRuleArrayInput)(nil)).Elem(), AuthorizationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationRuleMapInput)(nil)).Elem(), AuthorizationRuleMap{})
	pulumi.RegisterOutputType(AuthorizationRuleOutput{})
	pulumi.RegisterOutputType(AuthorizationRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationRuleMapOutput{})
}
