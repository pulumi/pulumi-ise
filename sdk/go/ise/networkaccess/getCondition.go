// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Network Access Condition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/networkaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkaccess.LookupCondition(ctx, &networkaccess.LookupConditionArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCondition(ctx *pulumi.Context, args *LookupConditionArgs, opts ...pulumi.InvokeOption) (*LookupConditionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConditionResult
	err := ctx.Invoke("ise:networkaccess/getCondition:getCondition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCondition.
type LookupConditionArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// Condition name
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCondition.
type LookupConditionResult struct {
	// Dictionary attribute name
	AttributeName string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue string `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
	Childrens []GetConditionChildren `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Condition description
	Description string `pulumi:"description"`
	// Dictionary name
	DictionaryName string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue string `pulumi:"dictionaryValue"`
	// The id of the object
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Condition name
	Name string `pulumi:"name"`
	// Equality operator
	Operator string `pulumi:"operator"`
}

func LookupConditionOutput(ctx *pulumi.Context, args LookupConditionOutputArgs, opts ...pulumi.InvokeOption) LookupConditionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConditionResult, error) {
			args := v.(LookupConditionArgs)
			r, err := LookupCondition(ctx, &args, opts...)
			var s LookupConditionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConditionResultOutput)
}

// A collection of arguments for invoking getCondition.
type LookupConditionOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Condition name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupConditionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConditionArgs)(nil)).Elem()
}

// A collection of values returned by getCondition.
type LookupConditionResultOutput struct{ *pulumi.OutputState }

func (LookupConditionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConditionResult)(nil)).Elem()
}

func (o LookupConditionResultOutput) ToLookupConditionResultOutput() LookupConditionResultOutput {
	return o
}

func (o LookupConditionResultOutput) ToLookupConditionResultOutputWithContext(ctx context.Context) LookupConditionResultOutput {
	return o
}

// Dictionary attribute name
func (o LookupConditionResultOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o LookupConditionResultOutput) AttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.AttributeValue }).(pulumi.StringOutput)
}

// List of child conditions. `conditionType` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.
func (o LookupConditionResultOutput) Childrens() GetConditionChildrenArrayOutput {
	return o.ApplyT(func(v LookupConditionResult) []GetConditionChildren { return v.Childrens }).(GetConditionChildrenArrayOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o LookupConditionResultOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Condition description
func (o LookupConditionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Dictionary name
func (o LookupConditionResultOutput) DictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.DictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o LookupConditionResultOutput) DictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.DictionaryValue }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupConditionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o LookupConditionResultOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConditionResult) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Condition name
func (o LookupConditionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Equality operator
func (o LookupConditionResultOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConditionResult) string { return v.Operator }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConditionResultOutput{})
}
