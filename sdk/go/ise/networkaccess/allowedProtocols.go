// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccess

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/networkaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkaccess.NewAllowedProtocols(ctx, "example", &networkaccess.AllowedProtocolsArgs{
//				Name:                                       pulumi.String("Protocols1"),
//				Description:                                pulumi.String("My allowed protocols"),
//				ProcessHostLookup:                          pulumi.Bool(true),
//				AllowPapAscii:                              pulumi.Bool(true),
//				AllowChap:                                  pulumi.Bool(true),
//				AllowMsChapV1:                              pulumi.Bool(true),
//				AllowMsChapV2:                              pulumi.Bool(true),
//				AllowEapMd5:                                pulumi.Bool(true),
//				AllowLeap:                                  pulumi.Bool(true),
//				AllowEapTls:                                pulumi.Bool(true),
//				AllowEapTtls:                               pulumi.Bool(true),
//				AllowEapFast:                               pulumi.Bool(true),
//				AllowPeap:                                  pulumi.Bool(true),
//				AllowTeap:                                  pulumi.Bool(true),
//				AllowPreferredEapProtocol:                  pulumi.Bool(true),
//				PreferredEapProtocol:                       pulumi.String("LEAP"),
//				EapTlsLBit:                                 pulumi.Bool(true),
//				AllowWeakCiphersForEap:                     pulumi.Bool(true),
//				RequireMessageAuth:                         pulumi.Bool(true),
//				EapTlsAllowAuthOfExpiredCerts:              pulumi.Bool(true),
//				EapTlsEnableStatelessSessionResume:         pulumi.Bool(true),
//				EapTlsSessionTicketTtl:                     pulumi.Int(5),
//				EapTlsSessionTicketTtlUnit:                 pulumi.String("DAYS"),
//				EapTlsSessionTicketPercentage:              pulumi.Int(5),
//				PeapAllowPeapEapMsChapV2:                   pulumi.Bool(true),
//				PeapAllowPeapEapMsChapV2PwdChange:          pulumi.Bool(true),
//				PeapAllowPeapEapMsChapV2PwdChangeRetries:   pulumi.Int(3),
//				PeapAllowPeapEapGtc:                        pulumi.Bool(true),
//				PeapAllowPeapEapGtcPwdChange:               pulumi.Bool(true),
//				PeapAllowPeapEapGtcPwdChangeRetries:        pulumi.Int(3),
//				PeapAllowPeapEapTls:                        pulumi.Bool(true),
//				PeapAllowPeapEapTlsAuthOfExpiredCerts:      pulumi.Bool(true),
//				RequireCryptobinding:                       pulumi.Bool(true),
//				PeapPeapV0:                                 pulumi.Bool(true),
//				EapTtlsPapAscii:                            pulumi.Bool(true),
//				EapTtlsChap:                                pulumi.Bool(true),
//				EapTtlsMsChapV1:                            pulumi.Bool(true),
//				EapTtlsMsChapV2:                            pulumi.Bool(true),
//				EapTtlsEapMd5:                              pulumi.Bool(true),
//				EapTtlsEapMsChapV2:                         pulumi.Bool(true),
//				EapTtlsEapMsChapV2PwdChange:                pulumi.Bool(true),
//				EapTtlsEapMsChapV2PwdChangeRetries:         pulumi.Int(3),
//				EapFastEapMsChapV2:                         pulumi.Bool(true),
//				EapFastEapMsChapV2PwdChange:                pulumi.Bool(true),
//				EapFastEapMsChapV2PwdChangeRetries:         pulumi.Int(3),
//				EapFastEapGtc:                              pulumi.Bool(true),
//				EapFastEapGtcPwdChange:                     pulumi.Bool(true),
//				EapFastEapGtcPwdChangeRetries:              pulumi.Int(3),
//				EapFastEapTls:                              pulumi.Bool(true),
//				EapFastEapTlsAuthOfExpiredCerts:            pulumi.Bool(true),
//				EapFastEnableEapChaining:                   pulumi.Bool(true),
//				EapFastUsePacs:                             pulumi.Bool(true),
//				EapFastPacsTunnelPacTtl:                    pulumi.Int(5),
//				EapFastPacsTunnelPacTtlUnit:                pulumi.String("DAYS"),
//				EapFastPacsUseProactivePacUpdatePercentage: pulumi.Int(5),
//				EapFastPacsAllowAnonymousProvisioning:      pulumi.Bool(true),
//				EapFastPacsAllowAuthenticatedProvisioning:  pulumi.Bool(true),
//				EapFastPacsServerReturns:                   pulumi.Bool(true),
//				EapFastPacsAllowClientCert:                 pulumi.Bool(true),
//				EapFastPacsAllowMachineAuthentication:      pulumi.Bool(true),
//				EapFastPacsMachinePacTtl:                   pulumi.Int(5),
//				EapFastPacsMachinePacTtlUnit:               pulumi.String("DAYS"),
//				EapFastPacsStatelessSessionResume:          pulumi.Bool(true),
//				EapFastPacsAuthorizationPacTtl:             pulumi.Int(5),
//				EapFastPacsAuthorizationPacTtlUnit:         pulumi.String("HOURS"),
//				TeapEapMsChapV2:                            pulumi.Bool(true),
//				TeapEapMsChapV2PwdChange:                   pulumi.Bool(true),
//				TeapEapMsChapV2PwdChangeRetries:            pulumi.Int(3),
//				TeapEapTls:                                 pulumi.Bool(true),
//				TeapEapTlsAuthOfExpiredCerts:               pulumi.Bool(true),
//				TeapEapAcceptClientCertDuringTunnelEst:     pulumi.Bool(true),
//				TeapEapChaining:                            pulumi.Bool(true),
//				TeapDowngradeMsk:                           pulumi.Bool(true),
//				TeapRequestBasicPwdAuth:                    pulumi.Bool(true),
//				Allow5g:                                    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:networkaccess/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type AllowedProtocols struct {
	pulumi.CustomResourceState

	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g pulumi.BoolPtrOutput `pulumi:"allow5g"`
	// Allow CHAP
	AllowChap pulumi.BoolOutput `pulumi:"allowChap"`
	// Allow EAP Fast
	AllowEapFast pulumi.BoolOutput `pulumi:"allowEapFast"`
	// Allow EAP MD5
	AllowEapMd5 pulumi.BoolOutput `pulumi:"allowEapMd5"`
	// Allow EAP TLS
	AllowEapTls pulumi.BoolOutput `pulumi:"allowEapTls"`
	// Allow EAP TTLS
	AllowEapTtls pulumi.BoolOutput `pulumi:"allowEapTtls"`
	// Allow LEAP
	AllowLeap pulumi.BoolOutput `pulumi:"allowLeap"`
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolOutput `pulumi:"allowMsChapV1"`
	// Allow MS CHAP v2
	AllowMsChapV2 pulumi.BoolOutput `pulumi:"allowMsChapV2"`
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolOutput `pulumi:"allowPapAscii"`
	// Allow PEAP
	AllowPeap pulumi.BoolOutput `pulumi:"allowPeap"`
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol pulumi.BoolOutput `pulumi:"allowPreferredEapProtocol"`
	// Allow TEAP
	AllowTeap pulumi.BoolOutput `pulumi:"allowTeap"`
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap pulumi.BoolOutput `pulumi:"allowWeakCiphersForEap"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert pulumi.BoolPtrOutput `pulumi:"eapFastAcceptClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication pulumi.BoolPtrOutput `pulumi:"eapFastAllowMachineAuthentication"`
	// Allow EAP GTC
	EapFastEapGtc pulumi.BoolPtrOutput `pulumi:"eapFastEapGtc"`
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange pulumi.BoolPtrOutput `pulumi:"eapFastEapGtcPwdChange"`
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
	EapFastEapGtcPwdChangeRetries pulumi.IntPtrOutput `pulumi:"eapFastEapGtcPwdChangeRetries"`
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 pulumi.BoolPtrOutput `pulumi:"eapFastEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange pulumi.BoolPtrOutput `pulumi:"eapFastEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
	EapFastEapMsChapV2PwdChangeRetries pulumi.IntPtrOutput `pulumi:"eapFastEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	EapFastEapTls pulumi.BoolPtrOutput `pulumi:"eapFastEapTls"`
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts pulumi.BoolPtrOutput `pulumi:"eapFastEapTlsAuthOfExpiredCerts"`
	// Enable EAP chaining
	EapFastEnableEapChaining pulumi.BoolPtrOutput `pulumi:"eapFastEnableEapChaining"`
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning pulumi.BoolPtrOutput `pulumi:"eapFastPacsAllowAnonymousProvisioning"`
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning pulumi.BoolPtrOutput `pulumi:"eapFastPacsAllowAuthenticatedProvisioning"`
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert pulumi.BoolPtrOutput `pulumi:"eapFastPacsAllowClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication pulumi.BoolPtrOutput `pulumi:"eapFastPacsAllowMachineAuthentication"`
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl pulumi.IntPtrOutput `pulumi:"eapFastPacsAuthorizationPacTtl"`
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsAuthorizationPacTtlUnit pulumi.StringPtrOutput `pulumi:"eapFastPacsAuthorizationPacTtlUnit"`
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl pulumi.IntPtrOutput `pulumi:"eapFastPacsMachinePacTtl"`
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsMachinePacTtlUnit pulumi.StringPtrOutput `pulumi:"eapFastPacsMachinePacTtlUnit"`
	// Server returns access accept after authenticated provisioning. Is required only if
	// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns pulumi.BoolPtrOutput `pulumi:"eapFastPacsServerReturns"`
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume pulumi.BoolPtrOutput `pulumi:"eapFastPacsStatelessSessionResume"`
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl pulumi.IntPtrOutput `pulumi:"eapFastPacsTunnelPacTtl"`
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
	// `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsTunnelPacTtlUnit pulumi.StringPtrOutput `pulumi:"eapFastPacsTunnelPacTtlUnit"`
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
	EapFastPacsUseProactivePacUpdatePercentage pulumi.IntPtrOutput `pulumi:"eapFastPacsUseProactivePacUpdatePercentage"`
	// Use PACs
	EapFastUsePacs pulumi.BoolPtrOutput `pulumi:"eapFastUsePacs"`
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts pulumi.BoolPtrOutput `pulumi:"eapTlsAllowAuthOfExpiredCerts"`
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume pulumi.BoolPtrOutput `pulumi:"eapTlsEnableStatelessSessionResume"`
	// EAP TLS L-Bit
	EapTlsLBit pulumi.BoolOutput `pulumi:"eapTlsLBit"`
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
	EapTlsSessionTicketPercentage pulumi.IntPtrOutput `pulumi:"eapTlsSessionTicketPercentage"`
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl pulumi.IntPtrOutput `pulumi:"eapTlsSessionTicketTtl"`
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapTlsSessionTicketTtlUnit pulumi.StringPtrOutput `pulumi:"eapTlsSessionTicketTtlUnit"`
	// Allow CHAP
	EapTtlsChap pulumi.BoolPtrOutput `pulumi:"eapTtlsChap"`
	// Allow EAP MD5
	EapTtlsEapMd5 pulumi.BoolPtrOutput `pulumi:"eapTtlsEapMd5"`
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 pulumi.BoolPtrOutput `pulumi:"eapTtlsEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange pulumi.BoolPtrOutput `pulumi:"eapTtlsEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
	EapTtlsEapMsChapV2PwdChangeRetries pulumi.IntPtrOutput `pulumi:"eapTtlsEapMsChapV2PwdChangeRetries"`
	// Allow MS CHAP v1
	EapTtlsMsChapV1 pulumi.BoolPtrOutput `pulumi:"eapTtlsMsChapV1"`
	// Allow MS CHAP v2
	EapTtlsMsChapV2 pulumi.BoolPtrOutput `pulumi:"eapTtlsMsChapV2"`
	// Allow PAP ASCII
	EapTtlsPapAscii pulumi.BoolPtrOutput `pulumi:"eapTtlsPapAscii"`
	// The name of the allowed protocols
	Name pulumi.StringOutput `pulumi:"name"`
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapGtc"`
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapGtcPwdChange"`
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
	PeapAllowPeapEapGtcPwdChangeRetries pulumi.IntPtrOutput `pulumi:"peapAllowPeapEapGtcPwdChangeRetries"`
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapMsChapV2"`
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapMsChapV2PwdChange"`
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
	// `0`-`3`
	PeapAllowPeapEapMsChapV2PwdChangeRetries pulumi.IntPtrOutput `pulumi:"peapAllowPeapEapMsChapV2PwdChangeRetries"`
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapTls"`
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrOutput `pulumi:"peapAllowPeapEapTlsAuthOfExpiredCerts"`
	// Allow PEAP v0
	PeapPeapV0 pulumi.BoolPtrOutput `pulumi:"peapPeapV0"`
	// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
	PreferredEapProtocol pulumi.StringPtrOutput `pulumi:"preferredEapProtocol"`
	// Process host lookup
	ProcessHostLookup pulumi.BoolOutput `pulumi:"processHostLookup"`
	// Require cryptobinding
	RequireCryptobinding pulumi.BoolPtrOutput `pulumi:"requireCryptobinding"`
	// Require message authentication
	RequireMessageAuth pulumi.BoolOutput `pulumi:"requireMessageAuth"`
	// Allow downgrade to MSK
	TeapDowngradeMsk pulumi.BoolPtrOutput `pulumi:"teapDowngradeMsk"`
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst pulumi.BoolPtrOutput `pulumi:"teapEapAcceptClientCertDuringTunnelEst"`
	// Allow EAP chaining
	TeapEapChaining pulumi.BoolPtrOutput `pulumi:"teapEapChaining"`
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 pulumi.BoolPtrOutput `pulumi:"teapEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange pulumi.BoolPtrOutput `pulumi:"teapEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
	TeapEapMsChapV2PwdChangeRetries pulumi.IntPtrOutput `pulumi:"teapEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	TeapEapTls pulumi.BoolPtrOutput `pulumi:"teapEapTls"`
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrOutput `pulumi:"teapEapTlsAuthOfExpiredCerts"`
	// Request basic password authentication
	TeapRequestBasicPwdAuth pulumi.BoolPtrOutput `pulumi:"teapRequestBasicPwdAuth"`
}

// NewAllowedProtocols registers a new resource with the given unique name, arguments, and options.
func NewAllowedProtocols(ctx *pulumi.Context,
	name string, args *AllowedProtocolsArgs, opts ...pulumi.ResourceOption) (*AllowedProtocols, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowChap == nil {
		return nil, errors.New("invalid value for required argument 'AllowChap'")
	}
	if args.AllowEapFast == nil {
		return nil, errors.New("invalid value for required argument 'AllowEapFast'")
	}
	if args.AllowEapMd5 == nil {
		return nil, errors.New("invalid value for required argument 'AllowEapMd5'")
	}
	if args.AllowEapTls == nil {
		return nil, errors.New("invalid value for required argument 'AllowEapTls'")
	}
	if args.AllowEapTtls == nil {
		return nil, errors.New("invalid value for required argument 'AllowEapTtls'")
	}
	if args.AllowLeap == nil {
		return nil, errors.New("invalid value for required argument 'AllowLeap'")
	}
	if args.AllowMsChapV1 == nil {
		return nil, errors.New("invalid value for required argument 'AllowMsChapV1'")
	}
	if args.AllowMsChapV2 == nil {
		return nil, errors.New("invalid value for required argument 'AllowMsChapV2'")
	}
	if args.AllowPapAscii == nil {
		return nil, errors.New("invalid value for required argument 'AllowPapAscii'")
	}
	if args.AllowPeap == nil {
		return nil, errors.New("invalid value for required argument 'AllowPeap'")
	}
	if args.AllowPreferredEapProtocol == nil {
		return nil, errors.New("invalid value for required argument 'AllowPreferredEapProtocol'")
	}
	if args.AllowTeap == nil {
		return nil, errors.New("invalid value for required argument 'AllowTeap'")
	}
	if args.AllowWeakCiphersForEap == nil {
		return nil, errors.New("invalid value for required argument 'AllowWeakCiphersForEap'")
	}
	if args.EapTlsLBit == nil {
		return nil, errors.New("invalid value for required argument 'EapTlsLBit'")
	}
	if args.ProcessHostLookup == nil {
		return nil, errors.New("invalid value for required argument 'ProcessHostLookup'")
	}
	if args.RequireMessageAuth == nil {
		return nil, errors.New("invalid value for required argument 'RequireMessageAuth'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AllowedProtocols
	err := ctx.RegisterResource("ise:networkaccess/allowedProtocols:AllowedProtocols", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAllowedProtocols gets an existing AllowedProtocols resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAllowedProtocols(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AllowedProtocolsState, opts ...pulumi.ResourceOption) (*AllowedProtocols, error) {
	var resource AllowedProtocols
	err := ctx.ReadResource("ise:networkaccess/allowedProtocols:AllowedProtocols", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AllowedProtocols resources.
type allowedProtocolsState struct {
	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g *bool `pulumi:"allow5g"`
	// Allow CHAP
	AllowChap *bool `pulumi:"allowChap"`
	// Allow EAP Fast
	AllowEapFast *bool `pulumi:"allowEapFast"`
	// Allow EAP MD5
	AllowEapMd5 *bool `pulumi:"allowEapMd5"`
	// Allow EAP TLS
	AllowEapTls *bool `pulumi:"allowEapTls"`
	// Allow EAP TTLS
	AllowEapTtls *bool `pulumi:"allowEapTtls"`
	// Allow LEAP
	AllowLeap *bool `pulumi:"allowLeap"`
	// Allow MS CHAP v1
	AllowMsChapV1 *bool `pulumi:"allowMsChapV1"`
	// Allow MS CHAP v2
	AllowMsChapV2 *bool `pulumi:"allowMsChapV2"`
	// Allow PAP ASCII
	AllowPapAscii *bool `pulumi:"allowPapAscii"`
	// Allow PEAP
	AllowPeap *bool `pulumi:"allowPeap"`
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol *bool `pulumi:"allowPreferredEapProtocol"`
	// Allow TEAP
	AllowTeap *bool `pulumi:"allowTeap"`
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap *bool `pulumi:"allowWeakCiphersForEap"`
	// Description
	Description *string `pulumi:"description"`
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert *bool `pulumi:"eapFastAcceptClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication *bool `pulumi:"eapFastAllowMachineAuthentication"`
	// Allow EAP GTC
	EapFastEapGtc *bool `pulumi:"eapFastEapGtc"`
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange *bool `pulumi:"eapFastEapGtcPwdChange"`
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
	EapFastEapGtcPwdChangeRetries *int `pulumi:"eapFastEapGtcPwdChangeRetries"`
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 *bool `pulumi:"eapFastEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange *bool `pulumi:"eapFastEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
	EapFastEapMsChapV2PwdChangeRetries *int `pulumi:"eapFastEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	EapFastEapTls *bool `pulumi:"eapFastEapTls"`
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts *bool `pulumi:"eapFastEapTlsAuthOfExpiredCerts"`
	// Enable EAP chaining
	EapFastEnableEapChaining *bool `pulumi:"eapFastEnableEapChaining"`
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning *bool `pulumi:"eapFastPacsAllowAnonymousProvisioning"`
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning *bool `pulumi:"eapFastPacsAllowAuthenticatedProvisioning"`
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert *bool `pulumi:"eapFastPacsAllowClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication *bool `pulumi:"eapFastPacsAllowMachineAuthentication"`
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl *int `pulumi:"eapFastPacsAuthorizationPacTtl"`
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsAuthorizationPacTtlUnit *string `pulumi:"eapFastPacsAuthorizationPacTtlUnit"`
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl *int `pulumi:"eapFastPacsMachinePacTtl"`
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsMachinePacTtlUnit *string `pulumi:"eapFastPacsMachinePacTtlUnit"`
	// Server returns access accept after authenticated provisioning. Is required only if
	// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns *bool `pulumi:"eapFastPacsServerReturns"`
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume *bool `pulumi:"eapFastPacsStatelessSessionResume"`
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl *int `pulumi:"eapFastPacsTunnelPacTtl"`
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
	// `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsTunnelPacTtlUnit *string `pulumi:"eapFastPacsTunnelPacTtlUnit"`
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
	EapFastPacsUseProactivePacUpdatePercentage *int `pulumi:"eapFastPacsUseProactivePacUpdatePercentage"`
	// Use PACs
	EapFastUsePacs *bool `pulumi:"eapFastUsePacs"`
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts *bool `pulumi:"eapTlsAllowAuthOfExpiredCerts"`
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume *bool `pulumi:"eapTlsEnableStatelessSessionResume"`
	// EAP TLS L-Bit
	EapTlsLBit *bool `pulumi:"eapTlsLBit"`
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
	EapTlsSessionTicketPercentage *int `pulumi:"eapTlsSessionTicketPercentage"`
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl *int `pulumi:"eapTlsSessionTicketTtl"`
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapTlsSessionTicketTtlUnit *string `pulumi:"eapTlsSessionTicketTtlUnit"`
	// Allow CHAP
	EapTtlsChap *bool `pulumi:"eapTtlsChap"`
	// Allow EAP MD5
	EapTtlsEapMd5 *bool `pulumi:"eapTtlsEapMd5"`
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 *bool `pulumi:"eapTtlsEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange *bool `pulumi:"eapTtlsEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
	EapTtlsEapMsChapV2PwdChangeRetries *int `pulumi:"eapTtlsEapMsChapV2PwdChangeRetries"`
	// Allow MS CHAP v1
	EapTtlsMsChapV1 *bool `pulumi:"eapTtlsMsChapV1"`
	// Allow MS CHAP v2
	EapTtlsMsChapV2 *bool `pulumi:"eapTtlsMsChapV2"`
	// Allow PAP ASCII
	EapTtlsPapAscii *bool `pulumi:"eapTtlsPapAscii"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc *bool `pulumi:"peapAllowPeapEapGtc"`
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange *bool `pulumi:"peapAllowPeapEapGtcPwdChange"`
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
	PeapAllowPeapEapGtcPwdChangeRetries *int `pulumi:"peapAllowPeapEapGtcPwdChangeRetries"`
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 *bool `pulumi:"peapAllowPeapEapMsChapV2"`
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange *bool `pulumi:"peapAllowPeapEapMsChapV2PwdChange"`
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
	// `0`-`3`
	PeapAllowPeapEapMsChapV2PwdChangeRetries *int `pulumi:"peapAllowPeapEapMsChapV2PwdChangeRetries"`
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls *bool `pulumi:"peapAllowPeapEapTls"`
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts *bool `pulumi:"peapAllowPeapEapTlsAuthOfExpiredCerts"`
	// Allow PEAP v0
	PeapPeapV0 *bool `pulumi:"peapPeapV0"`
	// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
	PreferredEapProtocol *string `pulumi:"preferredEapProtocol"`
	// Process host lookup
	ProcessHostLookup *bool `pulumi:"processHostLookup"`
	// Require cryptobinding
	RequireCryptobinding *bool `pulumi:"requireCryptobinding"`
	// Require message authentication
	RequireMessageAuth *bool `pulumi:"requireMessageAuth"`
	// Allow downgrade to MSK
	TeapDowngradeMsk *bool `pulumi:"teapDowngradeMsk"`
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst *bool `pulumi:"teapEapAcceptClientCertDuringTunnelEst"`
	// Allow EAP chaining
	TeapEapChaining *bool `pulumi:"teapEapChaining"`
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 *bool `pulumi:"teapEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange *bool `pulumi:"teapEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
	TeapEapMsChapV2PwdChangeRetries *int `pulumi:"teapEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	TeapEapTls *bool `pulumi:"teapEapTls"`
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts *bool `pulumi:"teapEapTlsAuthOfExpiredCerts"`
	// Request basic password authentication
	TeapRequestBasicPwdAuth *bool `pulumi:"teapRequestBasicPwdAuth"`
}

type AllowedProtocolsState struct {
	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g pulumi.BoolPtrInput
	// Allow CHAP
	AllowChap pulumi.BoolPtrInput
	// Allow EAP Fast
	AllowEapFast pulumi.BoolPtrInput
	// Allow EAP MD5
	AllowEapMd5 pulumi.BoolPtrInput
	// Allow EAP TLS
	AllowEapTls pulumi.BoolPtrInput
	// Allow EAP TTLS
	AllowEapTtls pulumi.BoolPtrInput
	// Allow LEAP
	AllowLeap pulumi.BoolPtrInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolPtrInput
	// Allow MS CHAP v2
	AllowMsChapV2 pulumi.BoolPtrInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolPtrInput
	// Allow PEAP
	AllowPeap pulumi.BoolPtrInput
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol pulumi.BoolPtrInput
	// Allow TEAP
	AllowTeap pulumi.BoolPtrInput
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap pulumi.BoolPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert pulumi.BoolPtrInput
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication pulumi.BoolPtrInput
	// Allow EAP GTC
	EapFastEapGtc pulumi.BoolPtrInput
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange pulumi.BoolPtrInput
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
	EapFastEapGtcPwdChangeRetries pulumi.IntPtrInput
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
	EapFastEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow EAP TLS
	EapFastEapTls pulumi.BoolPtrInput
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Enable EAP chaining
	EapFastEnableEapChaining pulumi.BoolPtrInput
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning pulumi.BoolPtrInput
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning pulumi.BoolPtrInput
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert pulumi.BoolPtrInput
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication pulumi.BoolPtrInput
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl pulumi.IntPtrInput
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsAuthorizationPacTtlUnit pulumi.StringPtrInput
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl pulumi.IntPtrInput
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsMachinePacTtlUnit pulumi.StringPtrInput
	// Server returns access accept after authenticated provisioning. Is required only if
	// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns pulumi.BoolPtrInput
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume pulumi.BoolPtrInput
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl pulumi.IntPtrInput
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
	// `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsTunnelPacTtlUnit pulumi.StringPtrInput
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
	EapFastPacsUseProactivePacUpdatePercentage pulumi.IntPtrInput
	// Use PACs
	EapFastUsePacs pulumi.BoolPtrInput
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts pulumi.BoolPtrInput
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume pulumi.BoolPtrInput
	// EAP TLS L-Bit
	EapTlsLBit pulumi.BoolPtrInput
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
	EapTlsSessionTicketPercentage pulumi.IntPtrInput
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl pulumi.IntPtrInput
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapTlsSessionTicketTtlUnit pulumi.StringPtrInput
	// Allow CHAP
	EapTtlsChap pulumi.BoolPtrInput
	// Allow EAP MD5
	EapTtlsEapMd5 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
	EapTtlsEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow MS CHAP v1
	EapTtlsMsChapV1 pulumi.BoolPtrInput
	// Allow MS CHAP v2
	EapTtlsMsChapV2 pulumi.BoolPtrInput
	// Allow PAP ASCII
	EapTtlsPapAscii pulumi.BoolPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc pulumi.BoolPtrInput
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange pulumi.BoolPtrInput
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
	PeapAllowPeapEapGtcPwdChangeRetries pulumi.IntPtrInput
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 pulumi.BoolPtrInput
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange pulumi.BoolPtrInput
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
	// `0`-`3`
	PeapAllowPeapEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls pulumi.BoolPtrInput
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Allow PEAP v0
	PeapPeapV0 pulumi.BoolPtrInput
	// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
	PreferredEapProtocol pulumi.StringPtrInput
	// Process host lookup
	ProcessHostLookup pulumi.BoolPtrInput
	// Require cryptobinding
	RequireCryptobinding pulumi.BoolPtrInput
	// Require message authentication
	RequireMessageAuth pulumi.BoolPtrInput
	// Allow downgrade to MSK
	TeapDowngradeMsk pulumi.BoolPtrInput
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst pulumi.BoolPtrInput
	// Allow EAP chaining
	TeapEapChaining pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
	TeapEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow EAP TLS
	TeapEapTls pulumi.BoolPtrInput
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Request basic password authentication
	TeapRequestBasicPwdAuth pulumi.BoolPtrInput
}

func (AllowedProtocolsState) ElementType() reflect.Type {
	return reflect.TypeOf((*allowedProtocolsState)(nil)).Elem()
}

type allowedProtocolsArgs struct {
	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g *bool `pulumi:"allow5g"`
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow EAP Fast
	AllowEapFast bool `pulumi:"allowEapFast"`
	// Allow EAP MD5
	AllowEapMd5 bool `pulumi:"allowEapMd5"`
	// Allow EAP TLS
	AllowEapTls bool `pulumi:"allowEapTls"`
	// Allow EAP TTLS
	AllowEapTtls bool `pulumi:"allowEapTtls"`
	// Allow LEAP
	AllowLeap bool `pulumi:"allowLeap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow MS CHAP v2
	AllowMsChapV2 bool `pulumi:"allowMsChapV2"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Allow PEAP
	AllowPeap bool `pulumi:"allowPeap"`
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol bool `pulumi:"allowPreferredEapProtocol"`
	// Allow TEAP
	AllowTeap bool `pulumi:"allowTeap"`
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap bool `pulumi:"allowWeakCiphersForEap"`
	// Description
	Description *string `pulumi:"description"`
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert *bool `pulumi:"eapFastAcceptClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication *bool `pulumi:"eapFastAllowMachineAuthentication"`
	// Allow EAP GTC
	EapFastEapGtc *bool `pulumi:"eapFastEapGtc"`
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange *bool `pulumi:"eapFastEapGtcPwdChange"`
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
	EapFastEapGtcPwdChangeRetries *int `pulumi:"eapFastEapGtcPwdChangeRetries"`
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 *bool `pulumi:"eapFastEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange *bool `pulumi:"eapFastEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
	EapFastEapMsChapV2PwdChangeRetries *int `pulumi:"eapFastEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	EapFastEapTls *bool `pulumi:"eapFastEapTls"`
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts *bool `pulumi:"eapFastEapTlsAuthOfExpiredCerts"`
	// Enable EAP chaining
	EapFastEnableEapChaining *bool `pulumi:"eapFastEnableEapChaining"`
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning *bool `pulumi:"eapFastPacsAllowAnonymousProvisioning"`
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning *bool `pulumi:"eapFastPacsAllowAuthenticatedProvisioning"`
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert *bool `pulumi:"eapFastPacsAllowClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication *bool `pulumi:"eapFastPacsAllowMachineAuthentication"`
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl *int `pulumi:"eapFastPacsAuthorizationPacTtl"`
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsAuthorizationPacTtlUnit *string `pulumi:"eapFastPacsAuthorizationPacTtlUnit"`
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl *int `pulumi:"eapFastPacsMachinePacTtl"`
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsMachinePacTtlUnit *string `pulumi:"eapFastPacsMachinePacTtlUnit"`
	// Server returns access accept after authenticated provisioning. Is required only if
	// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns *bool `pulumi:"eapFastPacsServerReturns"`
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume *bool `pulumi:"eapFastPacsStatelessSessionResume"`
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl *int `pulumi:"eapFastPacsTunnelPacTtl"`
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
	// `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsTunnelPacTtlUnit *string `pulumi:"eapFastPacsTunnelPacTtlUnit"`
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
	EapFastPacsUseProactivePacUpdatePercentage *int `pulumi:"eapFastPacsUseProactivePacUpdatePercentage"`
	// Use PACs
	EapFastUsePacs *bool `pulumi:"eapFastUsePacs"`
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts *bool `pulumi:"eapTlsAllowAuthOfExpiredCerts"`
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume *bool `pulumi:"eapTlsEnableStatelessSessionResume"`
	// EAP TLS L-Bit
	EapTlsLBit bool `pulumi:"eapTlsLBit"`
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
	EapTlsSessionTicketPercentage *int `pulumi:"eapTlsSessionTicketPercentage"`
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl *int `pulumi:"eapTlsSessionTicketTtl"`
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapTlsSessionTicketTtlUnit *string `pulumi:"eapTlsSessionTicketTtlUnit"`
	// Allow CHAP
	EapTtlsChap *bool `pulumi:"eapTtlsChap"`
	// Allow EAP MD5
	EapTtlsEapMd5 *bool `pulumi:"eapTtlsEapMd5"`
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 *bool `pulumi:"eapTtlsEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange *bool `pulumi:"eapTtlsEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
	EapTtlsEapMsChapV2PwdChangeRetries *int `pulumi:"eapTtlsEapMsChapV2PwdChangeRetries"`
	// Allow MS CHAP v1
	EapTtlsMsChapV1 *bool `pulumi:"eapTtlsMsChapV1"`
	// Allow MS CHAP v2
	EapTtlsMsChapV2 *bool `pulumi:"eapTtlsMsChapV2"`
	// Allow PAP ASCII
	EapTtlsPapAscii *bool `pulumi:"eapTtlsPapAscii"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc *bool `pulumi:"peapAllowPeapEapGtc"`
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange *bool `pulumi:"peapAllowPeapEapGtcPwdChange"`
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
	PeapAllowPeapEapGtcPwdChangeRetries *int `pulumi:"peapAllowPeapEapGtcPwdChangeRetries"`
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 *bool `pulumi:"peapAllowPeapEapMsChapV2"`
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange *bool `pulumi:"peapAllowPeapEapMsChapV2PwdChange"`
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
	// `0`-`3`
	PeapAllowPeapEapMsChapV2PwdChangeRetries *int `pulumi:"peapAllowPeapEapMsChapV2PwdChangeRetries"`
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls *bool `pulumi:"peapAllowPeapEapTls"`
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts *bool `pulumi:"peapAllowPeapEapTlsAuthOfExpiredCerts"`
	// Allow PEAP v0
	PeapPeapV0 *bool `pulumi:"peapPeapV0"`
	// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
	PreferredEapProtocol *string `pulumi:"preferredEapProtocol"`
	// Process host lookup
	ProcessHostLookup bool `pulumi:"processHostLookup"`
	// Require cryptobinding
	RequireCryptobinding *bool `pulumi:"requireCryptobinding"`
	// Require message authentication
	RequireMessageAuth bool `pulumi:"requireMessageAuth"`
	// Allow downgrade to MSK
	TeapDowngradeMsk *bool `pulumi:"teapDowngradeMsk"`
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst *bool `pulumi:"teapEapAcceptClientCertDuringTunnelEst"`
	// Allow EAP chaining
	TeapEapChaining *bool `pulumi:"teapEapChaining"`
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 *bool `pulumi:"teapEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange *bool `pulumi:"teapEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
	TeapEapMsChapV2PwdChangeRetries *int `pulumi:"teapEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	TeapEapTls *bool `pulumi:"teapEapTls"`
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts *bool `pulumi:"teapEapTlsAuthOfExpiredCerts"`
	// Request basic password authentication
	TeapRequestBasicPwdAuth *bool `pulumi:"teapRequestBasicPwdAuth"`
}

// The set of arguments for constructing a AllowedProtocols resource.
type AllowedProtocolsArgs struct {
	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g pulumi.BoolPtrInput
	// Allow CHAP
	AllowChap pulumi.BoolInput
	// Allow EAP Fast
	AllowEapFast pulumi.BoolInput
	// Allow EAP MD5
	AllowEapMd5 pulumi.BoolInput
	// Allow EAP TLS
	AllowEapTls pulumi.BoolInput
	// Allow EAP TTLS
	AllowEapTtls pulumi.BoolInput
	// Allow LEAP
	AllowLeap pulumi.BoolInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolInput
	// Allow MS CHAP v2
	AllowMsChapV2 pulumi.BoolInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolInput
	// Allow PEAP
	AllowPeap pulumi.BoolInput
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol pulumi.BoolInput
	// Allow TEAP
	AllowTeap pulumi.BoolInput
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap pulumi.BoolInput
	// Description
	Description pulumi.StringPtrInput
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert pulumi.BoolPtrInput
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication pulumi.BoolPtrInput
	// Allow EAP GTC
	EapFastEapGtc pulumi.BoolPtrInput
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange pulumi.BoolPtrInput
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
	EapFastEapGtcPwdChangeRetries pulumi.IntPtrInput
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
	EapFastEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow EAP TLS
	EapFastEapTls pulumi.BoolPtrInput
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Enable EAP chaining
	EapFastEnableEapChaining pulumi.BoolPtrInput
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning pulumi.BoolPtrInput
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning pulumi.BoolPtrInput
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert pulumi.BoolPtrInput
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication pulumi.BoolPtrInput
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl pulumi.IntPtrInput
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsAuthorizationPacTtlUnit pulumi.StringPtrInput
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl pulumi.IntPtrInput
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsMachinePacTtlUnit pulumi.StringPtrInput
	// Server returns access accept after authenticated provisioning. Is required only if
	// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns pulumi.BoolPtrInput
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume pulumi.BoolPtrInput
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl pulumi.IntPtrInput
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
	// `HOURS`, `DAYS`, `WEEKS`
	EapFastPacsTunnelPacTtlUnit pulumi.StringPtrInput
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
	EapFastPacsUseProactivePacUpdatePercentage pulumi.IntPtrInput
	// Use PACs
	EapFastUsePacs pulumi.BoolPtrInput
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts pulumi.BoolPtrInput
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume pulumi.BoolPtrInput
	// EAP TLS L-Bit
	EapTlsLBit pulumi.BoolInput
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
	EapTlsSessionTicketPercentage pulumi.IntPtrInput
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl pulumi.IntPtrInput
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
	// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
	EapTlsSessionTicketTtlUnit pulumi.StringPtrInput
	// Allow CHAP
	EapTtlsChap pulumi.BoolPtrInput
	// Allow EAP MD5
	EapTtlsEapMd5 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
	EapTtlsEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow MS CHAP v1
	EapTtlsMsChapV1 pulumi.BoolPtrInput
	// Allow MS CHAP v2
	EapTtlsMsChapV2 pulumi.BoolPtrInput
	// Allow PAP ASCII
	EapTtlsPapAscii pulumi.BoolPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc pulumi.BoolPtrInput
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange pulumi.BoolPtrInput
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
	PeapAllowPeapEapGtcPwdChangeRetries pulumi.IntPtrInput
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 pulumi.BoolPtrInput
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange pulumi.BoolPtrInput
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
	// `0`-`3`
	PeapAllowPeapEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls pulumi.BoolPtrInput
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Allow PEAP v0
	PeapPeapV0 pulumi.BoolPtrInput
	// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
	PreferredEapProtocol pulumi.StringPtrInput
	// Process host lookup
	ProcessHostLookup pulumi.BoolInput
	// Require cryptobinding
	RequireCryptobinding pulumi.BoolPtrInput
	// Require message authentication
	RequireMessageAuth pulumi.BoolInput
	// Allow downgrade to MSK
	TeapDowngradeMsk pulumi.BoolPtrInput
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst pulumi.BoolPtrInput
	// Allow EAP chaining
	TeapEapChaining pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 pulumi.BoolPtrInput
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange pulumi.BoolPtrInput
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
	TeapEapMsChapV2PwdChangeRetries pulumi.IntPtrInput
	// Allow EAP TLS
	TeapEapTls pulumi.BoolPtrInput
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts pulumi.BoolPtrInput
	// Request basic password authentication
	TeapRequestBasicPwdAuth pulumi.BoolPtrInput
}

func (AllowedProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*allowedProtocolsArgs)(nil)).Elem()
}

type AllowedProtocolsInput interface {
	pulumi.Input

	ToAllowedProtocolsOutput() AllowedProtocolsOutput
	ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput
}

func (*AllowedProtocols) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedProtocols)(nil)).Elem()
}

func (i *AllowedProtocols) ToAllowedProtocolsOutput() AllowedProtocolsOutput {
	return i.ToAllowedProtocolsOutputWithContext(context.Background())
}

func (i *AllowedProtocols) ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsOutput)
}

// AllowedProtocolsArrayInput is an input type that accepts AllowedProtocolsArray and AllowedProtocolsArrayOutput values.
// You can construct a concrete instance of `AllowedProtocolsArrayInput` via:
//
//	AllowedProtocolsArray{ AllowedProtocolsArgs{...} }
type AllowedProtocolsArrayInput interface {
	pulumi.Input

	ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput
	ToAllowedProtocolsArrayOutputWithContext(context.Context) AllowedProtocolsArrayOutput
}

type AllowedProtocolsArray []AllowedProtocolsInput

func (AllowedProtocolsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowedProtocols)(nil)).Elem()
}

func (i AllowedProtocolsArray) ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput {
	return i.ToAllowedProtocolsArrayOutputWithContext(context.Background())
}

func (i AllowedProtocolsArray) ToAllowedProtocolsArrayOutputWithContext(ctx context.Context) AllowedProtocolsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsArrayOutput)
}

// AllowedProtocolsMapInput is an input type that accepts AllowedProtocolsMap and AllowedProtocolsMapOutput values.
// You can construct a concrete instance of `AllowedProtocolsMapInput` via:
//
//	AllowedProtocolsMap{ "key": AllowedProtocolsArgs{...} }
type AllowedProtocolsMapInput interface {
	pulumi.Input

	ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput
	ToAllowedProtocolsMapOutputWithContext(context.Context) AllowedProtocolsMapOutput
}

type AllowedProtocolsMap map[string]AllowedProtocolsInput

func (AllowedProtocolsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowedProtocols)(nil)).Elem()
}

func (i AllowedProtocolsMap) ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput {
	return i.ToAllowedProtocolsMapOutputWithContext(context.Background())
}

func (i AllowedProtocolsMap) ToAllowedProtocolsMapOutputWithContext(ctx context.Context) AllowedProtocolsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedProtocolsMapOutput)
}

type AllowedProtocolsOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsOutput) ToAllowedProtocolsOutput() AllowedProtocolsOutput {
	return o
}

func (o AllowedProtocolsOutput) ToAllowedProtocolsOutputWithContext(ctx context.Context) AllowedProtocolsOutput {
	return o
}

// Allow 5G. This field is only supported from ISE 3.2.
func (o AllowedProtocolsOutput) Allow5g() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.Allow5g }).(pulumi.BoolPtrOutput)
}

// Allow CHAP
func (o AllowedProtocolsOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow EAP Fast
func (o AllowedProtocolsOutput) AllowEapFast() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowEapFast }).(pulumi.BoolOutput)
}

// Allow EAP MD5
func (o AllowedProtocolsOutput) AllowEapMd5() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowEapMd5 }).(pulumi.BoolOutput)
}

// Allow EAP TLS
func (o AllowedProtocolsOutput) AllowEapTls() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowEapTls }).(pulumi.BoolOutput)
}

// Allow EAP TTLS
func (o AllowedProtocolsOutput) AllowEapTtls() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowEapTtls }).(pulumi.BoolOutput)
}

// Allow LEAP
func (o AllowedProtocolsOutput) AllowLeap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowLeap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o AllowedProtocolsOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow MS CHAP v2
func (o AllowedProtocolsOutput) AllowMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowMsChapV2 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o AllowedProtocolsOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Allow PEAP
func (o AllowedProtocolsOutput) AllowPeap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowPeap }).(pulumi.BoolOutput)
}

// Allow preferred EAP protocol
func (o AllowedProtocolsOutput) AllowPreferredEapProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowPreferredEapProtocol }).(pulumi.BoolOutput)
}

// Allow TEAP
func (o AllowedProtocolsOutput) AllowTeap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowTeap }).(pulumi.BoolOutput)
}

// Allow weak ciphers for EAP
func (o AllowedProtocolsOutput) AllowWeakCiphersForEap() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.AllowWeakCiphersForEap }).(pulumi.BoolOutput)
}

// Description
func (o AllowedProtocolsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
func (o AllowedProtocolsOutput) EapFastAcceptClientCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastAcceptClientCert }).(pulumi.BoolPtrOutput)
}

// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
func (o AllowedProtocolsOutput) EapFastAllowMachineAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastAllowMachineAuthentication }).(pulumi.BoolPtrOutput)
}

// Allow EAP GTC
func (o AllowedProtocolsOutput) EapFastEapGtc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapGtc }).(pulumi.BoolPtrOutput)
}

// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
func (o AllowedProtocolsOutput) EapFastEapGtcPwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapGtcPwdChange }).(pulumi.BoolPtrOutput)
}

// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`. - Range: `0`-`3`
func (o AllowedProtocolsOutput) EapFastEapGtcPwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastEapGtcPwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow EAP MS CHAP v2
func (o AllowedProtocolsOutput) EapFastEapMsChapV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapMsChapV2 }).(pulumi.BoolPtrOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
func (o AllowedProtocolsOutput) EapFastEapMsChapV2PwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapMsChapV2PwdChange }).(pulumi.BoolPtrOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`. - Range: `0`-`3`
func (o AllowedProtocolsOutput) EapFastEapMsChapV2PwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastEapMsChapV2PwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow EAP TLS
func (o AllowedProtocolsOutput) EapFastEapTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapTls }).(pulumi.BoolPtrOutput)
}

// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
func (o AllowedProtocolsOutput) EapFastEapTlsAuthOfExpiredCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEapTlsAuthOfExpiredCerts }).(pulumi.BoolPtrOutput)
}

// Enable EAP chaining
func (o AllowedProtocolsOutput) EapFastEnableEapChaining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastEnableEapChaining }).(pulumi.BoolPtrOutput)
}

// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsAllowAnonymousProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsAllowAnonymousProvisioning }).(pulumi.BoolPtrOutput)
}

// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsAllowAuthenticatedProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsAllowAuthenticatedProvisioning }).(pulumi.BoolPtrOutput)
}

// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsAllowClientCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsAllowClientCert }).(pulumi.BoolPtrOutput)
}

// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsAllowMachineAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsAllowMachineAuthentication }).(pulumi.BoolPtrOutput)
}

// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsAuthorizationPacTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastPacsAuthorizationPacTtl }).(pulumi.IntPtrOutput)
}

// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`. - Choices: `SECONDS`,
// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
func (o AllowedProtocolsOutput) EapFastPacsAuthorizationPacTtlUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.EapFastPacsAuthorizationPacTtlUnit }).(pulumi.StringPtrOutput)
}

// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsMachinePacTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastPacsMachinePacTtl }).(pulumi.IntPtrOutput)
}

// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`. - Choices: `SECONDS`,
// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
func (o AllowedProtocolsOutput) EapFastPacsMachinePacTtlUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.EapFastPacsMachinePacTtlUnit }).(pulumi.StringPtrOutput)
}

// Server returns access accept after authenticated provisioning. Is required only if
// `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsServerReturns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsServerReturns }).(pulumi.BoolPtrOutput)
}

// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsStatelessSessionResume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastPacsStatelessSessionResume }).(pulumi.BoolPtrOutput)
}

// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
func (o AllowedProtocolsOutput) EapFastPacsTunnelPacTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastPacsTunnelPacTtl }).(pulumi.IntPtrOutput)
}

// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`. - Choices: `SECONDS`, `MINUTES`,
// `HOURS`, `DAYS`, `WEEKS`
func (o AllowedProtocolsOutput) EapFastPacsTunnelPacTtlUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.EapFastPacsTunnelPacTtlUnit }).(pulumi.StringPtrOutput)
}

// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`. - Range: `1`-`100`
func (o AllowedProtocolsOutput) EapFastPacsUseProactivePacUpdatePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapFastPacsUseProactivePacUpdatePercentage }).(pulumi.IntPtrOutput)
}

// Use PACs
func (o AllowedProtocolsOutput) EapFastUsePacs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapFastUsePacs }).(pulumi.BoolPtrOutput)
}

// Allow authentication of expired certificates
func (o AllowedProtocolsOutput) EapTlsAllowAuthOfExpiredCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTlsAllowAuthOfExpiredCerts }).(pulumi.BoolPtrOutput)
}

// Enable stateless session resume
func (o AllowedProtocolsOutput) EapTlsEnableStatelessSessionResume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTlsEnableStatelessSessionResume }).(pulumi.BoolPtrOutput)
}

// EAP TLS L-Bit
func (o AllowedProtocolsOutput) EapTlsLBit() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.EapTlsLBit }).(pulumi.BoolOutput)
}

// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Range: `1`-`100`
func (o AllowedProtocolsOutput) EapTlsSessionTicketPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapTlsSessionTicketPercentage }).(pulumi.IntPtrOutput)
}

// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
func (o AllowedProtocolsOutput) EapTlsSessionTicketTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapTlsSessionTicketTtl }).(pulumi.IntPtrOutput)
}

// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`. - Choices: `SECONDS`,
// `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
func (o AllowedProtocolsOutput) EapTlsSessionTicketTtlUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.EapTlsSessionTicketTtlUnit }).(pulumi.StringPtrOutput)
}

// Allow CHAP
func (o AllowedProtocolsOutput) EapTtlsChap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsChap }).(pulumi.BoolPtrOutput)
}

// Allow EAP MD5
func (o AllowedProtocolsOutput) EapTtlsEapMd5() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsEapMd5 }).(pulumi.BoolPtrOutput)
}

// Allow EAP MS CHAP v2
func (o AllowedProtocolsOutput) EapTtlsEapMsChapV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsEapMsChapV2 }).(pulumi.BoolPtrOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
func (o AllowedProtocolsOutput) EapTtlsEapMsChapV2PwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsEapMsChapV2PwdChange }).(pulumi.BoolPtrOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`. - Range: `0`-`3`
func (o AllowedProtocolsOutput) EapTtlsEapMsChapV2PwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.EapTtlsEapMsChapV2PwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow MS CHAP v1
func (o AllowedProtocolsOutput) EapTtlsMsChapV1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsMsChapV1 }).(pulumi.BoolPtrOutput)
}

// Allow MS CHAP v2
func (o AllowedProtocolsOutput) EapTtlsMsChapV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsMsChapV2 }).(pulumi.BoolPtrOutput)
}

// Allow PAP ASCII
func (o AllowedProtocolsOutput) EapTtlsPapAscii() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.EapTtlsPapAscii }).(pulumi.BoolPtrOutput)
}

// The name of the allowed protocols
func (o AllowedProtocolsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Allow PEAP EAP GTC
func (o AllowedProtocolsOutput) PeapAllowPeapEapGtc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapGtc }).(pulumi.BoolPtrOutput)
}

// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
func (o AllowedProtocolsOutput) PeapAllowPeapEapGtcPwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapGtcPwdChange }).(pulumi.BoolPtrOutput)
}

// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`. - Range: `0`-`3`
func (o AllowedProtocolsOutput) PeapAllowPeapEapGtcPwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.PeapAllowPeapEapGtcPwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow PEAP EAP MS CHAP v2
func (o AllowedProtocolsOutput) PeapAllowPeapEapMsChapV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapMsChapV2 }).(pulumi.BoolPtrOutput)
}

// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
func (o AllowedProtocolsOutput) PeapAllowPeapEapMsChapV2PwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapMsChapV2PwdChange }).(pulumi.BoolPtrOutput)
}

// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`. - Range:
// `0`-`3`
func (o AllowedProtocolsOutput) PeapAllowPeapEapMsChapV2PwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.PeapAllowPeapEapMsChapV2PwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow PEAP EAP TLS
func (o AllowedProtocolsOutput) PeapAllowPeapEapTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapTls }).(pulumi.BoolPtrOutput)
}

// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
func (o AllowedProtocolsOutput) PeapAllowPeapEapTlsAuthOfExpiredCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapAllowPeapEapTlsAuthOfExpiredCerts }).(pulumi.BoolPtrOutput)
}

// Allow PEAP v0
func (o AllowedProtocolsOutput) PeapPeapV0() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.PeapPeapV0 }).(pulumi.BoolPtrOutput)
}

// Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
func (o AllowedProtocolsOutput) PreferredEapProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.StringPtrOutput { return v.PreferredEapProtocol }).(pulumi.StringPtrOutput)
}

// Process host lookup
func (o AllowedProtocolsOutput) ProcessHostLookup() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.ProcessHostLookup }).(pulumi.BoolOutput)
}

// Require cryptobinding
func (o AllowedProtocolsOutput) RequireCryptobinding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.RequireCryptobinding }).(pulumi.BoolPtrOutput)
}

// Require message authentication
func (o AllowedProtocolsOutput) RequireMessageAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolOutput { return v.RequireMessageAuth }).(pulumi.BoolOutput)
}

// Allow downgrade to MSK
func (o AllowedProtocolsOutput) TeapDowngradeMsk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapDowngradeMsk }).(pulumi.BoolPtrOutput)
}

// Accept client certificate during tunnel establishment
func (o AllowedProtocolsOutput) TeapEapAcceptClientCertDuringTunnelEst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapAcceptClientCertDuringTunnelEst }).(pulumi.BoolPtrOutput)
}

// Allow EAP chaining
func (o AllowedProtocolsOutput) TeapEapChaining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapChaining }).(pulumi.BoolPtrOutput)
}

// Allow EAP MS CHAP v2
func (o AllowedProtocolsOutput) TeapEapMsChapV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapMsChapV2 }).(pulumi.BoolPtrOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
func (o AllowedProtocolsOutput) TeapEapMsChapV2PwdChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapMsChapV2PwdChange }).(pulumi.BoolPtrOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`. - Range: `0`-`3`
func (o AllowedProtocolsOutput) TeapEapMsChapV2PwdChangeRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.IntPtrOutput { return v.TeapEapMsChapV2PwdChangeRetries }).(pulumi.IntPtrOutput)
}

// Allow EAP TLS
func (o AllowedProtocolsOutput) TeapEapTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapTls }).(pulumi.BoolPtrOutput)
}

// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
func (o AllowedProtocolsOutput) TeapEapTlsAuthOfExpiredCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapEapTlsAuthOfExpiredCerts }).(pulumi.BoolPtrOutput)
}

// Request basic password authentication
func (o AllowedProtocolsOutput) TeapRequestBasicPwdAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedProtocols) pulumi.BoolPtrOutput { return v.TeapRequestBasicPwdAuth }).(pulumi.BoolPtrOutput)
}

type AllowedProtocolsArrayOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsArrayOutput) ToAllowedProtocolsArrayOutput() AllowedProtocolsArrayOutput {
	return o
}

func (o AllowedProtocolsArrayOutput) ToAllowedProtocolsArrayOutputWithContext(ctx context.Context) AllowedProtocolsArrayOutput {
	return o
}

func (o AllowedProtocolsArrayOutput) Index(i pulumi.IntInput) AllowedProtocolsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AllowedProtocols {
		return vs[0].([]*AllowedProtocols)[vs[1].(int)]
	}).(AllowedProtocolsOutput)
}

type AllowedProtocolsMapOutput struct{ *pulumi.OutputState }

func (AllowedProtocolsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowedProtocols)(nil)).Elem()
}

func (o AllowedProtocolsMapOutput) ToAllowedProtocolsMapOutput() AllowedProtocolsMapOutput {
	return o
}

func (o AllowedProtocolsMapOutput) ToAllowedProtocolsMapOutputWithContext(ctx context.Context) AllowedProtocolsMapOutput {
	return o
}

func (o AllowedProtocolsMapOutput) MapIndex(k pulumi.StringInput) AllowedProtocolsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AllowedProtocols {
		return vs[0].(map[string]*AllowedProtocols)[vs[1].(string)]
	}).(AllowedProtocolsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsInput)(nil)).Elem(), &AllowedProtocols{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsArrayInput)(nil)).Elem(), AllowedProtocolsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedProtocolsMapInput)(nil)).Elem(), AllowedProtocolsMap{})
	pulumi.RegisterOutputType(AllowedProtocolsOutput{})
	pulumi.RegisterOutputType(AllowedProtocolsArrayOutput{})
	pulumi.RegisterOutputType(AllowedProtocolsMapOutput{})
}
