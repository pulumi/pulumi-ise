// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkaccess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ConditionChildren struct {
	// Dictionary attribute name
	AttributeName *string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue *string `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []ConditionChildrenChildren `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType string `pulumi:"conditionType"`
	// Condition description
	Description *string `pulumi:"description"`
	// Dictionary name
	DictionaryName *string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue *string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id *string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Condition name
	Name *string `pulumi:"name"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator *string `pulumi:"operator"`
}

// ConditionChildrenInput is an input type that accepts ConditionChildrenArgs and ConditionChildrenOutput values.
// You can construct a concrete instance of `ConditionChildrenInput` via:
//
//	ConditionChildrenArgs{...}
type ConditionChildrenInput interface {
	pulumi.Input

	ToConditionChildrenOutput() ConditionChildrenOutput
	ToConditionChildrenOutputWithContext(context.Context) ConditionChildrenOutput
}

type ConditionChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringPtrInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringPtrInput `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens ConditionChildrenChildrenArrayInput `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Condition description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Dictionary name
	DictionaryName pulumi.StringPtrInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringPtrInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput `pulumi:"isNegate"`
	// Condition name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator pulumi.StringPtrInput `pulumi:"operator"`
}

func (ConditionChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionChildren)(nil)).Elem()
}

func (i ConditionChildrenArgs) ToConditionChildrenOutput() ConditionChildrenOutput {
	return i.ToConditionChildrenOutputWithContext(context.Background())
}

func (i ConditionChildrenArgs) ToConditionChildrenOutputWithContext(ctx context.Context) ConditionChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionChildrenOutput)
}

// ConditionChildrenArrayInput is an input type that accepts ConditionChildrenArray and ConditionChildrenArrayOutput values.
// You can construct a concrete instance of `ConditionChildrenArrayInput` via:
//
//	ConditionChildrenArray{ ConditionChildrenArgs{...} }
type ConditionChildrenArrayInput interface {
	pulumi.Input

	ToConditionChildrenArrayOutput() ConditionChildrenArrayOutput
	ToConditionChildrenArrayOutputWithContext(context.Context) ConditionChildrenArrayOutput
}

type ConditionChildrenArray []ConditionChildrenInput

func (ConditionChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionChildren)(nil)).Elem()
}

func (i ConditionChildrenArray) ToConditionChildrenArrayOutput() ConditionChildrenArrayOutput {
	return i.ToConditionChildrenArrayOutputWithContext(context.Background())
}

func (i ConditionChildrenArray) ToConditionChildrenArrayOutputWithContext(ctx context.Context) ConditionChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionChildrenArrayOutput)
}

type ConditionChildrenOutput struct{ *pulumi.OutputState }

func (ConditionChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionChildren)(nil)).Elem()
}

func (o ConditionChildrenOutput) ToConditionChildrenOutput() ConditionChildrenOutput {
	return o
}

func (o ConditionChildrenOutput) ToConditionChildrenOutputWithContext(ctx context.Context) ConditionChildrenOutput {
	return o
}

// Dictionary attribute name
func (o ConditionChildrenOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.AttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o ConditionChildrenOutput) AttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.AttributeValue }).(pulumi.StringPtrOutput)
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o ConditionChildrenOutput) Childrens() ConditionChildrenChildrenArrayOutput {
	return o.ApplyT(func(v ConditionChildren) []ConditionChildrenChildren { return v.Childrens }).(ConditionChildrenChildrenArrayOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
//   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
func (o ConditionChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Condition description
func (o ConditionChildrenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o ConditionChildrenOutput) DictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.DictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o ConditionChildrenOutput) DictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.DictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o ConditionChildrenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o ConditionChildrenOutput) IsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *bool { return v.IsNegate }).(pulumi.BoolPtrOutput)
}

// Condition name
func (o ConditionChildrenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o ConditionChildrenOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildren) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

type ConditionChildrenArrayOutput struct{ *pulumi.OutputState }

func (ConditionChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionChildren)(nil)).Elem()
}

func (o ConditionChildrenArrayOutput) ToConditionChildrenArrayOutput() ConditionChildrenArrayOutput {
	return o
}

func (o ConditionChildrenArrayOutput) ToConditionChildrenArrayOutputWithContext(ctx context.Context) ConditionChildrenArrayOutput {
	return o
}

func (o ConditionChildrenArrayOutput) Index(i pulumi.IntInput) ConditionChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionChildren {
		return vs[0].([]ConditionChildren)[vs[1].(int)]
	}).(ConditionChildrenOutput)
}

type ConditionChildrenChildren struct {
	// Dictionary attribute name
	AttributeName *string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue *string `pulumi:"attributeValue"`
	// Condition type.
	//   - Choices: `ConditionAttributes`, `ConditionReference`
	ConditionType string `pulumi:"conditionType"`
	// Condition description
	Description *string `pulumi:"description"`
	// Dictionary name
	DictionaryName *string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue *string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id *string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate *bool `pulumi:"isNegate"`
	// Condition name
	Name *string `pulumi:"name"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator *string `pulumi:"operator"`
}

// ConditionChildrenChildrenInput is an input type that accepts ConditionChildrenChildrenArgs and ConditionChildrenChildrenOutput values.
// You can construct a concrete instance of `ConditionChildrenChildrenInput` via:
//
//	ConditionChildrenChildrenArgs{...}
type ConditionChildrenChildrenInput interface {
	pulumi.Input

	ToConditionChildrenChildrenOutput() ConditionChildrenChildrenOutput
	ToConditionChildrenChildrenOutputWithContext(context.Context) ConditionChildrenChildrenOutput
}

type ConditionChildrenChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringPtrInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringPtrInput `pulumi:"attributeValue"`
	// Condition type.
	//   - Choices: `ConditionAttributes`, `ConditionReference`
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Condition description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Dictionary name
	DictionaryName pulumi.StringPtrInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringPtrInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolPtrInput `pulumi:"isNegate"`
	// Condition name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Equality operator
	//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
	Operator pulumi.StringPtrInput `pulumi:"operator"`
}

func (ConditionChildrenChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionChildrenChildren)(nil)).Elem()
}

func (i ConditionChildrenChildrenArgs) ToConditionChildrenChildrenOutput() ConditionChildrenChildrenOutput {
	return i.ToConditionChildrenChildrenOutputWithContext(context.Background())
}

func (i ConditionChildrenChildrenArgs) ToConditionChildrenChildrenOutputWithContext(ctx context.Context) ConditionChildrenChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionChildrenChildrenOutput)
}

// ConditionChildrenChildrenArrayInput is an input type that accepts ConditionChildrenChildrenArray and ConditionChildrenChildrenArrayOutput values.
// You can construct a concrete instance of `ConditionChildrenChildrenArrayInput` via:
//
//	ConditionChildrenChildrenArray{ ConditionChildrenChildrenArgs{...} }
type ConditionChildrenChildrenArrayInput interface {
	pulumi.Input

	ToConditionChildrenChildrenArrayOutput() ConditionChildrenChildrenArrayOutput
	ToConditionChildrenChildrenArrayOutputWithContext(context.Context) ConditionChildrenChildrenArrayOutput
}

type ConditionChildrenChildrenArray []ConditionChildrenChildrenInput

func (ConditionChildrenChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionChildrenChildren)(nil)).Elem()
}

func (i ConditionChildrenChildrenArray) ToConditionChildrenChildrenArrayOutput() ConditionChildrenChildrenArrayOutput {
	return i.ToConditionChildrenChildrenArrayOutputWithContext(context.Background())
}

func (i ConditionChildrenChildrenArray) ToConditionChildrenChildrenArrayOutputWithContext(ctx context.Context) ConditionChildrenChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionChildrenChildrenArrayOutput)
}

type ConditionChildrenChildrenOutput struct{ *pulumi.OutputState }

func (ConditionChildrenChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionChildrenChildren)(nil)).Elem()
}

func (o ConditionChildrenChildrenOutput) ToConditionChildrenChildrenOutput() ConditionChildrenChildrenOutput {
	return o
}

func (o ConditionChildrenChildrenOutput) ToConditionChildrenChildrenOutputWithContext(ctx context.Context) ConditionChildrenChildrenOutput {
	return o
}

// Dictionary attribute name
func (o ConditionChildrenChildrenOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.AttributeName }).(pulumi.StringPtrOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o ConditionChildrenChildrenOutput) AttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.AttributeValue }).(pulumi.StringPtrOutput)
}

// Condition type.
//   - Choices: `ConditionAttributes`, `ConditionReference`
func (o ConditionChildrenChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Condition description
func (o ConditionChildrenChildrenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Dictionary name
func (o ConditionChildrenChildrenOutput) DictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.DictionaryName }).(pulumi.StringPtrOutput)
}

// Dictionary value
func (o ConditionChildrenChildrenOutput) DictionaryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.DictionaryValue }).(pulumi.StringPtrOutput)
}

// UUID for condition
func (o ConditionChildrenChildrenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates whereas this condition is in negate mode
func (o ConditionChildrenChildrenOutput) IsNegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *bool { return v.IsNegate }).(pulumi.BoolPtrOutput)
}

// Condition name
func (o ConditionChildrenChildrenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Equality operator
//   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
func (o ConditionChildrenChildrenOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionChildrenChildren) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

type ConditionChildrenChildrenArrayOutput struct{ *pulumi.OutputState }

func (ConditionChildrenChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionChildrenChildren)(nil)).Elem()
}

func (o ConditionChildrenChildrenArrayOutput) ToConditionChildrenChildrenArrayOutput() ConditionChildrenChildrenArrayOutput {
	return o
}

func (o ConditionChildrenChildrenArrayOutput) ToConditionChildrenChildrenArrayOutputWithContext(ctx context.Context) ConditionChildrenChildrenArrayOutput {
	return o
}

func (o ConditionChildrenChildrenArrayOutput) Index(i pulumi.IntInput) ConditionChildrenChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionChildrenChildren {
		return vs[0].([]ConditionChildrenChildren)[vs[1].(int)]
	}).(ConditionChildrenChildrenOutput)
}

type GetConditionChildren struct {
	// Dictionary attribute name
	AttributeName string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue string `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens []GetConditionChildrenChildren `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType string `pulumi:"conditionType"`
	// Condition description
	Description string `pulumi:"description"`
	// Dictionary name
	DictionaryName string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Condition name
	Name string `pulumi:"name"`
	// Equality operator
	Operator string `pulumi:"operator"`
}

// GetConditionChildrenInput is an input type that accepts GetConditionChildrenArgs and GetConditionChildrenOutput values.
// You can construct a concrete instance of `GetConditionChildrenInput` via:
//
//	GetConditionChildrenArgs{...}
type GetConditionChildrenInput interface {
	pulumi.Input

	ToGetConditionChildrenOutput() GetConditionChildrenOutput
	ToGetConditionChildrenOutputWithContext(context.Context) GetConditionChildrenOutput
}

type GetConditionChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringInput `pulumi:"attributeValue"`
	// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
	Childrens GetConditionChildrenChildrenArrayInput `pulumi:"childrens"`
	// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Condition description
	Description pulumi.StringInput `pulumi:"description"`
	// Dictionary name
	DictionaryName pulumi.StringInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolInput `pulumi:"isNegate"`
	// Condition name
	Name pulumi.StringInput `pulumi:"name"`
	// Equality operator
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (GetConditionChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConditionChildren)(nil)).Elem()
}

func (i GetConditionChildrenArgs) ToGetConditionChildrenOutput() GetConditionChildrenOutput {
	return i.ToGetConditionChildrenOutputWithContext(context.Background())
}

func (i GetConditionChildrenArgs) ToGetConditionChildrenOutputWithContext(ctx context.Context) GetConditionChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConditionChildrenOutput)
}

// GetConditionChildrenArrayInput is an input type that accepts GetConditionChildrenArray and GetConditionChildrenArrayOutput values.
// You can construct a concrete instance of `GetConditionChildrenArrayInput` via:
//
//	GetConditionChildrenArray{ GetConditionChildrenArgs{...} }
type GetConditionChildrenArrayInput interface {
	pulumi.Input

	ToGetConditionChildrenArrayOutput() GetConditionChildrenArrayOutput
	ToGetConditionChildrenArrayOutputWithContext(context.Context) GetConditionChildrenArrayOutput
}

type GetConditionChildrenArray []GetConditionChildrenInput

func (GetConditionChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConditionChildren)(nil)).Elem()
}

func (i GetConditionChildrenArray) ToGetConditionChildrenArrayOutput() GetConditionChildrenArrayOutput {
	return i.ToGetConditionChildrenArrayOutputWithContext(context.Background())
}

func (i GetConditionChildrenArray) ToGetConditionChildrenArrayOutputWithContext(ctx context.Context) GetConditionChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConditionChildrenArrayOutput)
}

type GetConditionChildrenOutput struct{ *pulumi.OutputState }

func (GetConditionChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConditionChildren)(nil)).Elem()
}

func (o GetConditionChildrenOutput) ToGetConditionChildrenOutput() GetConditionChildrenOutput {
	return o
}

func (o GetConditionChildrenOutput) ToGetConditionChildrenOutputWithContext(ctx context.Context) GetConditionChildrenOutput {
	return o
}

// Dictionary attribute name
func (o GetConditionChildrenOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o GetConditionChildrenOutput) AttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.AttributeValue }).(pulumi.StringOutput)
}

// List of child conditions. `conditionType` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
func (o GetConditionChildrenOutput) Childrens() GetConditionChildrenChildrenArrayOutput {
	return o.ApplyT(func(v GetConditionChildren) []GetConditionChildrenChildren { return v.Childrens }).(GetConditionChildrenChildrenArrayOutput)
}

// Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
func (o GetConditionChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Condition description
func (o GetConditionChildrenOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.Description }).(pulumi.StringOutput)
}

// Dictionary name
func (o GetConditionChildrenOutput) DictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.DictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o GetConditionChildrenOutput) DictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.DictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o GetConditionChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o GetConditionChildrenOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetConditionChildren) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Condition name
func (o GetConditionChildrenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.Name }).(pulumi.StringOutput)
}

// Equality operator
func (o GetConditionChildrenOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildren) string { return v.Operator }).(pulumi.StringOutput)
}

type GetConditionChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetConditionChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConditionChildren)(nil)).Elem()
}

func (o GetConditionChildrenArrayOutput) ToGetConditionChildrenArrayOutput() GetConditionChildrenArrayOutput {
	return o
}

func (o GetConditionChildrenArrayOutput) ToGetConditionChildrenArrayOutputWithContext(ctx context.Context) GetConditionChildrenArrayOutput {
	return o
}

func (o GetConditionChildrenArrayOutput) Index(i pulumi.IntInput) GetConditionChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConditionChildren {
		return vs[0].([]GetConditionChildren)[vs[1].(int)]
	}).(GetConditionChildrenOutput)
}

type GetConditionChildrenChildren struct {
	// Dictionary attribute name
	AttributeName string `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue string `pulumi:"attributeValue"`
	// Condition type.
	ConditionType string `pulumi:"conditionType"`
	// Condition description
	Description string `pulumi:"description"`
	// Dictionary name
	DictionaryName string `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue string `pulumi:"dictionaryValue"`
	// UUID for condition
	Id string `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate bool `pulumi:"isNegate"`
	// Condition name
	Name string `pulumi:"name"`
	// Equality operator
	Operator string `pulumi:"operator"`
}

// GetConditionChildrenChildrenInput is an input type that accepts GetConditionChildrenChildrenArgs and GetConditionChildrenChildrenOutput values.
// You can construct a concrete instance of `GetConditionChildrenChildrenInput` via:
//
//	GetConditionChildrenChildrenArgs{...}
type GetConditionChildrenChildrenInput interface {
	pulumi.Input

	ToGetConditionChildrenChildrenOutput() GetConditionChildrenChildrenOutput
	ToGetConditionChildrenChildrenOutputWithContext(context.Context) GetConditionChildrenChildrenOutput
}

type GetConditionChildrenChildrenArgs struct {
	// Dictionary attribute name
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Attribute value for condition. Value type is specified in dictionary object.
	AttributeValue pulumi.StringInput `pulumi:"attributeValue"`
	// Condition type.
	ConditionType pulumi.StringInput `pulumi:"conditionType"`
	// Condition description
	Description pulumi.StringInput `pulumi:"description"`
	// Dictionary name
	DictionaryName pulumi.StringInput `pulumi:"dictionaryName"`
	// Dictionary value
	DictionaryValue pulumi.StringInput `pulumi:"dictionaryValue"`
	// UUID for condition
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whereas this condition is in negate mode
	IsNegate pulumi.BoolInput `pulumi:"isNegate"`
	// Condition name
	Name pulumi.StringInput `pulumi:"name"`
	// Equality operator
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (GetConditionChildrenChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConditionChildrenChildren)(nil)).Elem()
}

func (i GetConditionChildrenChildrenArgs) ToGetConditionChildrenChildrenOutput() GetConditionChildrenChildrenOutput {
	return i.ToGetConditionChildrenChildrenOutputWithContext(context.Background())
}

func (i GetConditionChildrenChildrenArgs) ToGetConditionChildrenChildrenOutputWithContext(ctx context.Context) GetConditionChildrenChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConditionChildrenChildrenOutput)
}

// GetConditionChildrenChildrenArrayInput is an input type that accepts GetConditionChildrenChildrenArray and GetConditionChildrenChildrenArrayOutput values.
// You can construct a concrete instance of `GetConditionChildrenChildrenArrayInput` via:
//
//	GetConditionChildrenChildrenArray{ GetConditionChildrenChildrenArgs{...} }
type GetConditionChildrenChildrenArrayInput interface {
	pulumi.Input

	ToGetConditionChildrenChildrenArrayOutput() GetConditionChildrenChildrenArrayOutput
	ToGetConditionChildrenChildrenArrayOutputWithContext(context.Context) GetConditionChildrenChildrenArrayOutput
}

type GetConditionChildrenChildrenArray []GetConditionChildrenChildrenInput

func (GetConditionChildrenChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConditionChildrenChildren)(nil)).Elem()
}

func (i GetConditionChildrenChildrenArray) ToGetConditionChildrenChildrenArrayOutput() GetConditionChildrenChildrenArrayOutput {
	return i.ToGetConditionChildrenChildrenArrayOutputWithContext(context.Background())
}

func (i GetConditionChildrenChildrenArray) ToGetConditionChildrenChildrenArrayOutputWithContext(ctx context.Context) GetConditionChildrenChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConditionChildrenChildrenArrayOutput)
}

type GetConditionChildrenChildrenOutput struct{ *pulumi.OutputState }

func (GetConditionChildrenChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConditionChildrenChildren)(nil)).Elem()
}

func (o GetConditionChildrenChildrenOutput) ToGetConditionChildrenChildrenOutput() GetConditionChildrenChildrenOutput {
	return o
}

func (o GetConditionChildrenChildrenOutput) ToGetConditionChildrenChildrenOutputWithContext(ctx context.Context) GetConditionChildrenChildrenOutput {
	return o
}

// Dictionary attribute name
func (o GetConditionChildrenChildrenOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Attribute value for condition. Value type is specified in dictionary object.
func (o GetConditionChildrenChildrenOutput) AttributeValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.AttributeValue }).(pulumi.StringOutput)
}

// Condition type.
func (o GetConditionChildrenChildrenOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.ConditionType }).(pulumi.StringOutput)
}

// Condition description
func (o GetConditionChildrenChildrenOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.Description }).(pulumi.StringOutput)
}

// Dictionary name
func (o GetConditionChildrenChildrenOutput) DictionaryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.DictionaryName }).(pulumi.StringOutput)
}

// Dictionary value
func (o GetConditionChildrenChildrenOutput) DictionaryValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.DictionaryValue }).(pulumi.StringOutput)
}

// UUID for condition
func (o GetConditionChildrenChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whereas this condition is in negate mode
func (o GetConditionChildrenChildrenOutput) IsNegate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) bool { return v.IsNegate }).(pulumi.BoolOutput)
}

// Condition name
func (o GetConditionChildrenChildrenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.Name }).(pulumi.StringOutput)
}

// Equality operator
func (o GetConditionChildrenChildrenOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetConditionChildrenChildren) string { return v.Operator }).(pulumi.StringOutput)
}

type GetConditionChildrenChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetConditionChildrenChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConditionChildrenChildren)(nil)).Elem()
}

func (o GetConditionChildrenChildrenArrayOutput) ToGetConditionChildrenChildrenArrayOutput() GetConditionChildrenChildrenArrayOutput {
	return o
}

func (o GetConditionChildrenChildrenArrayOutput) ToGetConditionChildrenChildrenArrayOutputWithContext(ctx context.Context) GetConditionChildrenChildrenArrayOutput {
	return o
}

func (o GetConditionChildrenChildrenArrayOutput) Index(i pulumi.IntInput) GetConditionChildrenChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConditionChildrenChildren {
		return vs[0].([]GetConditionChildrenChildren)[vs[1].(int)]
	}).(GetConditionChildrenChildrenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionChildrenInput)(nil)).Elem(), ConditionChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionChildrenArrayInput)(nil)).Elem(), ConditionChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionChildrenChildrenInput)(nil)).Elem(), ConditionChildrenChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionChildrenChildrenArrayInput)(nil)).Elem(), ConditionChildrenChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConditionChildrenInput)(nil)).Elem(), GetConditionChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConditionChildrenArrayInput)(nil)).Elem(), GetConditionChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConditionChildrenChildrenInput)(nil)).Elem(), GetConditionChildrenChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConditionChildrenChildrenArrayInput)(nil)).Elem(), GetConditionChildrenChildrenArray{})
	pulumi.RegisterOutputType(ConditionChildrenOutput{})
	pulumi.RegisterOutputType(ConditionChildrenArrayOutput{})
	pulumi.RegisterOutputType(ConditionChildrenChildrenOutput{})
	pulumi.RegisterOutputType(ConditionChildrenChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetConditionChildrenOutput{})
	pulumi.RegisterOutputType(GetConditionChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetConditionChildrenChildrenOutput{})
	pulumi.RegisterOutputType(GetConditionChildrenChildrenArrayOutput{})
}
