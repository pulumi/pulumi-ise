// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trustsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TrustSec Security Group ACL.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/trustsec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := trustsec.NewSecurityGroupAcl(ctx, "example", &trustsec.SecurityGroupAclArgs{
//				Name:        pulumi.String("ACL1"),
//				Description: pulumi.String("SG ACL 1"),
//				AclContent:  pulumi.String("Permit IP"),
//				IpVersion:   pulumi.String("IPV4"),
//				ReadOnly:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:trustsec/securityGroupAcl:SecurityGroupAcl example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type SecurityGroupAcl struct {
	pulumi.CustomResourceState

	// Content of ACL
	AclContent pulumi.StringOutput `pulumi:"aclContent"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// The name of the security group ACL
	Name pulumi.StringOutput `pulumi:"name"`
	// Read-only
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
}

// NewSecurityGroupAcl registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupAcl(ctx *pulumi.Context,
	name string, args *SecurityGroupAclArgs, opts ...pulumi.ResourceOption) (*SecurityGroupAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclContent == nil {
		return nil, errors.New("invalid value for required argument 'AclContent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupAcl
	err := ctx.RegisterResource("ise:trustsec/securityGroupAcl:SecurityGroupAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupAcl gets an existing SecurityGroupAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupAclState, opts ...pulumi.ResourceOption) (*SecurityGroupAcl, error) {
	var resource SecurityGroupAcl
	err := ctx.ReadResource("ise:trustsec/securityGroupAcl:SecurityGroupAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupAcl resources.
type securityGroupAclState struct {
	// Content of ACL
	AclContent *string `pulumi:"aclContent"`
	// Description
	Description *string `pulumi:"description"`
	// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
	IpVersion *string `pulumi:"ipVersion"`
	// The name of the security group ACL
	Name *string `pulumi:"name"`
	// Read-only
	ReadOnly *bool `pulumi:"readOnly"`
}

type SecurityGroupAclState struct {
	// Content of ACL
	AclContent pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
	IpVersion pulumi.StringPtrInput
	// The name of the security group ACL
	Name pulumi.StringPtrInput
	// Read-only
	ReadOnly pulumi.BoolPtrInput
}

func (SecurityGroupAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupAclState)(nil)).Elem()
}

type securityGroupAclArgs struct {
	// Content of ACL
	AclContent string `pulumi:"aclContent"`
	// Description
	Description *string `pulumi:"description"`
	// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
	IpVersion *string `pulumi:"ipVersion"`
	// The name of the security group ACL
	Name *string `pulumi:"name"`
	// Read-only
	ReadOnly *bool `pulumi:"readOnly"`
}

// The set of arguments for constructing a SecurityGroupAcl resource.
type SecurityGroupAclArgs struct {
	// Content of ACL
	AclContent pulumi.StringInput
	// Description
	Description pulumi.StringPtrInput
	// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
	IpVersion pulumi.StringPtrInput
	// The name of the security group ACL
	Name pulumi.StringPtrInput
	// Read-only
	ReadOnly pulumi.BoolPtrInput
}

func (SecurityGroupAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupAclArgs)(nil)).Elem()
}

type SecurityGroupAclInput interface {
	pulumi.Input

	ToSecurityGroupAclOutput() SecurityGroupAclOutput
	ToSecurityGroupAclOutputWithContext(ctx context.Context) SecurityGroupAclOutput
}

func (*SecurityGroupAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupAcl)(nil)).Elem()
}

func (i *SecurityGroupAcl) ToSecurityGroupAclOutput() SecurityGroupAclOutput {
	return i.ToSecurityGroupAclOutputWithContext(context.Background())
}

func (i *SecurityGroupAcl) ToSecurityGroupAclOutputWithContext(ctx context.Context) SecurityGroupAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupAclOutput)
}

// SecurityGroupAclArrayInput is an input type that accepts SecurityGroupAclArray and SecurityGroupAclArrayOutput values.
// You can construct a concrete instance of `SecurityGroupAclArrayInput` via:
//
//	SecurityGroupAclArray{ SecurityGroupAclArgs{...} }
type SecurityGroupAclArrayInput interface {
	pulumi.Input

	ToSecurityGroupAclArrayOutput() SecurityGroupAclArrayOutput
	ToSecurityGroupAclArrayOutputWithContext(context.Context) SecurityGroupAclArrayOutput
}

type SecurityGroupAclArray []SecurityGroupAclInput

func (SecurityGroupAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupAcl)(nil)).Elem()
}

func (i SecurityGroupAclArray) ToSecurityGroupAclArrayOutput() SecurityGroupAclArrayOutput {
	return i.ToSecurityGroupAclArrayOutputWithContext(context.Background())
}

func (i SecurityGroupAclArray) ToSecurityGroupAclArrayOutputWithContext(ctx context.Context) SecurityGroupAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupAclArrayOutput)
}

// SecurityGroupAclMapInput is an input type that accepts SecurityGroupAclMap and SecurityGroupAclMapOutput values.
// You can construct a concrete instance of `SecurityGroupAclMapInput` via:
//
//	SecurityGroupAclMap{ "key": SecurityGroupAclArgs{...} }
type SecurityGroupAclMapInput interface {
	pulumi.Input

	ToSecurityGroupAclMapOutput() SecurityGroupAclMapOutput
	ToSecurityGroupAclMapOutputWithContext(context.Context) SecurityGroupAclMapOutput
}

type SecurityGroupAclMap map[string]SecurityGroupAclInput

func (SecurityGroupAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupAcl)(nil)).Elem()
}

func (i SecurityGroupAclMap) ToSecurityGroupAclMapOutput() SecurityGroupAclMapOutput {
	return i.ToSecurityGroupAclMapOutputWithContext(context.Background())
}

func (i SecurityGroupAclMap) ToSecurityGroupAclMapOutputWithContext(ctx context.Context) SecurityGroupAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupAclMapOutput)
}

type SecurityGroupAclOutput struct{ *pulumi.OutputState }

func (SecurityGroupAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupAcl)(nil)).Elem()
}

func (o SecurityGroupAclOutput) ToSecurityGroupAclOutput() SecurityGroupAclOutput {
	return o
}

func (o SecurityGroupAclOutput) ToSecurityGroupAclOutputWithContext(ctx context.Context) SecurityGroupAclOutput {
	return o
}

// Content of ACL
func (o SecurityGroupAclOutput) AclContent() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupAcl) pulumi.StringOutput { return v.AclContent }).(pulumi.StringOutput)
}

// Description
func (o SecurityGroupAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupAcl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`
func (o SecurityGroupAclOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupAcl) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// The name of the security group ACL
func (o SecurityGroupAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupAcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Read-only
func (o SecurityGroupAclOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityGroupAcl) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type SecurityGroupAclArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupAcl)(nil)).Elem()
}

func (o SecurityGroupAclArrayOutput) ToSecurityGroupAclArrayOutput() SecurityGroupAclArrayOutput {
	return o
}

func (o SecurityGroupAclArrayOutput) ToSecurityGroupAclArrayOutputWithContext(ctx context.Context) SecurityGroupAclArrayOutput {
	return o
}

func (o SecurityGroupAclArrayOutput) Index(i pulumi.IntInput) SecurityGroupAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupAcl {
		return vs[0].([]*SecurityGroupAcl)[vs[1].(int)]
	}).(SecurityGroupAclOutput)
}

type SecurityGroupAclMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupAcl)(nil)).Elem()
}

func (o SecurityGroupAclMapOutput) ToSecurityGroupAclMapOutput() SecurityGroupAclMapOutput {
	return o
}

func (o SecurityGroupAclMapOutput) ToSecurityGroupAclMapOutputWithContext(ctx context.Context) SecurityGroupAclMapOutput {
	return o
}

func (o SecurityGroupAclMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupAcl {
		return vs[0].(map[string]*SecurityGroupAcl)[vs[1].(string)]
	}).(SecurityGroupAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupAclInput)(nil)).Elem(), &SecurityGroupAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupAclArrayInput)(nil)).Elem(), SecurityGroupAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupAclMapInput)(nil)).Elem(), SecurityGroupAclMap{})
	pulumi.RegisterOutputType(SecurityGroupAclOutput{})
	pulumi.RegisterOutputType(SecurityGroupAclArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupAclMapOutput{})
}
