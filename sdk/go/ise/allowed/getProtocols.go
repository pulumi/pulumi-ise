// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package allowed

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read an allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/Allowed"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Allowed.GetProtocols(ctx, &allowed.GetProtocolsArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProtocols(ctx *pulumi.Context, args *LookupProtocolsArgs, opts ...pulumi.InvokeOption) (*LookupProtocolsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProtocolsResult
	err := ctx.Invoke("ise:Allowed/getProtocols:getProtocols", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProtocols.
type LookupProtocolsArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

// A collection of values returned by getProtocols.
type LookupProtocolsResult struct {
	// Allow 5G. This field is only supported from ISE 3.2.
	Allow5g bool `pulumi:"allow5g"`
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow EAP Fast
	AllowEapFast bool `pulumi:"allowEapFast"`
	// Allow EAP MD5
	AllowEapMd5 bool `pulumi:"allowEapMd5"`
	// Allow EAP TLS
	AllowEapTls bool `pulumi:"allowEapTls"`
	// Allow EAP TTLS
	AllowEapTtls bool `pulumi:"allowEapTtls"`
	// Allow LEAP
	AllowLeap bool `pulumi:"allowLeap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow MS CHAP v2
	AllowMsChapV2 bool `pulumi:"allowMsChapV2"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Allow PEAP
	AllowPeap bool `pulumi:"allowPeap"`
	// Allow preferred EAP protocol
	AllowPreferredEapProtocol bool `pulumi:"allowPreferredEapProtocol"`
	// Allow TEAP
	AllowTeap bool `pulumi:"allowTeap"`
	// Allow weak ciphers for EAP
	AllowWeakCiphersForEap bool `pulumi:"allowWeakCiphersForEap"`
	// Description
	Description string `pulumi:"description"`
	// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
	EapFastAcceptClientCert bool `pulumi:"eapFastAcceptClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
	EapFastAllowMachineAuthentication bool `pulumi:"eapFastAllowMachineAuthentication"`
	// Allow EAP GTC
	EapFastEapGtc bool `pulumi:"eapFastEapGtc"`
	// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChange bool `pulumi:"eapFastEapGtcPwdChange"`
	// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
	EapFastEapGtcPwdChangeRetries int `pulumi:"eapFastEapGtcPwdChangeRetries"`
	// Allow EAP MS CHAP v2
	EapFastEapMsChapV2 bool `pulumi:"eapFastEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChange bool `pulumi:"eapFastEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
	EapFastEapMsChapV2PwdChangeRetries int `pulumi:"eapFastEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	EapFastEapTls bool `pulumi:"eapFastEapTls"`
	// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
	EapFastEapTlsAuthOfExpiredCerts bool `pulumi:"eapFastEapTlsAuthOfExpiredCerts"`
	// Enable EAP chaining
	EapFastEnableEapChaining bool `pulumi:"eapFastEnableEapChaining"`
	// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAnonymousProvisioning bool `pulumi:"eapFastPacsAllowAnonymousProvisioning"`
	// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowAuthenticatedProvisioning bool `pulumi:"eapFastPacsAllowAuthenticatedProvisioning"`
	// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsAllowClientCert bool `pulumi:"eapFastPacsAllowClientCert"`
	// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsAllowMachineAuthentication bool `pulumi:"eapFastPacsAllowMachineAuthentication"`
	// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtl int `pulumi:"eapFastPacsAuthorizationPacTtl"`
	// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
	EapFastPacsAuthorizationPacTtlUnit string `pulumi:"eapFastPacsAuthorizationPacTtlUnit"`
	// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtl int `pulumi:"eapFastPacsMachinePacTtl"`
	// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
	EapFastPacsMachinePacTtlUnit string `pulumi:"eapFastPacsMachinePacTtlUnit"`
	// Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
	EapFastPacsServerReturns bool `pulumi:"eapFastPacsServerReturns"`
	// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsStatelessSessionResume bool `pulumi:"eapFastPacsStatelessSessionResume"`
	// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtl int `pulumi:"eapFastPacsTunnelPacTtl"`
	// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsTunnelPacTtlUnit string `pulumi:"eapFastPacsTunnelPacTtlUnit"`
	// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
	EapFastPacsUseProactivePacUpdatePercentage int `pulumi:"eapFastPacsUseProactivePacUpdatePercentage"`
	// Use PACs
	EapFastUsePacs bool `pulumi:"eapFastUsePacs"`
	// Allow authentication of expired certificates
	EapTlsAllowAuthOfExpiredCerts bool `pulumi:"eapTlsAllowAuthOfExpiredCerts"`
	// Enable stateless session resume
	EapTlsEnableStatelessSessionResume bool `pulumi:"eapTlsEnableStatelessSessionResume"`
	// EAP TLS L-Bit
	EapTlsLBit bool `pulumi:"eapTlsLBit"`
	// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketPercentage int `pulumi:"eapTlsSessionTicketPercentage"`
	// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtl int `pulumi:"eapTlsSessionTicketTtl"`
	// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
	EapTlsSessionTicketTtlUnit string `pulumi:"eapTlsSessionTicketTtlUnit"`
	// Allow CHAP
	EapTtlsChap bool `pulumi:"eapTtlsChap"`
	// Allow EAP MD5
	EapTtlsEapMd5 bool `pulumi:"eapTtlsEapMd5"`
	// Allow EAP MS CHAP v2
	EapTtlsEapMsChapV2 bool `pulumi:"eapTtlsEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChange bool `pulumi:"eapTtlsEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
	EapTtlsEapMsChapV2PwdChangeRetries int `pulumi:"eapTtlsEapMsChapV2PwdChangeRetries"`
	// Allow MS CHAP v1
	EapTtlsMsChapV1 bool `pulumi:"eapTtlsMsChapV1"`
	// Allow MS CHAP v2
	EapTtlsMsChapV2 bool `pulumi:"eapTtlsMsChapV2"`
	// Allow PAP ASCII
	EapTtlsPapAscii bool `pulumi:"eapTtlsPapAscii"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the allowed protocols
	Name string `pulumi:"name"`
	// Allow PEAP EAP GTC
	PeapAllowPeapEapGtc bool `pulumi:"peapAllowPeapEapGtc"`
	// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChange bool `pulumi:"peapAllowPeapEapGtcPwdChange"`
	// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
	PeapAllowPeapEapGtcPwdChangeRetries int `pulumi:"peapAllowPeapEapGtcPwdChangeRetries"`
	// Allow PEAP EAP MS CHAP v2
	PeapAllowPeapEapMsChapV2 bool `pulumi:"peapAllowPeapEapMsChapV2"`
	// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChange bool `pulumi:"peapAllowPeapEapMsChapV2PwdChange"`
	// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
	PeapAllowPeapEapMsChapV2PwdChangeRetries int `pulumi:"peapAllowPeapEapMsChapV2PwdChangeRetries"`
	// Allow PEAP EAP TLS
	PeapAllowPeapEapTls bool `pulumi:"peapAllowPeapEapTls"`
	// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
	PeapAllowPeapEapTlsAuthOfExpiredCerts bool `pulumi:"peapAllowPeapEapTlsAuthOfExpiredCerts"`
	// Allow PEAP v0
	PeapPeapV0 bool `pulumi:"peapPeapV0"`
	// Preferred EAP protocol
	PreferredEapProtocol string `pulumi:"preferredEapProtocol"`
	// Process host lookup
	ProcessHostLookup bool `pulumi:"processHostLookup"`
	// Require cryptobinding
	RequireCryptobinding bool `pulumi:"requireCryptobinding"`
	// Require message authentication
	RequireMessageAuth bool `pulumi:"requireMessageAuth"`
	// Allow downgrade to MSK
	TeapDowngradeMsk bool `pulumi:"teapDowngradeMsk"`
	// Accept client certificate during tunnel establishment
	TeapEapAcceptClientCertDuringTunnelEst bool `pulumi:"teapEapAcceptClientCertDuringTunnelEst"`
	// Allow EAP chaining
	TeapEapChaining bool `pulumi:"teapEapChaining"`
	// Allow EAP MS CHAP v2
	TeapEapMsChapV2 bool `pulumi:"teapEapMsChapV2"`
	// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChange bool `pulumi:"teapEapMsChapV2PwdChange"`
	// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
	TeapEapMsChapV2PwdChangeRetries int `pulumi:"teapEapMsChapV2PwdChangeRetries"`
	// Allow EAP TLS
	TeapEapTls bool `pulumi:"teapEapTls"`
	// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
	TeapEapTlsAuthOfExpiredCerts bool `pulumi:"teapEapTlsAuthOfExpiredCerts"`
	// Request basic password authentication
	TeapRequestBasicPwdAuth bool `pulumi:"teapRequestBasicPwdAuth"`
}

func LookupProtocolsOutput(ctx *pulumi.Context, args LookupProtocolsOutputArgs, opts ...pulumi.InvokeOption) LookupProtocolsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProtocolsResult, error) {
			args := v.(LookupProtocolsArgs)
			r, err := LookupProtocols(ctx, &args, opts...)
			var s LookupProtocolsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProtocolsResultOutput)
}

// A collection of arguments for invoking getProtocols.
type LookupProtocolsOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the allowed protocols
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupProtocolsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProtocolsArgs)(nil)).Elem()
}

// A collection of values returned by getProtocols.
type LookupProtocolsResultOutput struct{ *pulumi.OutputState }

func (LookupProtocolsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProtocolsResult)(nil)).Elem()
}

func (o LookupProtocolsResultOutput) ToLookupProtocolsResultOutput() LookupProtocolsResultOutput {
	return o
}

func (o LookupProtocolsResultOutput) ToLookupProtocolsResultOutputWithContext(ctx context.Context) LookupProtocolsResultOutput {
	return o
}

// Allow 5G. This field is only supported from ISE 3.2.
func (o LookupProtocolsResultOutput) Allow5g() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.Allow5g }).(pulumi.BoolOutput)
}

// Allow CHAP
func (o LookupProtocolsResultOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow EAP Fast
func (o LookupProtocolsResultOutput) AllowEapFast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowEapFast }).(pulumi.BoolOutput)
}

// Allow EAP MD5
func (o LookupProtocolsResultOutput) AllowEapMd5() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowEapMd5 }).(pulumi.BoolOutput)
}

// Allow EAP TLS
func (o LookupProtocolsResultOutput) AllowEapTls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowEapTls }).(pulumi.BoolOutput)
}

// Allow EAP TTLS
func (o LookupProtocolsResultOutput) AllowEapTtls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowEapTtls }).(pulumi.BoolOutput)
}

// Allow LEAP
func (o LookupProtocolsResultOutput) AllowLeap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowLeap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o LookupProtocolsResultOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow MS CHAP v2
func (o LookupProtocolsResultOutput) AllowMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowMsChapV2 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o LookupProtocolsResultOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Allow PEAP
func (o LookupProtocolsResultOutput) AllowPeap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowPeap }).(pulumi.BoolOutput)
}

// Allow preferred EAP protocol
func (o LookupProtocolsResultOutput) AllowPreferredEapProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowPreferredEapProtocol }).(pulumi.BoolOutput)
}

// Allow TEAP
func (o LookupProtocolsResultOutput) AllowTeap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowTeap }).(pulumi.BoolOutput)
}

// Allow weak ciphers for EAP
func (o LookupProtocolsResultOutput) AllowWeakCiphersForEap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.AllowWeakCiphersForEap }).(pulumi.BoolOutput)
}

// Description
func (o LookupProtocolsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.Description }).(pulumi.StringOutput)
}

// Accept client certificates. Is required only if `eapFastUsePacs` is `false`.
func (o LookupProtocolsResultOutput) EapFastAcceptClientCert() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastAcceptClientCert }).(pulumi.BoolOutput)
}

// Allow machine authentication. Is required only if `eapFastUsePacs` is `false`.
func (o LookupProtocolsResultOutput) EapFastAllowMachineAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastAllowMachineAuthentication }).(pulumi.BoolOutput)
}

// Allow EAP GTC
func (o LookupProtocolsResultOutput) EapFastEapGtc() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapGtc }).(pulumi.BoolOutput)
}

// Allow EAP GTC password change. Is required only if `eapFastEapGtc` is `true`.
func (o LookupProtocolsResultOutput) EapFastEapGtcPwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapGtcPwdChange }).(pulumi.BoolOutput)
}

// EAP GTC password change retries. Is required only if `eapFastEapGtc` is `true`.
func (o LookupProtocolsResultOutput) EapFastEapGtcPwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastEapGtcPwdChangeRetries }).(pulumi.IntOutput)
}

// Allow EAP MS CHAP v2
func (o LookupProtocolsResultOutput) EapFastEapMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapMsChapV2 }).(pulumi.BoolOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `eapFastEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) EapFastEapMsChapV2PwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapMsChapV2PwdChange }).(pulumi.BoolOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `eapFastEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) EapFastEapMsChapV2PwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastEapMsChapV2PwdChangeRetries }).(pulumi.IntOutput)
}

// Allow EAP TLS
func (o LookupProtocolsResultOutput) EapFastEapTls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapTls }).(pulumi.BoolOutput)
}

// Allow EAP TLS authentication of expired certificates. Is required only if `eapFastEapTls` is `true`.
func (o LookupProtocolsResultOutput) EapFastEapTlsAuthOfExpiredCerts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEapTlsAuthOfExpiredCerts }).(pulumi.BoolOutput)
}

// Enable EAP chaining
func (o LookupProtocolsResultOutput) EapFastEnableEapChaining() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastEnableEapChaining }).(pulumi.BoolOutput)
}

// Allow anonymous provisioning. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAllowAnonymousProvisioning() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsAllowAnonymousProvisioning }).(pulumi.BoolOutput)
}

// Allow authenticated provisioning. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAllowAuthenticatedProvisioning() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsAllowAuthenticatedProvisioning }).(pulumi.BoolOutput)
}

// Accept client certification for provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAllowClientCert() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsAllowClientCert }).(pulumi.BoolOutput)
}

// Allow machine authentication. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAllowMachineAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsAllowMachineAuthentication }).(pulumi.BoolOutput)
}

// Authorization PAC TTL. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAuthorizationPacTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastPacsAuthorizationPacTtl }).(pulumi.IntOutput)
}

// Authorization PAC TTL unit. Is required only if `eapFastPacsStatelessSessionResume` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsAuthorizationPacTtlUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.EapFastPacsAuthorizationPacTtlUnit }).(pulumi.StringOutput)
}

// Machine PAC TTL. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsMachinePacTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastPacsMachinePacTtl }).(pulumi.IntOutput)
}

// Machine PAC TTL unit. Is required only if `eapFastPacsAllowMachineAuthentication` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsMachinePacTtlUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.EapFastPacsMachinePacTtlUnit }).(pulumi.StringOutput)
}

// Server returns access accept after authenticated provisioning. Is required only if `eapFastPacsAllowAuthenticatedProvisioning` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsServerReturns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsServerReturns }).(pulumi.BoolOutput)
}

// Stateless session resume. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsStatelessSessionResume() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastPacsStatelessSessionResume }).(pulumi.BoolOutput)
}

// PACs tunnel PAC time to live. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsTunnelPacTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastPacsTunnelPacTtl }).(pulumi.IntOutput)
}

// PACs tunnel PAC time to live unit. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsTunnelPacTtlUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.EapFastPacsTunnelPacTtlUnit }).(pulumi.StringOutput)
}

// Use proactive pac update percentage. Is required only if `eapFastUsePacs` is `true`.
func (o LookupProtocolsResultOutput) EapFastPacsUseProactivePacUpdatePercentage() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapFastPacsUseProactivePacUpdatePercentage }).(pulumi.IntOutput)
}

// Use PACs
func (o LookupProtocolsResultOutput) EapFastUsePacs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapFastUsePacs }).(pulumi.BoolOutput)
}

// Allow authentication of expired certificates
func (o LookupProtocolsResultOutput) EapTlsAllowAuthOfExpiredCerts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTlsAllowAuthOfExpiredCerts }).(pulumi.BoolOutput)
}

// Enable stateless session resume
func (o LookupProtocolsResultOutput) EapTlsEnableStatelessSessionResume() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTlsEnableStatelessSessionResume }).(pulumi.BoolOutput)
}

// EAP TLS L-Bit
func (o LookupProtocolsResultOutput) EapTlsLBit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTlsLBit }).(pulumi.BoolOutput)
}

// Session ticket percentage. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
func (o LookupProtocolsResultOutput) EapTlsSessionTicketPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapTlsSessionTicketPercentage }).(pulumi.IntOutput)
}

// Session ticket TTL. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
func (o LookupProtocolsResultOutput) EapTlsSessionTicketTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapTlsSessionTicketTtl }).(pulumi.IntOutput)
}

// Session ticket TTL unit. Is required only if `eapTlsEnableStatelessSessionResume` is `true`.
func (o LookupProtocolsResultOutput) EapTlsSessionTicketTtlUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.EapTlsSessionTicketTtlUnit }).(pulumi.StringOutput)
}

// Allow CHAP
func (o LookupProtocolsResultOutput) EapTtlsChap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsChap }).(pulumi.BoolOutput)
}

// Allow EAP MD5
func (o LookupProtocolsResultOutput) EapTtlsEapMd5() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsEapMd5 }).(pulumi.BoolOutput)
}

// Allow EAP MS CHAP v2
func (o LookupProtocolsResultOutput) EapTtlsEapMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsEapMsChapV2 }).(pulumi.BoolOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `eapTtlsEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) EapTtlsEapMsChapV2PwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsEapMsChapV2PwdChange }).(pulumi.BoolOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `eapTtlsEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) EapTtlsEapMsChapV2PwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.EapTtlsEapMsChapV2PwdChangeRetries }).(pulumi.IntOutput)
}

// Allow MS CHAP v1
func (o LookupProtocolsResultOutput) EapTtlsMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsMsChapV1 }).(pulumi.BoolOutput)
}

// Allow MS CHAP v2
func (o LookupProtocolsResultOutput) EapTtlsMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsMsChapV2 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o LookupProtocolsResultOutput) EapTtlsPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.EapTtlsPapAscii }).(pulumi.BoolOutput)
}

// The id of the object
func (o LookupProtocolsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the allowed protocols
func (o LookupProtocolsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.Name }).(pulumi.StringOutput)
}

// Allow PEAP EAP GTC
func (o LookupProtocolsResultOutput) PeapAllowPeapEapGtc() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapGtc }).(pulumi.BoolOutput)
}

// Allow PEAP EAP GTC password change. Is required only if `allowPeapEapGtc` is `true`.
func (o LookupProtocolsResultOutput) PeapAllowPeapEapGtcPwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapGtcPwdChange }).(pulumi.BoolOutput)
}

// PEAP EAP GTC password change retries. Is required only if `allowPeapEapGtc` is `true`.
func (o LookupProtocolsResultOutput) PeapAllowPeapEapGtcPwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.PeapAllowPeapEapGtcPwdChangeRetries }).(pulumi.IntOutput)
}

// Allow PEAP EAP MS CHAP v2
func (o LookupProtocolsResultOutput) PeapAllowPeapEapMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapMsChapV2 }).(pulumi.BoolOutput)
}

// Allow PEAP EAP MS CHAP v2 password change. Is required only if `allowPeapEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) PeapAllowPeapEapMsChapV2PwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapMsChapV2PwdChange }).(pulumi.BoolOutput)
}

// Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allowPeapEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) PeapAllowPeapEapMsChapV2PwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.PeapAllowPeapEapMsChapV2PwdChangeRetries }).(pulumi.IntOutput)
}

// Allow PEAP EAP TLS
func (o LookupProtocolsResultOutput) PeapAllowPeapEapTls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapTls }).(pulumi.BoolOutput)
}

// Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peapAllowPeapEapTls` is `true`.
func (o LookupProtocolsResultOutput) PeapAllowPeapEapTlsAuthOfExpiredCerts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapAllowPeapEapTlsAuthOfExpiredCerts }).(pulumi.BoolOutput)
}

// Allow PEAP v0
func (o LookupProtocolsResultOutput) PeapPeapV0() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.PeapPeapV0 }).(pulumi.BoolOutput)
}

// Preferred EAP protocol
func (o LookupProtocolsResultOutput) PreferredEapProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProtocolsResult) string { return v.PreferredEapProtocol }).(pulumi.StringOutput)
}

// Process host lookup
func (o LookupProtocolsResultOutput) ProcessHostLookup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.ProcessHostLookup }).(pulumi.BoolOutput)
}

// Require cryptobinding
func (o LookupProtocolsResultOutput) RequireCryptobinding() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.RequireCryptobinding }).(pulumi.BoolOutput)
}

// Require message authentication
func (o LookupProtocolsResultOutput) RequireMessageAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.RequireMessageAuth }).(pulumi.BoolOutput)
}

// Allow downgrade to MSK
func (o LookupProtocolsResultOutput) TeapDowngradeMsk() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapDowngradeMsk }).(pulumi.BoolOutput)
}

// Accept client certificate during tunnel establishment
func (o LookupProtocolsResultOutput) TeapEapAcceptClientCertDuringTunnelEst() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapAcceptClientCertDuringTunnelEst }).(pulumi.BoolOutput)
}

// Allow EAP chaining
func (o LookupProtocolsResultOutput) TeapEapChaining() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapChaining }).(pulumi.BoolOutput)
}

// Allow EAP MS CHAP v2
func (o LookupProtocolsResultOutput) TeapEapMsChapV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapMsChapV2 }).(pulumi.BoolOutput)
}

// Allow EAP MS CHAP v2 password change. Is required only if `teapEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) TeapEapMsChapV2PwdChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapMsChapV2PwdChange }).(pulumi.BoolOutput)
}

// EAP MS CHAP v2 password change retries. Is required only if `teapEapMsChapV2` is `true`.
func (o LookupProtocolsResultOutput) TeapEapMsChapV2PwdChangeRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProtocolsResult) int { return v.TeapEapMsChapV2PwdChangeRetries }).(pulumi.IntOutput)
}

// Allow EAP TLS
func (o LookupProtocolsResultOutput) TeapEapTls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapTls }).(pulumi.BoolOutput)
}

// Allow EAP TLS authentication of expired certs. Is required only if `teapEapTls` is `true`.
func (o LookupProtocolsResultOutput) TeapEapTlsAuthOfExpiredCerts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapEapTlsAuthOfExpiredCerts }).(pulumi.BoolOutput)
}

// Request basic password authentication
func (o LookupProtocolsResultOutput) TeapRequestBasicPwdAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProtocolsResult) bool { return v.TeapRequestBasicPwdAuth }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProtocolsResultOutput{})
}
