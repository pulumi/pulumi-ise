// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tacacscommand

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SetCommand struct {
	// Command arguments
	Arguments string `pulumi:"arguments"`
	// Command
	Command string `pulumi:"command"`
	// Grant
	//   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
	Grant string `pulumi:"grant"`
}

// SetCommandInput is an input type that accepts SetCommandArgs and SetCommandOutput values.
// You can construct a concrete instance of `SetCommandInput` via:
//
//	SetCommandArgs{...}
type SetCommandInput interface {
	pulumi.Input

	ToSetCommandOutput() SetCommandOutput
	ToSetCommandOutputWithContext(context.Context) SetCommandOutput
}

type SetCommandArgs struct {
	// Command arguments
	Arguments pulumi.StringInput `pulumi:"arguments"`
	// Command
	Command pulumi.StringInput `pulumi:"command"`
	// Grant
	//   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
	Grant pulumi.StringInput `pulumi:"grant"`
}

func (SetCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetCommand)(nil)).Elem()
}

func (i SetCommandArgs) ToSetCommandOutput() SetCommandOutput {
	return i.ToSetCommandOutputWithContext(context.Background())
}

func (i SetCommandArgs) ToSetCommandOutputWithContext(ctx context.Context) SetCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetCommandOutput)
}

// SetCommandArrayInput is an input type that accepts SetCommandArray and SetCommandArrayOutput values.
// You can construct a concrete instance of `SetCommandArrayInput` via:
//
//	SetCommandArray{ SetCommandArgs{...} }
type SetCommandArrayInput interface {
	pulumi.Input

	ToSetCommandArrayOutput() SetCommandArrayOutput
	ToSetCommandArrayOutputWithContext(context.Context) SetCommandArrayOutput
}

type SetCommandArray []SetCommandInput

func (SetCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetCommand)(nil)).Elem()
}

func (i SetCommandArray) ToSetCommandArrayOutput() SetCommandArrayOutput {
	return i.ToSetCommandArrayOutputWithContext(context.Background())
}

func (i SetCommandArray) ToSetCommandArrayOutputWithContext(ctx context.Context) SetCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetCommandArrayOutput)
}

type SetCommandOutput struct{ *pulumi.OutputState }

func (SetCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetCommand)(nil)).Elem()
}

func (o SetCommandOutput) ToSetCommandOutput() SetCommandOutput {
	return o
}

func (o SetCommandOutput) ToSetCommandOutputWithContext(ctx context.Context) SetCommandOutput {
	return o
}

// Command arguments
func (o SetCommandOutput) Arguments() pulumi.StringOutput {
	return o.ApplyT(func(v SetCommand) string { return v.Arguments }).(pulumi.StringOutput)
}

// Command
func (o SetCommandOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v SetCommand) string { return v.Command }).(pulumi.StringOutput)
}

// Grant
//   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
func (o SetCommandOutput) Grant() pulumi.StringOutput {
	return o.ApplyT(func(v SetCommand) string { return v.Grant }).(pulumi.StringOutput)
}

type SetCommandArrayOutput struct{ *pulumi.OutputState }

func (SetCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetCommand)(nil)).Elem()
}

func (o SetCommandArrayOutput) ToSetCommandArrayOutput() SetCommandArrayOutput {
	return o
}

func (o SetCommandArrayOutput) ToSetCommandArrayOutputWithContext(ctx context.Context) SetCommandArrayOutput {
	return o
}

func (o SetCommandArrayOutput) Index(i pulumi.IntInput) SetCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetCommand {
		return vs[0].([]SetCommand)[vs[1].(int)]
	}).(SetCommandOutput)
}

type GetSetCommand struct {
	// Command arguments
	Arguments string `pulumi:"arguments"`
	// Command
	Command string `pulumi:"command"`
	// Grant
	Grant string `pulumi:"grant"`
}

// GetSetCommandInput is an input type that accepts GetSetCommandArgs and GetSetCommandOutput values.
// You can construct a concrete instance of `GetSetCommandInput` via:
//
//	GetSetCommandArgs{...}
type GetSetCommandInput interface {
	pulumi.Input

	ToGetSetCommandOutput() GetSetCommandOutput
	ToGetSetCommandOutputWithContext(context.Context) GetSetCommandOutput
}

type GetSetCommandArgs struct {
	// Command arguments
	Arguments pulumi.StringInput `pulumi:"arguments"`
	// Command
	Command pulumi.StringInput `pulumi:"command"`
	// Grant
	Grant pulumi.StringInput `pulumi:"grant"`
}

func (GetSetCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetCommand)(nil)).Elem()
}

func (i GetSetCommandArgs) ToGetSetCommandOutput() GetSetCommandOutput {
	return i.ToGetSetCommandOutputWithContext(context.Background())
}

func (i GetSetCommandArgs) ToGetSetCommandOutputWithContext(ctx context.Context) GetSetCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetCommandOutput)
}

// GetSetCommandArrayInput is an input type that accepts GetSetCommandArray and GetSetCommandArrayOutput values.
// You can construct a concrete instance of `GetSetCommandArrayInput` via:
//
//	GetSetCommandArray{ GetSetCommandArgs{...} }
type GetSetCommandArrayInput interface {
	pulumi.Input

	ToGetSetCommandArrayOutput() GetSetCommandArrayOutput
	ToGetSetCommandArrayOutputWithContext(context.Context) GetSetCommandArrayOutput
}

type GetSetCommandArray []GetSetCommandInput

func (GetSetCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetCommand)(nil)).Elem()
}

func (i GetSetCommandArray) ToGetSetCommandArrayOutput() GetSetCommandArrayOutput {
	return i.ToGetSetCommandArrayOutputWithContext(context.Background())
}

func (i GetSetCommandArray) ToGetSetCommandArrayOutputWithContext(ctx context.Context) GetSetCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSetCommandArrayOutput)
}

type GetSetCommandOutput struct{ *pulumi.OutputState }

func (GetSetCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSetCommand)(nil)).Elem()
}

func (o GetSetCommandOutput) ToGetSetCommandOutput() GetSetCommandOutput {
	return o
}

func (o GetSetCommandOutput) ToGetSetCommandOutputWithContext(ctx context.Context) GetSetCommandOutput {
	return o
}

// Command arguments
func (o GetSetCommandOutput) Arguments() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetCommand) string { return v.Arguments }).(pulumi.StringOutput)
}

// Command
func (o GetSetCommandOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetCommand) string { return v.Command }).(pulumi.StringOutput)
}

// Grant
func (o GetSetCommandOutput) Grant() pulumi.StringOutput {
	return o.ApplyT(func(v GetSetCommand) string { return v.Grant }).(pulumi.StringOutput)
}

type GetSetCommandArrayOutput struct{ *pulumi.OutputState }

func (GetSetCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSetCommand)(nil)).Elem()
}

func (o GetSetCommandArrayOutput) ToGetSetCommandArrayOutput() GetSetCommandArrayOutput {
	return o
}

func (o GetSetCommandArrayOutput) ToGetSetCommandArrayOutputWithContext(ctx context.Context) GetSetCommandArrayOutput {
	return o
}

func (o GetSetCommandArrayOutput) Index(i pulumi.IntInput) GetSetCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSetCommand {
		return vs[0].([]GetSetCommand)[vs[1].(int)]
	}).(GetSetCommandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SetCommandInput)(nil)).Elem(), SetCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetCommandArrayInput)(nil)).Elem(), SetCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetCommandInput)(nil)).Elem(), GetSetCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSetCommandArrayInput)(nil)).Elem(), GetSetCommandArray{})
	pulumi.RegisterOutputType(SetCommandOutput{})
	pulumi.RegisterOutputType(SetCommandArrayOutput{})
	pulumi.RegisterOutputType(GetSetCommandOutput{})
	pulumi.RegisterOutputType(GetSetCommandArrayOutput{})
}
