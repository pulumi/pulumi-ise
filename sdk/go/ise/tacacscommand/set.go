// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tacacscommand

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS Command Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/TacacsCommand"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := TacacsCommand.NewSet(ctx, "example", &TacacsCommand.SetArgs{
//				Name:            pulumi.String("CommandSet1"),
//				Description:     pulumi.String("My TACACS command set"),
//				PermitUnmatched: pulumi.Bool(true),
//				Commands: tacacscommand.SetCommandArray{
//					&tacacscommand.SetCommandArgs{
//						Grant:     pulumi.String("PERMIT"),
//						Command:   pulumi.String("show"),
//						Arguments: pulumi.String(""),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:TacacsCommand/set:Set example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Set struct {
	pulumi.CustomResourceState

	Commands SetCommandArrayOutput `pulumi:"commands"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the TACACS command set
	Name pulumi.StringOutput `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolOutput `pulumi:"permitUnmatched"`
}

// NewSet registers a new resource with the given unique name, arguments, and options.
func NewSet(ctx *pulumi.Context,
	name string, args *SetArgs, opts ...pulumi.ResourceOption) (*Set, error) {
	if args == nil {
		args = &SetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Set
	err := ctx.RegisterResource("ise:TacacsCommand/set:Set", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSet gets an existing Set resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SetState, opts ...pulumi.ResourceOption) (*Set, error) {
	var resource Set
	err := ctx.ReadResource("ise:TacacsCommand/set:Set", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Set resources.
type setState struct {
	Commands []SetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

type SetState struct {
	Commands SetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (SetState) ElementType() reflect.Type {
	return reflect.TypeOf((*setState)(nil)).Elem()
}

type setArgs struct {
	Commands []SetCommand `pulumi:"commands"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the TACACS command set
	Name *string `pulumi:"name"`
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched *bool `pulumi:"permitUnmatched"`
}

// The set of arguments for constructing a Set resource.
type SetArgs struct {
	Commands SetCommandArrayInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the TACACS command set
	Name pulumi.StringPtrInput
	// Permit unmatched commands - Default value: `false`
	PermitUnmatched pulumi.BoolPtrInput
}

func (SetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*setArgs)(nil)).Elem()
}

type SetInput interface {
	pulumi.Input

	ToSetOutput() SetOutput
	ToSetOutputWithContext(ctx context.Context) SetOutput
}

func (*Set) ElementType() reflect.Type {
	return reflect.TypeOf((**Set)(nil)).Elem()
}

func (i *Set) ToSetOutput() SetOutput {
	return i.ToSetOutputWithContext(context.Background())
}

func (i *Set) ToSetOutputWithContext(ctx context.Context) SetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetOutput)
}

// SetArrayInput is an input type that accepts SetArray and SetArrayOutput values.
// You can construct a concrete instance of `SetArrayInput` via:
//
//	SetArray{ SetArgs{...} }
type SetArrayInput interface {
	pulumi.Input

	ToSetArrayOutput() SetArrayOutput
	ToSetArrayOutputWithContext(context.Context) SetArrayOutput
}

type SetArray []SetInput

func (SetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Set)(nil)).Elem()
}

func (i SetArray) ToSetArrayOutput() SetArrayOutput {
	return i.ToSetArrayOutputWithContext(context.Background())
}

func (i SetArray) ToSetArrayOutputWithContext(ctx context.Context) SetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetArrayOutput)
}

// SetMapInput is an input type that accepts SetMap and SetMapOutput values.
// You can construct a concrete instance of `SetMapInput` via:
//
//	SetMap{ "key": SetArgs{...} }
type SetMapInput interface {
	pulumi.Input

	ToSetMapOutput() SetMapOutput
	ToSetMapOutputWithContext(context.Context) SetMapOutput
}

type SetMap map[string]SetInput

func (SetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Set)(nil)).Elem()
}

func (i SetMap) ToSetMapOutput() SetMapOutput {
	return i.ToSetMapOutputWithContext(context.Background())
}

func (i SetMap) ToSetMapOutputWithContext(ctx context.Context) SetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetMapOutput)
}

type SetOutput struct{ *pulumi.OutputState }

func (SetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Set)(nil)).Elem()
}

func (o SetOutput) ToSetOutput() SetOutput {
	return o
}

func (o SetOutput) ToSetOutputWithContext(ctx context.Context) SetOutput {
	return o
}

func (o SetOutput) Commands() SetCommandArrayOutput {
	return o.ApplyT(func(v *Set) SetCommandArrayOutput { return v.Commands }).(SetCommandArrayOutput)
}

// Description
func (o SetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Set) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the TACACS command set
func (o SetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Set) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Permit unmatched commands - Default value: `false`
func (o SetOutput) PermitUnmatched() pulumi.BoolOutput {
	return o.ApplyT(func(v *Set) pulumi.BoolOutput { return v.PermitUnmatched }).(pulumi.BoolOutput)
}

type SetArrayOutput struct{ *pulumi.OutputState }

func (SetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Set)(nil)).Elem()
}

func (o SetArrayOutput) ToSetArrayOutput() SetArrayOutput {
	return o
}

func (o SetArrayOutput) ToSetArrayOutputWithContext(ctx context.Context) SetArrayOutput {
	return o
}

func (o SetArrayOutput) Index(i pulumi.IntInput) SetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Set {
		return vs[0].([]*Set)[vs[1].(int)]
	}).(SetOutput)
}

type SetMapOutput struct{ *pulumi.OutputState }

func (SetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Set)(nil)).Elem()
}

func (o SetMapOutput) ToSetMapOutput() SetMapOutput {
	return o
}

func (o SetMapOutput) ToSetMapOutputWithContext(ctx context.Context) SetMapOutput {
	return o
}

func (o SetMapOutput) MapIndex(k pulumi.StringInput) SetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Set {
		return vs[0].(map[string]*Set)[vs[1].(string)]
	}).(SetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SetInput)(nil)).Elem(), &Set{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetArrayInput)(nil)).Elem(), SetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetMapInput)(nil)).Elem(), SetMap{})
	pulumi.RegisterOutputType(SetOutput{})
	pulumi.RegisterOutputType(SetArrayOutput{})
	pulumi.RegisterOutputType(SetMapOutput{})
}
