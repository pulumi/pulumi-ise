// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trustsecegressmatrix

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TrustSec Egress Matrix Cell.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecEgressMatrix"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := TrustsecEgressMatrix.NewCell(ctx, "example", &TrustsecEgressMatrix.CellArgs{
//				Description:      pulumi.String("EgressMatrixCell Description"),
//				DefaultRule:      pulumi.String("NONE"),
//				MatrixCellStatus: pulumi.String("ENABLED"),
//				Sgacls: pulumi.StringArray{
//					pulumi.String("26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a"),
//				},
//				SourceSgtId:      pulumi.String("93c66ed0-8c01-11e6-996c-525400b48521"),
//				DestinationSgtId: pulumi.String("93e1bf00-8c01-11e6-996c-525400b48521"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:TrustsecEgressMatrix/cell:Cell example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Cell struct {
	pulumi.CustomResourceState

	// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
	DefaultRule pulumi.StringOutput `pulumi:"defaultRule"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Destination Trustsec Security Group ID
	DestinationSgtId pulumi.StringOutput `pulumi:"destinationSgtId"`
	// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
	MatrixCellStatus pulumi.StringOutput `pulumi:"matrixCellStatus"`
	// List of TrustSec Security Groups ACLs
	Sgacls pulumi.StringArrayOutput `pulumi:"sgacls"`
	// Source Trustsec Security Group ID
	SourceSgtId pulumi.StringOutput `pulumi:"sourceSgtId"`
}

// NewCell registers a new resource with the given unique name, arguments, and options.
func NewCell(ctx *pulumi.Context,
	name string, args *CellArgs, opts ...pulumi.ResourceOption) (*Cell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationSgtId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationSgtId'")
	}
	if args.SourceSgtId == nil {
		return nil, errors.New("invalid value for required argument 'SourceSgtId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cell
	err := ctx.RegisterResource("ise:TrustsecEgressMatrix/cell:Cell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCell gets an existing Cell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellState, opts ...pulumi.ResourceOption) (*Cell, error) {
	var resource Cell
	err := ctx.ReadResource("ise:TrustsecEgressMatrix/cell:Cell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cell resources.
type cellState struct {
	// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
	DefaultRule *string `pulumi:"defaultRule"`
	// Description
	Description *string `pulumi:"description"`
	// Destination Trustsec Security Group ID
	DestinationSgtId *string `pulumi:"destinationSgtId"`
	// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
	MatrixCellStatus *string `pulumi:"matrixCellStatus"`
	// List of TrustSec Security Groups ACLs
	Sgacls []string `pulumi:"sgacls"`
	// Source Trustsec Security Group ID
	SourceSgtId *string `pulumi:"sourceSgtId"`
}

type CellState struct {
	// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
	DefaultRule pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Destination Trustsec Security Group ID
	DestinationSgtId pulumi.StringPtrInput
	// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
	MatrixCellStatus pulumi.StringPtrInput
	// List of TrustSec Security Groups ACLs
	Sgacls pulumi.StringArrayInput
	// Source Trustsec Security Group ID
	SourceSgtId pulumi.StringPtrInput
}

func (CellState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellState)(nil)).Elem()
}

type cellArgs struct {
	// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
	DefaultRule *string `pulumi:"defaultRule"`
	// Description
	Description *string `pulumi:"description"`
	// Destination Trustsec Security Group ID
	DestinationSgtId string `pulumi:"destinationSgtId"`
	// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
	MatrixCellStatus *string `pulumi:"matrixCellStatus"`
	// List of TrustSec Security Groups ACLs
	Sgacls []string `pulumi:"sgacls"`
	// Source Trustsec Security Group ID
	SourceSgtId string `pulumi:"sourceSgtId"`
}

// The set of arguments for constructing a Cell resource.
type CellArgs struct {
	// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
	DefaultRule pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Destination Trustsec Security Group ID
	DestinationSgtId pulumi.StringInput
	// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
	MatrixCellStatus pulumi.StringPtrInput
	// List of TrustSec Security Groups ACLs
	Sgacls pulumi.StringArrayInput
	// Source Trustsec Security Group ID
	SourceSgtId pulumi.StringInput
}

func (CellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellArgs)(nil)).Elem()
}

type CellInput interface {
	pulumi.Input

	ToCellOutput() CellOutput
	ToCellOutputWithContext(ctx context.Context) CellOutput
}

func (*Cell) ElementType() reflect.Type {
	return reflect.TypeOf((**Cell)(nil)).Elem()
}

func (i *Cell) ToCellOutput() CellOutput {
	return i.ToCellOutputWithContext(context.Background())
}

func (i *Cell) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellOutput)
}

// CellArrayInput is an input type that accepts CellArray and CellArrayOutput values.
// You can construct a concrete instance of `CellArrayInput` via:
//
//	CellArray{ CellArgs{...} }
type CellArrayInput interface {
	pulumi.Input

	ToCellArrayOutput() CellArrayOutput
	ToCellArrayOutputWithContext(context.Context) CellArrayOutput
}

type CellArray []CellInput

func (CellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cell)(nil)).Elem()
}

func (i CellArray) ToCellArrayOutput() CellArrayOutput {
	return i.ToCellArrayOutputWithContext(context.Background())
}

func (i CellArray) ToCellArrayOutputWithContext(ctx context.Context) CellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellArrayOutput)
}

// CellMapInput is an input type that accepts CellMap and CellMapOutput values.
// You can construct a concrete instance of `CellMapInput` via:
//
//	CellMap{ "key": CellArgs{...} }
type CellMapInput interface {
	pulumi.Input

	ToCellMapOutput() CellMapOutput
	ToCellMapOutputWithContext(context.Context) CellMapOutput
}

type CellMap map[string]CellInput

func (CellMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cell)(nil)).Elem()
}

func (i CellMap) ToCellMapOutput() CellMapOutput {
	return i.ToCellMapOutputWithContext(context.Background())
}

func (i CellMap) ToCellMapOutputWithContext(ctx context.Context) CellMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellMapOutput)
}

type CellOutput struct{ *pulumi.OutputState }

func (CellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cell)(nil)).Elem()
}

func (o CellOutput) ToCellOutput() CellOutput {
	return o
}

func (o CellOutput) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return o
}

// Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`
func (o CellOutput) DefaultRule() pulumi.StringOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringOutput { return v.DefaultRule }).(pulumi.StringOutput)
}

// Description
func (o CellOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Destination Trustsec Security Group ID
func (o CellOutput) DestinationSgtId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringOutput { return v.DestinationSgtId }).(pulumi.StringOutput)
}

// Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`
func (o CellOutput) MatrixCellStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringOutput { return v.MatrixCellStatus }).(pulumi.StringOutput)
}

// List of TrustSec Security Groups ACLs
func (o CellOutput) Sgacls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringArrayOutput { return v.Sgacls }).(pulumi.StringArrayOutput)
}

// Source Trustsec Security Group ID
func (o CellOutput) SourceSgtId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cell) pulumi.StringOutput { return v.SourceSgtId }).(pulumi.StringOutput)
}

type CellArrayOutput struct{ *pulumi.OutputState }

func (CellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cell)(nil)).Elem()
}

func (o CellArrayOutput) ToCellArrayOutput() CellArrayOutput {
	return o
}

func (o CellArrayOutput) ToCellArrayOutputWithContext(ctx context.Context) CellArrayOutput {
	return o
}

func (o CellArrayOutput) Index(i pulumi.IntInput) CellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cell {
		return vs[0].([]*Cell)[vs[1].(int)]
	}).(CellOutput)
}

type CellMapOutput struct{ *pulumi.OutputState }

func (CellMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cell)(nil)).Elem()
}

func (o CellMapOutput) ToCellMapOutput() CellMapOutput {
	return o
}

func (o CellMapOutput) ToCellMapOutputWithContext(ctx context.Context) CellMapOutput {
	return o
}

func (o CellMapOutput) MapIndex(k pulumi.StringInput) CellOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cell {
		return vs[0].(map[string]*Cell)[vs[1].(string)]
	}).(CellOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellInput)(nil)).Elem(), &Cell{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellArrayInput)(nil)).Elem(), CellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellMapInput)(nil)).Elem(), CellMap{})
	pulumi.RegisterOutputType(CellOutput{})
	pulumi.RegisterOutputType(CellArrayOutput{})
	pulumi.RegisterOutputType(CellMapOutput{})
}
