// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage an Active Directory Join Domain with All Nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/activeDirectory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := activeDirectory.NewJoinDomainWithAllNodes(ctx, "example", &activeDirectory.JoinDomainWithAllNodesArgs{
//				JoinPointId: pulumi.String("73808580-b6e6-11ee-8960-de6d7692bc40"),
//				AdditionalDatas: activedirectory.JoinDomainWithAllNodesAdditionalDataArray{
//					&activedirectory.JoinDomainWithAllNodesAdditionalDataArgs{
//						Name:  pulumi.String("username"),
//						Value: pulumi.String("administrator"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type JoinDomainWithAllNodes struct {
	pulumi.CustomResourceState

	AdditionalDatas JoinDomainWithAllNodesAdditionalDataArrayOutput `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId pulumi.StringOutput `pulumi:"joinPointId"`
}

// NewJoinDomainWithAllNodes registers a new resource with the given unique name, arguments, and options.
func NewJoinDomainWithAllNodes(ctx *pulumi.Context,
	name string, args *JoinDomainWithAllNodesArgs, opts ...pulumi.ResourceOption) (*JoinDomainWithAllNodes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdditionalDatas == nil {
		return nil, errors.New("invalid value for required argument 'AdditionalDatas'")
	}
	if args.JoinPointId == nil {
		return nil, errors.New("invalid value for required argument 'JoinPointId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JoinDomainWithAllNodes
	err := ctx.RegisterResource("ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJoinDomainWithAllNodes gets an existing JoinDomainWithAllNodes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJoinDomainWithAllNodes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JoinDomainWithAllNodesState, opts ...pulumi.ResourceOption) (*JoinDomainWithAllNodes, error) {
	var resource JoinDomainWithAllNodes
	err := ctx.ReadResource("ise:activeDirectory/joinDomainWithAllNodes:JoinDomainWithAllNodes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JoinDomainWithAllNodes resources.
type joinDomainWithAllNodesState struct {
	AdditionalDatas []JoinDomainWithAllNodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId *string `pulumi:"joinPointId"`
}

type JoinDomainWithAllNodesState struct {
	AdditionalDatas JoinDomainWithAllNodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringPtrInput
}

func (JoinDomainWithAllNodesState) ElementType() reflect.Type {
	return reflect.TypeOf((*joinDomainWithAllNodesState)(nil)).Elem()
}

type joinDomainWithAllNodesArgs struct {
	AdditionalDatas []JoinDomainWithAllNodesAdditionalData `pulumi:"additionalDatas"`
	// Active Directory Join Point ID
	JoinPointId string `pulumi:"joinPointId"`
}

// The set of arguments for constructing a JoinDomainWithAllNodes resource.
type JoinDomainWithAllNodesArgs struct {
	AdditionalDatas JoinDomainWithAllNodesAdditionalDataArrayInput
	// Active Directory Join Point ID
	JoinPointId pulumi.StringInput
}

func (JoinDomainWithAllNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*joinDomainWithAllNodesArgs)(nil)).Elem()
}

type JoinDomainWithAllNodesInput interface {
	pulumi.Input

	ToJoinDomainWithAllNodesOutput() JoinDomainWithAllNodesOutput
	ToJoinDomainWithAllNodesOutputWithContext(ctx context.Context) JoinDomainWithAllNodesOutput
}

func (*JoinDomainWithAllNodes) ElementType() reflect.Type {
	return reflect.TypeOf((**JoinDomainWithAllNodes)(nil)).Elem()
}

func (i *JoinDomainWithAllNodes) ToJoinDomainWithAllNodesOutput() JoinDomainWithAllNodesOutput {
	return i.ToJoinDomainWithAllNodesOutputWithContext(context.Background())
}

func (i *JoinDomainWithAllNodes) ToJoinDomainWithAllNodesOutputWithContext(ctx context.Context) JoinDomainWithAllNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinDomainWithAllNodesOutput)
}

// JoinDomainWithAllNodesArrayInput is an input type that accepts JoinDomainWithAllNodesArray and JoinDomainWithAllNodesArrayOutput values.
// You can construct a concrete instance of `JoinDomainWithAllNodesArrayInput` via:
//
//	JoinDomainWithAllNodesArray{ JoinDomainWithAllNodesArgs{...} }
type JoinDomainWithAllNodesArrayInput interface {
	pulumi.Input

	ToJoinDomainWithAllNodesArrayOutput() JoinDomainWithAllNodesArrayOutput
	ToJoinDomainWithAllNodesArrayOutputWithContext(context.Context) JoinDomainWithAllNodesArrayOutput
}

type JoinDomainWithAllNodesArray []JoinDomainWithAllNodesInput

func (JoinDomainWithAllNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JoinDomainWithAllNodes)(nil)).Elem()
}

func (i JoinDomainWithAllNodesArray) ToJoinDomainWithAllNodesArrayOutput() JoinDomainWithAllNodesArrayOutput {
	return i.ToJoinDomainWithAllNodesArrayOutputWithContext(context.Background())
}

func (i JoinDomainWithAllNodesArray) ToJoinDomainWithAllNodesArrayOutputWithContext(ctx context.Context) JoinDomainWithAllNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinDomainWithAllNodesArrayOutput)
}

// JoinDomainWithAllNodesMapInput is an input type that accepts JoinDomainWithAllNodesMap and JoinDomainWithAllNodesMapOutput values.
// You can construct a concrete instance of `JoinDomainWithAllNodesMapInput` via:
//
//	JoinDomainWithAllNodesMap{ "key": JoinDomainWithAllNodesArgs{...} }
type JoinDomainWithAllNodesMapInput interface {
	pulumi.Input

	ToJoinDomainWithAllNodesMapOutput() JoinDomainWithAllNodesMapOutput
	ToJoinDomainWithAllNodesMapOutputWithContext(context.Context) JoinDomainWithAllNodesMapOutput
}

type JoinDomainWithAllNodesMap map[string]JoinDomainWithAllNodesInput

func (JoinDomainWithAllNodesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JoinDomainWithAllNodes)(nil)).Elem()
}

func (i JoinDomainWithAllNodesMap) ToJoinDomainWithAllNodesMapOutput() JoinDomainWithAllNodesMapOutput {
	return i.ToJoinDomainWithAllNodesMapOutputWithContext(context.Background())
}

func (i JoinDomainWithAllNodesMap) ToJoinDomainWithAllNodesMapOutputWithContext(ctx context.Context) JoinDomainWithAllNodesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinDomainWithAllNodesMapOutput)
}

type JoinDomainWithAllNodesOutput struct{ *pulumi.OutputState }

func (JoinDomainWithAllNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JoinDomainWithAllNodes)(nil)).Elem()
}

func (o JoinDomainWithAllNodesOutput) ToJoinDomainWithAllNodesOutput() JoinDomainWithAllNodesOutput {
	return o
}

func (o JoinDomainWithAllNodesOutput) ToJoinDomainWithAllNodesOutputWithContext(ctx context.Context) JoinDomainWithAllNodesOutput {
	return o
}

func (o JoinDomainWithAllNodesOutput) AdditionalDatas() JoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o.ApplyT(func(v *JoinDomainWithAllNodes) JoinDomainWithAllNodesAdditionalDataArrayOutput {
		return v.AdditionalDatas
	}).(JoinDomainWithAllNodesAdditionalDataArrayOutput)
}

// Active Directory Join Point ID
func (o JoinDomainWithAllNodesOutput) JoinPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *JoinDomainWithAllNodes) pulumi.StringOutput { return v.JoinPointId }).(pulumi.StringOutput)
}

type JoinDomainWithAllNodesArrayOutput struct{ *pulumi.OutputState }

func (JoinDomainWithAllNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JoinDomainWithAllNodes)(nil)).Elem()
}

func (o JoinDomainWithAllNodesArrayOutput) ToJoinDomainWithAllNodesArrayOutput() JoinDomainWithAllNodesArrayOutput {
	return o
}

func (o JoinDomainWithAllNodesArrayOutput) ToJoinDomainWithAllNodesArrayOutputWithContext(ctx context.Context) JoinDomainWithAllNodesArrayOutput {
	return o
}

func (o JoinDomainWithAllNodesArrayOutput) Index(i pulumi.IntInput) JoinDomainWithAllNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JoinDomainWithAllNodes {
		return vs[0].([]*JoinDomainWithAllNodes)[vs[1].(int)]
	}).(JoinDomainWithAllNodesOutput)
}

type JoinDomainWithAllNodesMapOutput struct{ *pulumi.OutputState }

func (JoinDomainWithAllNodesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JoinDomainWithAllNodes)(nil)).Elem()
}

func (o JoinDomainWithAllNodesMapOutput) ToJoinDomainWithAllNodesMapOutput() JoinDomainWithAllNodesMapOutput {
	return o
}

func (o JoinDomainWithAllNodesMapOutput) ToJoinDomainWithAllNodesMapOutputWithContext(ctx context.Context) JoinDomainWithAllNodesMapOutput {
	return o
}

func (o JoinDomainWithAllNodesMapOutput) MapIndex(k pulumi.StringInput) JoinDomainWithAllNodesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JoinDomainWithAllNodes {
		return vs[0].(map[string]*JoinDomainWithAllNodes)[vs[1].(string)]
	}).(JoinDomainWithAllNodesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JoinDomainWithAllNodesInput)(nil)).Elem(), &JoinDomainWithAllNodes{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinDomainWithAllNodesArrayInput)(nil)).Elem(), JoinDomainWithAllNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinDomainWithAllNodesMapInput)(nil)).Elem(), JoinDomainWithAllNodesMap{})
	pulumi.RegisterOutputType(JoinDomainWithAllNodesOutput{})
	pulumi.RegisterOutputType(JoinDomainWithAllNodesArrayOutput{})
	pulumi.RegisterOutputType(JoinDomainWithAllNodesMapOutput{})
}
