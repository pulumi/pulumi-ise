// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AddGroupsGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// AddGroupsGroupInput is an input type that accepts AddGroupsGroupArgs and AddGroupsGroupOutput values.
// You can construct a concrete instance of `AddGroupsGroupInput` via:
//
//	AddGroupsGroupArgs{...}
type AddGroupsGroupInput interface {
	pulumi.Input

	ToAddGroupsGroupOutput() AddGroupsGroupOutput
	ToAddGroupsGroupOutputWithContext(context.Context) AddGroupsGroupOutput
}

type AddGroupsGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AddGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddGroupsGroup)(nil)).Elem()
}

func (i AddGroupsGroupArgs) ToAddGroupsGroupOutput() AddGroupsGroupOutput {
	return i.ToAddGroupsGroupOutputWithContext(context.Background())
}

func (i AddGroupsGroupArgs) ToAddGroupsGroupOutputWithContext(ctx context.Context) AddGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddGroupsGroupOutput)
}

// AddGroupsGroupArrayInput is an input type that accepts AddGroupsGroupArray and AddGroupsGroupArrayOutput values.
// You can construct a concrete instance of `AddGroupsGroupArrayInput` via:
//
//	AddGroupsGroupArray{ AddGroupsGroupArgs{...} }
type AddGroupsGroupArrayInput interface {
	pulumi.Input

	ToAddGroupsGroupArrayOutput() AddGroupsGroupArrayOutput
	ToAddGroupsGroupArrayOutputWithContext(context.Context) AddGroupsGroupArrayOutput
}

type AddGroupsGroupArray []AddGroupsGroupInput

func (AddGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddGroupsGroup)(nil)).Elem()
}

func (i AddGroupsGroupArray) ToAddGroupsGroupArrayOutput() AddGroupsGroupArrayOutput {
	return i.ToAddGroupsGroupArrayOutputWithContext(context.Background())
}

func (i AddGroupsGroupArray) ToAddGroupsGroupArrayOutputWithContext(ctx context.Context) AddGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddGroupsGroupArrayOutput)
}

type AddGroupsGroupOutput struct{ *pulumi.OutputState }

func (AddGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddGroupsGroup)(nil)).Elem()
}

func (o AddGroupsGroupOutput) ToAddGroupsGroupOutput() AddGroupsGroupOutput {
	return o
}

func (o AddGroupsGroupOutput) ToAddGroupsGroupOutputWithContext(ctx context.Context) AddGroupsGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o AddGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AddGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o AddGroupsGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v AddGroupsGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o AddGroupsGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddGroupsGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AddGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (AddGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddGroupsGroup)(nil)).Elem()
}

func (o AddGroupsGroupArrayOutput) ToAddGroupsGroupArrayOutput() AddGroupsGroupArrayOutput {
	return o
}

func (o AddGroupsGroupArrayOutput) ToAddGroupsGroupArrayOutputWithContext(ctx context.Context) AddGroupsGroupArrayOutput {
	return o
}

func (o AddGroupsGroupArrayOutput) Index(i pulumi.IntInput) AddGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddGroupsGroup {
		return vs[0].([]AddGroupsGroup)[vs[1].(int)]
	}).(AddGroupsGroupOutput)
}

type JoinDomainWithAllNodesAdditionalData struct {
	// Additional attribute name
	Name string `pulumi:"name"`
	// Additional attribute value
	Value string `pulumi:"value"`
}

// JoinDomainWithAllNodesAdditionalDataInput is an input type that accepts JoinDomainWithAllNodesAdditionalDataArgs and JoinDomainWithAllNodesAdditionalDataOutput values.
// You can construct a concrete instance of `JoinDomainWithAllNodesAdditionalDataInput` via:
//
//	JoinDomainWithAllNodesAdditionalDataArgs{...}
type JoinDomainWithAllNodesAdditionalDataInput interface {
	pulumi.Input

	ToJoinDomainWithAllNodesAdditionalDataOutput() JoinDomainWithAllNodesAdditionalDataOutput
	ToJoinDomainWithAllNodesAdditionalDataOutputWithContext(context.Context) JoinDomainWithAllNodesAdditionalDataOutput
}

type JoinDomainWithAllNodesAdditionalDataArgs struct {
	// Additional attribute name
	Name pulumi.StringInput `pulumi:"name"`
	// Additional attribute value
	Value pulumi.StringInput `pulumi:"value"`
}

func (JoinDomainWithAllNodesAdditionalDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (i JoinDomainWithAllNodesAdditionalDataArgs) ToJoinDomainWithAllNodesAdditionalDataOutput() JoinDomainWithAllNodesAdditionalDataOutput {
	return i.ToJoinDomainWithAllNodesAdditionalDataOutputWithContext(context.Background())
}

func (i JoinDomainWithAllNodesAdditionalDataArgs) ToJoinDomainWithAllNodesAdditionalDataOutputWithContext(ctx context.Context) JoinDomainWithAllNodesAdditionalDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinDomainWithAllNodesAdditionalDataOutput)
}

// JoinDomainWithAllNodesAdditionalDataArrayInput is an input type that accepts JoinDomainWithAllNodesAdditionalDataArray and JoinDomainWithAllNodesAdditionalDataArrayOutput values.
// You can construct a concrete instance of `JoinDomainWithAllNodesAdditionalDataArrayInput` via:
//
//	JoinDomainWithAllNodesAdditionalDataArray{ JoinDomainWithAllNodesAdditionalDataArgs{...} }
type JoinDomainWithAllNodesAdditionalDataArrayInput interface {
	pulumi.Input

	ToJoinDomainWithAllNodesAdditionalDataArrayOutput() JoinDomainWithAllNodesAdditionalDataArrayOutput
	ToJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(context.Context) JoinDomainWithAllNodesAdditionalDataArrayOutput
}

type JoinDomainWithAllNodesAdditionalDataArray []JoinDomainWithAllNodesAdditionalDataInput

func (JoinDomainWithAllNodesAdditionalDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (i JoinDomainWithAllNodesAdditionalDataArray) ToJoinDomainWithAllNodesAdditionalDataArrayOutput() JoinDomainWithAllNodesAdditionalDataArrayOutput {
	return i.ToJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(context.Background())
}

func (i JoinDomainWithAllNodesAdditionalDataArray) ToJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(ctx context.Context) JoinDomainWithAllNodesAdditionalDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinDomainWithAllNodesAdditionalDataArrayOutput)
}

type JoinDomainWithAllNodesAdditionalDataOutput struct{ *pulumi.OutputState }

func (JoinDomainWithAllNodesAdditionalDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (o JoinDomainWithAllNodesAdditionalDataOutput) ToJoinDomainWithAllNodesAdditionalDataOutput() JoinDomainWithAllNodesAdditionalDataOutput {
	return o
}

func (o JoinDomainWithAllNodesAdditionalDataOutput) ToJoinDomainWithAllNodesAdditionalDataOutputWithContext(ctx context.Context) JoinDomainWithAllNodesAdditionalDataOutput {
	return o
}

// Additional attribute name
func (o JoinDomainWithAllNodesAdditionalDataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JoinDomainWithAllNodesAdditionalData) string { return v.Name }).(pulumi.StringOutput)
}

// Additional attribute value
func (o JoinDomainWithAllNodesAdditionalDataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v JoinDomainWithAllNodesAdditionalData) string { return v.Value }).(pulumi.StringOutput)
}

type JoinDomainWithAllNodesAdditionalDataArrayOutput struct{ *pulumi.OutputState }

func (JoinDomainWithAllNodesAdditionalDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinDomainWithAllNodesAdditionalData)(nil)).Elem()
}

func (o JoinDomainWithAllNodesAdditionalDataArrayOutput) ToJoinDomainWithAllNodesAdditionalDataArrayOutput() JoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o
}

func (o JoinDomainWithAllNodesAdditionalDataArrayOutput) ToJoinDomainWithAllNodesAdditionalDataArrayOutputWithContext(ctx context.Context) JoinDomainWithAllNodesAdditionalDataArrayOutput {
	return o
}

func (o JoinDomainWithAllNodesAdditionalDataArrayOutput) Index(i pulumi.IntInput) JoinDomainWithAllNodesAdditionalDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JoinDomainWithAllNodesAdditionalData {
		return vs[0].([]JoinDomainWithAllNodesAdditionalData)[vs[1].(int)]
	}).(JoinDomainWithAllNodesAdditionalDataOutput)
}

type JoinPointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type string `pulumi:"type"`
}

// JoinPointAttributeInput is an input type that accepts JoinPointAttributeArgs and JoinPointAttributeOutput values.
// You can construct a concrete instance of `JoinPointAttributeInput` via:
//
//	JoinPointAttributeArgs{...}
type JoinPointAttributeInput interface {
	pulumi.Input

	ToJoinPointAttributeOutput() JoinPointAttributeOutput
	ToJoinPointAttributeOutputWithContext(context.Context) JoinPointAttributeOutput
}

type JoinPointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
	Type pulumi.StringInput `pulumi:"type"`
}

func (JoinPointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointAttribute)(nil)).Elem()
}

func (i JoinPointAttributeArgs) ToJoinPointAttributeOutput() JoinPointAttributeOutput {
	return i.ToJoinPointAttributeOutputWithContext(context.Background())
}

func (i JoinPointAttributeArgs) ToJoinPointAttributeOutputWithContext(ctx context.Context) JoinPointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointAttributeOutput)
}

// JoinPointAttributeArrayInput is an input type that accepts JoinPointAttributeArray and JoinPointAttributeArrayOutput values.
// You can construct a concrete instance of `JoinPointAttributeArrayInput` via:
//
//	JoinPointAttributeArray{ JoinPointAttributeArgs{...} }
type JoinPointAttributeArrayInput interface {
	pulumi.Input

	ToJoinPointAttributeArrayOutput() JoinPointAttributeArrayOutput
	ToJoinPointAttributeArrayOutputWithContext(context.Context) JoinPointAttributeArrayOutput
}

type JoinPointAttributeArray []JoinPointAttributeInput

func (JoinPointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointAttribute)(nil)).Elem()
}

func (i JoinPointAttributeArray) ToJoinPointAttributeArrayOutput() JoinPointAttributeArrayOutput {
	return i.ToJoinPointAttributeArrayOutputWithContext(context.Background())
}

func (i JoinPointAttributeArray) ToJoinPointAttributeArrayOutputWithContext(ctx context.Context) JoinPointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointAttributeArrayOutput)
}

type JoinPointAttributeOutput struct{ *pulumi.OutputState }

func (JoinPointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointAttribute)(nil)).Elem()
}

func (o JoinPointAttributeOutput) ToJoinPointAttributeOutput() JoinPointAttributeOutput {
	return o
}

func (o JoinPointAttributeOutput) ToJoinPointAttributeOutputWithContext(ctx context.Context) JoinPointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o JoinPointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o JoinPointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o JoinPointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
//   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
func (o JoinPointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type JoinPointAttributeArrayOutput struct{ *pulumi.OutputState }

func (JoinPointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointAttribute)(nil)).Elem()
}

func (o JoinPointAttributeArrayOutput) ToJoinPointAttributeArrayOutput() JoinPointAttributeArrayOutput {
	return o
}

func (o JoinPointAttributeArrayOutput) ToJoinPointAttributeArrayOutputWithContext(ctx context.Context) JoinPointAttributeArrayOutput {
	return o
}

func (o JoinPointAttributeArrayOutput) Index(i pulumi.IntInput) JoinPointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JoinPointAttribute {
		return vs[0].([]JoinPointAttribute)[vs[1].(int)]
	}).(JoinPointAttributeOutput)
}

type JoinPointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string  `pulumi:"sid"`
	Type *string `pulumi:"type"`
}

// JoinPointGroupInput is an input type that accepts JoinPointGroupArgs and JoinPointGroupOutput values.
// You can construct a concrete instance of `JoinPointGroupInput` via:
//
//	JoinPointGroupArgs{...}
type JoinPointGroupInput interface {
	pulumi.Input

	ToJoinPointGroupOutput() JoinPointGroupOutput
	ToJoinPointGroupOutputWithContext(context.Context) JoinPointGroupOutput
}

type JoinPointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput    `pulumi:"sid"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JoinPointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointGroup)(nil)).Elem()
}

func (i JoinPointGroupArgs) ToJoinPointGroupOutput() JoinPointGroupOutput {
	return i.ToJoinPointGroupOutputWithContext(context.Background())
}

func (i JoinPointGroupArgs) ToJoinPointGroupOutputWithContext(ctx context.Context) JoinPointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointGroupOutput)
}

// JoinPointGroupArrayInput is an input type that accepts JoinPointGroupArray and JoinPointGroupArrayOutput values.
// You can construct a concrete instance of `JoinPointGroupArrayInput` via:
//
//	JoinPointGroupArray{ JoinPointGroupArgs{...} }
type JoinPointGroupArrayInput interface {
	pulumi.Input

	ToJoinPointGroupArrayOutput() JoinPointGroupArrayOutput
	ToJoinPointGroupArrayOutputWithContext(context.Context) JoinPointGroupArrayOutput
}

type JoinPointGroupArray []JoinPointGroupInput

func (JoinPointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointGroup)(nil)).Elem()
}

func (i JoinPointGroupArray) ToJoinPointGroupArrayOutput() JoinPointGroupArrayOutput {
	return i.ToJoinPointGroupArrayOutputWithContext(context.Background())
}

func (i JoinPointGroupArray) ToJoinPointGroupArrayOutputWithContext(ctx context.Context) JoinPointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointGroupArrayOutput)
}

type JoinPointGroupOutput struct{ *pulumi.OutputState }

func (JoinPointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointGroup)(nil)).Elem()
}

func (o JoinPointGroupOutput) ToJoinPointGroupOutput() JoinPointGroupOutput {
	return o
}

func (o JoinPointGroupOutput) ToJoinPointGroupOutputWithContext(ctx context.Context) JoinPointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o JoinPointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o JoinPointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o JoinPointGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JoinPointGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JoinPointGroupArrayOutput struct{ *pulumi.OutputState }

func (JoinPointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointGroup)(nil)).Elem()
}

func (o JoinPointGroupArrayOutput) ToJoinPointGroupArrayOutput() JoinPointGroupArrayOutput {
	return o
}

func (o JoinPointGroupArrayOutput) ToJoinPointGroupArrayOutputWithContext(ctx context.Context) JoinPointGroupArrayOutput {
	return o
}

func (o JoinPointGroupArrayOutput) Index(i pulumi.IntInput) JoinPointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JoinPointGroup {
		return vs[0].([]JoinPointGroup)[vs[1].(int)]
	}).(JoinPointGroupOutput)
}

type JoinPointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// JoinPointRewriteRuleInput is an input type that accepts JoinPointRewriteRuleArgs and JoinPointRewriteRuleOutput values.
// You can construct a concrete instance of `JoinPointRewriteRuleInput` via:
//
//	JoinPointRewriteRuleArgs{...}
type JoinPointRewriteRuleInput interface {
	pulumi.Input

	ToJoinPointRewriteRuleOutput() JoinPointRewriteRuleOutput
	ToJoinPointRewriteRuleOutputWithContext(context.Context) JoinPointRewriteRuleOutput
}

type JoinPointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (JoinPointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointRewriteRule)(nil)).Elem()
}

func (i JoinPointRewriteRuleArgs) ToJoinPointRewriteRuleOutput() JoinPointRewriteRuleOutput {
	return i.ToJoinPointRewriteRuleOutputWithContext(context.Background())
}

func (i JoinPointRewriteRuleArgs) ToJoinPointRewriteRuleOutputWithContext(ctx context.Context) JoinPointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointRewriteRuleOutput)
}

// JoinPointRewriteRuleArrayInput is an input type that accepts JoinPointRewriteRuleArray and JoinPointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `JoinPointRewriteRuleArrayInput` via:
//
//	JoinPointRewriteRuleArray{ JoinPointRewriteRuleArgs{...} }
type JoinPointRewriteRuleArrayInput interface {
	pulumi.Input

	ToJoinPointRewriteRuleArrayOutput() JoinPointRewriteRuleArrayOutput
	ToJoinPointRewriteRuleArrayOutputWithContext(context.Context) JoinPointRewriteRuleArrayOutput
}

type JoinPointRewriteRuleArray []JoinPointRewriteRuleInput

func (JoinPointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointRewriteRule)(nil)).Elem()
}

func (i JoinPointRewriteRuleArray) ToJoinPointRewriteRuleArrayOutput() JoinPointRewriteRuleArrayOutput {
	return i.ToJoinPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i JoinPointRewriteRuleArray) ToJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) JoinPointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JoinPointRewriteRuleArrayOutput)
}

type JoinPointRewriteRuleOutput struct{ *pulumi.OutputState }

func (JoinPointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinPointRewriteRule)(nil)).Elem()
}

func (o JoinPointRewriteRuleOutput) ToJoinPointRewriteRuleOutput() JoinPointRewriteRuleOutput {
	return o
}

func (o JoinPointRewriteRuleOutput) ToJoinPointRewriteRuleOutputWithContext(ctx context.Context) JoinPointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o JoinPointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o JoinPointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o JoinPointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v JoinPointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type JoinPointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (JoinPointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JoinPointRewriteRule)(nil)).Elem()
}

func (o JoinPointRewriteRuleArrayOutput) ToJoinPointRewriteRuleArrayOutput() JoinPointRewriteRuleArrayOutput {
	return o
}

func (o JoinPointRewriteRuleArrayOutput) ToJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) JoinPointRewriteRuleArrayOutput {
	return o
}

func (o JoinPointRewriteRuleArrayOutput) Index(i pulumi.IntInput) JoinPointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JoinPointRewriteRule {
		return vs[0].([]JoinPointRewriteRule)[vs[1].(int)]
	}).(JoinPointRewriteRuleOutput)
}

type GetGroupsByDomainGroup struct {
	// Group name
	Name string `pulumi:"name"`
	// Group SID
	Sid string `pulumi:"sid"`
	// Group type
	Type string `pulumi:"type"`
}

// GetGroupsByDomainGroupInput is an input type that accepts GetGroupsByDomainGroupArgs and GetGroupsByDomainGroupOutput values.
// You can construct a concrete instance of `GetGroupsByDomainGroupInput` via:
//
//	GetGroupsByDomainGroupArgs{...}
type GetGroupsByDomainGroupInput interface {
	pulumi.Input

	ToGetGroupsByDomainGroupOutput() GetGroupsByDomainGroupOutput
	ToGetGroupsByDomainGroupOutputWithContext(context.Context) GetGroupsByDomainGroupOutput
}

type GetGroupsByDomainGroupArgs struct {
	// Group name
	Name pulumi.StringInput `pulumi:"name"`
	// Group SID
	Sid pulumi.StringInput `pulumi:"sid"`
	// Group type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetGroupsByDomainGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsByDomainGroup)(nil)).Elem()
}

func (i GetGroupsByDomainGroupArgs) ToGetGroupsByDomainGroupOutput() GetGroupsByDomainGroupOutput {
	return i.ToGetGroupsByDomainGroupOutputWithContext(context.Background())
}

func (i GetGroupsByDomainGroupArgs) ToGetGroupsByDomainGroupOutputWithContext(ctx context.Context) GetGroupsByDomainGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsByDomainGroupOutput)
}

// GetGroupsByDomainGroupArrayInput is an input type that accepts GetGroupsByDomainGroupArray and GetGroupsByDomainGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsByDomainGroupArrayInput` via:
//
//	GetGroupsByDomainGroupArray{ GetGroupsByDomainGroupArgs{...} }
type GetGroupsByDomainGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsByDomainGroupArrayOutput() GetGroupsByDomainGroupArrayOutput
	ToGetGroupsByDomainGroupArrayOutputWithContext(context.Context) GetGroupsByDomainGroupArrayOutput
}

type GetGroupsByDomainGroupArray []GetGroupsByDomainGroupInput

func (GetGroupsByDomainGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsByDomainGroup)(nil)).Elem()
}

func (i GetGroupsByDomainGroupArray) ToGetGroupsByDomainGroupArrayOutput() GetGroupsByDomainGroupArrayOutput {
	return i.ToGetGroupsByDomainGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsByDomainGroupArray) ToGetGroupsByDomainGroupArrayOutputWithContext(ctx context.Context) GetGroupsByDomainGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsByDomainGroupArrayOutput)
}

type GetGroupsByDomainGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsByDomainGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsByDomainGroup)(nil)).Elem()
}

func (o GetGroupsByDomainGroupOutput) ToGetGroupsByDomainGroupOutput() GetGroupsByDomainGroupOutput {
	return o
}

func (o GetGroupsByDomainGroupOutput) ToGetGroupsByDomainGroupOutputWithContext(ctx context.Context) GetGroupsByDomainGroupOutput {
	return o
}

// Group name
func (o GetGroupsByDomainGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsByDomainGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Group SID
func (o GetGroupsByDomainGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsByDomainGroup) string { return v.Sid }).(pulumi.StringOutput)
}

// Group type
func (o GetGroupsByDomainGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsByDomainGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetGroupsByDomainGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsByDomainGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsByDomainGroup)(nil)).Elem()
}

func (o GetGroupsByDomainGroupArrayOutput) ToGetGroupsByDomainGroupArrayOutput() GetGroupsByDomainGroupArrayOutput {
	return o
}

func (o GetGroupsByDomainGroupArrayOutput) ToGetGroupsByDomainGroupArrayOutputWithContext(ctx context.Context) GetGroupsByDomainGroupArrayOutput {
	return o
}

func (o GetGroupsByDomainGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsByDomainGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsByDomainGroup {
		return vs[0].([]GetGroupsByDomainGroup)[vs[1].(int)]
	}).(GetGroupsByDomainGroupOutput)
}

type GetJoinPointAttribute struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue string `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName string `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name string `pulumi:"name"`
	// Required for each group in the group list
	Type string `pulumi:"type"`
}

// GetJoinPointAttributeInput is an input type that accepts GetJoinPointAttributeArgs and GetJoinPointAttributeOutput values.
// You can construct a concrete instance of `GetJoinPointAttributeInput` via:
//
//	GetJoinPointAttributeArgs{...}
type GetJoinPointAttributeInput interface {
	pulumi.Input

	ToGetJoinPointAttributeOutput() GetJoinPointAttributeOutput
	ToGetJoinPointAttributeOutputWithContext(context.Context) GetJoinPointAttributeOutput
}

type GetJoinPointAttributeArgs struct {
	// Required for each attribute in the attribute list. Can contain an empty string.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Required for each attribute in the attribute list
	InternalName pulumi.StringInput `pulumi:"internalName"`
	// Required for each attribute in the attribute list with no duplication between attributes
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJoinPointAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointAttribute)(nil)).Elem()
}

func (i GetJoinPointAttributeArgs) ToGetJoinPointAttributeOutput() GetJoinPointAttributeOutput {
	return i.ToGetJoinPointAttributeOutputWithContext(context.Background())
}

func (i GetJoinPointAttributeArgs) ToGetJoinPointAttributeOutputWithContext(ctx context.Context) GetJoinPointAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointAttributeOutput)
}

// GetJoinPointAttributeArrayInput is an input type that accepts GetJoinPointAttributeArray and GetJoinPointAttributeArrayOutput values.
// You can construct a concrete instance of `GetJoinPointAttributeArrayInput` via:
//
//	GetJoinPointAttributeArray{ GetJoinPointAttributeArgs{...} }
type GetJoinPointAttributeArrayInput interface {
	pulumi.Input

	ToGetJoinPointAttributeArrayOutput() GetJoinPointAttributeArrayOutput
	ToGetJoinPointAttributeArrayOutputWithContext(context.Context) GetJoinPointAttributeArrayOutput
}

type GetJoinPointAttributeArray []GetJoinPointAttributeInput

func (GetJoinPointAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointAttribute)(nil)).Elem()
}

func (i GetJoinPointAttributeArray) ToGetJoinPointAttributeArrayOutput() GetJoinPointAttributeArrayOutput {
	return i.ToGetJoinPointAttributeArrayOutputWithContext(context.Background())
}

func (i GetJoinPointAttributeArray) ToGetJoinPointAttributeArrayOutputWithContext(ctx context.Context) GetJoinPointAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointAttributeArrayOutput)
}

type GetJoinPointAttributeOutput struct{ *pulumi.OutputState }

func (GetJoinPointAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointAttribute)(nil)).Elem()
}

func (o GetJoinPointAttributeOutput) ToGetJoinPointAttributeOutput() GetJoinPointAttributeOutput {
	return o
}

func (o GetJoinPointAttributeOutput) ToGetJoinPointAttributeOutputWithContext(ctx context.Context) GetJoinPointAttributeOutput {
	return o
}

// Required for each attribute in the attribute list. Can contain an empty string.
func (o GetJoinPointAttributeOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointAttribute) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list
func (o GetJoinPointAttributeOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointAttribute) string { return v.InternalName }).(pulumi.StringOutput)
}

// Required for each attribute in the attribute list with no duplication between attributes
func (o GetJoinPointAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list
func (o GetJoinPointAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type GetJoinPointAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetJoinPointAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointAttribute)(nil)).Elem()
}

func (o GetJoinPointAttributeArrayOutput) ToGetJoinPointAttributeArrayOutput() GetJoinPointAttributeArrayOutput {
	return o
}

func (o GetJoinPointAttributeArrayOutput) ToGetJoinPointAttributeArrayOutputWithContext(ctx context.Context) GetJoinPointAttributeArrayOutput {
	return o
}

func (o GetJoinPointAttributeArrayOutput) Index(i pulumi.IntInput) GetJoinPointAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJoinPointAttribute {
		return vs[0].([]GetJoinPointAttribute)[vs[1].(int)]
	}).(GetJoinPointAttributeOutput)
}

type GetJoinPointGroup struct {
	// Required for each group in the group list with no duplication between groups
	Name string `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  string `pulumi:"sid"`
	Type string `pulumi:"type"`
}

// GetJoinPointGroupInput is an input type that accepts GetJoinPointGroupArgs and GetJoinPointGroupOutput values.
// You can construct a concrete instance of `GetJoinPointGroupInput` via:
//
//	GetJoinPointGroupArgs{...}
type GetJoinPointGroupInput interface {
	pulumi.Input

	ToGetJoinPointGroupOutput() GetJoinPointGroupOutput
	ToGetJoinPointGroupOutputWithContext(context.Context) GetJoinPointGroupOutput
}

type GetJoinPointGroupArgs struct {
	// Required for each group in the group list with no duplication between groups
	Name pulumi.StringInput `pulumi:"name"`
	// Required for each group in the group list with no duplication between groups
	Sid  pulumi.StringInput `pulumi:"sid"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJoinPointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointGroup)(nil)).Elem()
}

func (i GetJoinPointGroupArgs) ToGetJoinPointGroupOutput() GetJoinPointGroupOutput {
	return i.ToGetJoinPointGroupOutputWithContext(context.Background())
}

func (i GetJoinPointGroupArgs) ToGetJoinPointGroupOutputWithContext(ctx context.Context) GetJoinPointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointGroupOutput)
}

// GetJoinPointGroupArrayInput is an input type that accepts GetJoinPointGroupArray and GetJoinPointGroupArrayOutput values.
// You can construct a concrete instance of `GetJoinPointGroupArrayInput` via:
//
//	GetJoinPointGroupArray{ GetJoinPointGroupArgs{...} }
type GetJoinPointGroupArrayInput interface {
	pulumi.Input

	ToGetJoinPointGroupArrayOutput() GetJoinPointGroupArrayOutput
	ToGetJoinPointGroupArrayOutputWithContext(context.Context) GetJoinPointGroupArrayOutput
}

type GetJoinPointGroupArray []GetJoinPointGroupInput

func (GetJoinPointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointGroup)(nil)).Elem()
}

func (i GetJoinPointGroupArray) ToGetJoinPointGroupArrayOutput() GetJoinPointGroupArrayOutput {
	return i.ToGetJoinPointGroupArrayOutputWithContext(context.Background())
}

func (i GetJoinPointGroupArray) ToGetJoinPointGroupArrayOutputWithContext(ctx context.Context) GetJoinPointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointGroupArrayOutput)
}

type GetJoinPointGroupOutput struct{ *pulumi.OutputState }

func (GetJoinPointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointGroup)(nil)).Elem()
}

func (o GetJoinPointGroupOutput) ToGetJoinPointGroupOutput() GetJoinPointGroupOutput {
	return o
}

func (o GetJoinPointGroupOutput) ToGetJoinPointGroupOutputWithContext(ctx context.Context) GetJoinPointGroupOutput {
	return o
}

// Required for each group in the group list with no duplication between groups
func (o GetJoinPointGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Required for each group in the group list with no duplication between groups
func (o GetJoinPointGroupOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointGroup) string { return v.Sid }).(pulumi.StringOutput)
}

func (o GetJoinPointGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetJoinPointGroupArrayOutput struct{ *pulumi.OutputState }

func (GetJoinPointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointGroup)(nil)).Elem()
}

func (o GetJoinPointGroupArrayOutput) ToGetJoinPointGroupArrayOutput() GetJoinPointGroupArrayOutput {
	return o
}

func (o GetJoinPointGroupArrayOutput) ToGetJoinPointGroupArrayOutputWithContext(ctx context.Context) GetJoinPointGroupArrayOutput {
	return o
}

func (o GetJoinPointGroupArrayOutput) Index(i pulumi.IntInput) GetJoinPointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJoinPointGroup {
		return vs[0].([]GetJoinPointGroup)[vs[1].(int)]
	}).(GetJoinPointGroupOutput)
}

type GetJoinPointRewriteRule struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch string `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult string `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId string `pulumi:"rowId"`
}

// GetJoinPointRewriteRuleInput is an input type that accepts GetJoinPointRewriteRuleArgs and GetJoinPointRewriteRuleOutput values.
// You can construct a concrete instance of `GetJoinPointRewriteRuleInput` via:
//
//	GetJoinPointRewriteRuleArgs{...}
type GetJoinPointRewriteRuleInput interface {
	pulumi.Input

	ToGetJoinPointRewriteRuleOutput() GetJoinPointRewriteRuleOutput
	ToGetJoinPointRewriteRuleOutputWithContext(context.Context) GetJoinPointRewriteRuleOutput
}

type GetJoinPointRewriteRuleArgs struct {
	// Required for each rule in the list with no duplication between rules
	RewriteMatch pulumi.StringInput `pulumi:"rewriteMatch"`
	// Required for each rule in the list
	RewriteResult pulumi.StringInput `pulumi:"rewriteResult"`
	// Required for each rule in the list in serial order
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (GetJoinPointRewriteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointRewriteRule)(nil)).Elem()
}

func (i GetJoinPointRewriteRuleArgs) ToGetJoinPointRewriteRuleOutput() GetJoinPointRewriteRuleOutput {
	return i.ToGetJoinPointRewriteRuleOutputWithContext(context.Background())
}

func (i GetJoinPointRewriteRuleArgs) ToGetJoinPointRewriteRuleOutputWithContext(ctx context.Context) GetJoinPointRewriteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointRewriteRuleOutput)
}

// GetJoinPointRewriteRuleArrayInput is an input type that accepts GetJoinPointRewriteRuleArray and GetJoinPointRewriteRuleArrayOutput values.
// You can construct a concrete instance of `GetJoinPointRewriteRuleArrayInput` via:
//
//	GetJoinPointRewriteRuleArray{ GetJoinPointRewriteRuleArgs{...} }
type GetJoinPointRewriteRuleArrayInput interface {
	pulumi.Input

	ToGetJoinPointRewriteRuleArrayOutput() GetJoinPointRewriteRuleArrayOutput
	ToGetJoinPointRewriteRuleArrayOutputWithContext(context.Context) GetJoinPointRewriteRuleArrayOutput
}

type GetJoinPointRewriteRuleArray []GetJoinPointRewriteRuleInput

func (GetJoinPointRewriteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointRewriteRule)(nil)).Elem()
}

func (i GetJoinPointRewriteRuleArray) ToGetJoinPointRewriteRuleArrayOutput() GetJoinPointRewriteRuleArrayOutput {
	return i.ToGetJoinPointRewriteRuleArrayOutputWithContext(context.Background())
}

func (i GetJoinPointRewriteRuleArray) ToGetJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetJoinPointRewriteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJoinPointRewriteRuleArrayOutput)
}

type GetJoinPointRewriteRuleOutput struct{ *pulumi.OutputState }

func (GetJoinPointRewriteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJoinPointRewriteRule)(nil)).Elem()
}

func (o GetJoinPointRewriteRuleOutput) ToGetJoinPointRewriteRuleOutput() GetJoinPointRewriteRuleOutput {
	return o
}

func (o GetJoinPointRewriteRuleOutput) ToGetJoinPointRewriteRuleOutputWithContext(ctx context.Context) GetJoinPointRewriteRuleOutput {
	return o
}

// Required for each rule in the list with no duplication between rules
func (o GetJoinPointRewriteRuleOutput) RewriteMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointRewriteRule) string { return v.RewriteMatch }).(pulumi.StringOutput)
}

// Required for each rule in the list
func (o GetJoinPointRewriteRuleOutput) RewriteResult() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointRewriteRule) string { return v.RewriteResult }).(pulumi.StringOutput)
}

// Required for each rule in the list in serial order
func (o GetJoinPointRewriteRuleOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJoinPointRewriteRule) string { return v.RowId }).(pulumi.StringOutput)
}

type GetJoinPointRewriteRuleArrayOutput struct{ *pulumi.OutputState }

func (GetJoinPointRewriteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJoinPointRewriteRule)(nil)).Elem()
}

func (o GetJoinPointRewriteRuleArrayOutput) ToGetJoinPointRewriteRuleArrayOutput() GetJoinPointRewriteRuleArrayOutput {
	return o
}

func (o GetJoinPointRewriteRuleArrayOutput) ToGetJoinPointRewriteRuleArrayOutputWithContext(ctx context.Context) GetJoinPointRewriteRuleArrayOutput {
	return o
}

func (o GetJoinPointRewriteRuleArrayOutput) Index(i pulumi.IntInput) GetJoinPointRewriteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJoinPointRewriteRule {
		return vs[0].([]GetJoinPointRewriteRule)[vs[1].(int)]
	}).(GetJoinPointRewriteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddGroupsGroupInput)(nil)).Elem(), AddGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddGroupsGroupArrayInput)(nil)).Elem(), AddGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinDomainWithAllNodesAdditionalDataInput)(nil)).Elem(), JoinDomainWithAllNodesAdditionalDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinDomainWithAllNodesAdditionalDataArrayInput)(nil)).Elem(), JoinDomainWithAllNodesAdditionalDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointAttributeInput)(nil)).Elem(), JoinPointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointAttributeArrayInput)(nil)).Elem(), JoinPointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointGroupInput)(nil)).Elem(), JoinPointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointGroupArrayInput)(nil)).Elem(), JoinPointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointRewriteRuleInput)(nil)).Elem(), JoinPointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JoinPointRewriteRuleArrayInput)(nil)).Elem(), JoinPointRewriteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsByDomainGroupInput)(nil)).Elem(), GetGroupsByDomainGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsByDomainGroupArrayInput)(nil)).Elem(), GetGroupsByDomainGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointAttributeInput)(nil)).Elem(), GetJoinPointAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointAttributeArrayInput)(nil)).Elem(), GetJoinPointAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointGroupInput)(nil)).Elem(), GetJoinPointGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointGroupArrayInput)(nil)).Elem(), GetJoinPointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointRewriteRuleInput)(nil)).Elem(), GetJoinPointRewriteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJoinPointRewriteRuleArrayInput)(nil)).Elem(), GetJoinPointRewriteRuleArray{})
	pulumi.RegisterOutputType(AddGroupsGroupOutput{})
	pulumi.RegisterOutputType(AddGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(JoinDomainWithAllNodesAdditionalDataOutput{})
	pulumi.RegisterOutputType(JoinDomainWithAllNodesAdditionalDataArrayOutput{})
	pulumi.RegisterOutputType(JoinPointAttributeOutput{})
	pulumi.RegisterOutputType(JoinPointAttributeArrayOutput{})
	pulumi.RegisterOutputType(JoinPointGroupOutput{})
	pulumi.RegisterOutputType(JoinPointGroupArrayOutput{})
	pulumi.RegisterOutputType(JoinPointRewriteRuleOutput{})
	pulumi.RegisterOutputType(JoinPointRewriteRuleArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsByDomainGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsByDomainGroupArrayOutput{})
	pulumi.RegisterOutputType(GetJoinPointAttributeOutput{})
	pulumi.RegisterOutputType(GetJoinPointAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetJoinPointGroupOutput{})
	pulumi.RegisterOutputType(GetJoinPointGroupArrayOutput{})
	pulumi.RegisterOutputType(GetJoinPointRewriteRuleOutput{})
	pulumi.RegisterOutputType(GetJoinPointRewriteRuleArrayOutput{})
}
