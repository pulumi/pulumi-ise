// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package allowedprotocols

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TACACS allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/AllowedProtocols"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := AllowedProtocols.NewTacacs(ctx, "example", &AllowedProtocols.TacacsArgs{
//				Name:          pulumi.String("Protocols1"),
//				Description:   pulumi.String("My allowed TACACS protocols"),
//				AllowPapAscii: pulumi.Bool(true),
//				AllowChap:     pulumi.Bool(true),
//				AllowMsChapV1: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import ise:AllowedProtocols/tacacs:Tacacs example "76d24097-41c4-4558-a4d0-a8c07ac08470"
// ```
type Tacacs struct {
	pulumi.CustomResourceState

	// Allow CHAP
	AllowChap pulumi.BoolOutput `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolOutput `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolOutput `pulumi:"allowPapAscii"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the allowed protocols
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewTacacs registers a new resource with the given unique name, arguments, and options.
func NewTacacs(ctx *pulumi.Context,
	name string, args *TacacsArgs, opts ...pulumi.ResourceOption) (*Tacacs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowChap == nil {
		return nil, errors.New("invalid value for required argument 'AllowChap'")
	}
	if args.AllowMsChapV1 == nil {
		return nil, errors.New("invalid value for required argument 'AllowMsChapV1'")
	}
	if args.AllowPapAscii == nil {
		return nil, errors.New("invalid value for required argument 'AllowPapAscii'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tacacs
	err := ctx.RegisterResource("ise:AllowedProtocols/tacacs:Tacacs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTacacs gets an existing Tacacs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTacacs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TacacsState, opts ...pulumi.ResourceOption) (*Tacacs, error) {
	var resource Tacacs
	err := ctx.ReadResource("ise:AllowedProtocols/tacacs:Tacacs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tacacs resources.
type tacacsState struct {
	// Allow CHAP
	AllowChap *bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 *bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii *bool `pulumi:"allowPapAscii"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

type TacacsState struct {
	// Allow CHAP
	AllowChap pulumi.BoolPtrInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolPtrInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolPtrInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
}

func (TacacsState) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsState)(nil)).Elem()
}

type tacacsArgs struct {
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Description
	Description *string `pulumi:"description"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Tacacs resource.
type TacacsArgs struct {
	// Allow CHAP
	AllowChap pulumi.BoolInput
	// Allow MS CHAP v1
	AllowMsChapV1 pulumi.BoolInput
	// Allow PAP ASCII
	AllowPapAscii pulumi.BoolInput
	// Description
	Description pulumi.StringPtrInput
	// The name of the allowed protocols
	Name pulumi.StringPtrInput
}

func (TacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsArgs)(nil)).Elem()
}

type TacacsInput interface {
	pulumi.Input

	ToTacacsOutput() TacacsOutput
	ToTacacsOutputWithContext(ctx context.Context) TacacsOutput
}

func (*Tacacs) ElementType() reflect.Type {
	return reflect.TypeOf((**Tacacs)(nil)).Elem()
}

func (i *Tacacs) ToTacacsOutput() TacacsOutput {
	return i.ToTacacsOutputWithContext(context.Background())
}

func (i *Tacacs) ToTacacsOutputWithContext(ctx context.Context) TacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsOutput)
}

// TacacsArrayInput is an input type that accepts TacacsArray and TacacsArrayOutput values.
// You can construct a concrete instance of `TacacsArrayInput` via:
//
//	TacacsArray{ TacacsArgs{...} }
type TacacsArrayInput interface {
	pulumi.Input

	ToTacacsArrayOutput() TacacsArrayOutput
	ToTacacsArrayOutputWithContext(context.Context) TacacsArrayOutput
}

type TacacsArray []TacacsInput

func (TacacsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tacacs)(nil)).Elem()
}

func (i TacacsArray) ToTacacsArrayOutput() TacacsArrayOutput {
	return i.ToTacacsArrayOutputWithContext(context.Background())
}

func (i TacacsArray) ToTacacsArrayOutputWithContext(ctx context.Context) TacacsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsArrayOutput)
}

// TacacsMapInput is an input type that accepts TacacsMap and TacacsMapOutput values.
// You can construct a concrete instance of `TacacsMapInput` via:
//
//	TacacsMap{ "key": TacacsArgs{...} }
type TacacsMapInput interface {
	pulumi.Input

	ToTacacsMapOutput() TacacsMapOutput
	ToTacacsMapOutputWithContext(context.Context) TacacsMapOutput
}

type TacacsMap map[string]TacacsInput

func (TacacsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tacacs)(nil)).Elem()
}

func (i TacacsMap) ToTacacsMapOutput() TacacsMapOutput {
	return i.ToTacacsMapOutputWithContext(context.Background())
}

func (i TacacsMap) ToTacacsMapOutputWithContext(ctx context.Context) TacacsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsMapOutput)
}

type TacacsOutput struct{ *pulumi.OutputState }

func (TacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tacacs)(nil)).Elem()
}

func (o TacacsOutput) ToTacacsOutput() TacacsOutput {
	return o
}

func (o TacacsOutput) ToTacacsOutputWithContext(ctx context.Context) TacacsOutput {
	return o
}

// Allow CHAP
func (o TacacsOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tacacs) pulumi.BoolOutput { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o TacacsOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tacacs) pulumi.BoolOutput { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o TacacsOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tacacs) pulumi.BoolOutput { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Description
func (o TacacsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tacacs) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the allowed protocols
func (o TacacsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tacacs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type TacacsArrayOutput struct{ *pulumi.OutputState }

func (TacacsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tacacs)(nil)).Elem()
}

func (o TacacsArrayOutput) ToTacacsArrayOutput() TacacsArrayOutput {
	return o
}

func (o TacacsArrayOutput) ToTacacsArrayOutputWithContext(ctx context.Context) TacacsArrayOutput {
	return o
}

func (o TacacsArrayOutput) Index(i pulumi.IntInput) TacacsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tacacs {
		return vs[0].([]*Tacacs)[vs[1].(int)]
	}).(TacacsOutput)
}

type TacacsMapOutput struct{ *pulumi.OutputState }

func (TacacsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tacacs)(nil)).Elem()
}

func (o TacacsMapOutput) ToTacacsMapOutput() TacacsMapOutput {
	return o
}

func (o TacacsMapOutput) ToTacacsMapOutputWithContext(ctx context.Context) TacacsMapOutput {
	return o
}

func (o TacacsMapOutput) MapIndex(k pulumi.StringInput) TacacsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tacacs {
		return vs[0].(map[string]*Tacacs)[vs[1].(string)]
	}).(TacacsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsInput)(nil)).Elem(), &Tacacs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsArrayInput)(nil)).Elem(), TacacsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsMapInput)(nil)).Elem(), TacacsMap{})
	pulumi.RegisterOutputType(TacacsOutput{})
	pulumi.RegisterOutputType(TacacsArrayOutput{})
	pulumi.RegisterOutputType(TacacsMapOutput{})
}
