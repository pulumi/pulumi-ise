// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package allowedprotocols

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ise/sdk/go/ise/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read a TACACS allowed protocols policy element.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ise/sdk/go/ise/AllowedProtocols"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := AllowedProtocols.GetTacacs(ctx, &allowedprotocols.GetTacacsArgs{
//				Id: pulumi.StringRef("76d24097-41c4-4558-a4d0-a8c07ac08470"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTacacs(ctx *pulumi.Context, args *LookupTacacsArgs, opts ...pulumi.InvokeOption) (*LookupTacacsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTacacsResult
	err := ctx.Invoke("ise:AllowedProtocols/getTacacs:getTacacs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTacacs.
type LookupTacacsArgs struct {
	// The id of the object
	Id *string `pulumi:"id"`
	// The name of the allowed protocols
	Name *string `pulumi:"name"`
}

// A collection of values returned by getTacacs.
type LookupTacacsResult struct {
	// Allow CHAP
	AllowChap bool `pulumi:"allowChap"`
	// Allow MS CHAP v1
	AllowMsChapV1 bool `pulumi:"allowMsChapV1"`
	// Allow PAP ASCII
	AllowPapAscii bool `pulumi:"allowPapAscii"`
	// Description
	Description string `pulumi:"description"`
	// The id of the object
	Id string `pulumi:"id"`
	// The name of the allowed protocols
	Name string `pulumi:"name"`
}

func LookupTacacsOutput(ctx *pulumi.Context, args LookupTacacsOutputArgs, opts ...pulumi.InvokeOption) LookupTacacsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTacacsResult, error) {
			args := v.(LookupTacacsArgs)
			r, err := LookupTacacs(ctx, &args, opts...)
			var s LookupTacacsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTacacsResultOutput)
}

// A collection of arguments for invoking getTacacs.
type LookupTacacsOutputArgs struct {
	// The id of the object
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the allowed protocols
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupTacacsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTacacsArgs)(nil)).Elem()
}

// A collection of values returned by getTacacs.
type LookupTacacsResultOutput struct{ *pulumi.OutputState }

func (LookupTacacsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTacacsResult)(nil)).Elem()
}

func (o LookupTacacsResultOutput) ToLookupTacacsResultOutput() LookupTacacsResultOutput {
	return o
}

func (o LookupTacacsResultOutput) ToLookupTacacsResultOutputWithContext(ctx context.Context) LookupTacacsResultOutput {
	return o
}

// Allow CHAP
func (o LookupTacacsResultOutput) AllowChap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTacacsResult) bool { return v.AllowChap }).(pulumi.BoolOutput)
}

// Allow MS CHAP v1
func (o LookupTacacsResultOutput) AllowMsChapV1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTacacsResult) bool { return v.AllowMsChapV1 }).(pulumi.BoolOutput)
}

// Allow PAP ASCII
func (o LookupTacacsResultOutput) AllowPapAscii() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTacacsResult) bool { return v.AllowPapAscii }).(pulumi.BoolOutput)
}

// Description
func (o LookupTacacsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsResult) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the object
func (o LookupTacacsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the allowed protocols
func (o LookupTacacsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTacacsResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTacacsResultOutput{})
}
