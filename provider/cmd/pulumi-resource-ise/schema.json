{
    "name": "ise",
    "displayName": "Ise",
    "description": "A Pulumi package for creating and managing resources on a Cisco ISE (Identity Service Engine) instance.",
    "keywords": [
        "pulumi",
        "ise",
        "category/network"
    ],
    "homepage": "https://github.com/pulumi/pulumi-ise",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ise` Terraform Provider](https://github.com/CiscoDevNet/terraform-provider-ise).",
    "repository": "https://github.com/pulumi/pulumi-ise",
    "logoUrl": "https://raw.githubusercontent.com/pulumi/pulumi-ise/main/docs/ise.png",
    "publisher": "pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumi"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-ise/sdk/go/ise",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumi",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumi/ise",
            "packageDescription": "A Pulumi package for creating and managing resources on a Cisco ISE (Identity Service Engine) instance.. Based on terraform-provider-ise: version v0.2.1",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/CiscoDevNet/terraform-provider-ise)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ise` repo](https://github.com/pulumi/pulumi-ise/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ise` repo](https://github.com/CiscoDevNet/terraform-provider-ise/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/CiscoDevNet/terraform-provider-ise)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ise` repo](https://github.com/pulumi/pulumi-ise/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ise` repo](https://github.com/CiscoDevNet/terraform-provider-ise/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure HTTPS client. This can also be set as the ISE_INSECURE environment variable. Defaults to `true`.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for the ISE instance. This can also be set as the ISE_PASSWORD environment variable.\n",
                "secret": true
            },
            "retries": {
                "type": "integer",
                "description": "Number of retries for REST API calls. This can also be set as the ISE_RETRIES environment variable. Defaults to `3`.\n"
            },
            "url": {
                "type": "string",
                "description": "URL of the Cisco ISE instance. This can also be set as the ISE_URL environment variable.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for the ISE instance. This can also be set as the ISE_USERNAME environment variable.\n"
            }
        }
    },
    "types": {
        "ise:ActiveDirectoryAdd/GroupsGroup:GroupsGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "sid": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sid"
            ]
        },
        "ise:ActiveDirectoryGroupsBy/getDomainGroup:getDomainGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "sid": {
                    "type": "string",
                    "description": "Group SID\n"
                },
                "type": {
                    "type": "string",
                    "description": "Group type\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sid",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:ActiveDirectoryJoin/PointAttribute:PointAttribute": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list. Can contain an empty string.\n"
                },
                "internalName": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list\n"
                },
                "name": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list with no duplication between attributes\n"
                },
                "type": {
                    "type": "string",
                    "description": "Required for each group in the group list\n  - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`\n"
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "internalName",
                "name",
                "type"
            ]
        },
        "ise:ActiveDirectoryJoin/PointGroup:PointGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "sid": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sid"
            ]
        },
        "ise:ActiveDirectoryJoin/PointRewriteRule:PointRewriteRule": {
            "properties": {
                "rewriteMatch": {
                    "type": "string",
                    "description": "Required for each rule in the list with no duplication between rules\n"
                },
                "rewriteResult": {
                    "type": "string",
                    "description": "Required for each rule in the list\n"
                },
                "rowId": {
                    "type": "string",
                    "description": "Required for each rule in the list in serial order\n"
                }
            },
            "type": "object",
            "required": [
                "rewriteMatch",
                "rewriteResult",
                "rowId"
            ]
        },
        "ise:ActiveDirectoryJoin/getPointAttribute:getPointAttribute": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list. Can contain an empty string.\n"
                },
                "internalName": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list\n"
                },
                "name": {
                    "type": "string",
                    "description": "Required for each attribute in the attribute list with no duplication between attributes\n"
                },
                "type": {
                    "type": "string",
                    "description": "Required for each group in the group list\n"
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "internalName",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:ActiveDirectoryJoin/getPointGroup:getPointGroup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "sid": {
                    "type": "string",
                    "description": "Required for each group in the group list with no duplication between groups\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sid",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:ActiveDirectoryJoin/getPointRewriteRule:getPointRewriteRule": {
            "properties": {
                "rewriteMatch": {
                    "type": "string",
                    "description": "Required for each rule in the list with no duplication between rules\n"
                },
                "rewriteResult": {
                    "type": "string",
                    "description": "Required for each rule in the list\n"
                },
                "rowId": {
                    "type": "string",
                    "description": "Required for each rule in the list in serial order\n"
                }
            },
            "type": "object",
            "required": [
                "rewriteMatch",
                "rewriteResult",
                "rowId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:ActiveDirectoryJoinDomainWithAll/NodesAdditionalData:NodesAdditionalData": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Additional attribute name\n"
                },
                "value": {
                    "type": "string",
                    "description": "Additional attribute value\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "ise:Authorization/ProfileAdvancedAttribute:ProfileAdvancedAttribute": {
            "properties": {
                "attributeLeftDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "attributeLeftName": {
                    "type": "string",
                    "description": "Attribute name\n"
                },
                "attributeRightDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`\n"
                },
                "attributeRightName": {
                    "type": "string",
                    "description": "Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`\n"
                },
                "attributeRightValue": {
                    "type": "string",
                    "description": "Attribute value, only required when `attribute_right_value_type` is `AttributeValue`\n"
                },
                "attributeRightValueType": {
                    "type": "string",
                    "description": "Advanced attribute value type\n  - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`\n"
                }
            },
            "type": "object"
        },
        "ise:Authorization/getProfileAdvancedAttribute:getProfileAdvancedAttribute": {
            "properties": {
                "attributeLeftDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "attributeLeftName": {
                    "type": "string",
                    "description": "Attribute name\n"
                },
                "attributeRightDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`\n"
                },
                "attributeRightName": {
                    "type": "string",
                    "description": "Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`\n"
                },
                "attributeRightValue": {
                    "type": "string",
                    "description": "Attribute value, only required when `attribute_right_value_type` is `AttributeValue`\n"
                },
                "attributeRightValueType": {
                    "type": "string",
                    "description": "Advanced attribute value type\n"
                }
            },
            "type": "object",
            "required": [
                "attributeLeftDictionaryName",
                "attributeLeftName",
                "attributeRightDictionaryName",
                "attributeRightName",
                "attributeRightValue",
                "attributeRightValueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdmin/ConditionChildren:ConditionChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdmin/ConditionChildrenChildren:ConditionChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdmin/ConditionChildrenChildren:ConditionChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdmin/getConditionChildren:getConditionChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdmin/getConditionChildrenChildren:getConditionChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "description",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "name",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdmin/getConditionChildrenChildren:getConditionChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "description",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "name",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthentication/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthentication/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthentication/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthentication/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthentication/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthentication/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorization/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorization/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorization/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorization/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorization/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorization/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorizationException/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationException/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorizationException/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorizationException/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationException/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorizationException/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorizationGlobalException/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorizationGlobalException/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminAuthorizationGlobalException/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminAuthorizationGlobalException/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminPolicy/SetChildren:SetChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminPolicy/SetChildrenChildren:SetChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminPolicy/SetChildrenChildren:SetChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:DeviceAdminPolicy/getSetChildren:getSetChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminPolicy/getSetChildrenChildren:getSetChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:DeviceAdminPolicy/getSetChildrenChildren:getSetChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:IdentitySource/SequenceIdentitySource:SequenceIdentitySource": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the identity source\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of the identity source in the sequence\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "order"
            ]
        },
        "ise:IdentitySource/getSequenceIdentitySource:getSequenceIdentitySource": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the identity source\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of the identity source in the sequence\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "order"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:LicenseTier/StateLicense:StateLicense": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "License name\n  - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`\n"
                },
                "status": {
                    "type": "string",
                    "description": "License status\n  - Choices: `ENABLED`, `DISABLED`\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ]
        },
        "ise:LicenseTier/getStateLicense:getStateLicense": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "License name\n"
                },
                "status": {
                    "type": "string",
                    "description": "License status\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:Network/DeviceIp:DeviceIp": {
            "properties": {
                "ipaddress": {
                    "type": "string",
                    "description": "It can be either single ip address or ip range address\n"
                },
                "ipaddressExclude": {
                    "type": "string",
                    "description": "It can be either single ip address or ip range address\n"
                },
                "mask": {
                    "type": "string",
                    "description": "Subnet mask length\n"
                }
            },
            "type": "object",
            "required": [
                "ipaddress"
            ]
        },
        "ise:Network/getDeviceIp:getDeviceIp": {
            "properties": {
                "ipaddress": {
                    "type": "string",
                    "description": "It can be either single ip address or ip range address\n"
                },
                "ipaddressExclude": {
                    "type": "string",
                    "description": "It can be either single ip address or ip range address\n"
                },
                "mask": {
                    "type": "string",
                    "description": "Subnet mask length\n"
                }
            },
            "type": "object",
            "required": [
                "ipaddress",
                "ipaddressExclude",
                "mask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccess/ConditionChildren:ConditionChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccess/ConditionChildrenChildren:ConditionChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccess/ConditionChildrenChildren:ConditionChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccess/getConditionChildren:getConditionChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccess/getConditionChildrenChildren:getConditionChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "description",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "name",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccess/getConditionChildrenChildren:getConditionChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "description",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "name",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthentication/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthentication/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthentication/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthentication/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthentication/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthentication/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorization/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorization/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorization/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorization/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorization/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorization/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorizationException/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationException/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorizationException/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorizationException/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationException/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorizationException/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorizationGlobalException/RuleChildren:RuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/RuleChildrenChildren:RuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorizationGlobalException/RuleChildrenChildren:RuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessAuthorizationGlobalException/getRuleChildren:getRuleChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/getRuleChildrenChildren:getRuleChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessAuthorizationGlobalException/getRuleChildrenChildren:getRuleChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessPolicy/SetChildren:SetChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessPolicy/SetChildrenChildren:SetChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n  - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessPolicy/SetChildrenChildren:SetChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n  - Choices: `ConditionAttributes`, `ConditionReference`\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n  - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "type": "object",
            "required": [
                "conditionType"
            ]
        },
        "ise:NetworkAccessPolicy/getSetChildren:getSetChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessPolicy/getSetChildrenChildren:getSetChildrenChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "childrens",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:NetworkAccessPolicy/getSetChildrenChildren:getSetChildrenChildren": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Condition type.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "id": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValue",
                "conditionType",
                "dictionaryName",
                "dictionaryValue",
                "id",
                "isNegate",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:Tacacs/ProfileSessionAttribute:ProfileSessionAttribute": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type\n  - Choices: `MANDATORY`, `OPTIONAL`\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "ise:Tacacs/getProfileSessionAttribute:getProfileSessionAttribute": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ise:TacacsCommand/SetCommand:SetCommand": {
            "properties": {
                "arguments": {
                    "type": "string",
                    "description": "Command arguments\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command\n"
                },
                "grant": {
                    "type": "string",
                    "description": "Grant\n  - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`\n"
                }
            },
            "type": "object",
            "required": [
                "arguments",
                "command",
                "grant"
            ]
        },
        "ise:TacacsCommand/getSetCommand:getSetCommand": {
            "properties": {
                "arguments": {
                    "type": "string",
                    "description": "Command arguments\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command\n"
                },
                "grant": {
                    "type": "string",
                    "description": "Grant\n"
                }
            },
            "type": "object",
            "required": [
                "arguments",
                "command",
                "grant"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the ise package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure HTTPS client. This can also be set as the ISE_INSECURE environment variable. Defaults to `true`.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for the ISE instance. This can also be set as the ISE_PASSWORD environment variable.\n",
                "secret": true
            },
            "retries": {
                "type": "integer",
                "description": "Number of retries for REST API calls. This can also be set as the ISE_RETRIES environment variable. Defaults to `3`.\n"
            },
            "url": {
                "type": "string",
                "description": "URL of the Cisco ISE instance. This can also be set as the ISE_URL environment variable.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for the ISE instance. This can also be set as the ISE_USERNAME environment variable.\n"
            }
        },
        "inputProperties": {
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure HTTPS client. This can also be set as the ISE_INSECURE environment variable. Defaults to `true`.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for the ISE instance. This can also be set as the ISE_PASSWORD environment variable.\n",
                "secret": true
            },
            "retries": {
                "type": "integer",
                "description": "Number of retries for REST API calls. This can also be set as the ISE_RETRIES environment variable. Defaults to `3`.\n"
            },
            "url": {
                "type": "string",
                "description": "URL of the Cisco ISE instance. This can also be set as the ISE_URL environment variable.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for the ISE instance. This can also be set as the ISE_USERNAME environment variable.\n"
            }
        }
    },
    "resources": {
        "ise:ActiveDirectoryAdd/groups:Groups": {
            "description": "This resource can manage an Active Directory Add Groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.activedirectoryadd.Groups(\"example\", {\n    joinPointId: \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    name: \"cisco.local\",\n    description: \"My AD join point\",\n    domain: \"cisco.local\",\n    adScopesNames: \"Default_Scope\",\n    enableDomainAllowedList: true,\n    groups: [{\n        name: \"cisco.local/operators\",\n        sid: \"S-1-5-32-548\",\n        type: \"GLOBAL\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.active_directory_add.Groups(\"example\",\n    join_point_id=\"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    name=\"cisco.local\",\n    description=\"My AD join point\",\n    domain=\"cisco.local\",\n    ad_scopes_names=\"Default_Scope\",\n    enable_domain_allowed_list=True,\n    groups=[ise.active_directory_add.GroupsGroupArgs(\n        name=\"cisco.local/operators\",\n        sid=\"S-1-5-32-548\",\n        type=\"GLOBAL\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.ActiveDirectoryAdd.Groups(\"example\", new()\n    {\n        JoinPointId = \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n        Name = \"cisco.local\",\n        Description = \"My AD join point\",\n        Domain = \"cisco.local\",\n        AdScopesNames = \"Default_Scope\",\n        EnableDomainAllowedList = true,\n        GroupsValue = new[]\n        {\n            new Ise.ActiveDirectoryAdd.Inputs.GroupsGroupArgs\n            {\n                Name = \"cisco.local/operators\",\n                Sid = \"S-1-5-32-548\",\n                Type = \"GLOBAL\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/ActiveDirectoryAdd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ActiveDirectoryAdd.NewGroups(ctx, \"example\", \u0026ActiveDirectoryAdd.GroupsArgs{\n\t\t\tJoinPointId:             pulumi.String(\"73808580-b6e6-11ee-8960-de6d7692bc40\"),\n\t\t\tName:                    pulumi.String(\"cisco.local\"),\n\t\t\tDescription:             pulumi.String(\"My AD join point\"),\n\t\t\tDomain:                  pulumi.String(\"cisco.local\"),\n\t\t\tAdScopesNames:           pulumi.String(\"Default_Scope\"),\n\t\t\tEnableDomainAllowedList: pulumi.Bool(true),\n\t\t\tGroups: activedirectoryadd.GroupsGroupArray{\n\t\t\t\t\u0026activedirectoryadd.GroupsGroupArgs{\n\t\t\t\t\tName: pulumi.String(\"cisco.local/operators\"),\n\t\t\t\t\tSid:  pulumi.String(\"S-1-5-32-548\"),\n\t\t\t\t\tType: pulumi.String(\"GLOBAL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.ActiveDirectoryAdd.Groups;\nimport com.pulumi.ise.ActiveDirectoryAdd.GroupsArgs;\nimport com.pulumi.ise.ActiveDirectoryAdd.inputs.GroupsGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Groups(\"example\", GroupsArgs.builder()        \n            .joinPointId(\"73808580-b6e6-11ee-8960-de6d7692bc40\")\n            .name(\"cisco.local\")\n            .description(\"My AD join point\")\n            .domain(\"cisco.local\")\n            .adScopesNames(\"Default_Scope\")\n            .enableDomainAllowedList(true)\n            .groups(GroupsGroupArgs.builder()\n                .name(\"cisco.local/operators\")\n                .sid(\"S-1-5-32-548\")\n                .type(\"GLOBAL\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:ActiveDirectoryAdd:Groups\n    properties:\n      joinPointId: 73808580-b6e6-11ee-8960-de6d7692bc40\n      name: cisco.local\n      description: My AD join point\n      domain: cisco.local\n      adScopesNames: Default_Scope\n      enableDomainAllowedList: true\n      groups:\n        - name: cisco.local/operators\n          sid: S-1-5-32-548\n          type: GLOBAL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "adScopesNames": {
                    "type": "string",
                    "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default\nvalue: `Default_Scope`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Join point Description\n"
                },
                "domain": {
                    "type": "string",
                    "description": "AD domain associated with the join point\n"
                },
                "enableDomainAllowedList": {
                    "type": "boolean",
                    "description": "- Default value: `true`\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryAdd/GroupsGroup:GroupsGroup"
                    },
                    "description": "List of AD Groups\n",
                    "language": {
                        "csharp": {
                            "name": "GroupsValue"
                        }
                    }
                },
                "joinPointId": {
                    "type": "string",
                    "description": "Active Directory Join Point ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the active directory join point\n"
                }
            },
            "required": [
                "adScopesNames",
                "domain",
                "enableDomainAllowedList",
                "joinPointId",
                "name"
            ],
            "inputProperties": {
                "adScopesNames": {
                    "type": "string",
                    "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default\nvalue: `Default_Scope`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Join point Description\n"
                },
                "domain": {
                    "type": "string",
                    "description": "AD domain associated with the join point\n"
                },
                "enableDomainAllowedList": {
                    "type": "boolean",
                    "description": "- Default value: `true`\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryAdd/GroupsGroup:GroupsGroup"
                    },
                    "description": "List of AD Groups\n",
                    "language": {
                        "csharp": {
                            "name": "GroupsValue"
                        }
                    }
                },
                "joinPointId": {
                    "type": "string",
                    "description": "Active Directory Join Point ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the active directory join point\n"
                }
            },
            "requiredInputs": [
                "domain",
                "joinPointId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Groups resources.\n",
                "properties": {
                    "adScopesNames": {
                        "type": "string",
                        "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comm - Default\nvalue: `Default_Scope`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Join point Description\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "AD domain associated with the join point\n"
                    },
                    "enableDomainAllowedList": {
                        "type": "boolean",
                        "description": "- Default value: `true`\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryAdd/GroupsGroup:GroupsGroup"
                        },
                        "description": "List of AD Groups\n",
                        "language": {
                            "csharp": {
                                "name": "GroupsValue"
                            }
                        }
                    },
                    "joinPointId": {
                        "type": "string",
                        "description": "Active Directory Join Point ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the active directory join point\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:ActiveDirectoryJoin/point:Point": {
            "description": "This resource can manage an Active Directory Join Point.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.ActiveDirectoryJoin.Point;\nimport com.pulumi.ise.ActiveDirectoryJoin.PointArgs;\nimport com.pulumi.ise.ActiveDirectoryJoin.inputs.PointGroupArgs;\nimport com.pulumi.ise.ActiveDirectoryJoin.inputs.PointAttributeArgs;\nimport com.pulumi.ise.ActiveDirectoryJoin.inputs.PointRewriteRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Point(\"example\", PointArgs.builder()        \n            .name(\"cisco.local\")\n            .description(\"My AD join point\")\n            .domain(\"cisco.local\")\n            .adScopesNames(\"Default_Scope\")\n            .enableDomainAllowedList(true)\n            .groups(PointGroupArgs.builder()\n                .name(\"cisco.local/operators\")\n                .sid(\"S-1-5-32-548\")\n                .type(\"GLOBAL\")\n                .build())\n            .attributes(PointAttributeArgs.builder()\n                .name(\"Attribute_1\")\n                .type(\"STRING\")\n                .internal_name(\"internal_name\")\n                .default_value(\"default_string\")\n                .build())\n            .rewriteRules(PointRewriteRuleArgs.builder()\n                .row_id(\"0\")\n                .rewrite_match(\"rewrite_match\")\n                .rewrite_result(\"rewrite_result\")\n                .build())\n            .enableRewrites(false)\n            .enablePassChange(true)\n            .enableMachineAuth(true)\n            .enableMachineAccess(true)\n            .enableDialinPermissionCheck(false)\n            .plaintextAuth(false)\n            .agingTime(5)\n            .enableCallbackForDialinClient(false)\n            .identityNotInAdBehaviour(\"SEARCH_JOINED_FOREST\")\n            .unreachableDomainsBehaviour(\"PROCEED\")\n            .schema(\"ACTIVE_DIRECTORY\")\n            .firstName(\"givenName\")\n            .department(\"department\")\n            .lastName(\"sn\")\n            .organizationalUnit(\"company\")\n            .jobTitle(\"title\")\n            .locality(\"l\")\n            .email(\"mail\")\n            .stateOrProvince(\"st\")\n            .telephone(\"telephoneNumber\")\n            .country(\"co\")\n            .streetAddress(\"streetAddress\")\n            .enableFailedAuthProtection(false)\n            .failedAuthThreshold(5)\n            .authProtectionType(\"WIRELESS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:ActiveDirectoryJoin:Point\n    properties:\n      name: cisco.local\n      description: My AD join point\n      domain: cisco.local\n      adScopesNames: Default_Scope\n      enableDomainAllowedList: true\n      groups:\n        - name: cisco.local/operators\n          sid: S-1-5-32-548\n          type: GLOBAL\n      attributes:\n        - name: Attribute_1\n          type: STRING\n          internal_name: internal_name\n          default_value: default_string\n      rewriteRules:\n        - row_id: '0'\n          rewrite_match: rewrite_match\n          rewrite_result: rewrite_result\n      enableRewrites: false\n      enablePassChange: true\n      enableMachineAuth: true\n      enableMachineAccess: true\n      enableDialinPermissionCheck: false\n      plaintextAuth: false\n      agingTime: 5\n      enableCallbackForDialinClient: false\n      identityNotInAdBehaviour: SEARCH_JOINED_FOREST\n      unreachableDomainsBehaviour: PROCEED\n      schema: ACTIVE_DIRECTORY\n      firstName: givenName\n      department: department\n      lastName: sn\n      organizationalUnit: company\n      jobTitle: title\n      locality: l\n      email: mail\n      stateOrProvince: st\n      telephone: telephoneNumber\n      country: co\n      streetAddress: streetAddress\n      enableFailedAuthProtection: false\n      failedAuthThreshold: 5\n      authProtectionType: WIRELESS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:ActiveDirectoryJoin/point:Point example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "adScopesNames": {
                    "type": "string",
                    "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma. -\nDefault value: `Default_Scope`\n"
                },
                "agingTime": {
                    "type": "integer",
                    "description": "Aging Time - Default value: `5`\n"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointAttribute:PointAttribute"
                    },
                    "description": "List of AD attributes\n"
                },
                "authProtectionType": {
                    "type": "string",
                    "description": "Enable prevent AD account lockout for WIRELESS/WIRED/BOTH - Choices: `WIRELESS`, `WIRED`, `BOTH`\n"
                },
                "country": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "department": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "description": {
                    "type": "string",
                    "description": "Join point description\n"
                },
                "domain": {
                    "type": "string",
                    "description": "AD domain associated with the join point\n"
                },
                "email": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "enableCallbackForDialinClient": {
                    "type": "boolean",
                    "description": "Enable Callback For Dial In Client - Default value: `false`\n"
                },
                "enableDialinPermissionCheck": {
                    "type": "boolean",
                    "description": "Enable Dial In Permission Check - Default value: `false`\n"
                },
                "enableDomainAllowedList": {
                    "type": "boolean",
                    "description": "- Default value: `true`\n"
                },
                "enableFailedAuthProtection": {
                    "type": "boolean",
                    "description": "Enable prevent AD account lockout due to too many bad password attempts - Default value: `false`\n"
                },
                "enableMachineAccess": {
                    "type": "boolean",
                    "description": "Enable Machine Access - Default value: `true`\n"
                },
                "enableMachineAuth": {
                    "type": "boolean",
                    "description": "Enable Machine Authentication - Default value: `true`\n"
                },
                "enablePassChange": {
                    "type": "boolean",
                    "description": "Enable Password Change - Default value: `true`\n"
                },
                "enableRewrites": {
                    "type": "boolean",
                    "description": "Enable Rewrites - Default value: `false`\n"
                },
                "failedAuthThreshold": {
                    "type": "integer",
                    "description": "Number of bad password attempts - Default value: `5`\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointGroup:PointGroup"
                    },
                    "description": "List of AD Groups\n"
                },
                "identityNotInAdBehaviour": {
                    "type": "string",
                    "description": "Identity Not In AD Behaviour - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "locality": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the active directory join point\n"
                },
                "organizationalUnit": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "plaintextAuth": {
                    "type": "boolean",
                    "description": "Plain Text Authentication - Default value: `false`\n"
                },
                "rewriteRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointRewriteRule:PointRewriteRule"
                    },
                    "description": "List of Rewrite rules\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`\n"
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "telephone": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "unreachableDomainsBehaviour": {
                    "type": "string",
                    "description": "Unreachable Domains Behaviour - Choices: `PROCEED`, `DROP`\n"
                }
            },
            "required": [
                "adScopesNames",
                "agingTime",
                "domain",
                "enableCallbackForDialinClient",
                "enableDialinPermissionCheck",
                "enableDomainAllowedList",
                "enableFailedAuthProtection",
                "enableMachineAccess",
                "enableMachineAuth",
                "enablePassChange",
                "enableRewrites",
                "failedAuthThreshold",
                "name",
                "plaintextAuth"
            ],
            "inputProperties": {
                "adScopesNames": {
                    "type": "string",
                    "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma. -\nDefault value: `Default_Scope`\n"
                },
                "agingTime": {
                    "type": "integer",
                    "description": "Aging Time - Default value: `5`\n"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointAttribute:PointAttribute"
                    },
                    "description": "List of AD attributes\n"
                },
                "authProtectionType": {
                    "type": "string",
                    "description": "Enable prevent AD account lockout for WIRELESS/WIRED/BOTH - Choices: `WIRELESS`, `WIRED`, `BOTH`\n"
                },
                "country": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "department": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "description": {
                    "type": "string",
                    "description": "Join point description\n"
                },
                "domain": {
                    "type": "string",
                    "description": "AD domain associated with the join point\n"
                },
                "email": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "enableCallbackForDialinClient": {
                    "type": "boolean",
                    "description": "Enable Callback For Dial In Client - Default value: `false`\n"
                },
                "enableDialinPermissionCheck": {
                    "type": "boolean",
                    "description": "Enable Dial In Permission Check - Default value: `false`\n"
                },
                "enableDomainAllowedList": {
                    "type": "boolean",
                    "description": "- Default value: `true`\n"
                },
                "enableFailedAuthProtection": {
                    "type": "boolean",
                    "description": "Enable prevent AD account lockout due to too many bad password attempts - Default value: `false`\n"
                },
                "enableMachineAccess": {
                    "type": "boolean",
                    "description": "Enable Machine Access - Default value: `true`\n"
                },
                "enableMachineAuth": {
                    "type": "boolean",
                    "description": "Enable Machine Authentication - Default value: `true`\n"
                },
                "enablePassChange": {
                    "type": "boolean",
                    "description": "Enable Password Change - Default value: `true`\n"
                },
                "enableRewrites": {
                    "type": "boolean",
                    "description": "Enable Rewrites - Default value: `false`\n"
                },
                "failedAuthThreshold": {
                    "type": "integer",
                    "description": "Number of bad password attempts - Default value: `5`\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointGroup:PointGroup"
                    },
                    "description": "List of AD Groups\n"
                },
                "identityNotInAdBehaviour": {
                    "type": "string",
                    "description": "Identity Not In AD Behaviour - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "locality": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the active directory join point\n"
                },
                "organizationalUnit": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "plaintextAuth": {
                    "type": "boolean",
                    "description": "Plain Text Authentication - Default value: `false`\n"
                },
                "rewriteRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoin/PointRewriteRule:PointRewriteRule"
                    },
                    "description": "List of Rewrite rules\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`\n"
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "telephone": {
                    "type": "string",
                    "description": "User info attribute\n"
                },
                "unreachableDomainsBehaviour": {
                    "type": "string",
                    "description": "Unreachable Domains Behaviour - Choices: `PROCEED`, `DROP`\n"
                }
            },
            "requiredInputs": [
                "domain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Point resources.\n",
                "properties": {
                    "adScopesNames": {
                        "type": "string",
                        "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma. -\nDefault value: `Default_Scope`\n"
                    },
                    "agingTime": {
                        "type": "integer",
                        "description": "Aging Time - Default value: `5`\n"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/PointAttribute:PointAttribute"
                        },
                        "description": "List of AD attributes\n"
                    },
                    "authProtectionType": {
                        "type": "string",
                        "description": "Enable prevent AD account lockout for WIRELESS/WIRED/BOTH - Choices: `WIRELESS`, `WIRED`, `BOTH`\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Join point description\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "AD domain associated with the join point\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "enableCallbackForDialinClient": {
                        "type": "boolean",
                        "description": "Enable Callback For Dial In Client - Default value: `false`\n"
                    },
                    "enableDialinPermissionCheck": {
                        "type": "boolean",
                        "description": "Enable Dial In Permission Check - Default value: `false`\n"
                    },
                    "enableDomainAllowedList": {
                        "type": "boolean",
                        "description": "- Default value: `true`\n"
                    },
                    "enableFailedAuthProtection": {
                        "type": "boolean",
                        "description": "Enable prevent AD account lockout due to too many bad password attempts - Default value: `false`\n"
                    },
                    "enableMachineAccess": {
                        "type": "boolean",
                        "description": "Enable Machine Access - Default value: `true`\n"
                    },
                    "enableMachineAuth": {
                        "type": "boolean",
                        "description": "Enable Machine Authentication - Default value: `true`\n"
                    },
                    "enablePassChange": {
                        "type": "boolean",
                        "description": "Enable Password Change - Default value: `true`\n"
                    },
                    "enableRewrites": {
                        "type": "boolean",
                        "description": "Enable Rewrites - Default value: `false`\n"
                    },
                    "failedAuthThreshold": {
                        "type": "integer",
                        "description": "Number of bad password attempts - Default value: `5`\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/PointGroup:PointGroup"
                        },
                        "description": "List of AD Groups\n"
                    },
                    "identityNotInAdBehaviour": {
                        "type": "string",
                        "description": "Identity Not In AD Behaviour - Choices: `REJECT`, `SEARCH_JOINED_FOREST`, `SEARCH_ALL`\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "locality": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the active directory join point\n"
                    },
                    "organizationalUnit": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "plaintextAuth": {
                        "type": "boolean",
                        "description": "Plain Text Authentication - Default value: `false`\n"
                    },
                    "rewriteRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/PointRewriteRule:PointRewriteRule"
                        },
                        "description": "List of Rewrite rules\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Schema - Choices: `ACTIVE_DIRECTORY`, `CUSTOM`\n"
                    },
                    "stateOrProvince": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "telephone": {
                        "type": "string",
                        "description": "User info attribute\n"
                    },
                    "unreachableDomainsBehaviour": {
                        "type": "string",
                        "description": "Unreachable Domains Behaviour - Choices: `PROCEED`, `DROP`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:ActiveDirectoryJoinDomainWithAll/nodes:Nodes": {
            "description": "This resource can manage an Active Directory Join Domain with All Nodes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.activedirectoryjoindomainwithall.Nodes(\"example\", {\n    joinPointId: \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    additionalDatas: [{\n        name: \"username\",\n        value: \"administrator\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.active_directory_join_domain_with_all.Nodes(\"example\",\n    join_point_id=\"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    additional_datas=[ise.active_directory_join_domain_with_all.NodesAdditionalDataArgs(\n        name=\"username\",\n        value=\"administrator\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.ActiveDirectoryJoinDomainWithAll.Nodes(\"example\", new()\n    {\n        JoinPointId = \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n        AdditionalDatas = new[]\n        {\n            new Ise.ActiveDirectoryJoinDomainWithAll.Inputs.NodesAdditionalDataArgs\n            {\n                Name = \"username\",\n                Value = \"administrator\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/ActiveDirectoryJoinDomainWithAll\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ActiveDirectoryJoinDomainWithAll.NewNodes(ctx, \"example\", \u0026ActiveDirectoryJoinDomainWithAll.NodesArgs{\n\t\t\tJoinPointId: pulumi.String(\"73808580-b6e6-11ee-8960-de6d7692bc40\"),\n\t\t\tAdditionalDatas: activedirectoryjoindomainwithall.NodesAdditionalDataArray{\n\t\t\t\t\u0026activedirectoryjoindomainwithall.NodesAdditionalDataArgs{\n\t\t\t\t\tName:  pulumi.String(\"username\"),\n\t\t\t\t\tValue: pulumi.String(\"administrator\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.ActiveDirectoryJoinDomainWithAll.Nodes;\nimport com.pulumi.ise.ActiveDirectoryJoinDomainWithAll.NodesArgs;\nimport com.pulumi.ise.ActiveDirectoryJoinDomainWithAll.inputs.NodesAdditionalDataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Nodes(\"example\", NodesArgs.builder()        \n            .joinPointId(\"73808580-b6e6-11ee-8960-de6d7692bc40\")\n            .additionalDatas(NodesAdditionalDataArgs.builder()\n                .name(\"username\")\n                .value(\"administrator\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:ActiveDirectoryJoinDomainWithAll:Nodes\n    properties:\n      joinPointId: 73808580-b6e6-11ee-8960-de6d7692bc40\n      additionalDatas:\n        - name: username\n          value: administrator\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "additionalDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoinDomainWithAll/NodesAdditionalData:NodesAdditionalData"
                    }
                },
                "joinPointId": {
                    "type": "string",
                    "description": "Active Directory Join Point ID\n"
                }
            },
            "required": [
                "additionalDatas",
                "joinPointId"
            ],
            "inputProperties": {
                "additionalDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:ActiveDirectoryJoinDomainWithAll/NodesAdditionalData:NodesAdditionalData"
                    }
                },
                "joinPointId": {
                    "type": "string",
                    "description": "Active Directory Join Point ID\n"
                }
            },
            "requiredInputs": [
                "additionalDatas",
                "joinPointId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nodes resources.\n",
                "properties": {
                    "additionalDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoinDomainWithAll/NodesAdditionalData:NodesAdditionalData"
                        }
                    },
                    "joinPointId": {
                        "type": "string",
                        "description": "Active Directory Join Point ID\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Allowed/protocols:Protocols": {
            "description": "This resource can manage an allowed protocols policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.allowed.Protocols(\"example\", {\n    name: \"Protocols1\",\n    description: \"My allowed protocols\",\n    processHostLookup: true,\n    allowPapAscii: true,\n    allowChap: true,\n    allowMsChapV1: true,\n    allowMsChapV2: true,\n    allowEapMd5: true,\n    allowLeap: true,\n    allowEapTls: true,\n    allowEapTtls: true,\n    allowEapFast: true,\n    allowPeap: true,\n    allowTeap: true,\n    allowPreferredEapProtocol: true,\n    preferredEapProtocol: \"LEAP\",\n    eapTlsLBit: true,\n    allowWeakCiphersForEap: true,\n    requireMessageAuth: true,\n    eapTlsAllowAuthOfExpiredCerts: true,\n    eapTlsEnableStatelessSessionResume: true,\n    eapTlsSessionTicketTtl: 5,\n    eapTlsSessionTicketTtlUnit: \"DAYS\",\n    eapTlsSessionTicketPercentage: 5,\n    peapAllowPeapEapMsChapV2: true,\n    peapAllowPeapEapMsChapV2PwdChange: true,\n    peapAllowPeapEapMsChapV2PwdChangeRetries: 3,\n    peapAllowPeapEapGtc: true,\n    peapAllowPeapEapGtcPwdChange: true,\n    peapAllowPeapEapGtcPwdChangeRetries: 3,\n    peapAllowPeapEapTls: true,\n    peapAllowPeapEapTlsAuthOfExpiredCerts: true,\n    requireCryptobinding: true,\n    peapPeapV0: true,\n    eapTtlsPapAscii: true,\n    eapTtlsChap: true,\n    eapTtlsMsChapV1: true,\n    eapTtlsMsChapV2: true,\n    eapTtlsEapMd5: true,\n    eapTtlsEapMsChapV2: true,\n    eapTtlsEapMsChapV2PwdChange: true,\n    eapTtlsEapMsChapV2PwdChangeRetries: 3,\n    eapFastEapMsChapV2: true,\n    eapFastEapMsChapV2PwdChange: true,\n    eapFastEapMsChapV2PwdChangeRetries: 3,\n    eapFastEapGtc: true,\n    eapFastEapGtcPwdChange: true,\n    eapFastEapGtcPwdChangeRetries: 3,\n    eapFastEapTls: true,\n    eapFastEapTlsAuthOfExpiredCerts: true,\n    eapFastEnableEapChaining: true,\n    eapFastUsePacs: true,\n    eapFastPacsTunnelPacTtl: 5,\n    eapFastPacsTunnelPacTtlUnit: \"DAYS\",\n    eapFastPacsUseProactivePacUpdatePercentage: 5,\n    eapFastPacsAllowAnonymousProvisioning: true,\n    eapFastPacsAllowAuthenticatedProvisioning: true,\n    eapFastPacsServerReturns: true,\n    eapFastPacsAllowClientCert: true,\n    eapFastPacsAllowMachineAuthentication: true,\n    eapFastPacsMachinePacTtl: 5,\n    eapFastPacsMachinePacTtlUnit: \"DAYS\",\n    eapFastPacsStatelessSessionResume: true,\n    eapFastPacsAuthorizationPacTtl: 5,\n    eapFastPacsAuthorizationPacTtlUnit: \"HOURS\",\n    teapEapMsChapV2: true,\n    teapEapMsChapV2PwdChange: true,\n    teapEapMsChapV2PwdChangeRetries: 3,\n    teapEapTls: true,\n    teapEapTlsAuthOfExpiredCerts: true,\n    teapEapAcceptClientCertDuringTunnelEst: true,\n    teapEapChaining: true,\n    teapDowngradeMsk: true,\n    teapRequestBasicPwdAuth: true,\n    allow5g: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.allowed.Protocols(\"example\",\n    name=\"Protocols1\",\n    description=\"My allowed protocols\",\n    process_host_lookup=True,\n    allow_pap_ascii=True,\n    allow_chap=True,\n    allow_ms_chap_v1=True,\n    allow_ms_chap_v2=True,\n    allow_eap_md5=True,\n    allow_leap=True,\n    allow_eap_tls=True,\n    allow_eap_ttls=True,\n    allow_eap_fast=True,\n    allow_peap=True,\n    allow_teap=True,\n    allow_preferred_eap_protocol=True,\n    preferred_eap_protocol=\"LEAP\",\n    eap_tls_l_bit=True,\n    allow_weak_ciphers_for_eap=True,\n    require_message_auth=True,\n    eap_tls_allow_auth_of_expired_certs=True,\n    eap_tls_enable_stateless_session_resume=True,\n    eap_tls_session_ticket_ttl=5,\n    eap_tls_session_ticket_ttl_unit=\"DAYS\",\n    eap_tls_session_ticket_percentage=5,\n    peap_allow_peap_eap_ms_chap_v2=True,\n    peap_allow_peap_eap_ms_chap_v2_pwd_change=True,\n    peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=3,\n    peap_allow_peap_eap_gtc=True,\n    peap_allow_peap_eap_gtc_pwd_change=True,\n    peap_allow_peap_eap_gtc_pwd_change_retries=3,\n    peap_allow_peap_eap_tls=True,\n    peap_allow_peap_eap_tls_auth_of_expired_certs=True,\n    require_cryptobinding=True,\n    peap_peap_v0=True,\n    eap_ttls_pap_ascii=True,\n    eap_ttls_chap=True,\n    eap_ttls_ms_chap_v1=True,\n    eap_ttls_ms_chap_v2=True,\n    eap_ttls_eap_md5=True,\n    eap_ttls_eap_ms_chap_v2=True,\n    eap_ttls_eap_ms_chap_v2_pwd_change=True,\n    eap_ttls_eap_ms_chap_v2_pwd_change_retries=3,\n    eap_fast_eap_ms_chap_v2=True,\n    eap_fast_eap_ms_chap_v2_pwd_change=True,\n    eap_fast_eap_ms_chap_v2_pwd_change_retries=3,\n    eap_fast_eap_gtc=True,\n    eap_fast_eap_gtc_pwd_change=True,\n    eap_fast_eap_gtc_pwd_change_retries=3,\n    eap_fast_eap_tls=True,\n    eap_fast_eap_tls_auth_of_expired_certs=True,\n    eap_fast_enable_eap_chaining=True,\n    eap_fast_use_pacs=True,\n    eap_fast_pacs_tunnel_pac_ttl=5,\n    eap_fast_pacs_tunnel_pac_ttl_unit=\"DAYS\",\n    eap_fast_pacs_use_proactive_pac_update_percentage=5,\n    eap_fast_pacs_allow_anonymous_provisioning=True,\n    eap_fast_pacs_allow_authenticated_provisioning=True,\n    eap_fast_pacs_server_returns=True,\n    eap_fast_pacs_allow_client_cert=True,\n    eap_fast_pacs_allow_machine_authentication=True,\n    eap_fast_pacs_machine_pac_ttl=5,\n    eap_fast_pacs_machine_pac_ttl_unit=\"DAYS\",\n    eap_fast_pacs_stateless_session_resume=True,\n    eap_fast_pacs_authorization_pac_ttl=5,\n    eap_fast_pacs_authorization_pac_ttl_unit=\"HOURS\",\n    teap_eap_ms_chap_v2=True,\n    teap_eap_ms_chap_v2_pwd_change=True,\n    teap_eap_ms_chap_v2_pwd_change_retries=3,\n    teap_eap_tls=True,\n    teap_eap_tls_auth_of_expired_certs=True,\n    teap_eap_accept_client_cert_during_tunnel_est=True,\n    teap_eap_chaining=True,\n    teap_downgrade_msk=True,\n    teap_request_basic_pwd_auth=True,\n    allow5g=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Allowed.Protocols(\"example\", new()\n    {\n        Name = \"Protocols1\",\n        Description = \"My allowed protocols\",\n        ProcessHostLookup = true,\n        AllowPapAscii = true,\n        AllowChap = true,\n        AllowMsChapV1 = true,\n        AllowMsChapV2 = true,\n        AllowEapMd5 = true,\n        AllowLeap = true,\n        AllowEapTls = true,\n        AllowEapTtls = true,\n        AllowEapFast = true,\n        AllowPeap = true,\n        AllowTeap = true,\n        AllowPreferredEapProtocol = true,\n        PreferredEapProtocol = \"LEAP\",\n        EapTlsLBit = true,\n        AllowWeakCiphersForEap = true,\n        RequireMessageAuth = true,\n        EapTlsAllowAuthOfExpiredCerts = true,\n        EapTlsEnableStatelessSessionResume = true,\n        EapTlsSessionTicketTtl = 5,\n        EapTlsSessionTicketTtlUnit = \"DAYS\",\n        EapTlsSessionTicketPercentage = 5,\n        PeapAllowPeapEapMsChapV2 = true,\n        PeapAllowPeapEapMsChapV2PwdChange = true,\n        PeapAllowPeapEapMsChapV2PwdChangeRetries = 3,\n        PeapAllowPeapEapGtc = true,\n        PeapAllowPeapEapGtcPwdChange = true,\n        PeapAllowPeapEapGtcPwdChangeRetries = 3,\n        PeapAllowPeapEapTls = true,\n        PeapAllowPeapEapTlsAuthOfExpiredCerts = true,\n        RequireCryptobinding = true,\n        PeapPeapV0 = true,\n        EapTtlsPapAscii = true,\n        EapTtlsChap = true,\n        EapTtlsMsChapV1 = true,\n        EapTtlsMsChapV2 = true,\n        EapTtlsEapMd5 = true,\n        EapTtlsEapMsChapV2 = true,\n        EapTtlsEapMsChapV2PwdChange = true,\n        EapTtlsEapMsChapV2PwdChangeRetries = 3,\n        EapFastEapMsChapV2 = true,\n        EapFastEapMsChapV2PwdChange = true,\n        EapFastEapMsChapV2PwdChangeRetries = 3,\n        EapFastEapGtc = true,\n        EapFastEapGtcPwdChange = true,\n        EapFastEapGtcPwdChangeRetries = 3,\n        EapFastEapTls = true,\n        EapFastEapTlsAuthOfExpiredCerts = true,\n        EapFastEnableEapChaining = true,\n        EapFastUsePacs = true,\n        EapFastPacsTunnelPacTtl = 5,\n        EapFastPacsTunnelPacTtlUnit = \"DAYS\",\n        EapFastPacsUseProactivePacUpdatePercentage = 5,\n        EapFastPacsAllowAnonymousProvisioning = true,\n        EapFastPacsAllowAuthenticatedProvisioning = true,\n        EapFastPacsServerReturns = true,\n        EapFastPacsAllowClientCert = true,\n        EapFastPacsAllowMachineAuthentication = true,\n        EapFastPacsMachinePacTtl = 5,\n        EapFastPacsMachinePacTtlUnit = \"DAYS\",\n        EapFastPacsStatelessSessionResume = true,\n        EapFastPacsAuthorizationPacTtl = 5,\n        EapFastPacsAuthorizationPacTtlUnit = \"HOURS\",\n        TeapEapMsChapV2 = true,\n        TeapEapMsChapV2PwdChange = true,\n        TeapEapMsChapV2PwdChangeRetries = 3,\n        TeapEapTls = true,\n        TeapEapTlsAuthOfExpiredCerts = true,\n        TeapEapAcceptClientCertDuringTunnelEst = true,\n        TeapEapChaining = true,\n        TeapDowngradeMsk = true,\n        TeapRequestBasicPwdAuth = true,\n        Allow5g = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Allowed\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Allowed.NewProtocols(ctx, \"example\", \u0026Allowed.ProtocolsArgs{\n\t\t\tName:                                       pulumi.String(\"Protocols1\"),\n\t\t\tDescription:                                pulumi.String(\"My allowed protocols\"),\n\t\t\tProcessHostLookup:                          pulumi.Bool(true),\n\t\t\tAllowPapAscii:                              pulumi.Bool(true),\n\t\t\tAllowChap:                                  pulumi.Bool(true),\n\t\t\tAllowMsChapV1:                              pulumi.Bool(true),\n\t\t\tAllowMsChapV2:                              pulumi.Bool(true),\n\t\t\tAllowEapMd5:                                pulumi.Bool(true),\n\t\t\tAllowLeap:                                  pulumi.Bool(true),\n\t\t\tAllowEapTls:                                pulumi.Bool(true),\n\t\t\tAllowEapTtls:                               pulumi.Bool(true),\n\t\t\tAllowEapFast:                               pulumi.Bool(true),\n\t\t\tAllowPeap:                                  pulumi.Bool(true),\n\t\t\tAllowTeap:                                  pulumi.Bool(true),\n\t\t\tAllowPreferredEapProtocol:                  pulumi.Bool(true),\n\t\t\tPreferredEapProtocol:                       pulumi.String(\"LEAP\"),\n\t\t\tEapTlsLBit:                                 pulumi.Bool(true),\n\t\t\tAllowWeakCiphersForEap:                     pulumi.Bool(true),\n\t\t\tRequireMessageAuth:                         pulumi.Bool(true),\n\t\t\tEapTlsAllowAuthOfExpiredCerts:              pulumi.Bool(true),\n\t\t\tEapTlsEnableStatelessSessionResume:         pulumi.Bool(true),\n\t\t\tEapTlsSessionTicketTtl:                     pulumi.Int(5),\n\t\t\tEapTlsSessionTicketTtlUnit:                 pulumi.String(\"DAYS\"),\n\t\t\tEapTlsSessionTicketPercentage:              pulumi.Int(5),\n\t\t\tPeapAllowPeapEapMsChapV2:                   pulumi.Bool(true),\n\t\t\tPeapAllowPeapEapMsChapV2PwdChange:          pulumi.Bool(true),\n\t\t\tPeapAllowPeapEapMsChapV2PwdChangeRetries:   pulumi.Int(3),\n\t\t\tPeapAllowPeapEapGtc:                        pulumi.Bool(true),\n\t\t\tPeapAllowPeapEapGtcPwdChange:               pulumi.Bool(true),\n\t\t\tPeapAllowPeapEapGtcPwdChangeRetries:        pulumi.Int(3),\n\t\t\tPeapAllowPeapEapTls:                        pulumi.Bool(true),\n\t\t\tPeapAllowPeapEapTlsAuthOfExpiredCerts:      pulumi.Bool(true),\n\t\t\tRequireCryptobinding:                       pulumi.Bool(true),\n\t\t\tPeapPeapV0:                                 pulumi.Bool(true),\n\t\t\tEapTtlsPapAscii:                            pulumi.Bool(true),\n\t\t\tEapTtlsChap:                                pulumi.Bool(true),\n\t\t\tEapTtlsMsChapV1:                            pulumi.Bool(true),\n\t\t\tEapTtlsMsChapV2:                            pulumi.Bool(true),\n\t\t\tEapTtlsEapMd5:                              pulumi.Bool(true),\n\t\t\tEapTtlsEapMsChapV2:                         pulumi.Bool(true),\n\t\t\tEapTtlsEapMsChapV2PwdChange:                pulumi.Bool(true),\n\t\t\tEapTtlsEapMsChapV2PwdChangeRetries:         pulumi.Int(3),\n\t\t\tEapFastEapMsChapV2:                         pulumi.Bool(true),\n\t\t\tEapFastEapMsChapV2PwdChange:                pulumi.Bool(true),\n\t\t\tEapFastEapMsChapV2PwdChangeRetries:         pulumi.Int(3),\n\t\t\tEapFastEapGtc:                              pulumi.Bool(true),\n\t\t\tEapFastEapGtcPwdChange:                     pulumi.Bool(true),\n\t\t\tEapFastEapGtcPwdChangeRetries:              pulumi.Int(3),\n\t\t\tEapFastEapTls:                              pulumi.Bool(true),\n\t\t\tEapFastEapTlsAuthOfExpiredCerts:            pulumi.Bool(true),\n\t\t\tEapFastEnableEapChaining:                   pulumi.Bool(true),\n\t\t\tEapFastUsePacs:                             pulumi.Bool(true),\n\t\t\tEapFastPacsTunnelPacTtl:                    pulumi.Int(5),\n\t\t\tEapFastPacsTunnelPacTtlUnit:                pulumi.String(\"DAYS\"),\n\t\t\tEapFastPacsUseProactivePacUpdatePercentage: pulumi.Int(5),\n\t\t\tEapFastPacsAllowAnonymousProvisioning:      pulumi.Bool(true),\n\t\t\tEapFastPacsAllowAuthenticatedProvisioning:  pulumi.Bool(true),\n\t\t\tEapFastPacsServerReturns:                   pulumi.Bool(true),\n\t\t\tEapFastPacsAllowClientCert:                 pulumi.Bool(true),\n\t\t\tEapFastPacsAllowMachineAuthentication:      pulumi.Bool(true),\n\t\t\tEapFastPacsMachinePacTtl:                   pulumi.Int(5),\n\t\t\tEapFastPacsMachinePacTtlUnit:               pulumi.String(\"DAYS\"),\n\t\t\tEapFastPacsStatelessSessionResume:          pulumi.Bool(true),\n\t\t\tEapFastPacsAuthorizationPacTtl:             pulumi.Int(5),\n\t\t\tEapFastPacsAuthorizationPacTtlUnit:         pulumi.String(\"HOURS\"),\n\t\t\tTeapEapMsChapV2:                            pulumi.Bool(true),\n\t\t\tTeapEapMsChapV2PwdChange:                   pulumi.Bool(true),\n\t\t\tTeapEapMsChapV2PwdChangeRetries:            pulumi.Int(3),\n\t\t\tTeapEapTls:                                 pulumi.Bool(true),\n\t\t\tTeapEapTlsAuthOfExpiredCerts:               pulumi.Bool(true),\n\t\t\tTeapEapAcceptClientCertDuringTunnelEst:     pulumi.Bool(true),\n\t\t\tTeapEapChaining:                            pulumi.Bool(true),\n\t\t\tTeapDowngradeMsk:                           pulumi.Bool(true),\n\t\t\tTeapRequestBasicPwdAuth:                    pulumi.Bool(true),\n\t\t\tAllow5g:                                    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Allowed.Protocols;\nimport com.pulumi.ise.Allowed.ProtocolsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Protocols(\"example\", ProtocolsArgs.builder()        \n            .name(\"Protocols1\")\n            .description(\"My allowed protocols\")\n            .processHostLookup(true)\n            .allowPapAscii(true)\n            .allowChap(true)\n            .allowMsChapV1(true)\n            .allowMsChapV2(true)\n            .allowEapMd5(true)\n            .allowLeap(true)\n            .allowEapTls(true)\n            .allowEapTtls(true)\n            .allowEapFast(true)\n            .allowPeap(true)\n            .allowTeap(true)\n            .allowPreferredEapProtocol(true)\n            .preferredEapProtocol(\"LEAP\")\n            .eapTlsLBit(true)\n            .allowWeakCiphersForEap(true)\n            .requireMessageAuth(true)\n            .eapTlsAllowAuthOfExpiredCerts(true)\n            .eapTlsEnableStatelessSessionResume(true)\n            .eapTlsSessionTicketTtl(5)\n            .eapTlsSessionTicketTtlUnit(\"DAYS\")\n            .eapTlsSessionTicketPercentage(5)\n            .peapAllowPeapEapMsChapV2(true)\n            .peapAllowPeapEapMsChapV2PwdChange(true)\n            .peapAllowPeapEapMsChapV2PwdChangeRetries(3)\n            .peapAllowPeapEapGtc(true)\n            .peapAllowPeapEapGtcPwdChange(true)\n            .peapAllowPeapEapGtcPwdChangeRetries(3)\n            .peapAllowPeapEapTls(true)\n            .peapAllowPeapEapTlsAuthOfExpiredCerts(true)\n            .requireCryptobinding(true)\n            .peapPeapV0(true)\n            .eapTtlsPapAscii(true)\n            .eapTtlsChap(true)\n            .eapTtlsMsChapV1(true)\n            .eapTtlsMsChapV2(true)\n            .eapTtlsEapMd5(true)\n            .eapTtlsEapMsChapV2(true)\n            .eapTtlsEapMsChapV2PwdChange(true)\n            .eapTtlsEapMsChapV2PwdChangeRetries(3)\n            .eapFastEapMsChapV2(true)\n            .eapFastEapMsChapV2PwdChange(true)\n            .eapFastEapMsChapV2PwdChangeRetries(3)\n            .eapFastEapGtc(true)\n            .eapFastEapGtcPwdChange(true)\n            .eapFastEapGtcPwdChangeRetries(3)\n            .eapFastEapTls(true)\n            .eapFastEapTlsAuthOfExpiredCerts(true)\n            .eapFastEnableEapChaining(true)\n            .eapFastUsePacs(true)\n            .eapFastPacsTunnelPacTtl(5)\n            .eapFastPacsTunnelPacTtlUnit(\"DAYS\")\n            .eapFastPacsUseProactivePacUpdatePercentage(5)\n            .eapFastPacsAllowAnonymousProvisioning(true)\n            .eapFastPacsAllowAuthenticatedProvisioning(true)\n            .eapFastPacsServerReturns(true)\n            .eapFastPacsAllowClientCert(true)\n            .eapFastPacsAllowMachineAuthentication(true)\n            .eapFastPacsMachinePacTtl(5)\n            .eapFastPacsMachinePacTtlUnit(\"DAYS\")\n            .eapFastPacsStatelessSessionResume(true)\n            .eapFastPacsAuthorizationPacTtl(5)\n            .eapFastPacsAuthorizationPacTtlUnit(\"HOURS\")\n            .teapEapMsChapV2(true)\n            .teapEapMsChapV2PwdChange(true)\n            .teapEapMsChapV2PwdChangeRetries(3)\n            .teapEapTls(true)\n            .teapEapTlsAuthOfExpiredCerts(true)\n            .teapEapAcceptClientCertDuringTunnelEst(true)\n            .teapEapChaining(true)\n            .teapDowngradeMsk(true)\n            .teapRequestBasicPwdAuth(true)\n            .allow5g(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Allowed:Protocols\n    properties:\n      name: Protocols1\n      description: My allowed protocols\n      processHostLookup: true\n      allowPapAscii: true\n      allowChap: true\n      allowMsChapV1: true\n      allowMsChapV2: true\n      allowEapMd5: true\n      allowLeap: true\n      allowEapTls: true\n      allowEapTtls: true\n      allowEapFast: true\n      allowPeap: true\n      allowTeap: true\n      allowPreferredEapProtocol: true\n      preferredEapProtocol: LEAP\n      eapTlsLBit: true\n      allowWeakCiphersForEap: true\n      requireMessageAuth: true\n      eapTlsAllowAuthOfExpiredCerts: true\n      eapTlsEnableStatelessSessionResume: true\n      eapTlsSessionTicketTtl: 5\n      eapTlsSessionTicketTtlUnit: DAYS\n      eapTlsSessionTicketPercentage: 5\n      peapAllowPeapEapMsChapV2: true\n      peapAllowPeapEapMsChapV2PwdChange: true\n      peapAllowPeapEapMsChapV2PwdChangeRetries: 3\n      peapAllowPeapEapGtc: true\n      peapAllowPeapEapGtcPwdChange: true\n      peapAllowPeapEapGtcPwdChangeRetries: 3\n      peapAllowPeapEapTls: true\n      peapAllowPeapEapTlsAuthOfExpiredCerts: true\n      requireCryptobinding: true\n      peapPeapV0: true\n      eapTtlsPapAscii: true\n      eapTtlsChap: true\n      eapTtlsMsChapV1: true\n      eapTtlsMsChapV2: true\n      eapTtlsEapMd5: true\n      eapTtlsEapMsChapV2: true\n      eapTtlsEapMsChapV2PwdChange: true\n      eapTtlsEapMsChapV2PwdChangeRetries: 3\n      eapFastEapMsChapV2: true\n      eapFastEapMsChapV2PwdChange: true\n      eapFastEapMsChapV2PwdChangeRetries: 3\n      eapFastEapGtc: true\n      eapFastEapGtcPwdChange: true\n      eapFastEapGtcPwdChangeRetries: 3\n      eapFastEapTls: true\n      eapFastEapTlsAuthOfExpiredCerts: true\n      eapFastEnableEapChaining: true\n      eapFastUsePacs: true\n      eapFastPacsTunnelPacTtl: 5\n      eapFastPacsTunnelPacTtlUnit: DAYS\n      eapFastPacsUseProactivePacUpdatePercentage: 5\n      eapFastPacsAllowAnonymousProvisioning: true\n      eapFastPacsAllowAuthenticatedProvisioning: true\n      eapFastPacsServerReturns: true\n      eapFastPacsAllowClientCert: true\n      eapFastPacsAllowMachineAuthentication: true\n      eapFastPacsMachinePacTtl: 5\n      eapFastPacsMachinePacTtlUnit: DAYS\n      eapFastPacsStatelessSessionResume: true\n      eapFastPacsAuthorizationPacTtl: 5\n      eapFastPacsAuthorizationPacTtlUnit: HOURS\n      teapEapMsChapV2: true\n      teapEapMsChapV2PwdChange: true\n      teapEapMsChapV2PwdChangeRetries: 3\n      teapEapTls: true\n      teapEapTlsAuthOfExpiredCerts: true\n      teapEapAcceptClientCertDuringTunnelEst: true\n      teapEapChaining: true\n      teapDowngradeMsk: true\n      teapRequestBasicPwdAuth: true\n      allow5g: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Allowed/protocols:Protocols example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "allow5g": {
                    "type": "boolean",
                    "description": "Allow 5G. This field is only supported from ISE 3.2.\n"
                },
                "allowChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "allowEapFast": {
                    "type": "boolean",
                    "description": "Allow EAP Fast\n"
                },
                "allowEapMd5": {
                    "type": "boolean",
                    "description": "Allow EAP MD5\n"
                },
                "allowEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "allowEapTtls": {
                    "type": "boolean",
                    "description": "Allow EAP TTLS\n"
                },
                "allowLeap": {
                    "type": "boolean",
                    "description": "Allow LEAP\n"
                },
                "allowMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "allowMsChapV2": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v2\n"
                },
                "allowPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "allowPeap": {
                    "type": "boolean",
                    "description": "Allow PEAP\n"
                },
                "allowPreferredEapProtocol": {
                    "type": "boolean",
                    "description": "Allow preferred EAP protocol\n"
                },
                "allowTeap": {
                    "type": "boolean",
                    "description": "Allow TEAP\n"
                },
                "allowWeakCiphersForEap": {
                    "type": "boolean",
                    "description": "Allow weak ciphers for EAP\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "eapFastAcceptClientCert": {
                    "type": "boolean",
                    "description": "Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.\n"
                },
                "eapFastAllowMachineAuthentication": {
                    "type": "boolean",
                    "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.\n"
                },
                "eapFastEapGtc": {
                    "type": "boolean",
                    "description": "Allow EAP GTC\n"
                },
                "eapFastEapGtcPwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.\n"
                },
                "eapFastEapGtcPwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`\n"
                },
                "eapFastEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "eapFastEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.\n"
                },
                "eapFastEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "eapFastEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "eapFastEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.\n"
                },
                "eapFastEnableEapChaining": {
                    "type": "boolean",
                    "description": "Enable EAP chaining\n"
                },
                "eapFastPacsAllowAnonymousProvisioning": {
                    "type": "boolean",
                    "description": "Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAllowAuthenticatedProvisioning": {
                    "type": "boolean",
                    "description": "Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAllowClientCert": {
                    "type": "boolean",
                    "description": "Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is\n`true`.\n"
                },
                "eapFastPacsAllowMachineAuthentication": {
                    "type": "boolean",
                    "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAuthorizationPacTtl": {
                    "type": "integer",
                    "description": "Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.\n"
                },
                "eapFastPacsAuthorizationPacTtlUnit": {
                    "type": "string",
                    "description": "Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:\n`SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsMachinePacTtl": {
                    "type": "integer",
                    "description": "Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.\n"
                },
                "eapFastPacsMachinePacTtlUnit": {
                    "type": "string",
                    "description": "Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsServerReturns": {
                    "type": "boolean",
                    "description": "Server returns access accept after authenticated provisioning. Is required only if\n`eap_fast_pacs_allow_authenticated_provisioning` is `true`.\n"
                },
                "eapFastPacsStatelessSessionResume": {
                    "type": "boolean",
                    "description": "Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsTunnelPacTtl": {
                    "type": "integer",
                    "description": "PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsTunnelPacTtlUnit": {
                    "type": "string",
                    "description": "PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,\n`HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsUseProactivePacUpdatePercentage": {
                    "type": "integer",
                    "description": "Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`\n"
                },
                "eapFastUsePacs": {
                    "type": "boolean",
                    "description": "Use PACs\n"
                },
                "eapTlsAllowAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow authentication of expired certificates\n"
                },
                "eapTlsEnableStatelessSessionResume": {
                    "type": "boolean",
                    "description": "Enable stateless session resume\n"
                },
                "eapTlsLBit": {
                    "type": "boolean",
                    "description": "EAP TLS L-Bit\n"
                },
                "eapTlsSessionTicketPercentage": {
                    "type": "integer",
                    "description": "Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`\n"
                },
                "eapTlsSessionTicketTtl": {
                    "type": "integer",
                    "description": "Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n"
                },
                "eapTlsSessionTicketTtlUnit": {
                    "type": "string",
                    "description": "Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapTtlsChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "eapTtlsEapMd5": {
                    "type": "boolean",
                    "description": "Allow EAP MD5\n"
                },
                "eapTtlsEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "eapTtlsEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.\n"
                },
                "eapTtlsEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "eapTtlsMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "eapTtlsMsChapV2": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v2\n"
                },
                "eapTtlsPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the allowed protocols\n"
                },
                "peapAllowPeapEapGtc": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP GTC\n"
                },
                "peapAllowPeapEapGtcPwdChange": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.\n"
                },
                "peapAllowPeapEapGtcPwdChangeRetries": {
                    "type": "integer",
                    "description": "PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`\n"
                },
                "peapAllowPeapEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP MS CHAP v2\n"
                },
                "peapAllowPeapEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.\n"
                },
                "peapAllowPeapEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:\n`0`-`3`\n"
                },
                "peapAllowPeapEapTls": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP TLS\n"
                },
                "peapAllowPeapEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.\n"
                },
                "peapPeapV0": {
                    "type": "boolean",
                    "description": "Allow PEAP v0\n"
                },
                "preferredEapProtocol": {
                    "type": "string",
                    "description": "Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`\n"
                },
                "processHostLookup": {
                    "type": "boolean",
                    "description": "Process host lookup\n"
                },
                "requireCryptobinding": {
                    "type": "boolean",
                    "description": "Require cryptobinding\n"
                },
                "requireMessageAuth": {
                    "type": "boolean",
                    "description": "Require message authentication\n"
                },
                "teapDowngradeMsk": {
                    "type": "boolean",
                    "description": "Allow downgrade to MSK\n"
                },
                "teapEapAcceptClientCertDuringTunnelEst": {
                    "type": "boolean",
                    "description": "Accept client certificate during tunnel establishment\n"
                },
                "teapEapChaining": {
                    "type": "boolean",
                    "description": "Allow EAP chaining\n"
                },
                "teapEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "teapEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.\n"
                },
                "teapEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "teapEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "teapEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.\n"
                },
                "teapRequestBasicPwdAuth": {
                    "type": "boolean",
                    "description": "Request basic password authentication\n"
                }
            },
            "required": [
                "allowChap",
                "allowEapFast",
                "allowEapMd5",
                "allowEapTls",
                "allowEapTtls",
                "allowLeap",
                "allowMsChapV1",
                "allowMsChapV2",
                "allowPapAscii",
                "allowPeap",
                "allowPreferredEapProtocol",
                "allowTeap",
                "allowWeakCiphersForEap",
                "eapTlsLBit",
                "name",
                "processHostLookup",
                "requireMessageAuth"
            ],
            "inputProperties": {
                "allow5g": {
                    "type": "boolean",
                    "description": "Allow 5G. This field is only supported from ISE 3.2.\n"
                },
                "allowChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "allowEapFast": {
                    "type": "boolean",
                    "description": "Allow EAP Fast\n"
                },
                "allowEapMd5": {
                    "type": "boolean",
                    "description": "Allow EAP MD5\n"
                },
                "allowEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "allowEapTtls": {
                    "type": "boolean",
                    "description": "Allow EAP TTLS\n"
                },
                "allowLeap": {
                    "type": "boolean",
                    "description": "Allow LEAP\n"
                },
                "allowMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "allowMsChapV2": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v2\n"
                },
                "allowPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "allowPeap": {
                    "type": "boolean",
                    "description": "Allow PEAP\n"
                },
                "allowPreferredEapProtocol": {
                    "type": "boolean",
                    "description": "Allow preferred EAP protocol\n"
                },
                "allowTeap": {
                    "type": "boolean",
                    "description": "Allow TEAP\n"
                },
                "allowWeakCiphersForEap": {
                    "type": "boolean",
                    "description": "Allow weak ciphers for EAP\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "eapFastAcceptClientCert": {
                    "type": "boolean",
                    "description": "Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.\n"
                },
                "eapFastAllowMachineAuthentication": {
                    "type": "boolean",
                    "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.\n"
                },
                "eapFastEapGtc": {
                    "type": "boolean",
                    "description": "Allow EAP GTC\n"
                },
                "eapFastEapGtcPwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.\n"
                },
                "eapFastEapGtcPwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`\n"
                },
                "eapFastEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "eapFastEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.\n"
                },
                "eapFastEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "eapFastEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "eapFastEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.\n"
                },
                "eapFastEnableEapChaining": {
                    "type": "boolean",
                    "description": "Enable EAP chaining\n"
                },
                "eapFastPacsAllowAnonymousProvisioning": {
                    "type": "boolean",
                    "description": "Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAllowAuthenticatedProvisioning": {
                    "type": "boolean",
                    "description": "Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAllowClientCert": {
                    "type": "boolean",
                    "description": "Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is\n`true`.\n"
                },
                "eapFastPacsAllowMachineAuthentication": {
                    "type": "boolean",
                    "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsAuthorizationPacTtl": {
                    "type": "integer",
                    "description": "Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.\n"
                },
                "eapFastPacsAuthorizationPacTtlUnit": {
                    "type": "string",
                    "description": "Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:\n`SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsMachinePacTtl": {
                    "type": "integer",
                    "description": "Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.\n"
                },
                "eapFastPacsMachinePacTtlUnit": {
                    "type": "string",
                    "description": "Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsServerReturns": {
                    "type": "boolean",
                    "description": "Server returns access accept after authenticated provisioning. Is required only if\n`eap_fast_pacs_allow_authenticated_provisioning` is `true`.\n"
                },
                "eapFastPacsStatelessSessionResume": {
                    "type": "boolean",
                    "description": "Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsTunnelPacTtl": {
                    "type": "integer",
                    "description": "PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.\n"
                },
                "eapFastPacsTunnelPacTtlUnit": {
                    "type": "string",
                    "description": "PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,\n`HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapFastPacsUseProactivePacUpdatePercentage": {
                    "type": "integer",
                    "description": "Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`\n"
                },
                "eapFastUsePacs": {
                    "type": "boolean",
                    "description": "Use PACs\n"
                },
                "eapTlsAllowAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow authentication of expired certificates\n"
                },
                "eapTlsEnableStatelessSessionResume": {
                    "type": "boolean",
                    "description": "Enable stateless session resume\n"
                },
                "eapTlsLBit": {
                    "type": "boolean",
                    "description": "EAP TLS L-Bit\n"
                },
                "eapTlsSessionTicketPercentage": {
                    "type": "integer",
                    "description": "Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`\n"
                },
                "eapTlsSessionTicketTtl": {
                    "type": "integer",
                    "description": "Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n"
                },
                "eapTlsSessionTicketTtlUnit": {
                    "type": "string",
                    "description": "Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                },
                "eapTtlsChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "eapTtlsEapMd5": {
                    "type": "boolean",
                    "description": "Allow EAP MD5\n"
                },
                "eapTtlsEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "eapTtlsEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.\n"
                },
                "eapTtlsEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "eapTtlsMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "eapTtlsMsChapV2": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v2\n"
                },
                "eapTtlsPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the allowed protocols\n"
                },
                "peapAllowPeapEapGtc": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP GTC\n"
                },
                "peapAllowPeapEapGtcPwdChange": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.\n"
                },
                "peapAllowPeapEapGtcPwdChangeRetries": {
                    "type": "integer",
                    "description": "PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`\n"
                },
                "peapAllowPeapEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP MS CHAP v2\n"
                },
                "peapAllowPeapEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.\n"
                },
                "peapAllowPeapEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:\n`0`-`3`\n"
                },
                "peapAllowPeapEapTls": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP TLS\n"
                },
                "peapAllowPeapEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.\n"
                },
                "peapPeapV0": {
                    "type": "boolean",
                    "description": "Allow PEAP v0\n"
                },
                "preferredEapProtocol": {
                    "type": "string",
                    "description": "Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`\n"
                },
                "processHostLookup": {
                    "type": "boolean",
                    "description": "Process host lookup\n"
                },
                "requireCryptobinding": {
                    "type": "boolean",
                    "description": "Require cryptobinding\n"
                },
                "requireMessageAuth": {
                    "type": "boolean",
                    "description": "Require message authentication\n"
                },
                "teapDowngradeMsk": {
                    "type": "boolean",
                    "description": "Allow downgrade to MSK\n"
                },
                "teapEapAcceptClientCertDuringTunnelEst": {
                    "type": "boolean",
                    "description": "Accept client certificate during tunnel establishment\n"
                },
                "teapEapChaining": {
                    "type": "boolean",
                    "description": "Allow EAP chaining\n"
                },
                "teapEapMsChapV2": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2\n"
                },
                "teapEapMsChapV2PwdChange": {
                    "type": "boolean",
                    "description": "Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.\n"
                },
                "teapEapMsChapV2PwdChangeRetries": {
                    "type": "integer",
                    "description": "EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                },
                "teapEapTls": {
                    "type": "boolean",
                    "description": "Allow EAP TLS\n"
                },
                "teapEapTlsAuthOfExpiredCerts": {
                    "type": "boolean",
                    "description": "Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.\n"
                },
                "teapRequestBasicPwdAuth": {
                    "type": "boolean",
                    "description": "Request basic password authentication\n"
                }
            },
            "requiredInputs": [
                "allowChap",
                "allowEapFast",
                "allowEapMd5",
                "allowEapTls",
                "allowEapTtls",
                "allowLeap",
                "allowMsChapV1",
                "allowMsChapV2",
                "allowPapAscii",
                "allowPeap",
                "allowPreferredEapProtocol",
                "allowTeap",
                "allowWeakCiphersForEap",
                "eapTlsLBit",
                "processHostLookup",
                "requireMessageAuth"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Protocols resources.\n",
                "properties": {
                    "allow5g": {
                        "type": "boolean",
                        "description": "Allow 5G. This field is only supported from ISE 3.2.\n"
                    },
                    "allowChap": {
                        "type": "boolean",
                        "description": "Allow CHAP\n"
                    },
                    "allowEapFast": {
                        "type": "boolean",
                        "description": "Allow EAP Fast\n"
                    },
                    "allowEapMd5": {
                        "type": "boolean",
                        "description": "Allow EAP MD5\n"
                    },
                    "allowEapTls": {
                        "type": "boolean",
                        "description": "Allow EAP TLS\n"
                    },
                    "allowEapTtls": {
                        "type": "boolean",
                        "description": "Allow EAP TTLS\n"
                    },
                    "allowLeap": {
                        "type": "boolean",
                        "description": "Allow LEAP\n"
                    },
                    "allowMsChapV1": {
                        "type": "boolean",
                        "description": "Allow MS CHAP v1\n"
                    },
                    "allowMsChapV2": {
                        "type": "boolean",
                        "description": "Allow MS CHAP v2\n"
                    },
                    "allowPapAscii": {
                        "type": "boolean",
                        "description": "Allow PAP ASCII\n"
                    },
                    "allowPeap": {
                        "type": "boolean",
                        "description": "Allow PEAP\n"
                    },
                    "allowPreferredEapProtocol": {
                        "type": "boolean",
                        "description": "Allow preferred EAP protocol\n"
                    },
                    "allowTeap": {
                        "type": "boolean",
                        "description": "Allow TEAP\n"
                    },
                    "allowWeakCiphersForEap": {
                        "type": "boolean",
                        "description": "Allow weak ciphers for EAP\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "eapFastAcceptClientCert": {
                        "type": "boolean",
                        "description": "Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.\n"
                    },
                    "eapFastAllowMachineAuthentication": {
                        "type": "boolean",
                        "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.\n"
                    },
                    "eapFastEapGtc": {
                        "type": "boolean",
                        "description": "Allow EAP GTC\n"
                    },
                    "eapFastEapGtcPwdChange": {
                        "type": "boolean",
                        "description": "Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.\n"
                    },
                    "eapFastEapGtcPwdChangeRetries": {
                        "type": "integer",
                        "description": "EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. - Range: `0`-`3`\n"
                    },
                    "eapFastEapMsChapV2": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2\n"
                    },
                    "eapFastEapMsChapV2PwdChange": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.\n"
                    },
                    "eapFastEapMsChapV2PwdChangeRetries": {
                        "type": "integer",
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                    },
                    "eapFastEapTls": {
                        "type": "boolean",
                        "description": "Allow EAP TLS\n"
                    },
                    "eapFastEapTlsAuthOfExpiredCerts": {
                        "type": "boolean",
                        "description": "Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.\n"
                    },
                    "eapFastEnableEapChaining": {
                        "type": "boolean",
                        "description": "Enable EAP chaining\n"
                    },
                    "eapFastPacsAllowAnonymousProvisioning": {
                        "type": "boolean",
                        "description": "Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                    },
                    "eapFastPacsAllowAuthenticatedProvisioning": {
                        "type": "boolean",
                        "description": "Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n"
                    },
                    "eapFastPacsAllowClientCert": {
                        "type": "boolean",
                        "description": "Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is\n`true`.\n"
                    },
                    "eapFastPacsAllowMachineAuthentication": {
                        "type": "boolean",
                        "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.\n"
                    },
                    "eapFastPacsAuthorizationPacTtl": {
                        "type": "integer",
                        "description": "Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.\n"
                    },
                    "eapFastPacsAuthorizationPacTtlUnit": {
                        "type": "string",
                        "description": "Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. - Choices:\n`SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                    },
                    "eapFastPacsMachinePacTtl": {
                        "type": "integer",
                        "description": "Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.\n"
                    },
                    "eapFastPacsMachinePacTtlUnit": {
                        "type": "string",
                        "description": "Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                    },
                    "eapFastPacsServerReturns": {
                        "type": "boolean",
                        "description": "Server returns access accept after authenticated provisioning. Is required only if\n`eap_fast_pacs_allow_authenticated_provisioning` is `true`.\n"
                    },
                    "eapFastPacsStatelessSessionResume": {
                        "type": "boolean",
                        "description": "Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.\n"
                    },
                    "eapFastPacsTunnelPacTtl": {
                        "type": "integer",
                        "description": "PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.\n"
                    },
                    "eapFastPacsTunnelPacTtlUnit": {
                        "type": "string",
                        "description": "PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. - Choices: `SECONDS`, `MINUTES`,\n`HOURS`, `DAYS`, `WEEKS`\n"
                    },
                    "eapFastPacsUseProactivePacUpdatePercentage": {
                        "type": "integer",
                        "description": "Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. - Range: `1`-`100`\n"
                    },
                    "eapFastUsePacs": {
                        "type": "boolean",
                        "description": "Use PACs\n"
                    },
                    "eapTlsAllowAuthOfExpiredCerts": {
                        "type": "boolean",
                        "description": "Allow authentication of expired certificates\n"
                    },
                    "eapTlsEnableStatelessSessionResume": {
                        "type": "boolean",
                        "description": "Enable stateless session resume\n"
                    },
                    "eapTlsLBit": {
                        "type": "boolean",
                        "description": "EAP TLS L-Bit\n"
                    },
                    "eapTlsSessionTicketPercentage": {
                        "type": "integer",
                        "description": "Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Range: `1`-`100`\n"
                    },
                    "eapTlsSessionTicketTtl": {
                        "type": "integer",
                        "description": "Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n"
                    },
                    "eapTlsSessionTicketTtlUnit": {
                        "type": "string",
                        "description": "Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. - Choices: `SECONDS`,\n`MINUTES`, `HOURS`, `DAYS`, `WEEKS`\n"
                    },
                    "eapTtlsChap": {
                        "type": "boolean",
                        "description": "Allow CHAP\n"
                    },
                    "eapTtlsEapMd5": {
                        "type": "boolean",
                        "description": "Allow EAP MD5\n"
                    },
                    "eapTtlsEapMsChapV2": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2\n"
                    },
                    "eapTtlsEapMsChapV2PwdChange": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.\n"
                    },
                    "eapTtlsEapMsChapV2PwdChangeRetries": {
                        "type": "integer",
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                    },
                    "eapTtlsMsChapV1": {
                        "type": "boolean",
                        "description": "Allow MS CHAP v1\n"
                    },
                    "eapTtlsMsChapV2": {
                        "type": "boolean",
                        "description": "Allow MS CHAP v2\n"
                    },
                    "eapTtlsPapAscii": {
                        "type": "boolean",
                        "description": "Allow PAP ASCII\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the allowed protocols\n"
                    },
                    "peapAllowPeapEapGtc": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP GTC\n"
                    },
                    "peapAllowPeapEapGtcPwdChange": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.\n"
                    },
                    "peapAllowPeapEapGtcPwdChangeRetries": {
                        "type": "integer",
                        "description": "PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. - Range: `0`-`3`\n"
                    },
                    "peapAllowPeapEapMsChapV2": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP MS CHAP v2\n"
                    },
                    "peapAllowPeapEapMsChapV2PwdChange": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.\n"
                    },
                    "peapAllowPeapEapMsChapV2PwdChangeRetries": {
                        "type": "integer",
                        "description": "Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. - Range:\n`0`-`3`\n"
                    },
                    "peapAllowPeapEapTls": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP TLS\n"
                    },
                    "peapAllowPeapEapTlsAuthOfExpiredCerts": {
                        "type": "boolean",
                        "description": "Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.\n"
                    },
                    "peapPeapV0": {
                        "type": "boolean",
                        "description": "Allow PEAP v0\n"
                    },
                    "preferredEapProtocol": {
                        "type": "string",
                        "description": "Preferred EAP protocol - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`\n"
                    },
                    "processHostLookup": {
                        "type": "boolean",
                        "description": "Process host lookup\n"
                    },
                    "requireCryptobinding": {
                        "type": "boolean",
                        "description": "Require cryptobinding\n"
                    },
                    "requireMessageAuth": {
                        "type": "boolean",
                        "description": "Require message authentication\n"
                    },
                    "teapDowngradeMsk": {
                        "type": "boolean",
                        "description": "Allow downgrade to MSK\n"
                    },
                    "teapEapAcceptClientCertDuringTunnelEst": {
                        "type": "boolean",
                        "description": "Accept client certificate during tunnel establishment\n"
                    },
                    "teapEapChaining": {
                        "type": "boolean",
                        "description": "Allow EAP chaining\n"
                    },
                    "teapEapMsChapV2": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2\n"
                    },
                    "teapEapMsChapV2PwdChange": {
                        "type": "boolean",
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.\n"
                    },
                    "teapEapMsChapV2PwdChangeRetries": {
                        "type": "integer",
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. - Range: `0`-`3`\n"
                    },
                    "teapEapTls": {
                        "type": "boolean",
                        "description": "Allow EAP TLS\n"
                    },
                    "teapEapTlsAuthOfExpiredCerts": {
                        "type": "boolean",
                        "description": "Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.\n"
                    },
                    "teapRequestBasicPwdAuth": {
                        "type": "boolean",
                        "description": "Request basic password authentication\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:AllowedProtocols/tacacs:Tacacs": {
            "description": "This resource can manage a TACACS allowed protocols policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.allowedprotocols.Tacacs(\"example\", {\n    name: \"Protocols1\",\n    description: \"My allowed TACACS protocols\",\n    allowPapAscii: true,\n    allowChap: true,\n    allowMsChapV1: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.allowed_protocols.Tacacs(\"example\",\n    name=\"Protocols1\",\n    description=\"My allowed TACACS protocols\",\n    allow_pap_ascii=True,\n    allow_chap=True,\n    allow_ms_chap_v1=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.AllowedProtocols.Tacacs(\"example\", new()\n    {\n        Name = \"Protocols1\",\n        Description = \"My allowed TACACS protocols\",\n        AllowPapAscii = true,\n        AllowChap = true,\n        AllowMsChapV1 = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/AllowedProtocols\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AllowedProtocols.NewTacacs(ctx, \"example\", \u0026AllowedProtocols.TacacsArgs{\n\t\t\tName:          pulumi.String(\"Protocols1\"),\n\t\t\tDescription:   pulumi.String(\"My allowed TACACS protocols\"),\n\t\t\tAllowPapAscii: pulumi.Bool(true),\n\t\t\tAllowChap:     pulumi.Bool(true),\n\t\t\tAllowMsChapV1: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.AllowedProtocols.Tacacs;\nimport com.pulumi.ise.AllowedProtocols.TacacsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tacacs(\"example\", TacacsArgs.builder()        \n            .name(\"Protocols1\")\n            .description(\"My allowed TACACS protocols\")\n            .allowPapAscii(true)\n            .allowChap(true)\n            .allowMsChapV1(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:AllowedProtocols:Tacacs\n    properties:\n      name: Protocols1\n      description: My allowed TACACS protocols\n      allowPapAscii: true\n      allowChap: true\n      allowMsChapV1: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:AllowedProtocols/tacacs:Tacacs example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "allowChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "allowMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "allowPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the allowed protocols\n"
                }
            },
            "required": [
                "allowChap",
                "allowMsChapV1",
                "allowPapAscii",
                "name"
            ],
            "inputProperties": {
                "allowChap": {
                    "type": "boolean",
                    "description": "Allow CHAP\n"
                },
                "allowMsChapV1": {
                    "type": "boolean",
                    "description": "Allow MS CHAP v1\n"
                },
                "allowPapAscii": {
                    "type": "boolean",
                    "description": "Allow PAP ASCII\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the allowed protocols\n"
                }
            },
            "requiredInputs": [
                "allowChap",
                "allowMsChapV1",
                "allowPapAscii"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tacacs resources.\n",
                "properties": {
                    "allowChap": {
                        "type": "boolean",
                        "description": "Allow CHAP\n"
                    },
                    "allowMsChapV1": {
                        "type": "boolean",
                        "description": "Allow MS CHAP v1\n"
                    },
                    "allowPapAscii": {
                        "type": "boolean",
                        "description": "Allow PAP ASCII\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the allowed protocols\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Authorization/profile:Profile": {
            "description": "This resource can manage an authorization profiles policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Authorization.Profile;\nimport com.pulumi.ise.Authorization.ProfileArgs;\nimport com.pulumi.ise.Authorization.inputs.ProfileAdvancedAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Profile(\"example\", ProfileArgs.builder()        \n            .name(\"AuthzProfile1\")\n            .description(\"My Authorization Profile\")\n            .vlanNameId(\"VLAN10\")\n            .vlanTagId(0)\n            .webRedirectionType(\"CentralizedWebAuth\")\n            .webRedirectionAcl(\"TEST_ACL\")\n            .webRedirectionPortalName(\"Sponsored Guest Portal (default)\")\n            .webRedirectionStaticIpHostNameFqdn(\"1.2.3.4\")\n            .webRedirectionDisplayCertificatesRenewalMessages(true)\n            .agentlessPosture(false)\n            .accessType(\"ACCESS_ACCEPT\")\n            .profileName(\"Cisco\")\n            .airespaceAcl(\"ACL1\")\n            .acl(\"ACL1\")\n            .autoSmartPort(\"PROFILE1\")\n            .interfaceTemplate(\"TEMP1\")\n            .ipv6AclFilter(\"ACL1\")\n            .avcProfile(\"PROF1\")\n            .asaVpn(\"1\")\n            .uniqueIdentifier(\"ID1234\")\n            .trackMovement(false)\n            .serviceTemplate(false)\n            .easywiredSessionCandidate(false)\n            .voiceDomainPermission(false)\n            .neat(false)\n            .webAuth(false)\n            .macSecPolicy(\"MUST_SECURE\")\n            .reauthenticationConnectivity(\"DEFAULT\")\n            .reauthenticationTimer(1)\n            .advancedAttributes(ProfileAdvancedAttributeArgs.builder()\n                .attribute_left_dictionary_name(\"Cisco\")\n                .attribute_left_name(\"cisco-av-pair\")\n                .attribute_right_value_type(\"AttributeValue\")\n                .attribute_right_value(\"set_nadprofile_vlan=true,vlan=TEST,tag=1\")\n                .build())\n            .airespaceIpv6Acl(\"ACL1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Authorization:Profile\n    properties:\n      name: AuthzProfile1\n      description: My Authorization Profile\n      vlanNameId: VLAN10\n      vlanTagId: 0\n      webRedirectionType: CentralizedWebAuth\n      webRedirectionAcl: TEST_ACL\n      webRedirectionPortalName: Sponsored Guest Portal (default)\n      webRedirectionStaticIpHostNameFqdn: 1.2.3.4\n      webRedirectionDisplayCertificatesRenewalMessages: true\n      agentlessPosture: false\n      accessType: ACCESS_ACCEPT\n      profileName: Cisco\n      airespaceAcl: ACL1\n      acl: ACL1\n      autoSmartPort: PROFILE1\n      interfaceTemplate: TEMP1\n      ipv6AclFilter: ACL1\n      avcProfile: PROF1\n      asaVpn: '1'\n      uniqueIdentifier: ID1234\n      trackMovement: false\n      serviceTemplate: false\n      easywiredSessionCandidate: false\n      voiceDomainPermission: false\n      neat: false\n      webAuth: false\n      macSecPolicy: MUST_SECURE\n      reauthenticationConnectivity: DEFAULT\n      reauthenticationTimer: 1\n      advancedAttributes:\n        - attribute_left_dictionary_name: Cisco\n          attribute_left_name: cisco-av-pair\n          attribute_right_value_type: AttributeValue\n          attribute_right_value: set_nadprofile_vlan=true,vlan=TEST,tag=1\n      airespaceIpv6Acl: ACL1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Authorization/profile:Profile example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type - Choices: `ACCESS_ACCEPT`, `ACCESS_REJECT` - Default value: `ACCESS_ACCEPT`\n"
                },
                "acl": {
                    "type": "string",
                    "description": "ACL\n"
                },
                "advancedAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Authorization/ProfileAdvancedAttribute:ProfileAdvancedAttribute"
                    },
                    "description": "List of advanced attributes\n"
                },
                "agentlessPosture": {
                    "type": "boolean",
                    "description": "Agentless Posture.\n"
                },
                "airespaceAcl": {
                    "type": "string",
                    "description": "Airespace ACL\n"
                },
                "airespaceIpv6Acl": {
                    "type": "string",
                    "description": "Airespace IPv6 ACL\n"
                },
                "asaVpn": {
                    "type": "string",
                    "description": "ASA VPN\n"
                },
                "autoSmartPort": {
                    "type": "string",
                    "description": "Auto smart port\n"
                },
                "avcProfile": {
                    "type": "string",
                    "description": "AVC profile\n"
                },
                "daclName": {
                    "type": "string",
                    "description": "DACL name\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "easywiredSessionCandidate": {
                    "type": "boolean",
                    "description": "Easy wired session candidate - Default value: `false`\n"
                },
                "interfaceTemplate": {
                    "type": "string",
                    "description": "Interface template\n"
                },
                "ipv6AclFilter": {
                    "type": "string",
                    "description": "IPv6 ACL\n"
                },
                "ipv6DaclName": {
                    "type": "string",
                    "description": "IPv6 DACL name\n"
                },
                "macSecPolicy": {
                    "type": "string",
                    "description": "MacSec policy - Choices: `MUST_SECURE`, `MUST_NOT_SECURE`, `SHOULD_SECURE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization profile\n"
                },
                "neat": {
                    "type": "boolean",
                    "description": "NEAT - Default value: `false`\n"
                },
                "profileName": {
                    "type": "string",
                    "description": "Value needs to be an existing Network Device Profile - Default value: `Cisco`\n"
                },
                "reauthenticationConnectivity": {
                    "type": "string",
                    "description": "Maintain Connectivity During Reauthentication - Choices: `DEFAULT`, `RADIUS_REQUEST`\n"
                },
                "reauthenticationTimer": {
                    "type": "integer",
                    "description": "Reauthentication timer - Range: `1`-`65535`\n"
                },
                "serviceTemplate": {
                    "type": "boolean",
                    "description": "Service template - Default value: `false`\n"
                },
                "trackMovement": {
                    "type": "boolean",
                    "description": "Track movement - Default value: `false`\n"
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "description": "Unique identifier\n"
                },
                "vlanNameId": {
                    "type": "string",
                    "description": "Vlan name or ID\n"
                },
                "vlanTagId": {
                    "type": "integer",
                    "description": "Vlan tag ID - Range: `0`-`31`\n"
                },
                "voiceDomainPermission": {
                    "type": "boolean",
                    "description": "Voice domain permission - Default value: `false`\n"
                },
                "webAuth": {
                    "type": "boolean",
                    "description": "Web authentication (local) - Default value: `false`\n"
                },
                "webRedirectionAcl": {
                    "type": "string",
                    "description": "Web redirection ACL\n"
                },
                "webRedirectionDisplayCertificatesRenewalMessages": {
                    "type": "boolean",
                    "description": "This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other\n`web_redirection_type` values the field must be ignored.\n"
                },
                "webRedirectionPortalName": {
                    "type": "string",
                    "description": "A portal that exist in the DB and fits the `web_redirection_type`\n"
                },
                "webRedirectionStaticIpHostNameFqdn": {
                    "type": "string",
                    "description": "IP, hostname or FQDN\n"
                },
                "webRedirectionType": {
                    "type": "string",
                    "description": "This type must fit the `web_redirection_portal_name` - Choices: `CentralizedWebAuth`, `HotSpot`,\n`NativeSupplicanProvisioning`, `ClientProvisioning`\n"
                }
            },
            "required": [
                "accessType",
                "easywiredSessionCandidate",
                "name",
                "neat",
                "profileName",
                "serviceTemplate",
                "trackMovement",
                "voiceDomainPermission",
                "webAuth"
            ],
            "inputProperties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type - Choices: `ACCESS_ACCEPT`, `ACCESS_REJECT` - Default value: `ACCESS_ACCEPT`\n"
                },
                "acl": {
                    "type": "string",
                    "description": "ACL\n"
                },
                "advancedAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Authorization/ProfileAdvancedAttribute:ProfileAdvancedAttribute"
                    },
                    "description": "List of advanced attributes\n"
                },
                "agentlessPosture": {
                    "type": "boolean",
                    "description": "Agentless Posture.\n"
                },
                "airespaceAcl": {
                    "type": "string",
                    "description": "Airespace ACL\n"
                },
                "airespaceIpv6Acl": {
                    "type": "string",
                    "description": "Airespace IPv6 ACL\n"
                },
                "asaVpn": {
                    "type": "string",
                    "description": "ASA VPN\n"
                },
                "autoSmartPort": {
                    "type": "string",
                    "description": "Auto smart port\n"
                },
                "avcProfile": {
                    "type": "string",
                    "description": "AVC profile\n"
                },
                "daclName": {
                    "type": "string",
                    "description": "DACL name\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "easywiredSessionCandidate": {
                    "type": "boolean",
                    "description": "Easy wired session candidate - Default value: `false`\n"
                },
                "interfaceTemplate": {
                    "type": "string",
                    "description": "Interface template\n"
                },
                "ipv6AclFilter": {
                    "type": "string",
                    "description": "IPv6 ACL\n"
                },
                "ipv6DaclName": {
                    "type": "string",
                    "description": "IPv6 DACL name\n"
                },
                "macSecPolicy": {
                    "type": "string",
                    "description": "MacSec policy - Choices: `MUST_SECURE`, `MUST_NOT_SECURE`, `SHOULD_SECURE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the authorization profile\n"
                },
                "neat": {
                    "type": "boolean",
                    "description": "NEAT - Default value: `false`\n"
                },
                "profileName": {
                    "type": "string",
                    "description": "Value needs to be an existing Network Device Profile - Default value: `Cisco`\n"
                },
                "reauthenticationConnectivity": {
                    "type": "string",
                    "description": "Maintain Connectivity During Reauthentication - Choices: `DEFAULT`, `RADIUS_REQUEST`\n"
                },
                "reauthenticationTimer": {
                    "type": "integer",
                    "description": "Reauthentication timer - Range: `1`-`65535`\n"
                },
                "serviceTemplate": {
                    "type": "boolean",
                    "description": "Service template - Default value: `false`\n"
                },
                "trackMovement": {
                    "type": "boolean",
                    "description": "Track movement - Default value: `false`\n"
                },
                "uniqueIdentifier": {
                    "type": "string",
                    "description": "Unique identifier\n"
                },
                "vlanNameId": {
                    "type": "string",
                    "description": "Vlan name or ID\n"
                },
                "vlanTagId": {
                    "type": "integer",
                    "description": "Vlan tag ID - Range: `0`-`31`\n"
                },
                "voiceDomainPermission": {
                    "type": "boolean",
                    "description": "Voice domain permission - Default value: `false`\n"
                },
                "webAuth": {
                    "type": "boolean",
                    "description": "Web authentication (local) - Default value: `false`\n"
                },
                "webRedirectionAcl": {
                    "type": "string",
                    "description": "Web redirection ACL\n"
                },
                "webRedirectionDisplayCertificatesRenewalMessages": {
                    "type": "boolean",
                    "description": "This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other\n`web_redirection_type` values the field must be ignored.\n"
                },
                "webRedirectionPortalName": {
                    "type": "string",
                    "description": "A portal that exist in the DB and fits the `web_redirection_type`\n"
                },
                "webRedirectionStaticIpHostNameFqdn": {
                    "type": "string",
                    "description": "IP, hostname or FQDN\n"
                },
                "webRedirectionType": {
                    "type": "string",
                    "description": "This type must fit the `web_redirection_portal_name` - Choices: `CentralizedWebAuth`, `HotSpot`,\n`NativeSupplicanProvisioning`, `ClientProvisioning`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "accessType": {
                        "type": "string",
                        "description": "Access type - Choices: `ACCESS_ACCEPT`, `ACCESS_REJECT` - Default value: `ACCESS_ACCEPT`\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "ACL\n"
                    },
                    "advancedAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:Authorization/ProfileAdvancedAttribute:ProfileAdvancedAttribute"
                        },
                        "description": "List of advanced attributes\n"
                    },
                    "agentlessPosture": {
                        "type": "boolean",
                        "description": "Agentless Posture.\n"
                    },
                    "airespaceAcl": {
                        "type": "string",
                        "description": "Airespace ACL\n"
                    },
                    "airespaceIpv6Acl": {
                        "type": "string",
                        "description": "Airespace IPv6 ACL\n"
                    },
                    "asaVpn": {
                        "type": "string",
                        "description": "ASA VPN\n"
                    },
                    "autoSmartPort": {
                        "type": "string",
                        "description": "Auto smart port\n"
                    },
                    "avcProfile": {
                        "type": "string",
                        "description": "AVC profile\n"
                    },
                    "daclName": {
                        "type": "string",
                        "description": "DACL name\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "easywiredSessionCandidate": {
                        "type": "boolean",
                        "description": "Easy wired session candidate - Default value: `false`\n"
                    },
                    "interfaceTemplate": {
                        "type": "string",
                        "description": "Interface template\n"
                    },
                    "ipv6AclFilter": {
                        "type": "string",
                        "description": "IPv6 ACL\n"
                    },
                    "ipv6DaclName": {
                        "type": "string",
                        "description": "IPv6 DACL name\n"
                    },
                    "macSecPolicy": {
                        "type": "string",
                        "description": "MacSec policy - Choices: `MUST_SECURE`, `MUST_NOT_SECURE`, `SHOULD_SECURE`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the authorization profile\n"
                    },
                    "neat": {
                        "type": "boolean",
                        "description": "NEAT - Default value: `false`\n"
                    },
                    "profileName": {
                        "type": "string",
                        "description": "Value needs to be an existing Network Device Profile - Default value: `Cisco`\n"
                    },
                    "reauthenticationConnectivity": {
                        "type": "string",
                        "description": "Maintain Connectivity During Reauthentication - Choices: `DEFAULT`, `RADIUS_REQUEST`\n"
                    },
                    "reauthenticationTimer": {
                        "type": "integer",
                        "description": "Reauthentication timer - Range: `1`-`65535`\n"
                    },
                    "serviceTemplate": {
                        "type": "boolean",
                        "description": "Service template - Default value: `false`\n"
                    },
                    "trackMovement": {
                        "type": "boolean",
                        "description": "Track movement - Default value: `false`\n"
                    },
                    "uniqueIdentifier": {
                        "type": "string",
                        "description": "Unique identifier\n"
                    },
                    "vlanNameId": {
                        "type": "string",
                        "description": "Vlan name or ID\n"
                    },
                    "vlanTagId": {
                        "type": "integer",
                        "description": "Vlan tag ID - Range: `0`-`31`\n"
                    },
                    "voiceDomainPermission": {
                        "type": "boolean",
                        "description": "Voice domain permission - Default value: `false`\n"
                    },
                    "webAuth": {
                        "type": "boolean",
                        "description": "Web authentication (local) - Default value: `false`\n"
                    },
                    "webRedirectionAcl": {
                        "type": "string",
                        "description": "Web redirection ACL\n"
                    },
                    "webRedirectionDisplayCertificatesRenewalMessages": {
                        "type": "boolean",
                        "description": "This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other\n`web_redirection_type` values the field must be ignored.\n"
                    },
                    "webRedirectionPortalName": {
                        "type": "string",
                        "description": "A portal that exist in the DB and fits the `web_redirection_type`\n"
                    },
                    "webRedirectionStaticIpHostNameFqdn": {
                        "type": "string",
                        "description": "IP, hostname or FQDN\n"
                    },
                    "webRedirectionType": {
                        "type": "string",
                        "description": "This type must fit the `web_redirection_portal_name` - Choices: `CentralizedWebAuth`, `HotSpot`,\n`NativeSupplicanProvisioning`, `ClientProvisioning`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:CertificateAuthentication/profile:Profile": {
            "description": "This resource can manage a Certificate Authentication Profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.certificateauthentication.Profile(\"example\", {\n    name: \"CertProf1\",\n    description: \"My cert profile\",\n    allowedAsUserName: false,\n    externalIdentityStoreName: \"[not applicable]\",\n    certificateAttributeName: \"SUBJECT_COMMON_NAME\",\n    matchMode: \"NEVER\",\n    usernameFrom: \"CERTIFICATE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.certificate_authentication.Profile(\"example\",\n    name=\"CertProf1\",\n    description=\"My cert profile\",\n    allowed_as_user_name=False,\n    external_identity_store_name=\"[not applicable]\",\n    certificate_attribute_name=\"SUBJECT_COMMON_NAME\",\n    match_mode=\"NEVER\",\n    username_from=\"CERTIFICATE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.CertificateAuthentication.Profile(\"example\", new()\n    {\n        Name = \"CertProf1\",\n        Description = \"My cert profile\",\n        AllowedAsUserName = false,\n        ExternalIdentityStoreName = \"[not applicable]\",\n        CertificateAttributeName = \"SUBJECT_COMMON_NAME\",\n        MatchMode = \"NEVER\",\n        UsernameFrom = \"CERTIFICATE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/CertificateAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := CertificateAuthentication.NewProfile(ctx, \"example\", \u0026CertificateAuthentication.ProfileArgs{\n\t\t\tName:                      pulumi.String(\"CertProf1\"),\n\t\t\tDescription:               pulumi.String(\"My cert profile\"),\n\t\t\tAllowedAsUserName:         pulumi.Bool(false),\n\t\t\tExternalIdentityStoreName: pulumi.String(\"[not applicable]\"),\n\t\t\tCertificateAttributeName:  pulumi.String(\"SUBJECT_COMMON_NAME\"),\n\t\t\tMatchMode:                 pulumi.String(\"NEVER\"),\n\t\t\tUsernameFrom:              pulumi.String(\"CERTIFICATE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.CertificateAuthentication.Profile;\nimport com.pulumi.ise.CertificateAuthentication.ProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Profile(\"example\", ProfileArgs.builder()        \n            .name(\"CertProf1\")\n            .description(\"My cert profile\")\n            .allowedAsUserName(false)\n            .externalIdentityStoreName(\"[not applicable]\")\n            .certificateAttributeName(\"SUBJECT_COMMON_NAME\")\n            .matchMode(\"NEVER\")\n            .usernameFrom(\"CERTIFICATE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:CertificateAuthentication:Profile\n    properties:\n      name: CertProf1\n      description: My cert profile\n      allowedAsUserName: false\n      externalIdentityStoreName: '[not applicable]'\n      certificateAttributeName: SUBJECT_COMMON_NAME\n      matchMode: NEVER\n      usernameFrom: CERTIFICATE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:CertificateAuthentication/profile:Profile example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "allowedAsUserName": {
                    "type": "boolean",
                    "description": "Allow as username - Default value: `false`\n"
                },
                "certificateAttributeName": {
                    "type": "string",
                    "description": "Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:\n`SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,\n`SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:\n`SUBJECT_COMMON_NAME`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "externalIdentityStoreName": {
                    "type": "string",
                    "description": "Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default\nvalue: `[not applicable]`\n"
                },
                "matchMode": {
                    "type": "string",
                    "description": "Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:\n`NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate profile\n"
                },
                "usernameFrom": {
                    "type": "string",
                    "description": "The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific\nattribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the\nCertificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`\n"
                }
            },
            "required": [
                "allowedAsUserName",
                "certificateAttributeName",
                "externalIdentityStoreName",
                "matchMode",
                "name",
                "usernameFrom"
            ],
            "inputProperties": {
                "allowedAsUserName": {
                    "type": "boolean",
                    "description": "Allow as username - Default value: `false`\n"
                },
                "certificateAttributeName": {
                    "type": "string",
                    "description": "Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:\n`SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,\n`SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:\n`SUBJECT_COMMON_NAME`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "externalIdentityStoreName": {
                    "type": "string",
                    "description": "Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default\nvalue: `[not applicable]`\n"
                },
                "matchMode": {
                    "type": "string",
                    "description": "Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:\n`NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate profile\n"
                },
                "usernameFrom": {
                    "type": "string",
                    "description": "The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific\nattribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the\nCertificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "allowedAsUserName": {
                        "type": "boolean",
                        "description": "Allow as username - Default value: `false`\n"
                    },
                    "certificateAttributeName": {
                        "type": "string",
                        "description": "Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`. - Choices:\n`SUBJECT_COMMON_NAME`, `SUBJECT_ALTERNATIVE_NAME`, `SUBJECT_SERIAL_NUMBER`, `SUBJECT`,\n`SUBJECT_ALTERNATIVE_NAME_OTHER_NAME`, `SUBJECT_ALTERNATIVE_NAME_EMAIL`, `SUBJECT_ALTERNATIVE_NAME_DNS` - Default value:\n`SUBJECT_COMMON_NAME`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "externalIdentityStoreName": {
                        "type": "string",
                        "description": "Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen - Default\nvalue: `[not applicable]`\n"
                    },
                    "matchMode": {
                        "type": "string",
                        "description": "Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE_IDENTITY_AMBIGUITY, BINARY_COMPARISON - Choices:\n`NEVER`, `RESOLVE_IDENTITY_AMBIGUITY`, `BINARY_COMPARISON` - Default value: `NEVER`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate profile\n"
                    },
                    "usernameFrom": {
                        "type": "string",
                        "description": "The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific\nattribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the\nCertificate - an option only in AD) - Choices: `CERTIFICATE`, `UPN` - Default value: `CERTIFICATE`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdmin/condition:Condition": {
            "description": "This resource can manage a Device Admin Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadmin.Condition(\"example\", {\n    name: \"Cond1\",\n    description: \"My description\",\n    conditionType: \"LibraryConditionAttributes\",\n    isNegate: false,\n    attributeName: \"User\",\n    attributeValue: \"User1\",\n    dictionaryName: \"TACACS\",\n    operator: \"equals\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin.Condition(\"example\",\n    name=\"Cond1\",\n    description=\"My description\",\n    condition_type=\"LibraryConditionAttributes\",\n    is_negate=False,\n    attribute_name=\"User\",\n    attribute_value=\"User1\",\n    dictionary_name=\"TACACS\",\n    operator=\"equals\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdmin.Condition(\"example\", new()\n    {\n        Name = \"Cond1\",\n        Description = \"My description\",\n        ConditionType = \"LibraryConditionAttributes\",\n        IsNegate = false,\n        AttributeName = \"User\",\n        AttributeValue = \"User1\",\n        DictionaryName = \"TACACS\",\n        Operator = \"equals\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdmin\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdmin.NewCondition(ctx, \"example\", \u0026DeviceAdmin.ConditionArgs{\n\t\t\tName:           pulumi.String(\"Cond1\"),\n\t\t\tDescription:    pulumi.String(\"My description\"),\n\t\t\tConditionType:  pulumi.String(\"LibraryConditionAttributes\"),\n\t\t\tIsNegate:       pulumi.Bool(false),\n\t\t\tAttributeName:  pulumi.String(\"User\"),\n\t\t\tAttributeValue: pulumi.String(\"User1\"),\n\t\t\tDictionaryName: pulumi.String(\"TACACS\"),\n\t\t\tOperator:       pulumi.String(\"equals\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdmin.Condition;\nimport com.pulumi.ise.DeviceAdmin.ConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Condition(\"example\", ConditionArgs.builder()        \n            .name(\"Cond1\")\n            .description(\"My description\")\n            .conditionType(\"LibraryConditionAttributes\")\n            .isNegate(false)\n            .attributeName(\"User\")\n            .attributeValue(\"User1\")\n            .dictionaryName(\"TACACS\")\n            .operator(\"equals\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdmin:Condition\n    properties:\n      name: Cond1\n      description: My description\n      conditionType: LibraryConditionAttributes\n      isNegate: false\n      attributeName: User\n      attributeValue: User1\n      dictionaryName: TACACS\n      operator: equals\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdmin/condition:Condition example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdmin/ConditionChildren:ConditionChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "required": [
                "conditionType",
                "name"
            ],
            "inputProperties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdmin/ConditionChildren:ConditionChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "requiredInputs": [
                "conditionType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Condition resources.\n",
                "properties": {
                    "attributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "attributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdmin/ConditionChildren:ConditionChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Condition description\n"
                    },
                    "dictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "dictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "isNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthentication/rule:Rule": {
            "description": "This resource can manage a Device Admin Authentication Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadminauthentication.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    identitySourceName: \"Internal Endpoints\",\n    ifAuthFail: \"REJECT\",\n    ifProcessFail: \"DROP\",\n    ifUserNotFound: \"REJECT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_authentication.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    identity_source_name=\"Internal Endpoints\",\n    if_auth_fail=\"REJECT\",\n    if_process_fail=\"DROP\",\n    if_user_not_found=\"REJECT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminAuthentication.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        IdentitySourceName = \"Internal Endpoints\",\n        IfAuthFail = \"REJECT\",\n        IfProcessFail = \"DROP\",\n        IfUserNotFound = \"REJECT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthentication.NewRule(ctx, \"example\", \u0026DeviceAdminAuthentication.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tIdentitySourceName:      pulumi.String(\"Internal Endpoints\"),\n\t\t\tIfAuthFail:              pulumi.String(\"REJECT\"),\n\t\t\tIfProcessFail:           pulumi.String(\"DROP\"),\n\t\t\tIfUserNotFound:          pulumi.String(\"REJECT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthentication.Rule;\nimport com.pulumi.ise.DeviceAdminAuthentication.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .identitySourceName(\"Internal Endpoints\")\n            .ifAuthFail(\"REJECT\")\n            .ifProcessFail(\"DROP\")\n            .ifUserNotFound(\"REJECT\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminAuthentication:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      identitySourceName: Internal Endpoints\n      ifAuthFail: REJECT\n      ifProcessFail: DROP\n      ifUserNotFound: REJECT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminAuthentication/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthentication/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "identitySourceName": {
                    "type": "string",
                    "description": "Identity source name from the identity stores\n"
                },
                "ifAuthFail": {
                    "type": "string",
                    "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                },
                "ifProcessFail": {
                    "type": "string",
                    "description": "Action to perform when ISE is unable to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "ifUserNotFound": {
                    "type": "string",
                    "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "ifAuthFail",
                "ifProcessFail",
                "ifUserNotFound",
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthentication/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "identitySourceName": {
                    "type": "string",
                    "description": "Identity source name from the identity stores\n"
                },
                "ifAuthFail": {
                    "type": "string",
                    "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                },
                "ifProcessFail": {
                    "type": "string",
                    "description": "Action to perform when ISE is unable to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "ifUserNotFound": {
                    "type": "string",
                    "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "ifAuthFail",
                "ifProcessFail",
                "ifUserNotFound",
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthentication/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "identitySourceName": {
                        "type": "string",
                        "description": "Identity source name from the identity stores\n"
                    },
                    "ifAuthFail": {
                        "type": "string",
                        "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                    },
                    "ifProcessFail": {
                        "type": "string",
                        "description": "Action to perform when ISE is unable to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                    },
                    "ifUserNotFound": {
                        "type": "string",
                        "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorization/rule:Rule": {
            "description": "This resource can manage a Device Admin Authorization Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadminauthorization.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    commandSets: [\"DenyAllCommands\"],\n    profile: \"Default Shell Profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_authorization.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    command_sets=[\"DenyAllCommands\"],\n    profile=\"Default Shell Profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminAuthorization.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        CommandSets = new[]\n        {\n            \"DenyAllCommands\",\n        },\n        Profile = \"Default Shell Profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorization\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorization.NewRule(ctx, \"example\", \u0026DeviceAdminAuthorization.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tCommandSets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DenyAllCommands\"),\n\t\t\t},\n\t\t\tProfile: pulumi.String(\"Default Shell Profile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorization.Rule;\nimport com.pulumi.ise.DeviceAdminAuthorization.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .commandSets(\"DenyAllCommands\")\n            .profile(\"Default Shell Profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminAuthorization:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      commandSets:\n        - DenyAllCommands\n      profile: Default Shell Profile\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminAuthorization/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorization/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorization/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorization/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "commandSets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Device admin profiles control the initial login session of the device administrator\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorizationException/rule:Rule": {
            "description": "This resource can manage a Device Admin Authorization Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadminauthorizationexception.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    commandSets: [\"DenyAllCommands\"],\n    profile: \"Default Shell Profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_authorization_exception.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    command_sets=[\"DenyAllCommands\"],\n    profile=\"Default Shell Profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminAuthorizationException.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        CommandSets = new[]\n        {\n            \"DenyAllCommands\",\n        },\n        Profile = \"Default Shell Profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorizationException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorizationException.NewRule(ctx, \"example\", \u0026DeviceAdminAuthorizationException.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tCommandSets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DenyAllCommands\"),\n\t\t\t},\n\t\t\tProfile: pulumi.String(\"Default Shell Profile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorizationException.Rule;\nimport com.pulumi.ise.DeviceAdminAuthorizationException.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .commandSets(\"DenyAllCommands\")\n            .profile(\"Default Shell Profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminAuthorizationException:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      commandSets:\n        - DenyAllCommands\n      profile: Default Shell Profile\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminAuthorizationException/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorizationException/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "commandSets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Device admin profiles control the initial login session of the device administrator\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorizationGlobalException/rule:Rule": {
            "description": "This resource can manage a Device Admin Authorization Global Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadminauthorizationglobalexception.Rule(\"example\", {\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    commandSets: [\"DenyAllCommands\"],\n    profile: \"Default Shell Profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_authorization_global_exception.Rule(\"example\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    command_sets=[\"DenyAllCommands\"],\n    profile=\"Default Shell Profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminAuthorizationGlobalException.Rule(\"example\", new()\n    {\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        CommandSets = new[]\n        {\n            \"DenyAllCommands\",\n        },\n        Profile = \"Default Shell Profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorizationGlobalException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorizationGlobalException.NewRule(ctx, \"example\", \u0026DeviceAdminAuthorizationGlobalException.RuleArgs{\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tCommandSets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DenyAllCommands\"),\n\t\t\t},\n\t\t\tProfile: pulumi.String(\"Default Shell Profile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorizationGlobalException.Rule;\nimport com.pulumi.ise.DeviceAdminAuthorizationGlobalException.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .commandSets(\"DenyAllCommands\")\n            .profile(\"Default Shell Profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminAuthorizationGlobalException:Rule\n    properties:\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      commandSets:\n        - DenyAllCommands\n      profile: Default Shell Profile\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminAuthorizationGlobalException/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "commandSets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Device admin profiles control the initial login session of the device administrator\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "commandSets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Device admin profiles control the initial login session of the device administrator\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminPolicy/set:Set": {
            "description": "This resource can manage a Device Admin Policy Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadminpolicy.Set(\"example\", {\n    name: \"PolicySet1\",\n    description: \"My description\",\n    isProxy: false,\n    rank: 0,\n    serviceName: \"Default Device Admin\",\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_policy.Set(\"example\",\n    name=\"PolicySet1\",\n    description=\"My description\",\n    is_proxy=False,\n    rank=0,\n    service_name=\"Default Device Admin\",\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminPolicy.Set(\"example\", new()\n    {\n        Name = \"PolicySet1\",\n        Description = \"My description\",\n        IsProxy = false,\n        Rank = 0,\n        ServiceName = \"Default Device Admin\",\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminPolicy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminPolicy.NewSet(ctx, \"example\", \u0026DeviceAdminPolicy.SetArgs{\n\t\t\tName:                    pulumi.String(\"PolicySet1\"),\n\t\t\tDescription:             pulumi.String(\"My description\"),\n\t\t\tIsProxy:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tServiceName:             pulumi.String(\"Default Device Admin\"),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminPolicy.Set;\nimport com.pulumi.ise.DeviceAdminPolicy.SetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Set(\"example\", SetArgs.builder()        \n            .name(\"PolicySet1\")\n            .description(\"My description\")\n            .isProxy(false)\n            .rank(0)\n            .serviceName(\"Default Device Admin\")\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminPolicy:Set\n    properties:\n      name: PolicySet1\n      description: My description\n      isProxy: false\n      rank: 0\n      serviceName: Default Device Admin\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminPolicy/set:Set example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminPolicy/SetChildren:SetChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this policy set is the default one\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy set\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                }
            },
            "required": [
                "description",
                "name",
                "rank",
                "serviceName"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:DeviceAdminPolicy/SetChildren:SetChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this policy set is the default one\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy set\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                }
            },
            "requiredInputs": [
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Set resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminPolicy/SetChildren:SetChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this policy set is the default one\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy set\n"
                    },
                    "isProxy": {
                        "type": "boolean",
                        "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:DeviceAdminTimeAndDate/condition:Condition": {
            "description": "This resource can manage a Device Admin Time And Date Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.deviceadmintimeanddate.Condition(\"example\", {\n    name: \"Cond1\",\n    description: \"My description\",\n    isNegate: false,\n    weekDays: [\"Monday\"],\n    weekDaysExceptions: [\"Tuesday\"],\n    startDate: \"2022-05-06\",\n    endDate: \"2022-05-10\",\n    exceptionStartDate: \"2022-06-06\",\n    exceptionEndDate: \"2022-06-10\",\n    startTime: \"08:00\",\n    endTime: \"15:00\",\n    exceptionStartTime: \"20:00\",\n    exceptionEndTime: \"22:00\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.device_admin_time_and_date.Condition(\"example\",\n    name=\"Cond1\",\n    description=\"My description\",\n    is_negate=False,\n    week_days=[\"Monday\"],\n    week_days_exceptions=[\"Tuesday\"],\n    start_date=\"2022-05-06\",\n    end_date=\"2022-05-10\",\n    exception_start_date=\"2022-06-06\",\n    exception_end_date=\"2022-06-10\",\n    start_time=\"08:00\",\n    end_time=\"15:00\",\n    exception_start_time=\"20:00\",\n    exception_end_time=\"22:00\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.DeviceAdminTimeAndDate.Condition(\"example\", new()\n    {\n        Name = \"Cond1\",\n        Description = \"My description\",\n        IsNegate = false,\n        WeekDays = new[]\n        {\n            \"Monday\",\n        },\n        WeekDaysExceptions = new[]\n        {\n            \"Tuesday\",\n        },\n        StartDate = \"2022-05-06\",\n        EndDate = \"2022-05-10\",\n        ExceptionStartDate = \"2022-06-06\",\n        ExceptionEndDate = \"2022-06-10\",\n        StartTime = \"08:00\",\n        EndTime = \"15:00\",\n        ExceptionStartTime = \"20:00\",\n        ExceptionEndTime = \"22:00\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminTimeAndDate\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminTimeAndDate.NewCondition(ctx, \"example\", \u0026DeviceAdminTimeAndDate.ConditionArgs{\n\t\t\tName:        pulumi.String(\"Cond1\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIsNegate:    pulumi.Bool(false),\n\t\t\tWeekDays: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Monday\"),\n\t\t\t},\n\t\t\tWeekDaysExceptions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Tuesday\"),\n\t\t\t},\n\t\t\tStartDate:          pulumi.String(\"2022-05-06\"),\n\t\t\tEndDate:            pulumi.String(\"2022-05-10\"),\n\t\t\tExceptionStartDate: pulumi.String(\"2022-06-06\"),\n\t\t\tExceptionEndDate:   pulumi.String(\"2022-06-10\"),\n\t\t\tStartTime:          pulumi.String(\"08:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:00\"),\n\t\t\tExceptionStartTime: pulumi.String(\"20:00\"),\n\t\t\tExceptionEndTime:   pulumi.String(\"22:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminTimeAndDate.Condition;\nimport com.pulumi.ise.DeviceAdminTimeAndDate.ConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Condition(\"example\", ConditionArgs.builder()        \n            .name(\"Cond1\")\n            .description(\"My description\")\n            .isNegate(false)\n            .weekDays(\"Monday\")\n            .weekDaysExceptions(\"Tuesday\")\n            .startDate(\"2022-05-06\")\n            .endDate(\"2022-05-10\")\n            .exceptionStartDate(\"2022-06-06\")\n            .exceptionEndDate(\"2022-06-10\")\n            .startTime(\"08:00\")\n            .endTime(\"15:00\")\n            .exceptionStartTime(\"20:00\")\n            .exceptionEndTime(\"22:00\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:DeviceAdminTimeAndDate:Condition\n    properties:\n      name: Cond1\n      description: My description\n      isNegate: false\n      weekDays:\n        - Monday\n      weekDaysExceptions:\n        - Tuesday\n      startDate: 2022-05-06\n      endDate: 2022-05-10\n      exceptionStartDate: 2022-06-06\n      exceptionEndDate: 2022-06-10\n      startTime: 08:00\n      endTime: 15:00\n      exceptionStartTime: 20:00\n      exceptionEndTime: 22:00\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:DeviceAdminTimeAndDate/condition:Condition example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time\n"
                },
                "exceptionEndDate": {
                    "type": "string",
                    "description": "Exception end date\n"
                },
                "exceptionEndTime": {
                    "type": "string",
                    "description": "Exception end time\n"
                },
                "exceptionStartDate": {
                    "type": "string",
                    "description": "Exception start date\n"
                },
                "exceptionStartTime": {
                    "type": "string",
                    "description": "Exception start time\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                },
                "weekDaysExceptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time\n"
                },
                "exceptionEndDate": {
                    "type": "string",
                    "description": "Exception end date\n"
                },
                "exceptionEndTime": {
                    "type": "string",
                    "description": "Exception end time\n"
                },
                "exceptionStartDate": {
                    "type": "string",
                    "description": "Exception start date\n"
                },
                "exceptionStartTime": {
                    "type": "string",
                    "description": "Exception start time\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                },
                "weekDaysExceptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Condition resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Condition description\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "End time\n"
                    },
                    "exceptionEndDate": {
                        "type": "string",
                        "description": "Exception end date\n"
                    },
                    "exceptionEndTime": {
                        "type": "string",
                        "description": "Exception end time\n"
                    },
                    "exceptionStartDate": {
                        "type": "string",
                        "description": "Exception start date\n"
                    },
                    "exceptionStartTime": {
                        "type": "string",
                        "description": "Exception start time\n"
                    },
                    "isNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time\n"
                    },
                    "weekDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                    },
                    "weekDaysExceptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Downloadable/acl:Acl": {
            "description": "This resource can manage a Downloadable ACL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.downloadable.Acl(\"example\", {\n    name: \"MyACL\",\n    description: \"My first downloadable ACL\",\n    dacl: \"permit ip any any\",\n    daclType: \"IPV4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.downloadable.Acl(\"example\",\n    name=\"MyACL\",\n    description=\"My first downloadable ACL\",\n    dacl=\"permit ip any any\",\n    dacl_type=\"IPV4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Downloadable.Acl(\"example\", new()\n    {\n        Name = \"MyACL\",\n        Description = \"My first downloadable ACL\",\n        Dacl = \"permit ip any any\",\n        DaclType = \"IPV4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Downloadable\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Downloadable.NewAcl(ctx, \"example\", \u0026Downloadable.AclArgs{\n\t\t\tName:        pulumi.String(\"MyACL\"),\n\t\t\tDescription: pulumi.String(\"My first downloadable ACL\"),\n\t\t\tDacl:        pulumi.String(\"permit ip any any\"),\n\t\t\tDaclType:    pulumi.String(\"IPV4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Downloadable.Acl;\nimport com.pulumi.ise.Downloadable.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Acl(\"example\", AclArgs.builder()        \n            .name(\"MyACL\")\n            .description(\"My first downloadable ACL\")\n            .dacl(\"permit ip any any\")\n            .daclType(\"IPV4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Downloadable:Acl\n    properties:\n      name: MyACL\n      description: My first downloadable ACL\n      dacl: permit ip any any\n      daclType: IPV4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Downloadable/acl:Acl example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "dacl": {
                    "type": "string",
                    "description": "The DACL content\n"
                },
                "daclType": {
                    "type": "string",
                    "description": "The type of ACL - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IPV4`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the downloadable ACL\n"
                }
            },
            "required": [
                "dacl",
                "daclType",
                "name"
            ],
            "inputProperties": {
                "dacl": {
                    "type": "string",
                    "description": "The DACL content\n"
                },
                "daclType": {
                    "type": "string",
                    "description": "The type of ACL - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IPV4`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the downloadable ACL\n"
                }
            },
            "requiredInputs": [
                "dacl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "dacl": {
                        "type": "string",
                        "description": "The DACL content\n"
                    },
                    "daclType": {
                        "type": "string",
                        "description": "The type of ACL - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IPV4`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the downloadable ACL\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:EndpointIdentity/group:Group": {
            "description": "This resource can manage an Endpoint Identity Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.endpointidentity.Group(\"example\", {\n    name: \"Group1\",\n    description: \"My endpoint identity group\",\n    systemDefined: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.endpoint_identity.Group(\"example\",\n    name=\"Group1\",\n    description=\"My endpoint identity group\",\n    system_defined=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.EndpointIdentity.Group(\"example\", new()\n    {\n        Name = \"Group1\",\n        Description = \"My endpoint identity group\",\n        SystemDefined = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/EndpointIdentity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := EndpointIdentity.NewGroup(ctx, \"example\", \u0026EndpointIdentity.GroupArgs{\n\t\t\tName:          pulumi.String(\"Group1\"),\n\t\t\tDescription:   pulumi.String(\"My endpoint identity group\"),\n\t\t\tSystemDefined: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.EndpointIdentity.Group;\nimport com.pulumi.ise.EndpointIdentity.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .name(\"Group1\")\n            .description(\"My endpoint identity group\")\n            .systemDefined(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:EndpointIdentity:Group\n    properties:\n      name: Group1\n      description: My endpoint identity group\n      systemDefined: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:EndpointIdentity/group:Group example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint identity group\n"
                },
                "parentEndpointIdentityGroupId": {
                    "type": "string",
                    "description": "Parent endpoint identity group ID\n"
                },
                "systemDefined": {
                    "type": "boolean",
                    "description": "System defined endpoint identity group - Default value: `false`\n"
                }
            },
            "required": [
                "name",
                "systemDefined"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint identity group\n"
                },
                "parentEndpointIdentityGroupId": {
                    "type": "string",
                    "description": "Parent endpoint identity group ID\n"
                },
                "systemDefined": {
                    "type": "boolean",
                    "description": "System defined endpoint identity group - Default value: `false`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint identity group\n"
                    },
                    "parentEndpointIdentityGroupId": {
                        "type": "string",
                        "description": "Parent endpoint identity group ID\n"
                    },
                    "systemDefined": {
                        "type": "boolean",
                        "description": "System defined endpoint identity group - Default value: `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:IdentitySource/sequence:Sequence": {
            "description": "This resource can manage an Identity Source Sequence.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.identitysource.Sequence(\"example\", {\n    name: \"Sequence1\",\n    description: \"My identity source sequence\",\n    breakOnStoreFail: true,\n    certificateAuthenticationProfile: \"Preloaded_Certificate_Profile\",\n    identitySources: [{\n        name: \"Internal Users\",\n        order: 1,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.identity_source.Sequence(\"example\",\n    name=\"Sequence1\",\n    description=\"My identity source sequence\",\n    break_on_store_fail=True,\n    certificate_authentication_profile=\"Preloaded_Certificate_Profile\",\n    identity_sources=[ise.identity_source.SequenceIdentitySourceArgs(\n        name=\"Internal Users\",\n        order=1,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.IdentitySource.Sequence(\"example\", new()\n    {\n        Name = \"Sequence1\",\n        Description = \"My identity source sequence\",\n        BreakOnStoreFail = true,\n        CertificateAuthenticationProfile = \"Preloaded_Certificate_Profile\",\n        IdentitySources = new[]\n        {\n            new Ise.IdentitySource.Inputs.SequenceIdentitySourceArgs\n            {\n                Name = \"Internal Users\",\n                Order = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/IdentitySource\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := IdentitySource.NewSequence(ctx, \"example\", \u0026IdentitySource.SequenceArgs{\n\t\t\tName:                             pulumi.String(\"Sequence1\"),\n\t\t\tDescription:                      pulumi.String(\"My identity source sequence\"),\n\t\t\tBreakOnStoreFail:                 pulumi.Bool(true),\n\t\t\tCertificateAuthenticationProfile: pulumi.String(\"Preloaded_Certificate_Profile\"),\n\t\t\tIdentitySources: identitysource.SequenceIdentitySourceArray{\n\t\t\t\t\u0026identitysource.SequenceIdentitySourceArgs{\n\t\t\t\t\tName:  pulumi.String(\"Internal Users\"),\n\t\t\t\t\tOrder: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.IdentitySource.Sequence;\nimport com.pulumi.ise.IdentitySource.SequenceArgs;\nimport com.pulumi.ise.IdentitySource.inputs.SequenceIdentitySourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Sequence(\"example\", SequenceArgs.builder()        \n            .name(\"Sequence1\")\n            .description(\"My identity source sequence\")\n            .breakOnStoreFail(true)\n            .certificateAuthenticationProfile(\"Preloaded_Certificate_Profile\")\n            .identitySources(SequenceIdentitySourceArgs.builder()\n                .name(\"Internal Users\")\n                .order(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:IdentitySource:Sequence\n    properties:\n      name: Sequence1\n      description: My identity source sequence\n      breakOnStoreFail: true\n      certificateAuthenticationProfile: Preloaded_Certificate_Profile\n      identitySources:\n        - name: Internal Users\n          order: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:IdentitySource/sequence:Sequence example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "breakOnStoreFail": {
                    "type": "boolean",
                    "description": "Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication\n"
                },
                "certificateAuthenticationProfile": {
                    "type": "string",
                    "description": "Certificate Authentication Profile, empty if doesn't exist\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "identitySources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:IdentitySource/SequenceIdentitySource:SequenceIdentitySource"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the identity source sequence\n"
                }
            },
            "required": [
                "breakOnStoreFail",
                "certificateAuthenticationProfile",
                "identitySources",
                "name"
            ],
            "inputProperties": {
                "breakOnStoreFail": {
                    "type": "boolean",
                    "description": "Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication\n"
                },
                "certificateAuthenticationProfile": {
                    "type": "string",
                    "description": "Certificate Authentication Profile, empty if doesn't exist\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "identitySources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:IdentitySource/SequenceIdentitySource:SequenceIdentitySource"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the identity source sequence\n"
                }
            },
            "requiredInputs": [
                "breakOnStoreFail",
                "certificateAuthenticationProfile",
                "identitySources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sequence resources.\n",
                "properties": {
                    "breakOnStoreFail": {
                        "type": "boolean",
                        "description": "Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication\n"
                    },
                    "certificateAuthenticationProfile": {
                        "type": "string",
                        "description": "Certificate Authentication Profile, empty if doesn't exist\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "identitySources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:IdentitySource/SequenceIdentitySource:SequenceIdentitySource"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the identity source sequence\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Internal/user:User": {
            "description": "This resource can manage an Internal User.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.internal.User(\"example\", {\n    name: \"UserTF\",\n    password: \"Cisco123\",\n    changePassword: true,\n    email: \"aaa@cisco.com\",\n    accountNameAlias: \"User 1\",\n    enablePassword: \"Cisco123\",\n    enabled: true,\n    passwordNeverExpires: false,\n    firstName: \"John\",\n    lastName: \"Doe\",\n    passwordIdStore: \"Internal Users\",\n    description: \"My first Terraform user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.internal.User(\"example\",\n    name=\"UserTF\",\n    password=\"Cisco123\",\n    change_password=True,\n    email=\"aaa@cisco.com\",\n    account_name_alias=\"User 1\",\n    enable_password=\"Cisco123\",\n    enabled=True,\n    password_never_expires=False,\n    first_name=\"John\",\n    last_name=\"Doe\",\n    password_id_store=\"Internal Users\",\n    description=\"My first Terraform user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Internal.User(\"example\", new()\n    {\n        Name = \"UserTF\",\n        Password = \"Cisco123\",\n        ChangePassword = true,\n        Email = \"aaa@cisco.com\",\n        AccountNameAlias = \"User 1\",\n        EnablePassword = \"Cisco123\",\n        Enabled = true,\n        PasswordNeverExpires = false,\n        FirstName = \"John\",\n        LastName = \"Doe\",\n        PasswordIdStore = \"Internal Users\",\n        Description = \"My first Terraform user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Internal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Internal.NewUser(ctx, \"example\", \u0026Internal.UserArgs{\n\t\t\tName:                 pulumi.String(\"UserTF\"),\n\t\t\tPassword:             pulumi.String(\"Cisco123\"),\n\t\t\tChangePassword:       pulumi.Bool(true),\n\t\t\tEmail:                pulumi.String(\"aaa@cisco.com\"),\n\t\t\tAccountNameAlias:     pulumi.String(\"User 1\"),\n\t\t\tEnablePassword:       pulumi.String(\"Cisco123\"),\n\t\t\tEnabled:              pulumi.Bool(true),\n\t\t\tPasswordNeverExpires: pulumi.Bool(false),\n\t\t\tFirstName:            pulumi.String(\"John\"),\n\t\t\tLastName:             pulumi.String(\"Doe\"),\n\t\t\tPasswordIdStore:      pulumi.String(\"Internal Users\"),\n\t\t\tDescription:          pulumi.String(\"My first Terraform user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Internal.User;\nimport com.pulumi.ise.Internal.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()        \n            .name(\"UserTF\")\n            .password(\"Cisco123\")\n            .changePassword(true)\n            .email(\"aaa@cisco.com\")\n            .accountNameAlias(\"User 1\")\n            .enablePassword(\"Cisco123\")\n            .enabled(true)\n            .passwordNeverExpires(false)\n            .firstName(\"John\")\n            .lastName(\"Doe\")\n            .passwordIdStore(\"Internal Users\")\n            .description(\"My first Terraform user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Internal:User\n    properties:\n      name: UserTF\n      password: Cisco123\n      changePassword: true\n      email: aaa@cisco.com\n      accountNameAlias: User 1\n      enablePassword: Cisco123\n      enabled: true\n      passwordNeverExpires: false\n      firstName: John\n      lastName: Doe\n      passwordIdStore: Internal Users\n      description: My first Terraform user\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Internal/user:User example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "accountNameAlias": {
                    "type": "string",
                    "description": "The Account Name Alias will be used to send email notifications about password expiration. This field is only supported\nfrom ISE 3.2.\n"
                },
                "changePassword": {
                    "type": "boolean",
                    "description": "Requires the user to change the password - Default value: `true`\n"
                },
                "customAttributes": {
                    "type": "string",
                    "description": "Key value map\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address\n"
                },
                "enablePassword": {
                    "type": "string",
                    "description": "This field is added in ISE 2.0 to support TACACS+\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the user is enabled/disabled\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the internal user\n"
                },
                "identityGroups": {
                    "type": "string",
                    "description": "Comma separated list of identity group IDs.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the internal user\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the internal user\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the internal user\n"
                },
                "passwordIdStore": {
                    "type": "string",
                    "description": "The ID store where the internal user's password is kept - Default value: `Internal Users`\n"
                },
                "passwordNeverExpires": {
                    "type": "boolean",
                    "description": "Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This\nfield is only supported from ISE 3.2. - Default value: `false`\n"
                }
            },
            "required": [
                "changePassword",
                "name",
                "password",
                "passwordIdStore",
                "passwordNeverExpires"
            ],
            "inputProperties": {
                "accountNameAlias": {
                    "type": "string",
                    "description": "The Account Name Alias will be used to send email notifications about password expiration. This field is only supported\nfrom ISE 3.2.\n"
                },
                "changePassword": {
                    "type": "boolean",
                    "description": "Requires the user to change the password - Default value: `true`\n"
                },
                "customAttributes": {
                    "type": "string",
                    "description": "Key value map\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address\n"
                },
                "enablePassword": {
                    "type": "string",
                    "description": "This field is added in ISE 2.0 to support TACACS+\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the user is enabled/disabled\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the internal user\n"
                },
                "identityGroups": {
                    "type": "string",
                    "description": "Comma separated list of identity group IDs.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the internal user\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the internal user\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the internal user\n"
                },
                "passwordIdStore": {
                    "type": "string",
                    "description": "The ID store where the internal user's password is kept - Default value: `Internal Users`\n"
                },
                "passwordNeverExpires": {
                    "type": "boolean",
                    "description": "Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This\nfield is only supported from ISE 3.2. - Default value: `false`\n"
                }
            },
            "requiredInputs": [
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountNameAlias": {
                        "type": "string",
                        "description": "The Account Name Alias will be used to send email notifications about password expiration. This field is only supported\nfrom ISE 3.2.\n"
                    },
                    "changePassword": {
                        "type": "boolean",
                        "description": "Requires the user to change the password - Default value: `true`\n"
                    },
                    "customAttributes": {
                        "type": "string",
                        "description": "Key value map\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address\n"
                    },
                    "enablePassword": {
                        "type": "string",
                        "description": "This field is added in ISE 2.0 to support TACACS+\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the user is enabled/disabled\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the internal user\n"
                    },
                    "identityGroups": {
                        "type": "string",
                        "description": "Comma separated list of identity group IDs.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the internal user\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the internal user\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the internal user\n"
                    },
                    "passwordIdStore": {
                        "type": "string",
                        "description": "The ID store where the internal user's password is kept - Default value: `Internal Users`\n"
                    },
                    "passwordNeverExpires": {
                        "type": "boolean",
                        "description": "Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This\nfield is only supported from ISE 3.2. - Default value: `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:LicenseTier/state:State": {
            "description": "This resource can manage a License Tier State.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.licensetier.State(\"example\", {licenses: [{\n    name: \"ESSENTIAL\",\n    status: \"ENABLED\",\n}]});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.license_tier.State(\"example\", licenses=[ise.license_tier.StateLicenseArgs(\n    name=\"ESSENTIAL\",\n    status=\"ENABLED\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.LicenseTier.State(\"example\", new()\n    {\n        Licenses = new[]\n        {\n            new Ise.LicenseTier.Inputs.StateLicenseArgs\n            {\n                Name = \"ESSENTIAL\",\n                Status = \"ENABLED\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/LicenseTier\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LicenseTier.NewState(ctx, \"example\", \u0026LicenseTier.StateArgs{\n\t\t\tLicenses: licensetier.StateLicenseArray{\n\t\t\t\t\u0026licensetier.StateLicenseArgs{\n\t\t\t\t\tName:   pulumi.String(\"ESSENTIAL\"),\n\t\t\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.LicenseTier.State;\nimport com.pulumi.ise.LicenseTier.StateArgs;\nimport com.pulumi.ise.LicenseTier.inputs.StateLicenseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new State(\"example\", StateArgs.builder()        \n            .licenses(StateLicenseArgs.builder()\n                .name(\"ESSENTIAL\")\n                .status(\"ENABLED\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:LicenseTier:State\n    properties:\n      licenses:\n        - name: ESSENTIAL\n          status: ENABLED\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:LicenseTier/state:State example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "licenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:LicenseTier/StateLicense:StateLicense"
                    },
                    "description": "List of licenses\n"
                }
            },
            "required": [
                "licenses"
            ],
            "inputProperties": {
                "licenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:LicenseTier/StateLicense:StateLicense"
                    },
                    "description": "List of licenses\n"
                }
            },
            "requiredInputs": [
                "licenses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering State resources.\n",
                "properties": {
                    "licenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:LicenseTier/StateLicense:StateLicense"
                        },
                        "description": "List of licenses\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Network/device:Device": {
            "description": "This resource can manage a Network Device.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.network.Device(\"example\", {\n    name: \"Device1\",\n    description: \"My device\",\n    authenticationEnableKeyWrap: true,\n    authenticationEncryptionKey: \"cisco123cisco123\",\n    authenticationEncryptionKeyFormat: \"ASCII\",\n    authenticationMessageAuthenticatorCodeKey: \"cisco123cisco1235678\",\n    authenticationNetworkProtocol: \"RADIUS\",\n    authenticationRadiusSharedSecret: \"cisco123\",\n    authenticationEnableMultiSecret: true,\n    authenticationSecondRadiusSharedSecret: \"cisco12345\",\n    authenticationDtlsRequired: true,\n    coaPort: 12345,\n    dtlsDnsName: \"cisco.com\",\n    ips: [{\n        ipaddress: \"2.3.4.5\",\n        mask: \"32\",\n    }],\n    modelName: \"Unknown\",\n    softwareVersion: \"Unknown\",\n    profileName: \"Cisco\",\n    snmpLinkTrapQuery: true,\n    snmpMacTrapQuery: true,\n    snmpPollingInterval: 1200,\n    snmpRoCommunity: \"rocom\",\n    snmpVersion: \"TWO_C\",\n    tacacsConnectModeOptions: \"OFF\",\n    tacacsSharedSecret: \"cisco123\",\n    trustsecDeviceId: \"device123\",\n    trustsecDevicePassword: \"cisco123\",\n    trustsecRestApiUsername: \"user123\",\n    trustsecRestApiPassword: \"Cisco123\",\n    trustsecEnableModePassword: \"cisco123\",\n    trustsecExecModePassword: \"cisco123\",\n    trustsecExecModeUsername: \"user456\",\n    trustsecIncludeWhenDeployingSgtUpdates: true,\n    trustsecDownloadEnviromentDataEveryXSeconds: 1000,\n    trustsecDownloadPeerAuthorizationPolicyEveryXSeconds: 1000,\n    trustsecDownloadSgaclListsEveryXSeconds: 1000,\n    trustsecOtherSgaDevicesToTrustThisDevice: true,\n    trustsecReAuthenticationEveryXSeconds: 1000,\n    trustsecSendConfigurationToDevice: true,\n    trustsecSendConfigurationToDeviceUsing: \"ENABLE_USING_COA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network.Device(\"example\",\n    name=\"Device1\",\n    description=\"My device\",\n    authentication_enable_key_wrap=True,\n    authentication_encryption_key=\"cisco123cisco123\",\n    authentication_encryption_key_format=\"ASCII\",\n    authentication_message_authenticator_code_key=\"cisco123cisco1235678\",\n    authentication_network_protocol=\"RADIUS\",\n    authentication_radius_shared_secret=\"cisco123\",\n    authentication_enable_multi_secret=True,\n    authentication_second_radius_shared_secret=\"cisco12345\",\n    authentication_dtls_required=True,\n    coa_port=12345,\n    dtls_dns_name=\"cisco.com\",\n    ips=[ise.network.DeviceIpArgs(\n        ipaddress=\"2.3.4.5\",\n        mask=\"32\",\n    )],\n    model_name=\"Unknown\",\n    software_version=\"Unknown\",\n    profile_name=\"Cisco\",\n    snmp_link_trap_query=True,\n    snmp_mac_trap_query=True,\n    snmp_polling_interval=1200,\n    snmp_ro_community=\"rocom\",\n    snmp_version=\"TWO_C\",\n    tacacs_connect_mode_options=\"OFF\",\n    tacacs_shared_secret=\"cisco123\",\n    trustsec_device_id=\"device123\",\n    trustsec_device_password=\"cisco123\",\n    trustsec_rest_api_username=\"user123\",\n    trustsec_rest_api_password=\"Cisco123\",\n    trustsec_enable_mode_password=\"cisco123\",\n    trustsec_exec_mode_password=\"cisco123\",\n    trustsec_exec_mode_username=\"user456\",\n    trustsec_include_when_deploying_sgt_updates=True,\n    trustsec_download_enviroment_data_every_x_seconds=1000,\n    trustsec_download_peer_authorization_policy_every_x_seconds=1000,\n    trustsec_download_sgacl_lists_every_x_seconds=1000,\n    trustsec_other_sga_devices_to_trust_this_device=True,\n    trustsec_re_authentication_every_x_seconds=1000,\n    trustsec_send_configuration_to_device=True,\n    trustsec_send_configuration_to_device_using=\"ENABLE_USING_COA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Network.Device(\"example\", new()\n    {\n        Name = \"Device1\",\n        Description = \"My device\",\n        AuthenticationEnableKeyWrap = true,\n        AuthenticationEncryptionKey = \"cisco123cisco123\",\n        AuthenticationEncryptionKeyFormat = \"ASCII\",\n        AuthenticationMessageAuthenticatorCodeKey = \"cisco123cisco1235678\",\n        AuthenticationNetworkProtocol = \"RADIUS\",\n        AuthenticationRadiusSharedSecret = \"cisco123\",\n        AuthenticationEnableMultiSecret = true,\n        AuthenticationSecondRadiusSharedSecret = \"cisco12345\",\n        AuthenticationDtlsRequired = true,\n        CoaPort = 12345,\n        DtlsDnsName = \"cisco.com\",\n        Ips = new[]\n        {\n            new Ise.Network.Inputs.DeviceIpArgs\n            {\n                Ipaddress = \"2.3.4.5\",\n                Mask = \"32\",\n            },\n        },\n        ModelName = \"Unknown\",\n        SoftwareVersion = \"Unknown\",\n        ProfileName = \"Cisco\",\n        SnmpLinkTrapQuery = true,\n        SnmpMacTrapQuery = true,\n        SnmpPollingInterval = 1200,\n        SnmpRoCommunity = \"rocom\",\n        SnmpVersion = \"TWO_C\",\n        TacacsConnectModeOptions = \"OFF\",\n        TacacsSharedSecret = \"cisco123\",\n        TrustsecDeviceId = \"device123\",\n        TrustsecDevicePassword = \"cisco123\",\n        TrustsecRestApiUsername = \"user123\",\n        TrustsecRestApiPassword = \"Cisco123\",\n        TrustsecEnableModePassword = \"cisco123\",\n        TrustsecExecModePassword = \"cisco123\",\n        TrustsecExecModeUsername = \"user456\",\n        TrustsecIncludeWhenDeployingSgtUpdates = true,\n        TrustsecDownloadEnviromentDataEveryXSeconds = 1000,\n        TrustsecDownloadPeerAuthorizationPolicyEveryXSeconds = 1000,\n        TrustsecDownloadSgaclListsEveryXSeconds = 1000,\n        TrustsecOtherSgaDevicesToTrustThisDevice = true,\n        TrustsecReAuthenticationEveryXSeconds = 1000,\n        TrustsecSendConfigurationToDevice = true,\n        TrustsecSendConfigurationToDeviceUsing = \"ENABLE_USING_COA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewDevice(ctx, \"example\", \u0026Network.DeviceArgs{\n\t\t\tName:                              pulumi.String(\"Device1\"),\n\t\t\tDescription:                       pulumi.String(\"My device\"),\n\t\t\tAuthenticationEnableKeyWrap:       pulumi.Bool(true),\n\t\t\tAuthenticationEncryptionKey:       pulumi.String(\"cisco123cisco123\"),\n\t\t\tAuthenticationEncryptionKeyFormat: pulumi.String(\"ASCII\"),\n\t\t\tAuthenticationMessageAuthenticatorCodeKey: pulumi.String(\"cisco123cisco1235678\"),\n\t\t\tAuthenticationNetworkProtocol:             pulumi.String(\"RADIUS\"),\n\t\t\tAuthenticationRadiusSharedSecret:          pulumi.String(\"cisco123\"),\n\t\t\tAuthenticationEnableMultiSecret:           pulumi.Bool(true),\n\t\t\tAuthenticationSecondRadiusSharedSecret:    pulumi.String(\"cisco12345\"),\n\t\t\tAuthenticationDtlsRequired:                pulumi.Bool(true),\n\t\t\tCoaPort:                                   pulumi.Int(12345),\n\t\t\tDtlsDnsName:                               pulumi.String(\"cisco.com\"),\n\t\t\tIps: network.DeviceIpArray{\n\t\t\t\t\u0026network.DeviceIpArgs{\n\t\t\t\t\tIpaddress: pulumi.String(\"2.3.4.5\"),\n\t\t\t\t\tMask:      pulumi.String(\"32\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tModelName:                                   pulumi.String(\"Unknown\"),\n\t\t\tSoftwareVersion:                             pulumi.String(\"Unknown\"),\n\t\t\tProfileName:                                 pulumi.String(\"Cisco\"),\n\t\t\tSnmpLinkTrapQuery:                           pulumi.Bool(true),\n\t\t\tSnmpMacTrapQuery:                            pulumi.Bool(true),\n\t\t\tSnmpPollingInterval:                         pulumi.Int(1200),\n\t\t\tSnmpRoCommunity:                             pulumi.String(\"rocom\"),\n\t\t\tSnmpVersion:                                 pulumi.String(\"TWO_C\"),\n\t\t\tTacacsConnectModeOptions:                    pulumi.String(\"OFF\"),\n\t\t\tTacacsSharedSecret:                          pulumi.String(\"cisco123\"),\n\t\t\tTrustsecDeviceId:                            pulumi.String(\"device123\"),\n\t\t\tTrustsecDevicePassword:                      pulumi.String(\"cisco123\"),\n\t\t\tTrustsecRestApiUsername:                     pulumi.String(\"user123\"),\n\t\t\tTrustsecRestApiPassword:                     pulumi.String(\"Cisco123\"),\n\t\t\tTrustsecEnableModePassword:                  pulumi.String(\"cisco123\"),\n\t\t\tTrustsecExecModePassword:                    pulumi.String(\"cisco123\"),\n\t\t\tTrustsecExecModeUsername:                    pulumi.String(\"user456\"),\n\t\t\tTrustsecIncludeWhenDeployingSgtUpdates:      pulumi.Bool(true),\n\t\t\tTrustsecDownloadEnviromentDataEveryXSeconds: pulumi.Int(1000),\n\t\t\tTrustsecDownloadPeerAuthorizationPolicyEveryXSeconds: pulumi.Int(1000),\n\t\t\tTrustsecDownloadSgaclListsEveryXSeconds:              pulumi.Int(1000),\n\t\t\tTrustsecOtherSgaDevicesToTrustThisDevice:             pulumi.Bool(true),\n\t\t\tTrustsecReAuthenticationEveryXSeconds:                pulumi.Int(1000),\n\t\t\tTrustsecSendConfigurationToDevice:                    pulumi.Bool(true),\n\t\t\tTrustsecSendConfigurationToDeviceUsing:               pulumi.String(\"ENABLE_USING_COA\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Network.Device;\nimport com.pulumi.ise.Network.DeviceArgs;\nimport com.pulumi.ise.Network.inputs.DeviceIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Device(\"example\", DeviceArgs.builder()        \n            .name(\"Device1\")\n            .description(\"My device\")\n            .authenticationEnableKeyWrap(true)\n            .authenticationEncryptionKey(\"cisco123cisco123\")\n            .authenticationEncryptionKeyFormat(\"ASCII\")\n            .authenticationMessageAuthenticatorCodeKey(\"cisco123cisco1235678\")\n            .authenticationNetworkProtocol(\"RADIUS\")\n            .authenticationRadiusSharedSecret(\"cisco123\")\n            .authenticationEnableMultiSecret(true)\n            .authenticationSecondRadiusSharedSecret(\"cisco12345\")\n            .authenticationDtlsRequired(true)\n            .coaPort(12345)\n            .dtlsDnsName(\"cisco.com\")\n            .ips(DeviceIpArgs.builder()\n                .ipaddress(\"2.3.4.5\")\n                .mask(\"32\")\n                .build())\n            .modelName(\"Unknown\")\n            .softwareVersion(\"Unknown\")\n            .profileName(\"Cisco\")\n            .snmpLinkTrapQuery(true)\n            .snmpMacTrapQuery(true)\n            .snmpPollingInterval(1200)\n            .snmpRoCommunity(\"rocom\")\n            .snmpVersion(\"TWO_C\")\n            .tacacsConnectModeOptions(\"OFF\")\n            .tacacsSharedSecret(\"cisco123\")\n            .trustsecDeviceId(\"device123\")\n            .trustsecDevicePassword(\"cisco123\")\n            .trustsecRestApiUsername(\"user123\")\n            .trustsecRestApiPassword(\"Cisco123\")\n            .trustsecEnableModePassword(\"cisco123\")\n            .trustsecExecModePassword(\"cisco123\")\n            .trustsecExecModeUsername(\"user456\")\n            .trustsecIncludeWhenDeployingSgtUpdates(true)\n            .trustsecDownloadEnviromentDataEveryXSeconds(1000)\n            .trustsecDownloadPeerAuthorizationPolicyEveryXSeconds(1000)\n            .trustsecDownloadSgaclListsEveryXSeconds(1000)\n            .trustsecOtherSgaDevicesToTrustThisDevice(true)\n            .trustsecReAuthenticationEveryXSeconds(1000)\n            .trustsecSendConfigurationToDevice(true)\n            .trustsecSendConfigurationToDeviceUsing(\"ENABLE_USING_COA\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Network:Device\n    properties:\n      name: Device1\n      description: My device\n      authenticationEnableKeyWrap: true\n      authenticationEncryptionKey: cisco123cisco123\n      authenticationEncryptionKeyFormat: ASCII\n      authenticationMessageAuthenticatorCodeKey: cisco123cisco1235678\n      authenticationNetworkProtocol: RADIUS\n      authenticationRadiusSharedSecret: cisco123\n      authenticationEnableMultiSecret: true\n      authenticationSecondRadiusSharedSecret: cisco12345\n      authenticationDtlsRequired: true\n      coaPort: 12345\n      dtlsDnsName: cisco.com\n      ips:\n        - ipaddress: 2.3.4.5\n          mask: '32'\n      modelName: Unknown\n      softwareVersion: Unknown\n      profileName: Cisco\n      snmpLinkTrapQuery: true\n      snmpMacTrapQuery: true\n      snmpPollingInterval: 1200\n      snmpRoCommunity: rocom\n      snmpVersion: TWO_C\n      tacacsConnectModeOptions: OFF\n      tacacsSharedSecret: cisco123\n      trustsecDeviceId: device123\n      trustsecDevicePassword: cisco123\n      trustsecRestApiUsername: user123\n      trustsecRestApiPassword: Cisco123\n      trustsecEnableModePassword: cisco123\n      trustsecExecModePassword: cisco123\n      trustsecExecModeUsername: user456\n      trustsecIncludeWhenDeployingSgtUpdates: true\n      trustsecDownloadEnviromentDataEveryXSeconds: 1000\n      trustsecDownloadPeerAuthorizationPolicyEveryXSeconds: 1000\n      trustsecDownloadSgaclListsEveryXSeconds: 1000\n      trustsecOtherSgaDevicesToTrustThisDevice: true\n      trustsecReAuthenticationEveryXSeconds: 1000\n      trustsecSendConfigurationToDevice: true\n      trustsecSendConfigurationToDeviceUsing: ENABLE_USING_COA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Network/device:Device example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "authenticationDtlsRequired": {
                    "type": "boolean",
                    "description": "Enforce use of DTLS\n"
                },
                "authenticationEnableKeyWrap": {
                    "type": "boolean",
                    "description": "Enable key wrap\n"
                },
                "authenticationEnableMultiSecret": {
                    "type": "boolean",
                    "description": "Enable multiple RADIUS shared secrets\n"
                },
                "authenticationEncryptionKey": {
                    "type": "string",
                    "description": "Encryption key\n"
                },
                "authenticationEncryptionKeyFormat": {
                    "type": "string",
                    "description": "Key input format - Choices: `ASCII`, `HEXADECIMAL`\n"
                },
                "authenticationMessageAuthenticatorCodeKey": {
                    "type": "string",
                    "description": "Message authenticator code key\n"
                },
                "authenticationNetworkProtocol": {
                    "type": "string",
                    "description": "Network protocol - Choices: `RADIUS`, `TACACS_PLUS`\n"
                },
                "authenticationRadiusSharedSecret": {
                    "type": "string",
                    "description": "RADIUS shared secret\n"
                },
                "authenticationSecondRadiusSharedSecret": {
                    "type": "string",
                    "description": "Second RADIUS shared secret\n"
                },
                "coaPort": {
                    "type": "integer",
                    "description": "CoA port - Default value: `1700`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "dtlsDnsName": {
                    "type": "string",
                    "description": "This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Network/DeviceIp:DeviceIp"
                    },
                    "description": "List of IP subnets\n"
                },
                "modelName": {
                    "type": "string",
                    "description": "Model name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network device\n"
                },
                "networkDeviceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of network device groups, e.g. `Device Type#All Device Types#ACCESS`\n"
                },
                "profileName": {
                    "type": "string",
                    "description": "Profile name - Default value: `Cisco`\n"
                },
                "snmpLinkTrapQuery": {
                    "type": "boolean",
                    "description": "SNMP link Trap Query\n"
                },
                "snmpMacTrapQuery": {
                    "type": "boolean",
                    "description": "SNMP MAC Trap Query\n"
                },
                "snmpOriginatingPolicyServiceNode": {
                    "type": "string",
                    "description": "Originating Policy Services Node\n"
                },
                "snmpPollingInterval": {
                    "type": "integer",
                    "description": "SNMP Polling Interval in seconds - Range: `600`-`86400`\n"
                },
                "snmpRoCommunity": {
                    "type": "string",
                    "description": "SNMP RO Community\n"
                },
                "snmpVersion": {
                    "type": "string",
                    "description": "SNMP version - Choices: `ONE`, `TWO_C`, `THREE`\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "Software version\n"
                },
                "tacacsConnectModeOptions": {
                    "type": "string",
                    "description": "Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`\n"
                },
                "tacacsSharedSecret": {
                    "type": "string",
                    "description": "Shared secret\n"
                },
                "trustsecCoaSourceHost": {
                    "type": "string",
                    "description": "CoA source host\n"
                },
                "trustsecDeviceId": {
                    "type": "string",
                    "description": "TrustSec device ID\n"
                },
                "trustsecDevicePassword": {
                    "type": "string",
                    "description": "TrustSec device password\n"
                },
                "trustsecDownloadEnviromentDataEveryXSeconds": {
                    "type": "integer",
                    "description": "Download environment data every X seconds\n"
                },
                "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds": {
                    "type": "integer",
                    "description": "Download peer authorization policy every X seconds\n"
                },
                "trustsecDownloadSgaclListsEveryXSeconds": {
                    "type": "integer",
                    "description": "Download SGACL lists every X seconds\n"
                },
                "trustsecEnableModePassword": {
                    "type": "string",
                    "description": "Enable mode password\n"
                },
                "trustsecExecModePassword": {
                    "type": "string",
                    "description": "EXEC mode password\n"
                },
                "trustsecExecModeUsername": {
                    "type": "string",
                    "description": "EXEC mode username\n"
                },
                "trustsecIncludeWhenDeployingSgtUpdates": {
                    "type": "boolean",
                    "description": "Include this device when deploying Security Group Tag Mapping Updates\n"
                },
                "trustsecOtherSgaDevicesToTrustThisDevice": {
                    "type": "boolean",
                    "description": "Other TrustSec devices to trust this device\n"
                },
                "trustsecReAuthenticationEveryXSeconds": {
                    "type": "integer",
                    "description": "Re-authenticate every X seconds\n"
                },
                "trustsecRestApiPassword": {
                    "type": "string",
                    "description": "REST API password\n"
                },
                "trustsecRestApiUsername": {
                    "type": "string",
                    "description": "REST API username\n"
                },
                "trustsecSendConfigurationToDevice": {
                    "type": "boolean",
                    "description": "Send configuration to device\n"
                },
                "trustsecSendConfigurationToDeviceUsing": {
                    "type": "string",
                    "description": "Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`\n"
                }
            },
            "required": [
                "coaPort",
                "ips",
                "name",
                "profileName"
            ],
            "inputProperties": {
                "authenticationDtlsRequired": {
                    "type": "boolean",
                    "description": "Enforce use of DTLS\n"
                },
                "authenticationEnableKeyWrap": {
                    "type": "boolean",
                    "description": "Enable key wrap\n"
                },
                "authenticationEnableMultiSecret": {
                    "type": "boolean",
                    "description": "Enable multiple RADIUS shared secrets\n"
                },
                "authenticationEncryptionKey": {
                    "type": "string",
                    "description": "Encryption key\n"
                },
                "authenticationEncryptionKeyFormat": {
                    "type": "string",
                    "description": "Key input format - Choices: `ASCII`, `HEXADECIMAL`\n"
                },
                "authenticationMessageAuthenticatorCodeKey": {
                    "type": "string",
                    "description": "Message authenticator code key\n"
                },
                "authenticationNetworkProtocol": {
                    "type": "string",
                    "description": "Network protocol - Choices: `RADIUS`, `TACACS_PLUS`\n"
                },
                "authenticationRadiusSharedSecret": {
                    "type": "string",
                    "description": "RADIUS shared secret\n"
                },
                "authenticationSecondRadiusSharedSecret": {
                    "type": "string",
                    "description": "Second RADIUS shared secret\n"
                },
                "coaPort": {
                    "type": "integer",
                    "description": "CoA port - Default value: `1700`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "dtlsDnsName": {
                    "type": "string",
                    "description": "This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Network/DeviceIp:DeviceIp"
                    },
                    "description": "List of IP subnets\n"
                },
                "modelName": {
                    "type": "string",
                    "description": "Model name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network device\n"
                },
                "networkDeviceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of network device groups, e.g. `Device Type#All Device Types#ACCESS`\n"
                },
                "profileName": {
                    "type": "string",
                    "description": "Profile name - Default value: `Cisco`\n"
                },
                "snmpLinkTrapQuery": {
                    "type": "boolean",
                    "description": "SNMP link Trap Query\n"
                },
                "snmpMacTrapQuery": {
                    "type": "boolean",
                    "description": "SNMP MAC Trap Query\n"
                },
                "snmpOriginatingPolicyServiceNode": {
                    "type": "string",
                    "description": "Originating Policy Services Node\n"
                },
                "snmpPollingInterval": {
                    "type": "integer",
                    "description": "SNMP Polling Interval in seconds - Range: `600`-`86400`\n"
                },
                "snmpRoCommunity": {
                    "type": "string",
                    "description": "SNMP RO Community\n"
                },
                "snmpVersion": {
                    "type": "string",
                    "description": "SNMP version - Choices: `ONE`, `TWO_C`, `THREE`\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "Software version\n"
                },
                "tacacsConnectModeOptions": {
                    "type": "string",
                    "description": "Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`\n"
                },
                "tacacsSharedSecret": {
                    "type": "string",
                    "description": "Shared secret\n"
                },
                "trustsecCoaSourceHost": {
                    "type": "string",
                    "description": "CoA source host\n"
                },
                "trustsecDeviceId": {
                    "type": "string",
                    "description": "TrustSec device ID\n"
                },
                "trustsecDevicePassword": {
                    "type": "string",
                    "description": "TrustSec device password\n"
                },
                "trustsecDownloadEnviromentDataEveryXSeconds": {
                    "type": "integer",
                    "description": "Download environment data every X seconds\n"
                },
                "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds": {
                    "type": "integer",
                    "description": "Download peer authorization policy every X seconds\n"
                },
                "trustsecDownloadSgaclListsEveryXSeconds": {
                    "type": "integer",
                    "description": "Download SGACL lists every X seconds\n"
                },
                "trustsecEnableModePassword": {
                    "type": "string",
                    "description": "Enable mode password\n"
                },
                "trustsecExecModePassword": {
                    "type": "string",
                    "description": "EXEC mode password\n"
                },
                "trustsecExecModeUsername": {
                    "type": "string",
                    "description": "EXEC mode username\n"
                },
                "trustsecIncludeWhenDeployingSgtUpdates": {
                    "type": "boolean",
                    "description": "Include this device when deploying Security Group Tag Mapping Updates\n"
                },
                "trustsecOtherSgaDevicesToTrustThisDevice": {
                    "type": "boolean",
                    "description": "Other TrustSec devices to trust this device\n"
                },
                "trustsecReAuthenticationEveryXSeconds": {
                    "type": "integer",
                    "description": "Re-authenticate every X seconds\n"
                },
                "trustsecRestApiPassword": {
                    "type": "string",
                    "description": "REST API password\n"
                },
                "trustsecRestApiUsername": {
                    "type": "string",
                    "description": "REST API username\n"
                },
                "trustsecSendConfigurationToDevice": {
                    "type": "boolean",
                    "description": "Send configuration to device\n"
                },
                "trustsecSendConfigurationToDeviceUsing": {
                    "type": "string",
                    "description": "Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`\n"
                }
            },
            "requiredInputs": [
                "ips"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "authenticationDtlsRequired": {
                        "type": "boolean",
                        "description": "Enforce use of DTLS\n"
                    },
                    "authenticationEnableKeyWrap": {
                        "type": "boolean",
                        "description": "Enable key wrap\n"
                    },
                    "authenticationEnableMultiSecret": {
                        "type": "boolean",
                        "description": "Enable multiple RADIUS shared secrets\n"
                    },
                    "authenticationEncryptionKey": {
                        "type": "string",
                        "description": "Encryption key\n"
                    },
                    "authenticationEncryptionKeyFormat": {
                        "type": "string",
                        "description": "Key input format - Choices: `ASCII`, `HEXADECIMAL`\n"
                    },
                    "authenticationMessageAuthenticatorCodeKey": {
                        "type": "string",
                        "description": "Message authenticator code key\n"
                    },
                    "authenticationNetworkProtocol": {
                        "type": "string",
                        "description": "Network protocol - Choices: `RADIUS`, `TACACS_PLUS`\n"
                    },
                    "authenticationRadiusSharedSecret": {
                        "type": "string",
                        "description": "RADIUS shared secret\n"
                    },
                    "authenticationSecondRadiusSharedSecret": {
                        "type": "string",
                        "description": "Second RADIUS shared secret\n"
                    },
                    "coaPort": {
                        "type": "integer",
                        "description": "CoA port - Default value: `1700`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "dtlsDnsName": {
                        "type": "string",
                        "description": "This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:Network/DeviceIp:DeviceIp"
                        },
                        "description": "List of IP subnets\n"
                    },
                    "modelName": {
                        "type": "string",
                        "description": "Model name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network device\n"
                    },
                    "networkDeviceGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of network device groups, e.g. `Device Type#All Device Types#ACCESS`\n"
                    },
                    "profileName": {
                        "type": "string",
                        "description": "Profile name - Default value: `Cisco`\n"
                    },
                    "snmpLinkTrapQuery": {
                        "type": "boolean",
                        "description": "SNMP link Trap Query\n"
                    },
                    "snmpMacTrapQuery": {
                        "type": "boolean",
                        "description": "SNMP MAC Trap Query\n"
                    },
                    "snmpOriginatingPolicyServiceNode": {
                        "type": "string",
                        "description": "Originating Policy Services Node\n"
                    },
                    "snmpPollingInterval": {
                        "type": "integer",
                        "description": "SNMP Polling Interval in seconds - Range: `600`-`86400`\n"
                    },
                    "snmpRoCommunity": {
                        "type": "string",
                        "description": "SNMP RO Community\n"
                    },
                    "snmpVersion": {
                        "type": "string",
                        "description": "SNMP version - Choices: `ONE`, `TWO_C`, `THREE`\n"
                    },
                    "softwareVersion": {
                        "type": "string",
                        "description": "Software version\n"
                    },
                    "tacacsConnectModeOptions": {
                        "type": "string",
                        "description": "Connect mode options - Choices: `OFF`, `ON_LEGACY`, `ON_DRAFT_COMPLIANT`\n"
                    },
                    "tacacsSharedSecret": {
                        "type": "string",
                        "description": "Shared secret\n"
                    },
                    "trustsecCoaSourceHost": {
                        "type": "string",
                        "description": "CoA source host\n"
                    },
                    "trustsecDeviceId": {
                        "type": "string",
                        "description": "TrustSec device ID\n"
                    },
                    "trustsecDevicePassword": {
                        "type": "string",
                        "description": "TrustSec device password\n"
                    },
                    "trustsecDownloadEnviromentDataEveryXSeconds": {
                        "type": "integer",
                        "description": "Download environment data every X seconds\n"
                    },
                    "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds": {
                        "type": "integer",
                        "description": "Download peer authorization policy every X seconds\n"
                    },
                    "trustsecDownloadSgaclListsEveryXSeconds": {
                        "type": "integer",
                        "description": "Download SGACL lists every X seconds\n"
                    },
                    "trustsecEnableModePassword": {
                        "type": "string",
                        "description": "Enable mode password\n"
                    },
                    "trustsecExecModePassword": {
                        "type": "string",
                        "description": "EXEC mode password\n"
                    },
                    "trustsecExecModeUsername": {
                        "type": "string",
                        "description": "EXEC mode username\n"
                    },
                    "trustsecIncludeWhenDeployingSgtUpdates": {
                        "type": "boolean",
                        "description": "Include this device when deploying Security Group Tag Mapping Updates\n"
                    },
                    "trustsecOtherSgaDevicesToTrustThisDevice": {
                        "type": "boolean",
                        "description": "Other TrustSec devices to trust this device\n"
                    },
                    "trustsecReAuthenticationEveryXSeconds": {
                        "type": "integer",
                        "description": "Re-authenticate every X seconds\n"
                    },
                    "trustsecRestApiPassword": {
                        "type": "string",
                        "description": "REST API password\n"
                    },
                    "trustsecRestApiUsername": {
                        "type": "string",
                        "description": "REST API username\n"
                    },
                    "trustsecSendConfigurationToDevice": {
                        "type": "boolean",
                        "description": "Send configuration to device\n"
                    },
                    "trustsecSendConfigurationToDeviceUsing": {
                        "type": "string",
                        "description": "Send configuration to device using - Choices: `DISABLE_ALL`, `ENABLE_USING_CLI`, `ENABLE_USING_COA`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccess/condition:Condition": {
            "description": "This resource can manage a Network Access Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccess.Condition(\"example\", {\n    name: \"Cond1\",\n    description: \"My description\",\n    conditionType: \"LibraryConditionAttributes\",\n    isNegate: false,\n    attributeName: \"EapAuthentication\",\n    attributeValue: \"EAP-TLS\",\n    dictionaryName: \"Network Access\",\n    operator: \"equals\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access.Condition(\"example\",\n    name=\"Cond1\",\n    description=\"My description\",\n    condition_type=\"LibraryConditionAttributes\",\n    is_negate=False,\n    attribute_name=\"EapAuthentication\",\n    attribute_value=\"EAP-TLS\",\n    dictionary_name=\"Network Access\",\n    operator=\"equals\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccess.Condition(\"example\", new()\n    {\n        Name = \"Cond1\",\n        Description = \"My description\",\n        ConditionType = \"LibraryConditionAttributes\",\n        IsNegate = false,\n        AttributeName = \"EapAuthentication\",\n        AttributeValue = \"EAP-TLS\",\n        DictionaryName = \"Network Access\",\n        Operator = \"equals\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccess\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccess.NewCondition(ctx, \"example\", \u0026NetworkAccess.ConditionArgs{\n\t\t\tName:           pulumi.String(\"Cond1\"),\n\t\t\tDescription:    pulumi.String(\"My description\"),\n\t\t\tConditionType:  pulumi.String(\"LibraryConditionAttributes\"),\n\t\t\tIsNegate:       pulumi.Bool(false),\n\t\t\tAttributeName:  pulumi.String(\"EapAuthentication\"),\n\t\t\tAttributeValue: pulumi.String(\"EAP-TLS\"),\n\t\t\tDictionaryName: pulumi.String(\"Network Access\"),\n\t\t\tOperator:       pulumi.String(\"equals\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccess.Condition;\nimport com.pulumi.ise.NetworkAccess.ConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Condition(\"example\", ConditionArgs.builder()        \n            .name(\"Cond1\")\n            .description(\"My description\")\n            .conditionType(\"LibraryConditionAttributes\")\n            .isNegate(false)\n            .attributeName(\"EapAuthentication\")\n            .attributeValue(\"EAP-TLS\")\n            .dictionaryName(\"Network Access\")\n            .operator(\"equals\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccess:Condition\n    properties:\n      name: Cond1\n      description: My description\n      conditionType: LibraryConditionAttributes\n      isNegate: false\n      attributeName: EapAuthentication\n      attributeValue: EAP-TLS\n      dictionaryName: Network Access\n      operator: equals\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccess/condition:Condition example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccess/ConditionChildren:ConditionChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "required": [
                "conditionType",
                "name"
            ],
            "inputProperties": {
                "attributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "attributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccess/ConditionChildren:ConditionChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "dictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                }
            },
            "requiredInputs": [
                "conditionType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Condition resources.\n",
                "properties": {
                    "attributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "attributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccess/ConditionChildren:ConditionChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `LibraryConditionAndBlock`,\n`LibraryConditionAttributes`, `LibraryConditionOrBlock`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Condition description\n"
                    },
                    "dictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "dictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "isNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccess/dictionary:Dictionary": {
            "description": "This resource can manage a Network Access Dictionary.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccess.Dictionary(\"example\", {\n    name: \"Dict1\",\n    description: \"My description\",\n    version: \"1.1\",\n    dictionaryAttrType: \"ENTITY_ATTR\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access.Dictionary(\"example\",\n    name=\"Dict1\",\n    description=\"My description\",\n    version=\"1.1\",\n    dictionary_attr_type=\"ENTITY_ATTR\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccess.Dictionary(\"example\", new()\n    {\n        Name = \"Dict1\",\n        Description = \"My description\",\n        Version = \"1.1\",\n        DictionaryAttrType = \"ENTITY_ATTR\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccess\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccess.NewDictionary(ctx, \"example\", \u0026NetworkAccess.DictionaryArgs{\n\t\t\tName:               pulumi.String(\"Dict1\"),\n\t\t\tDescription:        pulumi.String(\"My description\"),\n\t\t\tVersion:            pulumi.String(\"1.1\"),\n\t\t\tDictionaryAttrType: pulumi.String(\"ENTITY_ATTR\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccess.Dictionary;\nimport com.pulumi.ise.NetworkAccess.DictionaryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Dictionary(\"example\", DictionaryArgs.builder()        \n            .name(\"Dict1\")\n            .description(\"My description\")\n            .version(\"1.1\")\n            .dictionaryAttrType(\"ENTITY_ATTR\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccess:Dictionary\n    properties:\n      name: Dict1\n      description: My description\n      version: '1.1'\n      dictionaryAttrType: ENTITY_ATTR\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccess/dictionary:Dictionary example \"Dict1\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the dictionary\n"
                },
                "dictionaryAttrType": {
                    "type": "string",
                    "description": "The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The dictionary name\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the dictionary\n"
                }
            },
            "required": [
                "dictionaryAttrType",
                "name",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the dictionary\n"
                },
                "dictionaryAttrType": {
                    "type": "string",
                    "description": "The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The dictionary name\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the dictionary\n"
                }
            },
            "requiredInputs": [
                "dictionaryAttrType",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dictionary resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the dictionary\n"
                    },
                    "dictionaryAttrType": {
                        "type": "string",
                        "description": "The dictionary attribute type - Choices: `ENTITY_ATTR`, `MSG_ATTR`, `PIP_ATTR`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The dictionary name\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the dictionary\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthentication/rule:Rule": {
            "description": "This resource can manage a Network Access Authentication Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccessauthentication.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    identitySourceName: \"Internal Endpoints\",\n    ifAuthFail: \"REJECT\",\n    ifProcessFail: \"DROP\",\n    ifUserNotFound: \"REJECT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_authentication.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    identity_source_name=\"Internal Endpoints\",\n    if_auth_fail=\"REJECT\",\n    if_process_fail=\"DROP\",\n    if_user_not_found=\"REJECT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessAuthentication.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        IdentitySourceName = \"Internal Endpoints\",\n        IfAuthFail = \"REJECT\",\n        IfProcessFail = \"DROP\",\n        IfUserNotFound = \"REJECT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthentication.NewRule(ctx, \"example\", \u0026NetworkAccessAuthentication.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tIdentitySourceName:      pulumi.String(\"Internal Endpoints\"),\n\t\t\tIfAuthFail:              pulumi.String(\"REJECT\"),\n\t\t\tIfProcessFail:           pulumi.String(\"DROP\"),\n\t\t\tIfUserNotFound:          pulumi.String(\"REJECT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthentication.Rule;\nimport com.pulumi.ise.NetworkAccessAuthentication.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .identitySourceName(\"Internal Endpoints\")\n            .ifAuthFail(\"REJECT\")\n            .ifProcessFail(\"DROP\")\n            .ifUserNotFound(\"REJECT\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessAuthentication:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      identitySourceName: Internal Endpoints\n      ifAuthFail: REJECT\n      ifProcessFail: DROP\n      ifUserNotFound: REJECT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessAuthentication/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthentication/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "identitySourceName": {
                    "type": "string",
                    "description": "Identity source name from the identity stores\n"
                },
                "ifAuthFail": {
                    "type": "string",
                    "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                },
                "ifProcessFail": {
                    "type": "string",
                    "description": "Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "ifUserNotFound": {
                    "type": "string",
                    "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "ifAuthFail",
                "ifProcessFail",
                "ifUserNotFound",
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthentication/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "identitySourceName": {
                    "type": "string",
                    "description": "Identity source name from the identity stores\n"
                },
                "ifAuthFail": {
                    "type": "string",
                    "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                },
                "ifProcessFail": {
                    "type": "string",
                    "description": "Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "ifUserNotFound": {
                    "type": "string",
                    "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "ifAuthFail",
                "ifProcessFail",
                "ifUserNotFound",
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthentication/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "identitySourceName": {
                        "type": "string",
                        "description": "Identity source name from the identity stores\n"
                    },
                    "ifAuthFail": {
                        "type": "string",
                        "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on - Choices: `REJECT`,\n`DROP`, `CONTINUE`\n"
                    },
                    "ifProcessFail": {
                        "type": "string",
                        "description": "Action to perform when ISE is uanble to access the identity database - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                    },
                    "ifUserNotFound": {
                        "type": "string",
                        "description": "Action to perform when user is not found in any of identity stores - Choices: `REJECT`, `DROP`, `CONTINUE`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorization/rule:Rule": {
            "description": "This resource can manage a Network Access Authorization Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccessauthorization.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    profiles: [\"PermitAccess\"],\n    securityGroup: \"BYOD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_authorization.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    profiles=[\"PermitAccess\"],\n    security_group=\"BYOD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessAuthorization.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        Profiles = new[]\n        {\n            \"PermitAccess\",\n        },\n        SecurityGroup = \"BYOD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorization\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorization.NewRule(ctx, \"example\", \u0026NetworkAccessAuthorization.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tProfiles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PermitAccess\"),\n\t\t\t},\n\t\t\tSecurityGroup: pulumi.String(\"BYOD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorization.Rule;\nimport com.pulumi.ise.NetworkAccessAuthorization.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .profiles(\"PermitAccess\")\n            .securityGroup(\"BYOD\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessAuthorization:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      profiles:\n        - PermitAccess\n      securityGroup: BYOD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessAuthorization/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorization/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorization/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorization/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The authorization profile(s)\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "Security group used in authorization policies\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorizationException/rule:Rule": {
            "description": "This resource can manage a Network Access Authorization Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccessauthorizationexception.Rule(\"example\", {\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    profiles: [\"PermitAccess\"],\n    securityGroup: \"BYOD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_authorization_exception.Rule(\"example\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    profiles=[\"PermitAccess\"],\n    security_group=\"BYOD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessAuthorizationException.Rule(\"example\", new()\n    {\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        Profiles = new[]\n        {\n            \"PermitAccess\",\n        },\n        SecurityGroup = \"BYOD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorizationException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorizationException.NewRule(ctx, \"example\", \u0026NetworkAccessAuthorizationException.RuleArgs{\n\t\t\tPolicySetId:             pulumi.String(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\"),\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tProfiles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PermitAccess\"),\n\t\t\t},\n\t\t\tSecurityGroup: pulumi.String(\"BYOD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorizationException.Rule;\nimport com.pulumi.ise.NetworkAccessAuthorizationException.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .profiles(\"PermitAccess\")\n            .securityGroup(\"BYOD\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessAuthorizationException:Rule\n    properties:\n      policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      profiles:\n        - PermitAccess\n      securityGroup: BYOD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessAuthorizationException/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470,76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name",
                "policySetId"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "policySetId": {
                    "type": "string",
                    "description": "Policy set ID\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "requiredInputs": [
                "policySetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorizationException/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The authorization profile(s)\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "Security group used in authorization policies\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorizationGlobalException/rule:Rule": {
            "description": "This resource can manage a Network Access Authorization Global Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccessauthorizationglobalexception.Rule(\"example\", {\n    name: \"Rule1\",\n    \"default\": false,\n    rank: 0,\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n    profiles: [\"PermitAccess\"],\n    securityGroup: \"BYOD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_authorization_global_exception.Rule(\"example\",\n    name=\"Rule1\",\n    default=False,\n    rank=0,\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\",\n    profiles=[\"PermitAccess\"],\n    security_group=\"BYOD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessAuthorizationGlobalException.Rule(\"example\", new()\n    {\n        Name = \"Rule1\",\n        Default = false,\n        Rank = 0,\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n        Profiles = new[]\n        {\n            \"PermitAccess\",\n        },\n        SecurityGroup = \"BYOD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorizationGlobalException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorizationGlobalException.NewRule(ctx, \"example\", \u0026NetworkAccessAuthorizationGlobalException.RuleArgs{\n\t\t\tName:                    pulumi.String(\"Rule1\"),\n\t\t\tDefault:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t\tProfiles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PermitAccess\"),\n\t\t\t},\n\t\t\tSecurityGroup: pulumi.String(\"BYOD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorizationGlobalException.Rule;\nimport com.pulumi.ise.NetworkAccessAuthorizationGlobalException.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Rule(\"example\", RuleArgs.builder()        \n            .name(\"Rule1\")\n            .default_(false)\n            .rank(0)\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .profiles(\"PermitAccess\")\n            .securityGroup(\"BYOD\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessAuthorizationGlobalException:Rule\n    properties:\n      name: Rule1\n      default: false\n      rank: 0\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n      profiles:\n        - PermitAccess\n      securityGroup: BYOD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessAuthorizationGlobalException/rule:Rule example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/RuleChildren:RuleChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this rule is the default one\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The authorization profile(s)\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group used in authorization policies\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/RuleChildren:RuleChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this rule is the default one\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The authorization profile(s)\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "Security group used in authorization policies\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the rule is in. A disabled rule cannot be matched. - Choices: `disabled`, `enabled`, `monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessPolicy/set:Set": {
            "description": "This resource can manage a Network Access Policy Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccesspolicy.Set(\"example\", {\n    name: \"PolicySet1\",\n    description: \"My description\",\n    isProxy: false,\n    rank: 0,\n    serviceName: \"Default Network Access\",\n    state: \"enabled\",\n    conditionType: \"ConditionAttributes\",\n    conditionIsNegate: false,\n    conditionAttributeName: \"Location\",\n    conditionAttributeValue: \"All Locations\",\n    conditionDictionaryName: \"DEVICE\",\n    conditionOperator: \"equals\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_policy.Set(\"example\",\n    name=\"PolicySet1\",\n    description=\"My description\",\n    is_proxy=False,\n    rank=0,\n    service_name=\"Default Network Access\",\n    state=\"enabled\",\n    condition_type=\"ConditionAttributes\",\n    condition_is_negate=False,\n    condition_attribute_name=\"Location\",\n    condition_attribute_value=\"All Locations\",\n    condition_dictionary_name=\"DEVICE\",\n    condition_operator=\"equals\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessPolicy.Set(\"example\", new()\n    {\n        Name = \"PolicySet1\",\n        Description = \"My description\",\n        IsProxy = false,\n        Rank = 0,\n        ServiceName = \"Default Network Access\",\n        State = \"enabled\",\n        ConditionType = \"ConditionAttributes\",\n        ConditionIsNegate = false,\n        ConditionAttributeName = \"Location\",\n        ConditionAttributeValue = \"All Locations\",\n        ConditionDictionaryName = \"DEVICE\",\n        ConditionOperator = \"equals\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessPolicy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessPolicy.NewSet(ctx, \"example\", \u0026NetworkAccessPolicy.SetArgs{\n\t\t\tName:                    pulumi.String(\"PolicySet1\"),\n\t\t\tDescription:             pulumi.String(\"My description\"),\n\t\t\tIsProxy:                 pulumi.Bool(false),\n\t\t\tRank:                    pulumi.Int(0),\n\t\t\tServiceName:             pulumi.String(\"Default Network Access\"),\n\t\t\tState:                   pulumi.String(\"enabled\"),\n\t\t\tConditionType:           pulumi.String(\"ConditionAttributes\"),\n\t\t\tConditionIsNegate:       pulumi.Bool(false),\n\t\t\tConditionAttributeName:  pulumi.String(\"Location\"),\n\t\t\tConditionAttributeValue: pulumi.String(\"All Locations\"),\n\t\t\tConditionDictionaryName: pulumi.String(\"DEVICE\"),\n\t\t\tConditionOperator:       pulumi.String(\"equals\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessPolicy.Set;\nimport com.pulumi.ise.NetworkAccessPolicy.SetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Set(\"example\", SetArgs.builder()        \n            .name(\"PolicySet1\")\n            .description(\"My description\")\n            .isProxy(false)\n            .rank(0)\n            .serviceName(\"Default Network Access\")\n            .state(\"enabled\")\n            .conditionType(\"ConditionAttributes\")\n            .conditionIsNegate(false)\n            .conditionAttributeName(\"Location\")\n            .conditionAttributeValue(\"All Locations\")\n            .conditionDictionaryName(\"DEVICE\")\n            .conditionOperator(\"equals\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessPolicy:Set\n    properties:\n      name: PolicySet1\n      description: My description\n      isProxy: false\n      rank: 0\n      serviceName: Default Network Access\n      state: enabled\n      conditionType: ConditionAttributes\n      conditionIsNegate: false\n      conditionAttributeName: Location\n      conditionAttributeValue: All Locations\n      conditionDictionaryName: DEVICE\n      conditionOperator: equals\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessPolicy/set:Set example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessPolicy/SetChildren:SetChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this policy set is the default one\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy set\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                }
            },
            "required": [
                "description",
                "name",
                "rank",
                "serviceName"
            ],
            "inputProperties": {
                "childrens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:NetworkAccessPolicy/SetChildren:SetChildren"
                    },
                    "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                },
                "conditionAttributeName": {
                    "type": "string",
                    "description": "Dictionary attribute name\n"
                },
                "conditionAttributeValue": {
                    "type": "string",
                    "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                },
                "conditionDictionaryName": {
                    "type": "string",
                    "description": "Dictionary name\n"
                },
                "conditionDictionaryValue": {
                    "type": "string",
                    "description": "Dictionary value\n"
                },
                "conditionId": {
                    "type": "string",
                    "description": "UUID for condition\n"
                },
                "conditionIsNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "conditionOperator": {
                    "type": "string",
                    "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Indicates if this policy set is the default one\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy set\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                },
                "name": {
                    "type": "string",
                    "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                }
            },
            "requiredInputs": [
                "serviceName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Set resources.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessPolicy/SetChildren:SetChildren"
                        },
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n"
                    },
                    "conditionAttributeName": {
                        "type": "string",
                        "description": "Dictionary attribute name\n"
                    },
                    "conditionAttributeValue": {
                        "type": "string",
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n"
                    },
                    "conditionDictionaryName": {
                        "type": "string",
                        "description": "Dictionary name\n"
                    },
                    "conditionDictionaryValue": {
                        "type": "string",
                        "description": "Dictionary value\n"
                    },
                    "conditionId": {
                        "type": "string",
                        "description": "UUID for condition\n"
                    },
                    "conditionIsNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "conditionOperator": {
                        "type": "string",
                        "description": "Equality operator - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`,\n`ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`,\n`notEquals`, `notIn`, `notStartsWith`, `startsWith`\n"
                    },
                    "conditionType": {
                        "type": "string",
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that\nadditional conditions are present under the children attribute. - Choices: `ConditionAndBlock`, `ConditionAttributes`,\n`ConditionOrBlock`, `ConditionReference`\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates if this policy set is the default one\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy set\n"
                    },
                    "isProxy": {
                        "type": "boolean",
                        "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state that the policy set is in. A disabled policy set cannot be matched. - Choices: `disabled`, `enabled`,\n`monitor`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkAccessTimeAndDate/condition:Condition": {
            "description": "This resource can manage a Network Access Time And Date Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkaccesstimeanddate.Condition(\"example\", {\n    name: \"Cond1\",\n    description: \"My description\",\n    isNegate: false,\n    weekDays: [\"Monday\"],\n    weekDaysExceptions: [\"Tuesday\"],\n    startDate: \"2022-05-06\",\n    endDate: \"2022-05-10\",\n    exceptionStartDate: \"2022-06-06\",\n    exceptionEndDate: \"2022-06-10\",\n    startTime: \"08:00\",\n    endTime: \"15:00\",\n    exceptionStartTime: \"20:00\",\n    exceptionEndTime: \"22:00\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_access_time_and_date.Condition(\"example\",\n    name=\"Cond1\",\n    description=\"My description\",\n    is_negate=False,\n    week_days=[\"Monday\"],\n    week_days_exceptions=[\"Tuesday\"],\n    start_date=\"2022-05-06\",\n    end_date=\"2022-05-10\",\n    exception_start_date=\"2022-06-06\",\n    exception_end_date=\"2022-06-10\",\n    start_time=\"08:00\",\n    end_time=\"15:00\",\n    exception_start_time=\"20:00\",\n    exception_end_time=\"22:00\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkAccessTimeAndDate.Condition(\"example\", new()\n    {\n        Name = \"Cond1\",\n        Description = \"My description\",\n        IsNegate = false,\n        WeekDays = new[]\n        {\n            \"Monday\",\n        },\n        WeekDaysExceptions = new[]\n        {\n            \"Tuesday\",\n        },\n        StartDate = \"2022-05-06\",\n        EndDate = \"2022-05-10\",\n        ExceptionStartDate = \"2022-06-06\",\n        ExceptionEndDate = \"2022-06-10\",\n        StartTime = \"08:00\",\n        EndTime = \"15:00\",\n        ExceptionStartTime = \"20:00\",\n        ExceptionEndTime = \"22:00\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessTimeAndDate\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessTimeAndDate.NewCondition(ctx, \"example\", \u0026NetworkAccessTimeAndDate.ConditionArgs{\n\t\t\tName:        pulumi.String(\"Cond1\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tIsNegate:    pulumi.Bool(false),\n\t\t\tWeekDays: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Monday\"),\n\t\t\t},\n\t\t\tWeekDaysExceptions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Tuesday\"),\n\t\t\t},\n\t\t\tStartDate:          pulumi.String(\"2022-05-06\"),\n\t\t\tEndDate:            pulumi.String(\"2022-05-10\"),\n\t\t\tExceptionStartDate: pulumi.String(\"2022-06-06\"),\n\t\t\tExceptionEndDate:   pulumi.String(\"2022-06-10\"),\n\t\t\tStartTime:          pulumi.String(\"08:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:00\"),\n\t\t\tExceptionStartTime: pulumi.String(\"20:00\"),\n\t\t\tExceptionEndTime:   pulumi.String(\"22:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessTimeAndDate.Condition;\nimport com.pulumi.ise.NetworkAccessTimeAndDate.ConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Condition(\"example\", ConditionArgs.builder()        \n            .name(\"Cond1\")\n            .description(\"My description\")\n            .isNegate(false)\n            .weekDays(\"Monday\")\n            .weekDaysExceptions(\"Tuesday\")\n            .startDate(\"2022-05-06\")\n            .endDate(\"2022-05-10\")\n            .exceptionStartDate(\"2022-06-06\")\n            .exceptionEndDate(\"2022-06-10\")\n            .startTime(\"08:00\")\n            .endTime(\"15:00\")\n            .exceptionStartTime(\"20:00\")\n            .exceptionEndTime(\"22:00\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkAccessTimeAndDate:Condition\n    properties:\n      name: Cond1\n      description: My description\n      isNegate: false\n      weekDays:\n        - Monday\n      weekDaysExceptions:\n        - Tuesday\n      startDate: 2022-05-06\n      endDate: 2022-05-10\n      exceptionStartDate: 2022-06-06\n      exceptionEndDate: 2022-06-10\n      startTime: 08:00\n      endTime: 15:00\n      exceptionStartTime: 20:00\n      exceptionEndTime: 22:00\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkAccessTimeAndDate/condition:Condition example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time\n"
                },
                "exceptionEndDate": {
                    "type": "string",
                    "description": "Exception end date\n"
                },
                "exceptionEndTime": {
                    "type": "string",
                    "description": "Exception end time\n"
                },
                "exceptionStartDate": {
                    "type": "string",
                    "description": "Exception start date\n"
                },
                "exceptionStartTime": {
                    "type": "string",
                    "description": "Exception start time\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                },
                "weekDaysExceptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Condition description\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "End date\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time\n"
                },
                "exceptionEndDate": {
                    "type": "string",
                    "description": "Exception end date\n"
                },
                "exceptionEndTime": {
                    "type": "string",
                    "description": "Exception end time\n"
                },
                "exceptionStartDate": {
                    "type": "string",
                    "description": "Exception start date\n"
                },
                "exceptionStartTime": {
                    "type": "string",
                    "description": "Exception start time\n"
                },
                "isNegate": {
                    "type": "boolean",
                    "description": "Indicates whereas this condition is in negate mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "Condition name\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                },
                "weekDaysExceptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Condition resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Condition description\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "End time\n"
                    },
                    "exceptionEndDate": {
                        "type": "string",
                        "description": "Exception end date\n"
                    },
                    "exceptionEndTime": {
                        "type": "string",
                        "description": "Exception end time\n"
                    },
                    "exceptionStartDate": {
                        "type": "string",
                        "description": "Exception start date\n"
                    },
                    "exceptionStartTime": {
                        "type": "string",
                        "description": "Exception start time\n"
                    },
                    "isNegate": {
                        "type": "boolean",
                        "description": "Indicates whereas this condition is in negate mode\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time\n"
                    },
                    "weekDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n"
                    },
                    "weekDaysExceptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:NetworkDevice/group:Group": {
            "description": "This resource can manage a Network Device Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.networkdevice.Group(\"example\", {\n    name: \"Device Type#All Device Types#Group1\",\n    description: \"My network device group\",\n    rootGroup: \"Device Type\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.network_device.Group(\"example\",\n    name=\"Device Type#All Device Types#Group1\",\n    description=\"My network device group\",\n    root_group=\"Device Type\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.NetworkDevice.Group(\"example\", new()\n    {\n        Name = \"Device Type#All Device Types#Group1\",\n        Description = \"My network device group\",\n        RootGroup = \"Device Type\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkDevice\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkDevice.NewGroup(ctx, \"example\", \u0026NetworkDevice.GroupArgs{\n\t\t\tName:        pulumi.String(\"Device Type#All Device Types#Group1\"),\n\t\t\tDescription: pulumi.String(\"My network device group\"),\n\t\t\tRootGroup:   pulumi.String(\"Device Type\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkDevice.Group;\nimport com.pulumi.ise.NetworkDevice.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .name(\"Device Type#All Device Types#Group1\")\n            .description(\"My network device group\")\n            .rootGroup(\"Device Type\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:NetworkDevice:Group\n    properties:\n      name: Device Type#All Device Types#Group1\n      description: My network device group\n      rootGroup: Device Type\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:NetworkDevice/group:Group example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.\n"
                },
                "rootGroup": {
                    "type": "string",
                    "description": "The name of the root device group.\n"
                }
            },
            "required": [
                "name",
                "rootGroup"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.\n"
                },
                "rootGroup": {
                    "type": "string",
                    "description": "The name of the root device group.\n"
                }
            },
            "requiredInputs": [
                "rootGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.\n"
                    },
                    "rootGroup": {
                        "type": "string",
                        "description": "The name of the root device group.\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:Tacacs/profile:Profile": {
            "description": "This resource can manage a TACACS Profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.tacacs.Profile(\"example\", {\n    name: \"Profile1\",\n    description: \"My TACACS profile\",\n    sessionAttributes: [{\n        type: \"MANDATORY\",\n        name: \"attr1\",\n        value: \"value\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.tacacs.Profile(\"example\",\n    name=\"Profile1\",\n    description=\"My TACACS profile\",\n    session_attributes=[ise.tacacs.ProfileSessionAttributeArgs(\n        type=\"MANDATORY\",\n        name=\"attr1\",\n        value=\"value\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Tacacs.Profile(\"example\", new()\n    {\n        Name = \"Profile1\",\n        Description = \"My TACACS profile\",\n        SessionAttributes = new[]\n        {\n            new Ise.Tacacs.Inputs.ProfileSessionAttributeArgs\n            {\n                Type = \"MANDATORY\",\n                Name = \"attr1\",\n                Value = \"value\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Tacacs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tacacs.NewProfile(ctx, \"example\", \u0026Tacacs.ProfileArgs{\n\t\t\tName:        pulumi.String(\"Profile1\"),\n\t\t\tDescription: pulumi.String(\"My TACACS profile\"),\n\t\t\tSessionAttributes: tacacs.ProfileSessionAttributeArray{\n\t\t\t\t\u0026tacacs.ProfileSessionAttributeArgs{\n\t\t\t\t\tType:  pulumi.String(\"MANDATORY\"),\n\t\t\t\t\tName:  pulumi.String(\"attr1\"),\n\t\t\t\t\tValue: pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Tacacs.Profile;\nimport com.pulumi.ise.Tacacs.ProfileArgs;\nimport com.pulumi.ise.Tacacs.inputs.ProfileSessionAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Profile(\"example\", ProfileArgs.builder()        \n            .name(\"Profile1\")\n            .description(\"My TACACS profile\")\n            .sessionAttributes(ProfileSessionAttributeArgs.builder()\n                .type(\"MANDATORY\")\n                .name(\"attr1\")\n                .value(\"value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Tacacs:Profile\n    properties:\n      name: Profile1\n      description: My TACACS profile\n      sessionAttributes:\n        - type: MANDATORY\n          name: attr1\n          value: value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:Tacacs/profile:Profile example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TACACS profile\n"
                },
                "sessionAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Tacacs/ProfileSessionAttribute:ProfileSessionAttribute"
                    }
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TACACS profile\n"
                },
                "sessionAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:Tacacs/ProfileSessionAttribute:ProfileSessionAttribute"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the TACACS profile\n"
                    },
                    "sessionAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:Tacacs/ProfileSessionAttribute:ProfileSessionAttribute"
                        }
                    }
                },
                "type": "object"
            }
        },
        "ise:TacacsCommand/set:Set": {
            "description": "This resource can manage a TACACS Command Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.tacacscommand.Set(\"example\", {\n    name: \"CommandSet1\",\n    description: \"My TACACS command set\",\n    permitUnmatched: true,\n    commands: [{\n        grant: \"PERMIT\",\n        command: \"show\",\n        arguments: \"\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.tacacs_command.Set(\"example\",\n    name=\"CommandSet1\",\n    description=\"My TACACS command set\",\n    permit_unmatched=True,\n    commands=[ise.tacacs_command.SetCommandArgs(\n        grant=\"PERMIT\",\n        command=\"show\",\n        arguments=\"\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TacacsCommand.Set(\"example\", new()\n    {\n        Name = \"CommandSet1\",\n        Description = \"My TACACS command set\",\n        PermitUnmatched = true,\n        Commands = new[]\n        {\n            new Ise.TacacsCommand.Inputs.SetCommandArgs\n            {\n                Grant = \"PERMIT\",\n                Command = \"show\",\n                Arguments = \"\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TacacsCommand\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TacacsCommand.NewSet(ctx, \"example\", \u0026TacacsCommand.SetArgs{\n\t\t\tName:            pulumi.String(\"CommandSet1\"),\n\t\t\tDescription:     pulumi.String(\"My TACACS command set\"),\n\t\t\tPermitUnmatched: pulumi.Bool(true),\n\t\t\tCommands: tacacscommand.SetCommandArray{\n\t\t\t\t\u0026tacacscommand.SetCommandArgs{\n\t\t\t\t\tGrant:     pulumi.String(\"PERMIT\"),\n\t\t\t\t\tCommand:   pulumi.String(\"show\"),\n\t\t\t\t\tArguments: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TacacsCommand.Set;\nimport com.pulumi.ise.TacacsCommand.SetArgs;\nimport com.pulumi.ise.TacacsCommand.inputs.SetCommandArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Set(\"example\", SetArgs.builder()        \n            .name(\"CommandSet1\")\n            .description(\"My TACACS command set\")\n            .permitUnmatched(true)\n            .commands(SetCommandArgs.builder()\n                .grant(\"PERMIT\")\n                .command(\"show\")\n                .arguments(\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TacacsCommand:Set\n    properties:\n      name: CommandSet1\n      description: My TACACS command set\n      permitUnmatched: true\n      commands:\n        - grant: PERMIT\n          command: show\n          arguments:\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TacacsCommand/set:Set example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:TacacsCommand/SetCommand:SetCommand"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TACACS command set\n"
                },
                "permitUnmatched": {
                    "type": "boolean",
                    "description": "Permit unmatched commands - Default value: `false`\n"
                }
            },
            "required": [
                "name",
                "permitUnmatched"
            ],
            "inputProperties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ise:TacacsCommand/SetCommand:SetCommand"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TACACS command set\n"
                },
                "permitUnmatched": {
                    "type": "boolean",
                    "description": "Permit unmatched commands - Default value: `false`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Set resources.\n",
                "properties": {
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ise:TacacsCommand/SetCommand:SetCommand"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the TACACS command set\n"
                    },
                    "permitUnmatched": {
                        "type": "boolean",
                        "description": "Permit unmatched commands - Default value: `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:TrustsecEgressMatrix/cell:Cell": {
            "description": "This resource can manage a TrustSec Egress Matrix Cell.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.trustsecegressmatrix.Cell(\"example\", {\n    description: \"EgressMatrixCell Description\",\n    defaultRule: \"NONE\",\n    matrixCellStatus: \"ENABLED\",\n    sgacls: [\"26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\"],\n    sourceSgtId: \"93c66ed0-8c01-11e6-996c-525400b48521\",\n    destinationSgtId: \"93e1bf00-8c01-11e6-996c-525400b48521\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.trustsec_egress_matrix.Cell(\"example\",\n    description=\"EgressMatrixCell Description\",\n    default_rule=\"NONE\",\n    matrix_cell_status=\"ENABLED\",\n    sgacls=[\"26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\"],\n    source_sgt_id=\"93c66ed0-8c01-11e6-996c-525400b48521\",\n    destination_sgt_id=\"93e1bf00-8c01-11e6-996c-525400b48521\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TrustsecEgressMatrix.Cell(\"example\", new()\n    {\n        Description = \"EgressMatrixCell Description\",\n        DefaultRule = \"NONE\",\n        MatrixCellStatus = \"ENABLED\",\n        Sgacls = new[]\n        {\n            \"26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\",\n        },\n        SourceSgtId = \"93c66ed0-8c01-11e6-996c-525400b48521\",\n        DestinationSgtId = \"93e1bf00-8c01-11e6-996c-525400b48521\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecEgressMatrix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecEgressMatrix.NewCell(ctx, \"example\", \u0026TrustsecEgressMatrix.CellArgs{\n\t\t\tDescription:      pulumi.String(\"EgressMatrixCell Description\"),\n\t\t\tDefaultRule:      pulumi.String(\"NONE\"),\n\t\t\tMatrixCellStatus: pulumi.String(\"ENABLED\"),\n\t\t\tSgacls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\"),\n\t\t\t},\n\t\t\tSourceSgtId:      pulumi.String(\"93c66ed0-8c01-11e6-996c-525400b48521\"),\n\t\t\tDestinationSgtId: pulumi.String(\"93e1bf00-8c01-11e6-996c-525400b48521\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecEgressMatrix.Cell;\nimport com.pulumi.ise.TrustsecEgressMatrix.CellArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Cell(\"example\", CellArgs.builder()        \n            .description(\"EgressMatrixCell Description\")\n            .defaultRule(\"NONE\")\n            .matrixCellStatus(\"ENABLED\")\n            .sgacls(\"26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\")\n            .sourceSgtId(\"93c66ed0-8c01-11e6-996c-525400b48521\")\n            .destinationSgtId(\"93e1bf00-8c01-11e6-996c-525400b48521\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TrustsecEgressMatrix:Cell\n    properties:\n      description: EgressMatrixCell Description\n      defaultRule: NONE\n      matrixCellStatus: ENABLED\n      sgacls:\n        - 26b76b10-66e6-11ee-9cc1-9eb2a3ecc82a, 9d64dcd0-6384-11ee-9cc1-9eb2a3ecc82a\n      sourceSgtId: 93c66ed0-8c01-11e6-996c-525400b48521\n      destinationSgtId: 93e1bf00-8c01-11e6-996c-525400b48521\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TrustsecEgressMatrix/cell:Cell example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "defaultRule": {
                    "type": "string",
                    "description": "Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "destinationSgtId": {
                    "type": "string",
                    "description": "Destination Trustsec Security Group ID\n"
                },
                "matrixCellStatus": {
                    "type": "string",
                    "description": "Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`\n"
                },
                "sgacls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TrustSec Security Groups ACLs\n"
                },
                "sourceSgtId": {
                    "type": "string",
                    "description": "Source Trustsec Security Group ID\n"
                }
            },
            "required": [
                "defaultRule",
                "destinationSgtId",
                "matrixCellStatus",
                "sourceSgtId"
            ],
            "inputProperties": {
                "defaultRule": {
                    "type": "string",
                    "description": "Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "destinationSgtId": {
                    "type": "string",
                    "description": "Destination Trustsec Security Group ID\n"
                },
                "matrixCellStatus": {
                    "type": "string",
                    "description": "Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`\n"
                },
                "sgacls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TrustSec Security Groups ACLs\n"
                },
                "sourceSgtId": {
                    "type": "string",
                    "description": "Source Trustsec Security Group ID\n"
                }
            },
            "requiredInputs": [
                "destinationSgtId",
                "sourceSgtId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cell resources.\n",
                "properties": {
                    "defaultRule": {
                        "type": "string",
                        "description": "Can be used only if sgacls not specified. - Choices: `NONE`, `DENY_IP`, `PERMIT_IP` - Default value: `NONE`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "destinationSgtId": {
                        "type": "string",
                        "description": "Destination Trustsec Security Group ID\n"
                    },
                    "matrixCellStatus": {
                        "type": "string",
                        "description": "Matrix Cell Status - Choices: `DISABLED`, `ENABLED`, `MONITOR` - Default value: `DISABLED`\n"
                    },
                    "sgacls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of TrustSec Security Groups ACLs\n"
                    },
                    "sourceSgtId": {
                        "type": "string",
                        "description": "Source Trustsec Security Group ID\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:TrustsecIpToSgt/mapping:Mapping": {
            "description": "This resource can manage a TrustSec IP to SGT Mapping.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.trustseciptosgt.Mapping(\"example\", {\n    name: \"10.0.0.1/32\",\n    deployType: \"ALL\",\n    hostIp: \"10.0.0.1/32\",\n    sgt: \"93e1bf00-8c01-11e6-996c-525400b48521\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.trustsec_ip_to_sgt.Mapping(\"example\",\n    name=\"10.0.0.1/32\",\n    deploy_type=\"ALL\",\n    host_ip=\"10.0.0.1/32\",\n    sgt=\"93e1bf00-8c01-11e6-996c-525400b48521\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TrustsecIpToSgt.Mapping(\"example\", new()\n    {\n        Name = \"10.0.0.1/32\",\n        DeployType = \"ALL\",\n        HostIp = \"10.0.0.1/32\",\n        Sgt = \"93e1bf00-8c01-11e6-996c-525400b48521\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecIpToSgt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecIpToSgt.NewMapping(ctx, \"example\", \u0026TrustsecIpToSgt.MappingArgs{\n\t\t\tName:       pulumi.String(\"10.0.0.1/32\"),\n\t\t\tDeployType: pulumi.String(\"ALL\"),\n\t\t\tHostIp:     pulumi.String(\"10.0.0.1/32\"),\n\t\t\tSgt:        pulumi.String(\"93e1bf00-8c01-11e6-996c-525400b48521\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecIpToSgt.Mapping;\nimport com.pulumi.ise.TrustsecIpToSgt.MappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Mapping(\"example\", MappingArgs.builder()        \n            .name(\"10.0.0.1/32\")\n            .deployType(\"ALL\")\n            .hostIp(\"10.0.0.1/32\")\n            .sgt(\"93e1bf00-8c01-11e6-996c-525400b48521\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TrustsecIpToSgt:Mapping\n    properties:\n      name: 10.0.0.1/32\n      deployType: ALL\n      hostIp: 10.0.0.1/32\n      sgt: 93e1bf00-8c01-11e6-996c-525400b48521\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TrustsecIpToSgt/mapping:Mapping example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "deployTo": {
                    "type": "string",
                    "description": "Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`\n"
                },
                "deployType": {
                    "type": "string",
                    "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "Mandatory if `host_name` is empty\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Mandatory if `host_ip` is empty\n"
                },
                "mappingGroup": {
                    "type": "string",
                    "description": "IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP to SGT mapping\n"
                },
                "sgt": {
                    "type": "string",
                    "description": "Trustsec Security Group ID. Mandatory unless `mapping_group` is set\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "deployTo": {
                    "type": "string",
                    "description": "Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`\n"
                },
                "deployType": {
                    "type": "string",
                    "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "hostIp": {
                    "type": "string",
                    "description": "Mandatory if `host_name` is empty\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Mandatory if `host_ip` is empty\n"
                },
                "mappingGroup": {
                    "type": "string",
                    "description": "IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP to SGT mapping\n"
                },
                "sgt": {
                    "type": "string",
                    "description": "Trustsec Security Group ID. Mandatory unless `mapping_group` is set\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mapping resources.\n",
                "properties": {
                    "deployTo": {
                        "type": "string",
                        "description": "Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`\n"
                    },
                    "deployType": {
                        "type": "string",
                        "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "hostIp": {
                        "type": "string",
                        "description": "Mandatory if `host_name` is empty\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Mandatory if `host_ip` is empty\n"
                    },
                    "mappingGroup": {
                        "type": "string",
                        "description": "IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP to SGT mapping\n"
                    },
                    "sgt": {
                        "type": "string",
                        "description": "Trustsec Security Group ID. Mandatory unless `mapping_group` is set\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:TrustsecIpToSgtMapping/group:Group": {
            "description": "This resource can manage a TrustSec IP to SGT Mapping Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.trustseciptosgtmapping.Group(\"example\", {\n    name: \"groupA\",\n    deployType: \"ALL\",\n    sgt: \"93e1bf00-8c01-11e6-996c-525400b48521\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.trustsec_ip_to_sgt_mapping.Group(\"example\",\n    name=\"groupA\",\n    deploy_type=\"ALL\",\n    sgt=\"93e1bf00-8c01-11e6-996c-525400b48521\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TrustsecIpToSgtMapping.Group(\"example\", new()\n    {\n        Name = \"groupA\",\n        DeployType = \"ALL\",\n        Sgt = \"93e1bf00-8c01-11e6-996c-525400b48521\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecIpToSgtMapping\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecIpToSgtMapping.NewGroup(ctx, \"example\", \u0026TrustsecIpToSgtMapping.GroupArgs{\n\t\t\tName:       pulumi.String(\"groupA\"),\n\t\t\tDeployType: pulumi.String(\"ALL\"),\n\t\t\tSgt:        pulumi.String(\"93e1bf00-8c01-11e6-996c-525400b48521\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecIpToSgtMapping.Group;\nimport com.pulumi.ise.TrustsecIpToSgtMapping.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .name(\"groupA\")\n            .deployType(\"ALL\")\n            .sgt(\"93e1bf00-8c01-11e6-996c-525400b48521\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TrustsecIpToSgtMapping:Group\n    properties:\n      name: groupA\n      deployType: ALL\n      sgt: 93e1bf00-8c01-11e6-996c-525400b48521\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TrustsecIpToSgtMapping/group:Group example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "deployTo": {
                    "type": "string",
                    "description": "Mandatory unless `deploy_type` is `ALL`\n"
                },
                "deployType": {
                    "type": "string",
                    "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP to SGT mapping Group\n"
                },
                "sgt": {
                    "type": "string",
                    "description": "Trustsec Security Group ID\n"
                }
            },
            "required": [
                "deployType",
                "name",
                "sgt"
            ],
            "inputProperties": {
                "deployTo": {
                    "type": "string",
                    "description": "Mandatory unless `deploy_type` is `ALL`\n"
                },
                "deployType": {
                    "type": "string",
                    "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP to SGT mapping Group\n"
                },
                "sgt": {
                    "type": "string",
                    "description": "Trustsec Security Group ID\n"
                }
            },
            "requiredInputs": [
                "deployType",
                "sgt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "deployTo": {
                        "type": "string",
                        "description": "Mandatory unless `deploy_type` is `ALL`\n"
                    },
                    "deployType": {
                        "type": "string",
                        "description": "Deploy Type - Choices: `ALL`, `ND`, `NDG`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP to SGT mapping Group\n"
                    },
                    "sgt": {
                        "type": "string",
                        "description": "Trustsec Security Group ID\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:TrustsecSecurity/group:Group": {
            "description": "This resource can manage a TrustSec Security Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.trustsecsecurity.Group(\"example\", {\n    name: \"SGT1234\",\n    description: \"My SGT\",\n    value: 1234,\n    propogateToApic: true,\n    isReadOnly: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.trustsec_security.Group(\"example\",\n    name=\"SGT1234\",\n    description=\"My SGT\",\n    value=1234,\n    propogate_to_apic=True,\n    is_read_only=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TrustsecSecurity.Group(\"example\", new()\n    {\n        Name = \"SGT1234\",\n        Description = \"My SGT\",\n        Value = 1234,\n        PropogateToApic = true,\n        IsReadOnly = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecSecurity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecSecurity.NewGroup(ctx, \"example\", \u0026TrustsecSecurity.GroupArgs{\n\t\t\tName:            pulumi.String(\"SGT1234\"),\n\t\t\tDescription:     pulumi.String(\"My SGT\"),\n\t\t\tValue:           pulumi.Int(1234),\n\t\t\tPropogateToApic: pulumi.Bool(true),\n\t\t\tIsReadOnly:      pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecSecurity.Group;\nimport com.pulumi.ise.TrustsecSecurity.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .name(\"SGT1234\")\n            .description(\"My SGT\")\n            .value(1234)\n            .propogateToApic(true)\n            .isReadOnly(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TrustsecSecurity:Group\n    properties:\n      name: SGT1234\n      description: My SGT\n      value: 1234\n      propogateToApic: true\n      isReadOnly: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TrustsecSecurity/group:Group example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read-only - Default value: `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "propogateToApic": {
                    "type": "boolean",
                    "description": "Propagate to APIC (ACI)\n"
                },
                "value": {
                    "type": "integer",
                    "description": "`-1` to auto-generate - Range: `-1`-`65519`\n"
                }
            },
            "required": [
                "isReadOnly",
                "name",
                "value"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read-only - Default value: `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group\n"
                },
                "propogateToApic": {
                    "type": "boolean",
                    "description": "Propagate to APIC (ACI)\n"
                },
                "value": {
                    "type": "integer",
                    "description": "`-1` to auto-generate - Range: `-1`-`65519`\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "isReadOnly": {
                        "type": "boolean",
                        "description": "Read-only - Default value: `false`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group\n"
                    },
                    "propogateToApic": {
                        "type": "boolean",
                        "description": "Propagate to APIC (ACI)\n"
                    },
                    "value": {
                        "type": "integer",
                        "description": "`-1` to auto-generate - Range: `-1`-`65519`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:TrustsecSecurityGroup/acl:Acl": {
            "description": "This resource can manage a TrustSec Security Group ACL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.trustsecsecuritygroup.Acl(\"example\", {\n    name: \"ACL1\",\n    description: \"SG ACL 1\",\n    aclContent: \"Permit IP\",\n    ipVersion: \"IPV4\",\n    readOnly: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.trustsec_security_group.Acl(\"example\",\n    name=\"ACL1\",\n    description=\"SG ACL 1\",\n    acl_content=\"Permit IP\",\n    ip_version=\"IPV4\",\n    read_only=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.TrustsecSecurityGroup.Acl(\"example\", new()\n    {\n        Name = \"ACL1\",\n        Description = \"SG ACL 1\",\n        AclContent = \"Permit IP\",\n        IpVersion = \"IPV4\",\n        ReadOnly = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecSecurityGroup\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecSecurityGroup.NewAcl(ctx, \"example\", \u0026TrustsecSecurityGroup.AclArgs{\n\t\t\tName:        pulumi.String(\"ACL1\"),\n\t\t\tDescription: pulumi.String(\"SG ACL 1\"),\n\t\t\tAclContent:  pulumi.String(\"Permit IP\"),\n\t\t\tIpVersion:   pulumi.String(\"IPV4\"),\n\t\t\tReadOnly:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecSecurityGroup.Acl;\nimport com.pulumi.ise.TrustsecSecurityGroup.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Acl(\"example\", AclArgs.builder()        \n            .name(\"ACL1\")\n            .description(\"SG ACL 1\")\n            .aclContent(\"Permit IP\")\n            .ipVersion(\"IPV4\")\n            .readOnly(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:TrustsecSecurityGroup:Acl\n    properties:\n      name: ACL1\n      description: SG ACL 1\n      aclContent: Permit IP\n      ipVersion: IPV4\n      readOnly: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:TrustsecSecurityGroup/acl:Acl example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "aclContent": {
                    "type": "string",
                    "description": "Content of ACL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group ACL\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read-only - Default value: `false`\n"
                }
            },
            "required": [
                "aclContent",
                "ipVersion",
                "name",
                "readOnly"
            ],
            "inputProperties": {
                "aclContent": {
                    "type": "string",
                    "description": "Content of ACL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group ACL\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read-only - Default value: `false`\n"
                }
            },
            "requiredInputs": [
                "aclContent"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "aclContent": {
                        "type": "string",
                        "description": "Content of ACL\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "ipVersion": {
                        "type": "string",
                        "description": "IP Version - Choices: `IPV4`, `IPV6`, `IP_AGNOSTIC` - Default value: `IP_AGNOSTIC`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group ACL\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read-only - Default value: `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:UserIdentity/group:Group": {
            "description": "This resource can manage an User Identity Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.useridentity.Group(\"example\", {\n    name: \"Group1\",\n    description: \"My endpoint identity group\",\n    parent: \"NAC Group:NAC:IdentityGroups:User Identity Groups\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.user_identity.Group(\"example\",\n    name=\"Group1\",\n    description=\"My endpoint identity group\",\n    parent=\"NAC Group:NAC:IdentityGroups:User Identity Groups\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.UserIdentity.Group(\"example\", new()\n    {\n        Name = \"Group1\",\n        Description = \"My endpoint identity group\",\n        Parent = \"NAC Group:NAC:IdentityGroups:User Identity Groups\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/UserIdentity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := UserIdentity.NewGroup(ctx, \"example\", \u0026UserIdentity.GroupArgs{\n\t\t\tName:        pulumi.String(\"Group1\"),\n\t\t\tDescription: pulumi.String(\"My endpoint identity group\"),\n\t\t\tParent:      pulumi.String(\"NAC Group:NAC:IdentityGroups:User Identity Groups\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.UserIdentity.Group;\nimport com.pulumi.ise.UserIdentity.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .name(\"Group1\")\n            .description(\"My endpoint identity group\")\n            .parent(\"NAC Group:NAC:IdentityGroups:User Identity Groups\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:UserIdentity:Group\n    properties:\n      name: Group1\n      description: My endpoint identity group\n      parent: NAC Group:NAC:IdentityGroups:User Identity Groups\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:UserIdentity/group:Group example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user identity group\n"
                },
                "parent": {
                    "type": "string",
                    "description": "Parent user identity group, e.g. `NAC Group:NAC:IdentityGroups:User Identity Groups`\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user identity group\n"
                },
                "parent": {
                    "type": "string",
                    "description": "Parent user identity group, e.g. `NAC Group:NAC:IdentityGroups:User Identity Groups`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user identity group\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "Parent user identity group, e.g. `NAC Group:NAC:IdentityGroups:User Identity Groups`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:index/endpoint:Endpoint": {
            "description": "This resource can manage an Endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.Endpoint(\"example\", {\n    name: \"00:11:22:33:44:55\",\n    description: \"My endpoint\",\n    mac: \"00:11:22:33:44:55\",\n    groupId: \"3a88eec0-8c00-11e6-996c-525400b48521\",\n    profileId: \"3a91a150-8c00-11e6-996c-525400b48521\",\n    staticProfileAssignment: true,\n    staticProfileAssignmentDefined: true,\n    staticGroupAssignment: true,\n    staticGroupAssignmentDefined: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Endpoint(\"example\",\n    name=\"00:11:22:33:44:55\",\n    description=\"My endpoint\",\n    mac=\"00:11:22:33:44:55\",\n    group_id=\"3a88eec0-8c00-11e6-996c-525400b48521\",\n    profile_id=\"3a91a150-8c00-11e6-996c-525400b48521\",\n    static_profile_assignment=True,\n    static_profile_assignment_defined=True,\n    static_group_assignment=True,\n    static_group_assignment_defined=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Endpoint(\"example\", new()\n    {\n        Name = \"00:11:22:33:44:55\",\n        Description = \"My endpoint\",\n        Mac = \"00:11:22:33:44:55\",\n        GroupId = \"3a88eec0-8c00-11e6-996c-525400b48521\",\n        ProfileId = \"3a91a150-8c00-11e6-996c-525400b48521\",\n        StaticProfileAssignment = true,\n        StaticProfileAssignmentDefined = true,\n        StaticGroupAssignment = true,\n        StaticGroupAssignmentDefined = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ise.NewEndpoint(ctx, \"example\", \u0026ise.EndpointArgs{\n\t\t\tName:                           pulumi.String(\"00:11:22:33:44:55\"),\n\t\t\tDescription:                    pulumi.String(\"My endpoint\"),\n\t\t\tMac:                            pulumi.String(\"00:11:22:33:44:55\"),\n\t\t\tGroupId:                        pulumi.String(\"3a88eec0-8c00-11e6-996c-525400b48521\"),\n\t\t\tProfileId:                      pulumi.String(\"3a91a150-8c00-11e6-996c-525400b48521\"),\n\t\t\tStaticProfileAssignment:        pulumi.Bool(true),\n\t\t\tStaticProfileAssignmentDefined: pulumi.Bool(true),\n\t\t\tStaticGroupAssignment:          pulumi.Bool(true),\n\t\t\tStaticGroupAssignmentDefined:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Endpoint;\nimport com.pulumi.ise.EndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Endpoint(\"example\", EndpointArgs.builder()        \n            .name(\"00:11:22:33:44:55\")\n            .description(\"My endpoint\")\n            .mac(\"00:11:22:33:44:55\")\n            .groupId(\"3a88eec0-8c00-11e6-996c-525400b48521\")\n            .profileId(\"3a91a150-8c00-11e6-996c-525400b48521\")\n            .staticProfileAssignment(true)\n            .staticProfileAssignmentDefined(true)\n            .staticGroupAssignment(true)\n            .staticGroupAssignmentDefined(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Endpoint\n    properties:\n      name: 00:11:22:33:44:55\n      description: My endpoint\n      mac: 00:11:22:33:44:55\n      groupId: 3a88eec0-8c00-11e6-996c-525400b48521\n      profileId: 3a91a150-8c00-11e6-996c-525400b48521\n      staticProfileAssignment: true\n      staticProfileAssignmentDefined: true\n      staticGroupAssignment: true\n      staticGroupAssignmentDefined: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:index/endpoint:Endpoint example \"76d24097-41c4-4558-a4d0-a8c07ac08470\"\n```\n\n",
            "properties": {
                "customAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom Attributes\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Identity Group ID\n"
                },
                "identityStore": {
                    "type": "string",
                    "description": "Identity Store\n"
                },
                "identityStoreId": {
                    "type": "string",
                    "description": "Identity Store Id\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address of the endpoint\n"
                },
                "mdmComplianceStatus": {
                    "type": "boolean",
                    "description": "Mdm Compliance Status\n"
                },
                "mdmEncrypted": {
                    "type": "boolean",
                    "description": "Mdm Encrypted\n"
                },
                "mdmEnrolled": {
                    "type": "boolean",
                    "description": "Mdm Enrolled\n"
                },
                "mdmImei": {
                    "type": "string",
                    "description": "Mdm IMEI\n"
                },
                "mdmJailBroken": {
                    "type": "boolean",
                    "description": "Mdm JailBroken\n"
                },
                "mdmManufacturer": {
                    "type": "string",
                    "description": "Mdm Manufacturer\n"
                },
                "mdmModel": {
                    "type": "string",
                    "description": "Mdm Model\n"
                },
                "mdmOs": {
                    "type": "string",
                    "description": "Mdm OS\n"
                },
                "mdmPhoneNumber": {
                    "type": "string",
                    "description": "Mdm PhoneNumber\n"
                },
                "mdmPinlock": {
                    "type": "boolean",
                    "description": "Mdm Pinlock\n"
                },
                "mdmReachable": {
                    "type": "boolean",
                    "description": "Mdm Reachable\n"
                },
                "mdmSerial": {
                    "type": "string",
                    "description": "Mdm Serial\n"
                },
                "mdmServerName": {
                    "type": "string",
                    "description": "Mdm Server Name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "portalUser": {
                    "type": "string",
                    "description": "Portal User\n"
                },
                "profileId": {
                    "type": "string",
                    "description": "Profile ID\n"
                },
                "staticGroupAssignment": {
                    "type": "boolean",
                    "description": "Static Group Assignment\n"
                },
                "staticGroupAssignmentDefined": {
                    "type": "boolean",
                    "description": "staticGroupAssignmentDefined - Default value: `true`\n"
                },
                "staticProfileAssignment": {
                    "type": "boolean",
                    "description": "Static Profile Assignment\n"
                },
                "staticProfileAssignmentDefined": {
                    "type": "boolean",
                    "description": "Static Profile Assignment Defined - Default value: `true`\n"
                }
            },
            "required": [
                "mac",
                "name",
                "staticGroupAssignment",
                "staticGroupAssignmentDefined",
                "staticProfileAssignment",
                "staticProfileAssignmentDefined"
            ],
            "inputProperties": {
                "customAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom Attributes\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Identity Group ID\n"
                },
                "identityStore": {
                    "type": "string",
                    "description": "Identity Store\n"
                },
                "identityStoreId": {
                    "type": "string",
                    "description": "Identity Store Id\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address of the endpoint\n"
                },
                "mdmComplianceStatus": {
                    "type": "boolean",
                    "description": "Mdm Compliance Status\n"
                },
                "mdmEncrypted": {
                    "type": "boolean",
                    "description": "Mdm Encrypted\n"
                },
                "mdmEnrolled": {
                    "type": "boolean",
                    "description": "Mdm Enrolled\n"
                },
                "mdmImei": {
                    "type": "string",
                    "description": "Mdm IMEI\n"
                },
                "mdmJailBroken": {
                    "type": "boolean",
                    "description": "Mdm JailBroken\n"
                },
                "mdmManufacturer": {
                    "type": "string",
                    "description": "Mdm Manufacturer\n"
                },
                "mdmModel": {
                    "type": "string",
                    "description": "Mdm Model\n"
                },
                "mdmOs": {
                    "type": "string",
                    "description": "Mdm OS\n"
                },
                "mdmPhoneNumber": {
                    "type": "string",
                    "description": "Mdm PhoneNumber\n"
                },
                "mdmPinlock": {
                    "type": "boolean",
                    "description": "Mdm Pinlock\n"
                },
                "mdmReachable": {
                    "type": "boolean",
                    "description": "Mdm Reachable\n"
                },
                "mdmSerial": {
                    "type": "string",
                    "description": "Mdm Serial\n"
                },
                "mdmServerName": {
                    "type": "string",
                    "description": "Mdm Server Name\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "portalUser": {
                    "type": "string",
                    "description": "Portal User\n"
                },
                "profileId": {
                    "type": "string",
                    "description": "Profile ID\n"
                },
                "staticGroupAssignment": {
                    "type": "boolean",
                    "description": "Static Group Assignment\n"
                },
                "staticGroupAssignmentDefined": {
                    "type": "boolean",
                    "description": "staticGroupAssignmentDefined - Default value: `true`\n"
                },
                "staticProfileAssignment": {
                    "type": "boolean",
                    "description": "Static Profile Assignment\n"
                },
                "staticProfileAssignmentDefined": {
                    "type": "boolean",
                    "description": "Static Profile Assignment Defined - Default value: `true`\n"
                }
            },
            "requiredInputs": [
                "mac",
                "staticGroupAssignment",
                "staticProfileAssignment"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Endpoint resources.\n",
                "properties": {
                    "customAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom Attributes\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Identity Group ID\n"
                    },
                    "identityStore": {
                        "type": "string",
                        "description": "Identity Store\n"
                    },
                    "identityStoreId": {
                        "type": "string",
                        "description": "Identity Store Id\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the endpoint\n"
                    },
                    "mdmComplianceStatus": {
                        "type": "boolean",
                        "description": "Mdm Compliance Status\n"
                    },
                    "mdmEncrypted": {
                        "type": "boolean",
                        "description": "Mdm Encrypted\n"
                    },
                    "mdmEnrolled": {
                        "type": "boolean",
                        "description": "Mdm Enrolled\n"
                    },
                    "mdmImei": {
                        "type": "string",
                        "description": "Mdm IMEI\n"
                    },
                    "mdmJailBroken": {
                        "type": "boolean",
                        "description": "Mdm JailBroken\n"
                    },
                    "mdmManufacturer": {
                        "type": "string",
                        "description": "Mdm Manufacturer\n"
                    },
                    "mdmModel": {
                        "type": "string",
                        "description": "Mdm Model\n"
                    },
                    "mdmOs": {
                        "type": "string",
                        "description": "Mdm OS\n"
                    },
                    "mdmPhoneNumber": {
                        "type": "string",
                        "description": "Mdm PhoneNumber\n"
                    },
                    "mdmPinlock": {
                        "type": "boolean",
                        "description": "Mdm Pinlock\n"
                    },
                    "mdmReachable": {
                        "type": "boolean",
                        "description": "Mdm Reachable\n"
                    },
                    "mdmSerial": {
                        "type": "string",
                        "description": "Mdm Serial\n"
                    },
                    "mdmServerName": {
                        "type": "string",
                        "description": "Mdm Server Name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint\n"
                    },
                    "portalUser": {
                        "type": "string",
                        "description": "Portal User\n"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "Profile ID\n"
                    },
                    "staticGroupAssignment": {
                        "type": "boolean",
                        "description": "Static Group Assignment\n"
                    },
                    "staticGroupAssignmentDefined": {
                        "type": "boolean",
                        "description": "staticGroupAssignmentDefined - Default value: `true`\n"
                    },
                    "staticProfileAssignment": {
                        "type": "boolean",
                        "description": "Static Profile Assignment\n"
                    },
                    "staticProfileAssignmentDefined": {
                        "type": "boolean",
                        "description": "Static Profile Assignment Defined - Default value: `true`\n"
                    }
                },
                "type": "object"
            }
        },
        "ise:index/repository:Repository": {
            "description": "This resource can manage a Repository.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = new ise.Repository(\"example\", {\n    name: \"repo1\",\n    protocol: \"SFTP\",\n    path: \"/dir\",\n    serverName: \"server1\",\n    userName: \"user9\",\n    password: \"cisco123\",\n    enablePki: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Repository(\"example\",\n    name=\"repo1\",\n    protocol=\"SFTP\",\n    path=\"/dir\",\n    server_name=\"server1\",\n    user_name=\"user9\",\n    password=\"cisco123\",\n    enable_pki=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ise.Repository(\"example\", new()\n    {\n        Name = \"repo1\",\n        Protocol = \"SFTP\",\n        Path = \"/dir\",\n        ServerName = \"server1\",\n        UserName = \"user9\",\n        Password = \"cisco123\",\n        EnablePki = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ise.NewRepository(ctx, \"example\", \u0026ise.RepositoryArgs{\n\t\t\tName:       pulumi.String(\"repo1\"),\n\t\t\tProtocol:   pulumi.String(\"SFTP\"),\n\t\t\tPath:       pulumi.String(\"/dir\"),\n\t\t\tServerName: pulumi.String(\"server1\"),\n\t\t\tUserName:   pulumi.String(\"user9\"),\n\t\t\tPassword:   pulumi.String(\"cisco123\"),\n\t\t\tEnablePki:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Repository;\nimport com.pulumi.ise.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .name(\"repo1\")\n            .protocol(\"SFTP\")\n            .path(\"/dir\")\n            .serverName(\"server1\")\n            .userName(\"user9\")\n            .password(\"cisco123\")\n            .enablePki(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ise:Repository\n    properties:\n      name: repo1\n      protocol: SFTP\n      path: /dir\n      serverName: server1\n      userName: user9\n      password: cisco123\n      enablePki: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import ise:index/repository:Repository example \"repo1\"\n```\n\n",
            "properties": {
                "enablePki": {
                    "type": "boolean",
                    "description": "Enable PKI\n"
                },
                "name": {
                    "type": "string",
                    "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password can contain alphanumeric and/or special characters.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path should always start with \"/\" and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name\n"
                }
            },
            "required": [
                "name",
                "path",
                "protocol"
            ],
            "inputProperties": {
                "enablePki": {
                    "type": "boolean",
                    "description": "Enable PKI\n"
                },
                "name": {
                    "type": "string",
                    "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password can contain alphanumeric and/or special characters.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path should always start with \"/\" and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name\n"
                }
            },
            "requiredInputs": [
                "path",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "enablePki": {
                        "type": "boolean",
                        "description": "Enable PKI\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password can contain alphanumeric and/or special characters.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path should always start with \"/\" and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol - Choices: `CDROM`, `DISK`, `FTP`, `HTTP`, `HTTPS`, `NFS`, `SFTP`, `TFTP`\n"
                    },
                    "serverName": {
                        "type": "string",
                        "description": "Name of the server\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "ise:ActiveDirectoryGroupsBy/getDomain:getDomain": {
            "description": "This data source can read the Active Directory Groups By Domain.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.ActiveDirectoryGroupsBy.getDomain({\n    joinPointId: \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    domain: \"cisco.com\",\n    filter: \"CN=ISE Admins\",\n    sidFilter: \"cisco.com/S-1-5-33-544\",\n    typeFilter: \"UNIVERSAL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.ActiveDirectoryGroupsBy.get_domain(join_point_id=\"73808580-b6e6-11ee-8960-de6d7692bc40\",\n    domain=\"cisco.com\",\n    filter=\"CN=ISE Admins\",\n    sid_filter=\"cisco.com/S-1-5-33-544\",\n    type_filter=\"UNIVERSAL\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.ActiveDirectoryGroupsBy.GetDomain.Invoke(new()\n    {\n        JoinPointId = \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n        Domain = \"cisco.com\",\n        Filter = \"CN=ISE Admins\",\n        SidFilter = \"cisco.com/S-1-5-33-544\",\n        TypeFilter = \"UNIVERSAL\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/ActiveDirectoryGroupsBy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ActiveDirectoryGroupsBy.GetDomain(ctx, \u0026activedirectorygroupsby.GetDomainArgs{\n\t\t\tJoinPointId: \"73808580-b6e6-11ee-8960-de6d7692bc40\",\n\t\t\tDomain:      \"cisco.com\",\n\t\t\tFilter:      pulumi.StringRef(\"CN=ISE Admins\"),\n\t\t\tSidFilter:   pulumi.StringRef(\"cisco.com/S-1-5-33-544\"),\n\t\t\tTypeFilter:  pulumi.StringRef(\"UNIVERSAL\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.ActiveDirectoryGroupsBy.ActiveDirectoryGroupsByFunctions;\nimport com.pulumi.ise.ActiveDirectoryGroupsBy.inputs.GetDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ActiveDirectoryGroupsByFunctions.getDomain(GetDomainArgs.builder()\n            .joinPointId(\"73808580-b6e6-11ee-8960-de6d7692bc40\")\n            .domain(\"cisco.com\")\n            .filter(\"CN=ISE Admins\")\n            .sidFilter(\"cisco.com/S-1-5-33-544\")\n            .typeFilter(\"UNIVERSAL\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:ActiveDirectoryGroupsBy:getDomain\n      Arguments:\n        joinPointId: 73808580-b6e6-11ee-8960-de6d7692bc40\n        domain: cisco.com\n        filter: CN=ISE Admins\n        sidFilter: cisco.com/S-1-5-33-544\n        typeFilter: UNIVERSAL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain whose groups we want to fetch\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Exact match filter on group's CN\n"
                    },
                    "joinPointId": {
                        "type": "string",
                        "description": "Active Directory Join Point ID\n"
                    },
                    "sidFilter": {
                        "type": "string",
                        "description": "Exact match filter on group's SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.\n"
                    },
                    "typeFilter": {
                        "type": "string",
                        "description": "Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "joinPointId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "domain": {
                        "description": "The domain whose groups we want to fetch\n",
                        "type": "string"
                    },
                    "filter": {
                        "description": "Exact match filter on group's CN\n",
                        "type": "string"
                    },
                    "groups": {
                        "description": "List of groups\n",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryGroupsBy/getDomainGroup:getDomainGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "joinPointId": {
                        "description": "Active Directory Join Point ID\n",
                        "type": "string"
                    },
                    "sidFilter": {
                        "description": "Exact match filter on group's SID, optionally specifying the domain as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal.\n",
                        "type": "string"
                    },
                    "typeFilter": {
                        "description": "Can be exactly one of: BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "domain",
                    "groups",
                    "joinPointId",
                    "id"
                ],
                "type": "object"
            }
        },
        "ise:ActiveDirectoryJoin/getPoint:getPoint": {
            "description": "This data source can read the Active Directory Join Point.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.ActiveDirectoryJoin.getPoint({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.ActiveDirectoryJoin.get_point(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.ActiveDirectoryJoin.GetPoint.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/ActiveDirectoryJoin\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ActiveDirectoryJoin.GetPoint(ctx, \u0026activedirectoryjoin.GetPointArgs{\n\t\t\tId: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.ActiveDirectoryJoin.ActiveDirectoryJoinFunctions;\nimport com.pulumi.ise.ActiveDirectoryJoin.inputs.GetPointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ActiveDirectoryJoinFunctions.getPoint(GetPointArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:ActiveDirectoryJoin:getPoint\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPoint.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPoint.\n",
                "properties": {
                    "adScopesNames": {
                        "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma.\n",
                        "type": "string"
                    },
                    "agingTime": {
                        "description": "Aging Time\n",
                        "type": "integer"
                    },
                    "attributes": {
                        "description": "List of AD attributes\n",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/getPointAttribute:getPointAttribute"
                        },
                        "type": "array"
                    },
                    "authProtectionType": {
                        "description": "Enable prevent AD account lockout for WIRELESS/WIRED/BOTH\n",
                        "type": "string"
                    },
                    "country": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "department": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Join point description\n",
                        "type": "string"
                    },
                    "domain": {
                        "description": "AD domain associated with the join point\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "enableCallbackForDialinClient": {
                        "description": "Enable Callback For Dial In Client\n",
                        "type": "boolean"
                    },
                    "enableDialinPermissionCheck": {
                        "description": "Enable Dial In Permission Check\n",
                        "type": "boolean"
                    },
                    "enableDomainAllowedList": {
                        "type": "boolean"
                    },
                    "enableFailedAuthProtection": {
                        "description": "Enable prevent AD account lockout due to too many bad password attempts\n",
                        "type": "boolean"
                    },
                    "enableMachineAccess": {
                        "description": "Enable Machine Access\n",
                        "type": "boolean"
                    },
                    "enableMachineAuth": {
                        "description": "Enable Machine Authentication\n",
                        "type": "boolean"
                    },
                    "enablePassChange": {
                        "description": "Enable Password Change\n",
                        "type": "boolean"
                    },
                    "enableRewrites": {
                        "description": "Enable Rewrites\n",
                        "type": "boolean"
                    },
                    "failedAuthThreshold": {
                        "description": "Number of bad password attempts\n",
                        "type": "integer"
                    },
                    "firstName": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "groups": {
                        "description": "List of AD Groups\n",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/getPointGroup:getPointGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identityNotInAdBehaviour": {
                        "description": "Identity Not In AD Behaviour\n",
                        "type": "string"
                    },
                    "jobTitle": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "locality": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the active directory join point\n",
                        "type": "string"
                    },
                    "organizationalUnit": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "plaintextAuth": {
                        "description": "Plain Text Authentication\n",
                        "type": "boolean"
                    },
                    "rewriteRules": {
                        "description": "List of Rewrite rules\n",
                        "items": {
                            "$ref": "#/types/ise:ActiveDirectoryJoin/getPointRewriteRule:getPointRewriteRule"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "Schema\n",
                        "type": "string"
                    },
                    "stateOrProvince": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "streetAddress": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "telephone": {
                        "description": "User info attribute\n",
                        "type": "string"
                    },
                    "unreachableDomainsBehaviour": {
                        "description": "Unreachable Domains Behaviour\n",
                        "type": "string"
                    }
                },
                "required": [
                    "adScopesNames",
                    "agingTime",
                    "attributes",
                    "authProtectionType",
                    "country",
                    "department",
                    "description",
                    "domain",
                    "email",
                    "enableCallbackForDialinClient",
                    "enableDialinPermissionCheck",
                    "enableDomainAllowedList",
                    "enableFailedAuthProtection",
                    "enableMachineAccess",
                    "enableMachineAuth",
                    "enablePassChange",
                    "enableRewrites",
                    "failedAuthThreshold",
                    "firstName",
                    "groups",
                    "id",
                    "identityNotInAdBehaviour",
                    "jobTitle",
                    "lastName",
                    "locality",
                    "name",
                    "organizationalUnit",
                    "plaintextAuth",
                    "rewriteRules",
                    "schema",
                    "stateOrProvince",
                    "streetAddress",
                    "telephone",
                    "unreachableDomainsBehaviour"
                ],
                "type": "object"
            }
        },
        "ise:Allowed/getProtocols:getProtocols": {
            "description": "This data source can read an allowed protocols policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Allowed.getProtocols({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Allowed.get_protocols(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Allowed.GetProtocols.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Allowed\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Allowed.GetProtocols(ctx, \u0026allowed.GetProtocolsArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Allowed.AllowedFunctions;\nimport com.pulumi.ise.Allowed.inputs.GetProtocolsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AllowedFunctions.getProtocols(GetProtocolsArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Allowed:getProtocols\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProtocols.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the allowed protocols\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProtocols.\n",
                "properties": {
                    "allow5g": {
                        "description": "Allow 5G. This field is only supported from ISE 3.2.\n",
                        "type": "boolean"
                    },
                    "allowChap": {
                        "description": "Allow CHAP\n",
                        "type": "boolean"
                    },
                    "allowEapFast": {
                        "description": "Allow EAP Fast\n",
                        "type": "boolean"
                    },
                    "allowEapMd5": {
                        "description": "Allow EAP MD5\n",
                        "type": "boolean"
                    },
                    "allowEapTls": {
                        "description": "Allow EAP TLS\n",
                        "type": "boolean"
                    },
                    "allowEapTtls": {
                        "description": "Allow EAP TTLS\n",
                        "type": "boolean"
                    },
                    "allowLeap": {
                        "description": "Allow LEAP\n",
                        "type": "boolean"
                    },
                    "allowMsChapV1": {
                        "description": "Allow MS CHAP v1\n",
                        "type": "boolean"
                    },
                    "allowMsChapV2": {
                        "description": "Allow MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "allowPapAscii": {
                        "description": "Allow PAP ASCII\n",
                        "type": "boolean"
                    },
                    "allowPeap": {
                        "description": "Allow PEAP\n",
                        "type": "boolean"
                    },
                    "allowPreferredEapProtocol": {
                        "description": "Allow preferred EAP protocol\n",
                        "type": "boolean"
                    },
                    "allowTeap": {
                        "description": "Allow TEAP\n",
                        "type": "boolean"
                    },
                    "allowWeakCiphersForEap": {
                        "description": "Allow weak ciphers for EAP\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "eapFastAcceptClientCert": {
                        "description": "Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.\n",
                        "type": "boolean"
                    },
                    "eapFastAllowMachineAuthentication": {
                        "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.\n",
                        "type": "boolean"
                    },
                    "eapFastEapGtc": {
                        "description": "Allow EAP GTC\n",
                        "type": "boolean"
                    },
                    "eapFastEapGtcPwdChange": {
                        "description": "Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastEapGtcPwdChangeRetries": {
                        "description": "EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastEapMsChapV2": {
                        "description": "Allow EAP MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "eapFastEapMsChapV2PwdChange": {
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastEapMsChapV2PwdChangeRetries": {
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastEapTls": {
                        "description": "Allow EAP TLS\n",
                        "type": "boolean"
                    },
                    "eapFastEapTlsAuthOfExpiredCerts": {
                        "description": "Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastEnableEapChaining": {
                        "description": "Enable EAP chaining\n",
                        "type": "boolean"
                    },
                    "eapFastPacsAllowAnonymousProvisioning": {
                        "description": "Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsAllowAuthenticatedProvisioning": {
                        "description": "Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsAllowClientCert": {
                        "description": "Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsAllowMachineAuthentication": {
                        "description": "Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsAuthorizationPacTtl": {
                        "description": "Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastPacsAuthorizationPacTtlUnit": {
                        "description": "Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.\n",
                        "type": "string"
                    },
                    "eapFastPacsMachinePacTtl": {
                        "description": "Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastPacsMachinePacTtlUnit": {
                        "description": "Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.\n",
                        "type": "string"
                    },
                    "eapFastPacsServerReturns": {
                        "description": "Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsStatelessSessionResume": {
                        "description": "Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapFastPacsTunnelPacTtl": {
                        "description": "PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastPacsTunnelPacTtlUnit": {
                        "description": "PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "string"
                    },
                    "eapFastPacsUseProactivePacUpdatePercentage": {
                        "description": "Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.\n",
                        "type": "integer"
                    },
                    "eapFastUsePacs": {
                        "description": "Use PACs\n",
                        "type": "boolean"
                    },
                    "eapTlsAllowAuthOfExpiredCerts": {
                        "description": "Allow authentication of expired certificates\n",
                        "type": "boolean"
                    },
                    "eapTlsEnableStatelessSessionResume": {
                        "description": "Enable stateless session resume\n",
                        "type": "boolean"
                    },
                    "eapTlsLBit": {
                        "description": "EAP TLS L-Bit\n",
                        "type": "boolean"
                    },
                    "eapTlsSessionTicketPercentage": {
                        "description": "Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n",
                        "type": "integer"
                    },
                    "eapTlsSessionTicketTtl": {
                        "description": "Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n",
                        "type": "integer"
                    },
                    "eapTlsSessionTicketTtlUnit": {
                        "description": "Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.\n",
                        "type": "string"
                    },
                    "eapTtlsChap": {
                        "description": "Allow CHAP\n",
                        "type": "boolean"
                    },
                    "eapTtlsEapMd5": {
                        "description": "Allow EAP MD5\n",
                        "type": "boolean"
                    },
                    "eapTtlsEapMsChapV2": {
                        "description": "Allow EAP MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "eapTtlsEapMsChapV2PwdChange": {
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.\n",
                        "type": "boolean"
                    },
                    "eapTtlsEapMsChapV2PwdChangeRetries": {
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.\n",
                        "type": "integer"
                    },
                    "eapTtlsMsChapV1": {
                        "description": "Allow MS CHAP v1\n",
                        "type": "boolean"
                    },
                    "eapTtlsMsChapV2": {
                        "description": "Allow MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "eapTtlsPapAscii": {
                        "description": "Allow PAP ASCII\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the allowed protocols\n",
                        "type": "string"
                    },
                    "peapAllowPeapEapGtc": {
                        "description": "Allow PEAP EAP GTC\n",
                        "type": "boolean"
                    },
                    "peapAllowPeapEapGtcPwdChange": {
                        "description": "Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.\n",
                        "type": "boolean"
                    },
                    "peapAllowPeapEapGtcPwdChangeRetries": {
                        "description": "PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.\n",
                        "type": "integer"
                    },
                    "peapAllowPeapEapMsChapV2": {
                        "description": "Allow PEAP EAP MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "peapAllowPeapEapMsChapV2PwdChange": {
                        "description": "Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.\n",
                        "type": "boolean"
                    },
                    "peapAllowPeapEapMsChapV2PwdChangeRetries": {
                        "description": "Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.\n",
                        "type": "integer"
                    },
                    "peapAllowPeapEapTls": {
                        "description": "Allow PEAP EAP TLS\n",
                        "type": "boolean"
                    },
                    "peapAllowPeapEapTlsAuthOfExpiredCerts": {
                        "description": "Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.\n",
                        "type": "boolean"
                    },
                    "peapPeapV0": {
                        "description": "Allow PEAP v0\n",
                        "type": "boolean"
                    },
                    "preferredEapProtocol": {
                        "description": "Preferred EAP protocol\n",
                        "type": "string"
                    },
                    "processHostLookup": {
                        "description": "Process host lookup\n",
                        "type": "boolean"
                    },
                    "requireCryptobinding": {
                        "description": "Require cryptobinding\n",
                        "type": "boolean"
                    },
                    "requireMessageAuth": {
                        "description": "Require message authentication\n",
                        "type": "boolean"
                    },
                    "teapDowngradeMsk": {
                        "description": "Allow downgrade to MSK\n",
                        "type": "boolean"
                    },
                    "teapEapAcceptClientCertDuringTunnelEst": {
                        "description": "Accept client certificate during tunnel establishment\n",
                        "type": "boolean"
                    },
                    "teapEapChaining": {
                        "description": "Allow EAP chaining\n",
                        "type": "boolean"
                    },
                    "teapEapMsChapV2": {
                        "description": "Allow EAP MS CHAP v2\n",
                        "type": "boolean"
                    },
                    "teapEapMsChapV2PwdChange": {
                        "description": "Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.\n",
                        "type": "boolean"
                    },
                    "teapEapMsChapV2PwdChangeRetries": {
                        "description": "EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.\n",
                        "type": "integer"
                    },
                    "teapEapTls": {
                        "description": "Allow EAP TLS\n",
                        "type": "boolean"
                    },
                    "teapEapTlsAuthOfExpiredCerts": {
                        "description": "Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.\n",
                        "type": "boolean"
                    },
                    "teapRequestBasicPwdAuth": {
                        "description": "Request basic password authentication\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "allow5g",
                    "allowChap",
                    "allowEapFast",
                    "allowEapMd5",
                    "allowEapTls",
                    "allowEapTtls",
                    "allowLeap",
                    "allowMsChapV1",
                    "allowMsChapV2",
                    "allowPapAscii",
                    "allowPeap",
                    "allowPreferredEapProtocol",
                    "allowTeap",
                    "allowWeakCiphersForEap",
                    "description",
                    "eapFastAcceptClientCert",
                    "eapFastAllowMachineAuthentication",
                    "eapFastEapGtc",
                    "eapFastEapGtcPwdChange",
                    "eapFastEapGtcPwdChangeRetries",
                    "eapFastEapMsChapV2",
                    "eapFastEapMsChapV2PwdChange",
                    "eapFastEapMsChapV2PwdChangeRetries",
                    "eapFastEapTls",
                    "eapFastEapTlsAuthOfExpiredCerts",
                    "eapFastEnableEapChaining",
                    "eapFastPacsAllowAnonymousProvisioning",
                    "eapFastPacsAllowAuthenticatedProvisioning",
                    "eapFastPacsAllowClientCert",
                    "eapFastPacsAllowMachineAuthentication",
                    "eapFastPacsAuthorizationPacTtl",
                    "eapFastPacsAuthorizationPacTtlUnit",
                    "eapFastPacsMachinePacTtl",
                    "eapFastPacsMachinePacTtlUnit",
                    "eapFastPacsServerReturns",
                    "eapFastPacsStatelessSessionResume",
                    "eapFastPacsTunnelPacTtl",
                    "eapFastPacsTunnelPacTtlUnit",
                    "eapFastPacsUseProactivePacUpdatePercentage",
                    "eapFastUsePacs",
                    "eapTlsAllowAuthOfExpiredCerts",
                    "eapTlsEnableStatelessSessionResume",
                    "eapTlsLBit",
                    "eapTlsSessionTicketPercentage",
                    "eapTlsSessionTicketTtl",
                    "eapTlsSessionTicketTtlUnit",
                    "eapTtlsChap",
                    "eapTtlsEapMd5",
                    "eapTtlsEapMsChapV2",
                    "eapTtlsEapMsChapV2PwdChange",
                    "eapTtlsEapMsChapV2PwdChangeRetries",
                    "eapTtlsMsChapV1",
                    "eapTtlsMsChapV2",
                    "eapTtlsPapAscii",
                    "id",
                    "name",
                    "peapAllowPeapEapGtc",
                    "peapAllowPeapEapGtcPwdChange",
                    "peapAllowPeapEapGtcPwdChangeRetries",
                    "peapAllowPeapEapMsChapV2",
                    "peapAllowPeapEapMsChapV2PwdChange",
                    "peapAllowPeapEapMsChapV2PwdChangeRetries",
                    "peapAllowPeapEapTls",
                    "peapAllowPeapEapTlsAuthOfExpiredCerts",
                    "peapPeapV0",
                    "preferredEapProtocol",
                    "processHostLookup",
                    "requireCryptobinding",
                    "requireMessageAuth",
                    "teapDowngradeMsk",
                    "teapEapAcceptClientCertDuringTunnelEst",
                    "teapEapChaining",
                    "teapEapMsChapV2",
                    "teapEapMsChapV2PwdChange",
                    "teapEapMsChapV2PwdChangeRetries",
                    "teapEapTls",
                    "teapEapTlsAuthOfExpiredCerts",
                    "teapRequestBasicPwdAuth"
                ],
                "type": "object"
            }
        },
        "ise:AllowedProtocols/getTacacs:getTacacs": {
            "description": "This data source can read a TACACS allowed protocols policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.AllowedProtocols.getTacacs({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.AllowedProtocols.get_tacacs(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.AllowedProtocols.GetTacacs.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/AllowedProtocols\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AllowedProtocols.GetTacacs(ctx, \u0026allowedprotocols.GetTacacsArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.AllowedProtocols.AllowedProtocolsFunctions;\nimport com.pulumi.ise.AllowedProtocols.inputs.GetTacacsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AllowedProtocolsFunctions.getTacacs(GetTacacsArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:AllowedProtocols:getTacacs\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTacacs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the allowed protocols\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTacacs.\n",
                "properties": {
                    "allowChap": {
                        "description": "Allow CHAP\n",
                        "type": "boolean"
                    },
                    "allowMsChapV1": {
                        "description": "Allow MS CHAP v1\n",
                        "type": "boolean"
                    },
                    "allowPapAscii": {
                        "description": "Allow PAP ASCII\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the allowed protocols\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowChap",
                    "allowMsChapV1",
                    "allowPapAscii",
                    "description",
                    "id",
                    "name"
                ],
                "type": "object"
            }
        },
        "ise:Authorization/getProfile:getProfile": {
            "description": "This data source can read an authorization profiles policy element.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Authorization.getProfile({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Authorization.get_profile(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Authorization.GetProfile.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Authorization\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Authorization.GetProfile(ctx, \u0026authorization.GetProfileArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Authorization.AuthorizationFunctions;\nimport com.pulumi.ise.Authorization.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AuthorizationFunctions.getProfile(GetProfileArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Authorization:getProfile\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the authorization profile\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "accessType": {
                        "description": "Access type\n",
                        "type": "string"
                    },
                    "acl": {
                        "description": "ACL\n",
                        "type": "string"
                    },
                    "advancedAttributes": {
                        "description": "List of advanced attributes\n",
                        "items": {
                            "$ref": "#/types/ise:Authorization/getProfileAdvancedAttribute:getProfileAdvancedAttribute"
                        },
                        "type": "array"
                    },
                    "agentlessPosture": {
                        "description": "Agentless Posture.\n",
                        "type": "boolean"
                    },
                    "airespaceAcl": {
                        "description": "Airespace ACL\n",
                        "type": "string"
                    },
                    "airespaceIpv6Acl": {
                        "description": "Airespace IPv6 ACL\n",
                        "type": "string"
                    },
                    "asaVpn": {
                        "description": "ASA VPN\n",
                        "type": "string"
                    },
                    "autoSmartPort": {
                        "description": "Auto smart port\n",
                        "type": "string"
                    },
                    "avcProfile": {
                        "description": "AVC profile\n",
                        "type": "string"
                    },
                    "daclName": {
                        "description": "DACL name\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "easywiredSessionCandidate": {
                        "description": "Easy wired session candidate\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "interfaceTemplate": {
                        "description": "Interface template\n",
                        "type": "string"
                    },
                    "ipv6AclFilter": {
                        "description": "IPv6 ACL\n",
                        "type": "string"
                    },
                    "ipv6DaclName": {
                        "description": "IPv6 DACL name\n",
                        "type": "string"
                    },
                    "macSecPolicy": {
                        "description": "MacSec policy\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the authorization profile\n",
                        "type": "string"
                    },
                    "neat": {
                        "description": "NEAT\n",
                        "type": "boolean"
                    },
                    "profileName": {
                        "description": "Value needs to be an existing Network Device Profile\n",
                        "type": "string"
                    },
                    "reauthenticationConnectivity": {
                        "description": "Maintain Connectivity During Reauthentication\n",
                        "type": "string"
                    },
                    "reauthenticationTimer": {
                        "description": "Reauthentication timer\n",
                        "type": "integer"
                    },
                    "serviceTemplate": {
                        "description": "Service template\n",
                        "type": "boolean"
                    },
                    "trackMovement": {
                        "description": "Track movement\n",
                        "type": "boolean"
                    },
                    "uniqueIdentifier": {
                        "description": "Unique identifier\n",
                        "type": "string"
                    },
                    "vlanNameId": {
                        "description": "Vlan name or ID\n",
                        "type": "string"
                    },
                    "vlanTagId": {
                        "description": "Vlan tag ID\n",
                        "type": "integer"
                    },
                    "voiceDomainPermission": {
                        "description": "Voice domain permission\n",
                        "type": "boolean"
                    },
                    "webAuth": {
                        "description": "Web authentication (local)\n",
                        "type": "boolean"
                    },
                    "webRedirectionAcl": {
                        "description": "Web redirection ACL\n",
                        "type": "string"
                    },
                    "webRedirectionDisplayCertificatesRenewalMessages": {
                        "description": "This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other `web_redirection_type` values the field must be ignored.\n",
                        "type": "boolean"
                    },
                    "webRedirectionPortalName": {
                        "description": "A portal that exist in the DB and fits the `web_redirection_type`\n",
                        "type": "string"
                    },
                    "webRedirectionStaticIpHostNameFqdn": {
                        "description": "IP, hostname or FQDN\n",
                        "type": "string"
                    },
                    "webRedirectionType": {
                        "description": "This type must fit the `web_redirection_portal_name`\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessType",
                    "acl",
                    "advancedAttributes",
                    "agentlessPosture",
                    "airespaceAcl",
                    "airespaceIpv6Acl",
                    "asaVpn",
                    "autoSmartPort",
                    "avcProfile",
                    "daclName",
                    "description",
                    "easywiredSessionCandidate",
                    "id",
                    "interfaceTemplate",
                    "ipv6AclFilter",
                    "ipv6DaclName",
                    "macSecPolicy",
                    "name",
                    "neat",
                    "profileName",
                    "reauthenticationConnectivity",
                    "reauthenticationTimer",
                    "serviceTemplate",
                    "trackMovement",
                    "uniqueIdentifier",
                    "vlanNameId",
                    "vlanTagId",
                    "voiceDomainPermission",
                    "webAuth",
                    "webRedirectionAcl",
                    "webRedirectionDisplayCertificatesRenewalMessages",
                    "webRedirectionPortalName",
                    "webRedirectionStaticIpHostNameFqdn",
                    "webRedirectionType"
                ],
                "type": "object"
            }
        },
        "ise:CertificateAuthentication/getProfile:getProfile": {
            "description": "This data source can read the Certificate Authentication Profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.CertificateAuthentication.getProfile({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.CertificateAuthentication.get_profile(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.CertificateAuthentication.GetProfile.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/CertificateAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := CertificateAuthentication.GetProfile(ctx, \u0026certificateauthentication.GetProfileArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.CertificateAuthentication.CertificateAuthenticationFunctions;\nimport com.pulumi.ise.CertificateAuthentication.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = CertificateAuthenticationFunctions.getProfile(GetProfileArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:CertificateAuthentication:getProfile\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate profile\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "allowedAsUserName": {
                        "description": "Allow as username\n",
                        "type": "boolean"
                    },
                    "certificateAttributeName": {
                        "description": "Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in `username_from`.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "externalIdentityStoreName": {
                        "description": "Referred IDStore name for the Certificate Profile or `[not applicable]` in case no identity store is chosen\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "matchMode": {
                        "description": "Match mode of the Certificate Profile. Allowed values: NEVER, RESOLVE*IDENTITY*AMBIGUITY, BINARY_COMPARISON\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the certificate profile\n",
                        "type": "string"
                    },
                    "usernameFrom": {
                        "description": "The attribute in the certificate where the user name should be taken from. Allowed values: `CERTIFICATE` (for a specific attribute as defined in certificateAttributeName), `UPN` (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowedAsUserName",
                    "certificateAttributeName",
                    "description",
                    "externalIdentityStoreName",
                    "id",
                    "matchMode",
                    "name",
                    "usernameFrom"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdmin/getCondition:getCondition": {
            "description": "This data source can read the Device Admin Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdmin.getCondition({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdmin.get_condition(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdmin.GetCondition.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdmin\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdmin.GetCondition(ctx, \u0026deviceadmin.GetConditionArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdmin.DeviceAdminFunctions;\nimport com.pulumi.ise.DeviceAdmin.inputs.GetConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminFunctions.getCondition(GetConditionArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdmin:getCondition\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCondition.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCondition.\n",
                "properties": {
                    "attributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "attributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdmin/getConditionChildren:getConditionChildren"
                        },
                        "type": "array"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Condition description\n",
                        "type": "string"
                    },
                    "dictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "dictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Condition name\n",
                        "type": "string"
                    },
                    "operator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    }
                },
                "required": [
                    "attributeName",
                    "attributeValue",
                    "childrens",
                    "conditionType",
                    "description",
                    "dictionaryName",
                    "dictionaryValue",
                    "id",
                    "isNegate",
                    "name",
                    "operator"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthentication/getRule:getRule": {
            "description": "This data source can read the Device Admin Authentication Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminAuthentication.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminAuthentication.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminAuthentication.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthentication.GetRule(ctx, \u0026deviceadminauthentication.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthentication.DeviceAdminAuthenticationFunctions;\nimport com.pulumi.ise.DeviceAdminAuthentication.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminAuthenticationFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminAuthentication:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthentication/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identitySourceName": {
                        "description": "Identity source name from the identity stores\n",
                        "type": "string"
                    },
                    "ifAuthFail": {
                        "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on\n",
                        "type": "string"
                    },
                    "ifProcessFail": {
                        "description": "Action to perform when ISE is unable to access the identity database\n",
                        "type": "string"
                    },
                    "ifUserNotFound": {
                        "description": "Action to perform when user is not found in any of identity stores\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "identitySourceName",
                    "ifAuthFail",
                    "ifProcessFail",
                    "ifUserNotFound",
                    "name",
                    "policySetId",
                    "rank",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorization/getRule:getRule": {
            "description": "This data source can read the Device Admin Authorization Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminAuthorization.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminAuthorization.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminAuthorization.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorization\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorization.GetRule(ctx, \u0026deviceadminauthorization.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorization.DeviceAdminAuthorizationFunctions;\nimport com.pulumi.ise.DeviceAdminAuthorization.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminAuthorizationFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminAuthorization:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorization/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "commandSets": {
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Device admin profiles control the initial login session of the device administrator\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "commandSets",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "policySetId",
                    "profile",
                    "rank",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorizationException/getRule:getRule": {
            "description": "This data source can read the Device Admin Authorization Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminAuthorizationException.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminAuthorizationException.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminAuthorizationException.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorizationException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorizationException.GetRule(ctx, \u0026deviceadminauthorizationexception.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorizationException.DeviceAdminAuthorizationExceptionFunctions;\nimport com.pulumi.ise.DeviceAdminAuthorizationException.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminAuthorizationExceptionFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminAuthorizationException:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorizationException/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "commandSets": {
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Device admin profiles control the initial login session of the device administrator\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "commandSets",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "policySetId",
                    "profile",
                    "rank",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminAuthorizationGlobalException/getRule:getRule": {
            "description": "This data source can read the Device Admin Authorization Global Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminAuthorizationGlobalException.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminAuthorizationGlobalException.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminAuthorizationGlobalException.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminAuthorizationGlobalException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminAuthorizationGlobalException.GetRule(ctx, \u0026deviceadminauthorizationglobalexception.GetRuleArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminAuthorizationGlobalException.DeviceAdminAuthorizationGlobalExceptionFunctions;\nimport com.pulumi.ise.DeviceAdminAuthorizationGlobalException.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminAuthorizationGlobalExceptionFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminAuthorizationGlobalException:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminAuthorizationGlobalException/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "commandSets": {
                        "description": "Command sets enforce the specified list of commands that can be executed by a device administrator\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Device admin profiles control the initial login session of the device administrator\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "commandSets",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "profile",
                    "rank",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminPolicy/getSet:getSet": {
            "description": "This data source can read the Device Admin Policy Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminPolicy.getSet({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminPolicy.get_set(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminPolicy.GetSet.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminPolicy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminPolicy.GetSet(ctx, \u0026deviceadminpolicy.GetSetArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminPolicy.DeviceAdminPolicyFunctions;\nimport com.pulumi.ise.DeviceAdminPolicy.inputs.GetSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminPolicyFunctions.getSet(GetSetArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminPolicy:getSet\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSet.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:DeviceAdminPolicy/getSetChildren:getSetChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this policy set is the default one\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of the policy set\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isProxy": {
                        "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "serviceName": {
                        "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state that the policy set is in. A disabled policy set cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "description",
                    "id",
                    "isProxy",
                    "name",
                    "rank",
                    "serviceName",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:DeviceAdminTimeAndDate/getCondition:getCondition": {
            "description": "This data source can read the Device Admin Time And Date Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.DeviceAdminTimeAndDate.getCondition({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.DeviceAdminTimeAndDate.get_condition(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.DeviceAdminTimeAndDate.GetCondition.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/DeviceAdminTimeAndDate\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceAdminTimeAndDate.GetCondition(ctx, \u0026deviceadmintimeanddate.GetConditionArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.DeviceAdminTimeAndDate.DeviceAdminTimeAndDateFunctions;\nimport com.pulumi.ise.DeviceAdminTimeAndDate.inputs.GetConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeviceAdminTimeAndDateFunctions.getCondition(GetConditionArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:DeviceAdminTimeAndDate:getCondition\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCondition.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCondition.\n",
                "properties": {
                    "description": {
                        "description": "Condition description\n",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "End date\n",
                        "type": "string"
                    },
                    "endTime": {
                        "description": "End time\n",
                        "type": "string"
                    },
                    "exceptionEndDate": {
                        "description": "Exception end date\n",
                        "type": "string"
                    },
                    "exceptionEndTime": {
                        "description": "Exception end time\n",
                        "type": "string"
                    },
                    "exceptionStartDate": {
                        "description": "Exception start date\n",
                        "type": "string"
                    },
                    "exceptionStartTime": {
                        "description": "Exception start time\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Condition name\n",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "Start date\n",
                        "type": "string"
                    },
                    "startTime": {
                        "description": "Start time\n",
                        "type": "string"
                    },
                    "weekDays": {
                        "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "weekDaysExceptions": {
                        "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "endDate",
                    "endTime",
                    "exceptionEndDate",
                    "exceptionEndTime",
                    "exceptionStartDate",
                    "exceptionStartTime",
                    "id",
                    "isNegate",
                    "name",
                    "startDate",
                    "startTime",
                    "weekDays",
                    "weekDaysExceptions"
                ],
                "type": "object"
            }
        },
        "ise:Downloadable/getAcl:getAcl": {
            "description": "This data source can read the Downloadable ACL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Downloadable.getAcl({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Downloadable.get_acl(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Downloadable.GetAcl.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Downloadable\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Downloadable.GetAcl(ctx, \u0026downloadable.GetAclArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Downloadable.DownloadableFunctions;\nimport com.pulumi.ise.Downloadable.inputs.GetAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadableFunctions.getAcl(GetAclArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Downloadable:getAcl\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAcl.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the downloadable ACL\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAcl.\n",
                "properties": {
                    "dacl": {
                        "description": "The DACL content\n",
                        "type": "string"
                    },
                    "daclType": {
                        "description": "The type of ACL\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the downloadable ACL\n",
                        "type": "string"
                    }
                },
                "required": [
                    "dacl",
                    "daclType",
                    "description",
                    "id",
                    "name"
                ],
                "type": "object"
            }
        },
        "ise:EndpointIdentity/getGroup:getGroup": {
            "description": "This data source can read the Endpoint Identity Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.EndpointIdentity.getGroup({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.EndpointIdentity.get_group(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.EndpointIdentity.GetGroup.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/EndpointIdentity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := EndpointIdentity.GetGroup(ctx, \u0026endpointidentity.GetGroupArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.EndpointIdentity.EndpointIdentityFunctions;\nimport com.pulumi.ise.EndpointIdentity.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = EndpointIdentityFunctions.getGroup(GetGroupArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:EndpointIdentity:getGroup\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint identity group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the endpoint identity group\n",
                        "type": "string"
                    },
                    "parentEndpointIdentityGroupId": {
                        "description": "Parent endpoint identity group ID\n",
                        "type": "string"
                    },
                    "systemDefined": {
                        "description": "System defined endpoint identity group\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "parentEndpointIdentityGroupId",
                    "systemDefined"
                ],
                "type": "object"
            }
        },
        "ise:IdentitySource/getSequence:getSequence": {
            "description": "This data source can read the Identity Source Sequence.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.IdentitySource.getSequence({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.IdentitySource.get_sequence(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.IdentitySource.GetSequence.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/IdentitySource\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := IdentitySource.GetSequence(ctx, \u0026identitysource.GetSequenceArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.IdentitySource.IdentitySourceFunctions;\nimport com.pulumi.ise.IdentitySource.inputs.GetSequenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IdentitySourceFunctions.getSequence(GetSequenceArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:IdentitySource:getSequence\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSequence.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the identity source sequence\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSequence.\n",
                "properties": {
                    "breakOnStoreFail": {
                        "description": "Do not access other stores in the sequence if a selected identity store cannot be accessed for authentication\n",
                        "type": "boolean"
                    },
                    "certificateAuthenticationProfile": {
                        "description": "Certificate Authentication Profile, empty if doesn't exist\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identitySources": {
                        "items": {
                            "$ref": "#/types/ise:IdentitySource/getSequenceIdentitySource:getSequenceIdentitySource"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "The name of the identity source sequence\n",
                        "type": "string"
                    }
                },
                "required": [
                    "breakOnStoreFail",
                    "certificateAuthenticationProfile",
                    "description",
                    "id",
                    "identitySources",
                    "name"
                ],
                "type": "object"
            }
        },
        "ise:Internal/getUser:getUser": {
            "description": "This data source can read the Internal User.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Internal.getUser({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Internal.get_user(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Internal.GetUser.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Internal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Internal.GetUser(ctx, \u0026internal.GetUserArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Internal.InternalFunctions;\nimport com.pulumi.ise.Internal.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = InternalFunctions.getUser(GetUserArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Internal:getUser\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the internal user\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accountNameAlias": {
                        "description": "The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.\n",
                        "type": "string"
                    },
                    "changePassword": {
                        "description": "Requires the user to change the password\n",
                        "type": "boolean"
                    },
                    "customAttributes": {
                        "description": "Key value map\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address\n",
                        "type": "string"
                    },
                    "enablePassword": {
                        "description": "This field is added in ISE 2.0 to support TACACS+\n",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether the user is enabled/disabled\n",
                        "type": "boolean"
                    },
                    "firstName": {
                        "description": "First name of the internal user\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identityGroups": {
                        "description": "Comma separated list of identity group IDs.\n",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last name of the internal user\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the internal user\n",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the internal user\n",
                        "type": "string"
                    },
                    "passwordIdStore": {
                        "description": "The ID store where the internal user's password is kept\n",
                        "type": "string"
                    },
                    "passwordNeverExpires": {
                        "description": "Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "accountNameAlias",
                    "changePassword",
                    "customAttributes",
                    "description",
                    "email",
                    "enablePassword",
                    "enabled",
                    "firstName",
                    "id",
                    "identityGroups",
                    "lastName",
                    "name",
                    "password",
                    "passwordIdStore",
                    "passwordNeverExpires"
                ],
                "type": "object"
            }
        },
        "ise:LicenseTier/getState:getState": {
            "description": "This data source can read the License Tier State.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.LicenseTier.getState({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.LicenseTier.get_state(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.LicenseTier.GetState.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/LicenseTier\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LicenseTier.GetState(ctx, \u0026licensetier.GetStateArgs{\n\t\t\tId: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.LicenseTier.LicenseTierFunctions;\nimport com.pulumi.ise.LicenseTier.inputs.GetStateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LicenseTierFunctions.getState(GetStateArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:LicenseTier:getState\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getState.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getState.\n",
                "properties": {
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "licenses": {
                        "description": "List of licenses\n",
                        "items": {
                            "$ref": "#/types/ise:LicenseTier/getStateLicense:getStateLicense"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "licenses"
                ],
                "type": "object"
            }
        },
        "ise:Network/getDevice:getDevice": {
            "description": "This data source can read the Network Device.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Network.getDevice({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Network.get_device(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Network.GetDevice.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.GetDevice(ctx, \u0026network.GetDeviceArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Network.NetworkFunctions;\nimport com.pulumi.ise.Network.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkFunctions.getDevice(GetDeviceArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Network:getDevice\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network device\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "authenticationDtlsRequired": {
                        "description": "Enforce use of DTLS\n",
                        "type": "boolean"
                    },
                    "authenticationEnableKeyWrap": {
                        "description": "Enable key wrap\n",
                        "type": "boolean"
                    },
                    "authenticationEnableMultiSecret": {
                        "description": "Enable multiple RADIUS shared secrets\n",
                        "type": "boolean"
                    },
                    "authenticationEncryptionKey": {
                        "description": "Encryption key\n",
                        "type": "string"
                    },
                    "authenticationEncryptionKeyFormat": {
                        "description": "Key input format\n",
                        "type": "string"
                    },
                    "authenticationMessageAuthenticatorCodeKey": {
                        "description": "Message authenticator code key\n",
                        "type": "string"
                    },
                    "authenticationNetworkProtocol": {
                        "description": "Network protocol\n",
                        "type": "string"
                    },
                    "authenticationRadiusSharedSecret": {
                        "description": "RADIUS shared secret\n",
                        "type": "string"
                    },
                    "authenticationSecondRadiusSharedSecret": {
                        "description": "Second RADIUS shared secret\n",
                        "type": "string"
                    },
                    "coaPort": {
                        "description": "CoA port\n",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "dtlsDnsName": {
                        "description": "This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "ips": {
                        "description": "List of IP subnets\n",
                        "items": {
                            "$ref": "#/types/ise:Network/getDeviceIp:getDeviceIp"
                        },
                        "type": "array"
                    },
                    "modelName": {
                        "description": "Model name\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the network device\n",
                        "type": "string"
                    },
                    "networkDeviceGroups": {
                        "description": "List of network device groups, e.g. `Device Type#All Device Types#ACCESS`\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "profileName": {
                        "description": "Profile name\n",
                        "type": "string"
                    },
                    "snmpLinkTrapQuery": {
                        "description": "SNMP link Trap Query\n",
                        "type": "boolean"
                    },
                    "snmpMacTrapQuery": {
                        "description": "SNMP MAC Trap Query\n",
                        "type": "boolean"
                    },
                    "snmpOriginatingPolicyServiceNode": {
                        "description": "Originating Policy Services Node\n",
                        "type": "string"
                    },
                    "snmpPollingInterval": {
                        "description": "SNMP Polling Interval in seconds\n",
                        "type": "integer"
                    },
                    "snmpRoCommunity": {
                        "description": "SNMP RO Community\n",
                        "type": "string"
                    },
                    "snmpVersion": {
                        "description": "SNMP version\n",
                        "type": "string"
                    },
                    "softwareVersion": {
                        "description": "Software version\n",
                        "type": "string"
                    },
                    "tacacsConnectModeOptions": {
                        "description": "Connect mode options\n",
                        "type": "string"
                    },
                    "tacacsSharedSecret": {
                        "description": "Shared secret\n",
                        "type": "string"
                    },
                    "trustsecCoaSourceHost": {
                        "description": "CoA source host\n",
                        "type": "string"
                    },
                    "trustsecDeviceId": {
                        "description": "TrustSec device ID\n",
                        "type": "string"
                    },
                    "trustsecDevicePassword": {
                        "description": "TrustSec device password\n",
                        "type": "string"
                    },
                    "trustsecDownloadEnviromentDataEveryXSeconds": {
                        "description": "Download environment data every X seconds\n",
                        "type": "integer"
                    },
                    "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds": {
                        "description": "Download peer authorization policy every X seconds\n",
                        "type": "integer"
                    },
                    "trustsecDownloadSgaclListsEveryXSeconds": {
                        "description": "Download SGACL lists every X seconds\n",
                        "type": "integer"
                    },
                    "trustsecEnableModePassword": {
                        "description": "Enable mode password\n",
                        "type": "string"
                    },
                    "trustsecExecModePassword": {
                        "description": "EXEC mode password\n",
                        "type": "string"
                    },
                    "trustsecExecModeUsername": {
                        "description": "EXEC mode username\n",
                        "type": "string"
                    },
                    "trustsecIncludeWhenDeployingSgtUpdates": {
                        "description": "Include this device when deploying Security Group Tag Mapping Updates\n",
                        "type": "boolean"
                    },
                    "trustsecOtherSgaDevicesToTrustThisDevice": {
                        "description": "Other TrustSec devices to trust this device\n",
                        "type": "boolean"
                    },
                    "trustsecReAuthenticationEveryXSeconds": {
                        "description": "Re-authenticate every X seconds\n",
                        "type": "integer"
                    },
                    "trustsecRestApiPassword": {
                        "description": "REST API password\n",
                        "type": "string"
                    },
                    "trustsecRestApiUsername": {
                        "description": "REST API username\n",
                        "type": "string"
                    },
                    "trustsecSendConfigurationToDevice": {
                        "description": "Send configuration to device\n",
                        "type": "boolean"
                    },
                    "trustsecSendConfigurationToDeviceUsing": {
                        "description": "Send configuration to device using\n",
                        "type": "string"
                    }
                },
                "required": [
                    "authenticationDtlsRequired",
                    "authenticationEnableKeyWrap",
                    "authenticationEnableMultiSecret",
                    "authenticationEncryptionKey",
                    "authenticationEncryptionKeyFormat",
                    "authenticationMessageAuthenticatorCodeKey",
                    "authenticationNetworkProtocol",
                    "authenticationRadiusSharedSecret",
                    "authenticationSecondRadiusSharedSecret",
                    "coaPort",
                    "description",
                    "dtlsDnsName",
                    "id",
                    "ips",
                    "modelName",
                    "name",
                    "networkDeviceGroups",
                    "profileName",
                    "snmpLinkTrapQuery",
                    "snmpMacTrapQuery",
                    "snmpOriginatingPolicyServiceNode",
                    "snmpPollingInterval",
                    "snmpRoCommunity",
                    "snmpVersion",
                    "softwareVersion",
                    "tacacsConnectModeOptions",
                    "tacacsSharedSecret",
                    "trustsecCoaSourceHost",
                    "trustsecDeviceId",
                    "trustsecDevicePassword",
                    "trustsecDownloadEnviromentDataEveryXSeconds",
                    "trustsecDownloadPeerAuthorizationPolicyEveryXSeconds",
                    "trustsecDownloadSgaclListsEveryXSeconds",
                    "trustsecEnableModePassword",
                    "trustsecExecModePassword",
                    "trustsecExecModeUsername",
                    "trustsecIncludeWhenDeployingSgtUpdates",
                    "trustsecOtherSgaDevicesToTrustThisDevice",
                    "trustsecReAuthenticationEveryXSeconds",
                    "trustsecRestApiPassword",
                    "trustsecRestApiUsername",
                    "trustsecSendConfigurationToDevice",
                    "trustsecSendConfigurationToDeviceUsing"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccess/getCondition:getCondition": {
            "description": "This data source can read the Network Access Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccess.getCondition({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccess.get_condition(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccess.GetCondition.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccess\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccess.GetCondition(ctx, \u0026networkaccess.GetConditionArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccess.NetworkAccessFunctions;\nimport com.pulumi.ise.NetworkAccess.inputs.GetConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessFunctions.getCondition(GetConditionArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccess:getCondition\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCondition.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCondition.\n",
                "properties": {
                    "attributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "attributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccess/getConditionChildren:getConditionChildren"
                        },
                        "type": "array"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Condition description\n",
                        "type": "string"
                    },
                    "dictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "dictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Condition name\n",
                        "type": "string"
                    },
                    "operator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    }
                },
                "required": [
                    "attributeName",
                    "attributeValue",
                    "childrens",
                    "conditionType",
                    "description",
                    "dictionaryName",
                    "dictionaryValue",
                    "id",
                    "isNegate",
                    "name",
                    "operator"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccess/getDictionary:getDictionary": {
            "description": "This data source can read the Network Access Dictionary.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccess.getDictionary({\n    id: \"Dict1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccess.get_dictionary(id=\"Dict1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccess.GetDictionary.Invoke(new()\n    {\n        Id = \"Dict1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccess\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccess.GetDictionary(ctx, \u0026networkaccess.GetDictionaryArgs{\n\t\t\tId: pulumi.StringRef(\"Dict1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccess.NetworkAccessFunctions;\nimport com.pulumi.ise.NetworkAccess.inputs.GetDictionaryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessFunctions.getDictionary(GetDictionaryArgs.builder()\n            .id(\"Dict1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccess:getDictionary\n      Arguments:\n        id: Dict1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDictionary.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The dictionary name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDictionary.\n",
                "properties": {
                    "description": {
                        "description": "The description of the dictionary\n",
                        "type": "string"
                    },
                    "dictionaryAttrType": {
                        "description": "The dictionary attribute type\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The dictionary name\n",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of the dictionary\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "dictionaryAttrType",
                    "id",
                    "name",
                    "version"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthentication/getRule:getRule": {
            "description": "This data source can read the Network Access Authentication Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessAuthentication.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessAuthentication.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessAuthentication.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthentication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthentication.GetRule(ctx, \u0026networkaccessauthentication.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthentication.NetworkAccessAuthenticationFunctions;\nimport com.pulumi.ise.NetworkAccessAuthentication.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessAuthenticationFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessAuthentication:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthentication/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identitySourceName": {
                        "description": "Identity source name from the identity stores\n",
                        "type": "string"
                    },
                    "ifAuthFail": {
                        "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on\n",
                        "type": "string"
                    },
                    "ifProcessFail": {
                        "description": "Action to perform when ISE is uanble to access the identity database\n",
                        "type": "string"
                    },
                    "ifUserNotFound": {
                        "description": "Action to perform when user is not found in any of identity stores\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "identitySourceName",
                    "ifAuthFail",
                    "ifProcessFail",
                    "ifUserNotFound",
                    "name",
                    "policySetId",
                    "rank",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorization/getRule:getRule": {
            "description": "This data source can read the Network Access Authorization Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessAuthorization.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessAuthorization.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessAuthorization.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorization\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorization.GetRule(ctx, \u0026networkaccessauthorization.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorization.NetworkAccessAuthorizationFunctions;\nimport com.pulumi.ise.NetworkAccessAuthorization.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessAuthorizationFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessAuthorization:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorization/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "profiles": {
                        "description": "The authorization profile(s)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "securityGroup": {
                        "description": "Security group used in authorization policies\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "policySetId",
                    "profiles",
                    "rank",
                    "securityGroup",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorizationException/getRule:getRule": {
            "description": "This data source can read the Network Access Authorization Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessAuthorizationException.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessAuthorizationException.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    policy_set_id=\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessAuthorizationException.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n        PolicySetId = \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorizationException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorizationException.GetRule(ctx, \u0026networkaccessauthorizationexception.GetRuleArgs{\n\t\t\tId:          pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t\tPolicySetId: \"d82952cb-b901-4b09-b363-5ebf39bdbaf9\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorizationException.NetworkAccessAuthorizationExceptionFunctions;\nimport com.pulumi.ise.NetworkAccessAuthorizationException.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessAuthorizationExceptionFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .policySetId(\"d82952cb-b901-4b09-b363-5ebf39bdbaf9\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessAuthorizationException:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n        policySetId: d82952cb-b901-4b09-b363-5ebf39bdbaf9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    },
                    "policySetId": {
                        "type": "string",
                        "description": "Policy set ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "policySetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorizationException/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "policySetId": {
                        "description": "Policy set ID\n",
                        "type": "string"
                    },
                    "profiles": {
                        "description": "The authorization profile(s)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "securityGroup": {
                        "description": "Security group used in authorization policies\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "policySetId",
                    "profiles",
                    "rank",
                    "securityGroup",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessAuthorizationGlobalException/getRule:getRule": {
            "description": "This data source can read the Network Access Authorization Global Exception Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessAuthorizationGlobalException.getRule({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessAuthorizationGlobalException.get_rule(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessAuthorizationGlobalException.GetRule.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessAuthorizationGlobalException\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessAuthorizationGlobalException.GetRule(ctx, \u0026networkaccessauthorizationglobalexception.GetRuleArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessAuthorizationGlobalException.NetworkAccessAuthorizationGlobalExceptionFunctions;\nimport com.pulumi.ise.NetworkAccessAuthorizationGlobalException.inputs.GetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessAuthorizationGlobalExceptionFunctions.getRule(GetRuleArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessAuthorizationGlobalException:getRule\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRule.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessAuthorizationGlobalException/getRuleChildren:getRuleChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this rule is the default one\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "profiles": {
                        "description": "The authorization profile(s)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other rules. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "securityGroup": {
                        "description": "Security group used in authorization policies\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state that the rule is in. A disabled rule cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "id",
                    "name",
                    "profiles",
                    "rank",
                    "securityGroup",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessPolicy/getSet:getSet": {
            "description": "This data source can read the Network Access Policy Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessPolicy.getSet({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessPolicy.get_set(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessPolicy.GetSet.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessPolicy\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessPolicy.GetSet(ctx, \u0026networkaccesspolicy.GetSetArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessPolicy.NetworkAccessPolicyFunctions;\nimport com.pulumi.ise.NetworkAccessPolicy.inputs.GetSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessPolicyFunctions.getSet(GetSetArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessPolicy:getSet\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSet.\n",
                "properties": {
                    "childrens": {
                        "description": "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.\n",
                        "items": {
                            "$ref": "#/types/ise:NetworkAccessPolicy/getSetChildren:getSetChildren"
                        },
                        "type": "array"
                    },
                    "conditionAttributeName": {
                        "description": "Dictionary attribute name\n",
                        "type": "string"
                    },
                    "conditionAttributeValue": {
                        "description": "Attribute value for condition. Value type is specified in dictionary object.\n",
                        "type": "string"
                    },
                    "conditionDictionaryName": {
                        "description": "Dictionary name\n",
                        "type": "string"
                    },
                    "conditionDictionaryValue": {
                        "description": "Dictionary value\n",
                        "type": "string"
                    },
                    "conditionId": {
                        "description": "UUID for condition\n",
                        "type": "string"
                    },
                    "conditionIsNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "conditionOperator": {
                        "description": "Equality operator\n",
                        "type": "string"
                    },
                    "conditionType": {
                        "description": "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Indicates if this policy set is the default one\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of the policy set\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isProxy": {
                        "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]\n",
                        "type": "string"
                    },
                    "rank": {
                        "description": "The rank (priority) in relation to other policy sets. Lower rank is higher priority.\n",
                        "type": "integer"
                    },
                    "serviceName": {
                        "description": "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state that the policy set is in. A disabled policy set cannot be matched.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "childrens",
                    "conditionAttributeName",
                    "conditionAttributeValue",
                    "conditionDictionaryName",
                    "conditionDictionaryValue",
                    "conditionId",
                    "conditionIsNegate",
                    "conditionOperator",
                    "conditionType",
                    "default",
                    "description",
                    "id",
                    "isProxy",
                    "name",
                    "rank",
                    "serviceName",
                    "state"
                ],
                "type": "object"
            }
        },
        "ise:NetworkAccessTimeAndDate/getCondition:getCondition": {
            "description": "This data source can read the Network Access Time And Date Condition.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkAccessTimeAndDate.getCondition({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkAccessTimeAndDate.get_condition(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkAccessTimeAndDate.GetCondition.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkAccessTimeAndDate\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkAccessTimeAndDate.GetCondition(ctx, \u0026networkaccesstimeanddate.GetConditionArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkAccessTimeAndDate.NetworkAccessTimeAndDateFunctions;\nimport com.pulumi.ise.NetworkAccessTimeAndDate.inputs.GetConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkAccessTimeAndDateFunctions.getCondition(GetConditionArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkAccessTimeAndDate:getCondition\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCondition.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Condition name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCondition.\n",
                "properties": {
                    "description": {
                        "description": "Condition description\n",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "End date\n",
                        "type": "string"
                    },
                    "endTime": {
                        "description": "End time\n",
                        "type": "string"
                    },
                    "exceptionEndDate": {
                        "description": "Exception end date\n",
                        "type": "string"
                    },
                    "exceptionEndTime": {
                        "description": "Exception end time\n",
                        "type": "string"
                    },
                    "exceptionStartDate": {
                        "description": "Exception start date\n",
                        "type": "string"
                    },
                    "exceptionStartTime": {
                        "description": "Exception start time\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isNegate": {
                        "description": "Indicates whereas this condition is in negate mode\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Condition name\n",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "Start date\n",
                        "type": "string"
                    },
                    "startTime": {
                        "description": "Start time\n",
                        "type": "string"
                    },
                    "weekDays": {
                        "description": "Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "weekDaysExceptions": {
                        "description": "Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "endDate",
                    "endTime",
                    "exceptionEndDate",
                    "exceptionEndTime",
                    "exceptionStartDate",
                    "exceptionStartTime",
                    "id",
                    "isNegate",
                    "name",
                    "startDate",
                    "startTime",
                    "weekDays",
                    "weekDaysExceptions"
                ],
                "type": "object"
            }
        },
        "ise:NetworkDevice/getGroup:getGroup": {
            "description": "This data source can read the Network Device Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.NetworkDevice.getGroup({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.NetworkDevice.get_group(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.NetworkDevice.GetGroup.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/NetworkDevice\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := NetworkDevice.GetGroup(ctx, \u0026networkdevice.GetGroupArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.NetworkDevice.NetworkDeviceFunctions;\nimport com.pulumi.ise.NetworkDevice.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkDeviceFunctions.getGroup(GetGroupArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:NetworkDevice:getGroup\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`.\n",
                        "type": "string"
                    },
                    "rootGroup": {
                        "description": "The name of the root device group.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "rootGroup"
                ],
                "type": "object"
            }
        },
        "ise:Tacacs/getProfile:getProfile": {
            "description": "This data source can read the TACACS Profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.Tacacs.getProfile({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.Tacacs.get_profile(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.Tacacs.GetProfile.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/Tacacs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tacacs.GetProfile(ctx, \u0026tacacs.GetProfileArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.Tacacs.TacacsFunctions;\nimport com.pulumi.ise.Tacacs.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TacacsFunctions.getProfile(GetProfileArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:Tacacs:getProfile\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the TACACS profile\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the TACACS profile\n",
                        "type": "string"
                    },
                    "sessionAttributes": {
                        "items": {
                            "$ref": "#/types/ise:Tacacs/getProfileSessionAttribute:getProfileSessionAttribute"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "sessionAttributes"
                ],
                "type": "object"
            }
        },
        "ise:TacacsCommand/getSet:getSet": {
            "description": "This data source can read the TACACS Command Set.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TacacsCommand.getSet({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TacacsCommand.get_set(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TacacsCommand.GetSet.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TacacsCommand\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TacacsCommand.GetSet(ctx, \u0026tacacscommand.GetSetArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TacacsCommand.TacacsCommandFunctions;\nimport com.pulumi.ise.TacacsCommand.inputs.GetSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TacacsCommandFunctions.getSet(GetSetArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TacacsCommand:getSet\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the TACACS command set\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSet.\n",
                "properties": {
                    "commands": {
                        "items": {
                            "$ref": "#/types/ise:TacacsCommand/getSetCommand:getSetCommand"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the TACACS command set\n",
                        "type": "string"
                    },
                    "permitUnmatched": {
                        "description": "Permit unmatched commands\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "commands",
                    "description",
                    "id",
                    "name",
                    "permitUnmatched"
                ],
                "type": "object"
            }
        },
        "ise:TrustsecEgressMatrix/getCell:getCell": {
            "description": "This data source can read the TrustSec Egress Matrix Cell.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TrustsecEgressMatrix.getCell({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TrustsecEgressMatrix.get_cell(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TrustsecEgressMatrix.GetCell.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecEgressMatrix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecEgressMatrix.GetCell(ctx, \u0026trustsecegressmatrix.GetCellArgs{\n\t\t\tId: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecEgressMatrix.TrustsecEgressMatrixFunctions;\nimport com.pulumi.ise.TrustsecEgressMatrix.inputs.GetCellArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrustsecEgressMatrixFunctions.getCell(GetCellArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TrustsecEgressMatrix:getCell\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCell.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCell.\n",
                "properties": {
                    "defaultRule": {
                        "description": "Can be used only if sgacls not specified.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "destinationSgtId": {
                        "description": "Destination Trustsec Security Group ID\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "matrixCellStatus": {
                        "description": "Matrix Cell Status\n",
                        "type": "string"
                    },
                    "sgacls": {
                        "description": "List of TrustSec Security Groups ACLs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "sourceSgtId": {
                        "description": "Source Trustsec Security Group ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "defaultRule",
                    "description",
                    "destinationSgtId",
                    "id",
                    "matrixCellStatus",
                    "sgacls",
                    "sourceSgtId"
                ],
                "type": "object"
            }
        },
        "ise:TrustsecIpToSgt/getMapping:getMapping": {
            "description": "This data source can read the TrustSec IP to SGT Mapping.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TrustsecIpToSgt.getMapping({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TrustsecIpToSgt.get_mapping(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TrustsecIpToSgt.GetMapping.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecIpToSgt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecIpToSgt.GetMapping(ctx, \u0026trustseciptosgt.GetMappingArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecIpToSgt.TrustsecIpToSgtFunctions;\nimport com.pulumi.ise.TrustsecIpToSgt.inputs.GetMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrustsecIpToSgtFunctions.getMapping(GetMappingArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TrustsecIpToSgt:getMapping\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMapping.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP to SGT mapping\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMapping.\n",
                "properties": {
                    "deployTo": {
                        "description": "Mandatory unless `mapping_group` is set or unless `deploy_type` is `ALL`\n",
                        "type": "string"
                    },
                    "deployType": {
                        "description": "Deploy Type\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "hostIp": {
                        "description": "Mandatory if `host_name` is empty\n",
                        "type": "string"
                    },
                    "hostName": {
                        "description": "Mandatory if `host_ip` is empty\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "mappingGroup": {
                        "description": "IP to SGT Mapping Group ID. Mandatory unless `sgt` and `deploy_to` and `deploy_type` are set\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the IP to SGT mapping\n",
                        "type": "string"
                    },
                    "sgt": {
                        "description": "Trustsec Security Group ID. Mandatory unless `mapping_group` is set\n",
                        "type": "string"
                    }
                },
                "required": [
                    "deployTo",
                    "deployType",
                    "description",
                    "hostIp",
                    "hostName",
                    "id",
                    "mappingGroup",
                    "name",
                    "sgt"
                ],
                "type": "object"
            }
        },
        "ise:TrustsecIpToSgtMapping/getGroup:getGroup": {
            "description": "This data source can read the TrustSec IP to SGT Mapping Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TrustsecIpToSgtMapping.getGroup({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TrustsecIpToSgtMapping.get_group(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TrustsecIpToSgtMapping.GetGroup.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecIpToSgtMapping\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecIpToSgtMapping.GetGroup(ctx, \u0026trustseciptosgtmapping.GetGroupArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecIpToSgtMapping.TrustsecIpToSgtMappingFunctions;\nimport com.pulumi.ise.TrustsecIpToSgtMapping.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrustsecIpToSgtMappingFunctions.getGroup(GetGroupArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TrustsecIpToSgtMapping:getGroup\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP to SGT mapping Group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "deployTo": {
                        "description": "Mandatory unless `deploy_type` is `ALL`\n",
                        "type": "string"
                    },
                    "deployType": {
                        "description": "Deploy Type\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the IP to SGT mapping Group\n",
                        "type": "string"
                    },
                    "sgt": {
                        "description": "Trustsec Security Group ID\n",
                        "type": "string"
                    }
                },
                "required": [
                    "deployTo",
                    "deployType",
                    "description",
                    "id",
                    "name",
                    "sgt"
                ],
                "type": "object"
            }
        },
        "ise:TrustsecSecurity/getGroup:getGroup": {
            "description": "This data source can read the TrustSec Security Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TrustsecSecurity.getGroup({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TrustsecSecurity.get_group(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TrustsecSecurity.GetGroup.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecSecurity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecSecurity.GetGroup(ctx, \u0026trustsecsecurity.GetGroupArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecSecurity.TrustsecSecurityFunctions;\nimport com.pulumi.ise.TrustsecSecurity.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrustsecSecurityFunctions.getGroup(GetGroupArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TrustsecSecurity:getGroup\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "isReadOnly": {
                        "description": "Read-only\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the security group\n",
                        "type": "string"
                    },
                    "propogateToApic": {
                        "description": "Propagate to APIC (ACI)\n",
                        "type": "boolean"
                    },
                    "value": {
                        "description": "`-1` to auto-generate\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "isReadOnly",
                    "name",
                    "propogateToApic",
                    "value"
                ],
                "type": "object"
            }
        },
        "ise:TrustsecSecurityGroup/getAcl:getAcl": {
            "description": "This data source can read the TrustSec Security Group ACL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.TrustsecSecurityGroup.getAcl({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.TrustsecSecurityGroup.get_acl(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.TrustsecSecurityGroup.GetAcl.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/TrustsecSecurityGroup\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrustsecSecurityGroup.GetAcl(ctx, \u0026trustsecsecuritygroup.GetAclArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.TrustsecSecurityGroup.TrustsecSecurityGroupFunctions;\nimport com.pulumi.ise.TrustsecSecurityGroup.inputs.GetAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrustsecSecurityGroupFunctions.getAcl(GetAclArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:TrustsecSecurityGroup:getAcl\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAcl.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group ACL\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAcl.\n",
                "properties": {
                    "aclContent": {
                        "description": "Content of ACL\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "ipVersion": {
                        "description": "IP Version\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the security group ACL\n",
                        "type": "string"
                    },
                    "readOnly": {
                        "description": "Read-only\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "aclContent",
                    "description",
                    "id",
                    "ipVersion",
                    "name",
                    "readOnly"
                ],
                "type": "object"
            }
        },
        "ise:UserIdentity/getGroup:getGroup": {
            "description": "This data source can read the User Identity Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.UserIdentity.getGroup({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.UserIdentity.get_group(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.UserIdentity.GetGroup.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise/UserIdentity\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := UserIdentity.GetGroup(ctx, \u0026useridentity.GetGroupArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.UserIdentity.UserIdentityFunctions;\nimport com.pulumi.ise.UserIdentity.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = UserIdentityFunctions.getGroup(GetGroupArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:UserIdentity:getGroup\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user identity group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user identity group\n",
                        "type": "string"
                    },
                    "parent": {
                        "description": "Parent user identity group, e.g. `NAC Group:NAC:IdentityGroups:User Identity Groups`\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "parent"
                ],
                "type": "object"
            }
        },
        "ise:index/getEndpoint:getEndpoint": {
            "description": "This data source can read the Endpoint.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.getEndpoint({\n    id: \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.get_endpoint(id=\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.GetEndpoint.Invoke(new()\n    {\n        Id = \"76d24097-41c4-4558-a4d0-a8c07ac08470\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ise.LookupEndpoint(ctx, \u0026ise.LookupEndpointArgs{\n\t\t\tId: pulumi.StringRef(\"76d24097-41c4-4558-a4d0-a8c07ac08470\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.IseFunctions;\nimport com.pulumi.ise.inputs.GetEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IseFunctions.getEndpoint(GetEndpointArgs.builder()\n            .id(\"76d24097-41c4-4558-a4d0-a8c07ac08470\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:getEndpoint\n      Arguments:\n        id: 76d24097-41c4-4558-a4d0-a8c07ac08470\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEndpoint.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEndpoint.\n",
                "properties": {
                    "customAttributes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom Attributes\n",
                        "type": "object"
                    },
                    "description": {
                        "description": "Description\n",
                        "type": "string"
                    },
                    "groupId": {
                        "description": "Identity Group ID\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "identityStore": {
                        "description": "Identity Store\n",
                        "type": "string"
                    },
                    "identityStoreId": {
                        "description": "Identity Store Id\n",
                        "type": "string"
                    },
                    "mac": {
                        "description": "MAC address of the endpoint\n",
                        "type": "string"
                    },
                    "mdmComplianceStatus": {
                        "description": "Mdm Compliance Status\n",
                        "type": "boolean"
                    },
                    "mdmEncrypted": {
                        "description": "Mdm Encrypted\n",
                        "type": "boolean"
                    },
                    "mdmEnrolled": {
                        "description": "Mdm Enrolled\n",
                        "type": "boolean"
                    },
                    "mdmImei": {
                        "description": "Mdm IMEI\n",
                        "type": "string"
                    },
                    "mdmJailBroken": {
                        "description": "Mdm JailBroken\n",
                        "type": "boolean"
                    },
                    "mdmManufacturer": {
                        "description": "Mdm Manufacturer\n",
                        "type": "string"
                    },
                    "mdmModel": {
                        "description": "Mdm Model\n",
                        "type": "string"
                    },
                    "mdmOs": {
                        "description": "Mdm OS\n",
                        "type": "string"
                    },
                    "mdmPhoneNumber": {
                        "description": "Mdm PhoneNumber\n",
                        "type": "string"
                    },
                    "mdmPinlock": {
                        "description": "Mdm Pinlock\n",
                        "type": "boolean"
                    },
                    "mdmReachable": {
                        "description": "Mdm Reachable\n",
                        "type": "boolean"
                    },
                    "mdmSerial": {
                        "description": "Mdm Serial\n",
                        "type": "string"
                    },
                    "mdmServerName": {
                        "description": "Mdm Server Name\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the endpoint\n",
                        "type": "string"
                    },
                    "portalUser": {
                        "description": "Portal User\n",
                        "type": "string"
                    },
                    "profileId": {
                        "description": "Profile ID\n",
                        "type": "string"
                    },
                    "staticGroupAssignment": {
                        "description": "Static Group Assignment\n",
                        "type": "boolean"
                    },
                    "staticGroupAssignmentDefined": {
                        "description": "staticGroupAssignmentDefined\n",
                        "type": "boolean"
                    },
                    "staticProfileAssignment": {
                        "description": "Static Profile Assignment\n",
                        "type": "boolean"
                    },
                    "staticProfileAssignmentDefined": {
                        "description": "Static Profile Assignment Defined\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "customAttributes",
                    "description",
                    "groupId",
                    "id",
                    "identityStore",
                    "identityStoreId",
                    "mac",
                    "mdmComplianceStatus",
                    "mdmEncrypted",
                    "mdmEnrolled",
                    "mdmImei",
                    "mdmJailBroken",
                    "mdmManufacturer",
                    "mdmModel",
                    "mdmOs",
                    "mdmPhoneNumber",
                    "mdmPinlock",
                    "mdmReachable",
                    "mdmSerial",
                    "mdmServerName",
                    "name",
                    "portalUser",
                    "profileId",
                    "staticGroupAssignment",
                    "staticGroupAssignmentDefined",
                    "staticProfileAssignment",
                    "staticProfileAssignmentDefined"
                ],
                "type": "object"
            }
        },
        "ise:index/getRepository:getRepository": {
            "description": "This data source can read the Repository.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ise from \"@pulumi/ise\";\n\nconst example = ise.getRepository({\n    id: \"repo1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ise as ise\n\nexample = ise.get_repository(id=\"repo1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ise = Pulumi.Ise;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ise.GetRepository.Invoke(new()\n    {\n        Id = \"repo1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ise/sdk/go/ise\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ise.LookupRepository(ctx, \u0026ise.LookupRepositoryArgs{\n\t\t\tId: pulumi.StringRef(\"repo1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ise.IseFunctions;\nimport com.pulumi.ise.inputs.GetRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IseFunctions.getRepository(GetRepositoryArgs.builder()\n            .id(\"repo1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ise:getRepository\n      Arguments:\n        id: repo1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "enablePki": {
                        "description": "Enable PKI\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the object\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.\n",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password can contain alphanumeric and/or special characters.\n",
                        "type": "string"
                    },
                    "path": {
                        "description": "Path should always start with \"/\" and can contain alphanumeric, underscore, hyphen and dot characters.\n",
                        "type": "string"
                    },
                    "protocol": {
                        "description": "Protocol\n",
                        "type": "string"
                    },
                    "serverName": {
                        "description": "Name of the server\n",
                        "type": "string"
                    },
                    "userName": {
                        "description": "User name\n",
                        "type": "string"
                    }
                },
                "required": [
                    "enablePki",
                    "id",
                    "name",
                    "password",
                    "path",
                    "protocol",
                    "serverName",
                    "userName"
                ],
                "type": "object"
            }
        }
    }
}